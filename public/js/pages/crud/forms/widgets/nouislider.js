/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/metronic/js/pages/crud/forms/widgets/nouislider.js":
/*!**********************************************************************!*\
  !*** ./resources/metronic/js/pages/crud/forms/widgets/nouislider.js ***!
  \**********************************************************************/
/***/ (() => {

eval("// Class definition\nvar KTnoUiSliderDemos = function () {\n  // Private functions\n  var demo1 = function demo1() {\n    // init slider\n    var slider = document.getElementById('kt_nouislider_1');\n    noUiSlider.create(slider, {\n      start: [0],\n      step: 2,\n      range: {\n        'min': [0],\n        'max': [10]\n      },\n      format: wNumb({\n        decimals: 0\n      })\n    }); // init slider input\n\n    var sliderInput = document.getElementById('kt_nouislider_1_input');\n    slider.noUiSlider.on('update', function (values, handle) {\n      sliderInput.value = values[handle];\n    });\n    sliderInput.addEventListener('change', function () {\n      slider.noUiSlider.set(this.value);\n    });\n  };\n\n  var demo2 = function demo2() {\n    // init slider\n    var slider = document.getElementById('kt_nouislider_2');\n    noUiSlider.create(slider, {\n      start: [20000],\n      connect: [true, false],\n      step: 1000,\n      range: {\n        'min': [20000],\n        'max': [80000]\n      },\n      format: wNumb({\n        decimals: 3,\n        thousand: '.',\n        postfix: ' (US $)'\n      })\n    }); // init slider input\n\n    var sliderInput = document.getElementById('kt_nouislider_2_input');\n    slider.noUiSlider.on('update', function (values, handle) {\n      sliderInput.value = values[handle];\n    });\n    sliderInput.addEventListener('change', function () {\n      slider.noUiSlider.set(this.value);\n    });\n  };\n\n  var demo3 = function demo3() {\n    // init slider\n    var slider = document.getElementById('kt_nouislider_3');\n    noUiSlider.create(slider, {\n      start: [20, 80],\n      connect: true,\n      direction: 'rtl',\n      tooltips: [true, wNumb({\n        decimals: 1\n      })],\n      range: {\n        'min': [0],\n        '10%': [10, 10],\n        '50%': [80, 50],\n        '80%': 150,\n        'max': 200\n      }\n    }); // init slider input\n\n    var sliderInput0 = document.getElementById('kt_nouislider_3_input');\n    var sliderInput1 = document.getElementById('kt_nouislider_3.1_input');\n    var sliderInputs = [sliderInput1, sliderInput0];\n    slider.noUiSlider.on('update', function (values, handle) {\n      sliderInputs[handle].value = values[handle];\n    });\n  };\n\n  var demo4 = function demo4() {\n    var slider = document.getElementById('kt_nouislider_input_select'); // Append the option elements\n\n    for (var i = -20; i <= 40; i++) {\n      var option = document.createElement(\"option\");\n      option.text = i;\n      option.value = i;\n      slider.appendChild(option);\n    } // init slider\n\n\n    var html5Slider = document.getElementById('kt_nouislider_4');\n    noUiSlider.create(html5Slider, {\n      start: [10, 30],\n      connect: true,\n      range: {\n        'min': -20,\n        'max': 40\n      }\n    }); // init slider input\n\n    var inputNumber = document.getElementById('kt_nouislider_input_number');\n    html5Slider.noUiSlider.on('update', function (values, handle) {\n      var value = values[handle];\n\n      if (handle) {\n        inputNumber.value = value;\n      } else {\n        slider.value = Math.round(value);\n      }\n    });\n    slider.addEventListener('change', function () {\n      html5Slider.noUiSlider.set([this.value, null]);\n    });\n    inputNumber.addEventListener('change', function () {\n      html5Slider.noUiSlider.set([null, this.value]);\n    });\n  };\n\n  var demo5 = function demo5() {\n    // init slider\n    var slider = document.getElementById('kt_nouislider_5');\n    noUiSlider.create(slider, {\n      start: 20,\n      range: {\n        min: 0,\n        max: 100\n      },\n      pips: {\n        mode: 'values',\n        values: [20, 80],\n        density: 4\n      }\n    });\n    var sliderInput = document.getElementById('kt_nouislider_5_input');\n    slider.noUiSlider.on('update', function (values, handle) {\n      sliderInput.value = values[handle];\n    });\n    sliderInput.addEventListener('change', function () {\n      slider.noUiSlider.set(this.value);\n    });\n    slider.noUiSlider.on('change', function (values, handle) {\n      if (values[handle] < 20) {\n        slider.noUiSlider.set(20);\n      } else if (values[handle] > 80) {\n        slider.noUiSlider.set(80);\n      }\n    });\n  };\n\n  var demo6 = function demo6() {\n    // init slider\n    var verticalSlider = document.getElementById('kt_nouislider_6');\n    noUiSlider.create(verticalSlider, {\n      start: 40,\n      orientation: 'vertical',\n      range: {\n        'min': 0,\n        'max': 100\n      }\n    }); // init slider input\n\n    var sliderInput = document.getElementById('kt_nouislider_6_input');\n    verticalSlider.noUiSlider.on('update', function (values, handle) {\n      sliderInput.value = values[handle];\n    });\n    sliderInput.addEventListener('change', function () {\n      verticalSlider.noUiSlider.set(this.value);\n    });\n  }; // Modal demo\n\n\n  var modalDemo1 = function modalDemo1() {\n    var slider = document.getElementById('kt_nouislider_modal1');\n    noUiSlider.create(slider, {\n      start: [0],\n      step: 2,\n      range: {\n        'min': [0],\n        'max': [10]\n      },\n      format: wNumb({\n        decimals: 0\n      })\n    }); // init slider input\n\n    var sliderInput = document.getElementById('kt_nouislider_modal1_input');\n    slider.noUiSlider.on('update', function (values, handle) {\n      sliderInput.value = values[handle];\n    });\n    sliderInput.addEventListener('change', function () {\n      slider.noUiSlider.set(this.value);\n    });\n  };\n\n  var modalDemo2 = function modalDemo2() {\n    var slider = document.getElementById('kt_nouislider_modal2');\n    noUiSlider.create(slider, {\n      start: [20000],\n      connect: [true, false],\n      step: 1000,\n      range: {\n        'min': [20000],\n        'max': [80000]\n      },\n      format: wNumb({\n        decimals: 3,\n        thousand: '.',\n        postfix: ' (US $)'\n      })\n    }); // init slider input\n\n    var sliderInput = document.getElementById('kt_nouislider_modal2_input');\n    slider.noUiSlider.on('update', function (values, handle) {\n      sliderInput.value = values[handle];\n    });\n    sliderInput.addEventListener('change', function () {\n      slider.noUiSlider.set(this.value);\n    });\n  };\n\n  var modalDemo3 = function modalDemo3() {\n    var slider = document.getElementById('kt_nouislider_modal3');\n    noUiSlider.create(slider, {\n      start: [20, 80],\n      connect: true,\n      direction: 'rtl',\n      tooltips: [true, wNumb({\n        decimals: 1\n      })],\n      range: {\n        'min': [0],\n        '10%': [10, 10],\n        '50%': [80, 50],\n        '80%': 150,\n        'max': 200\n      }\n    }); // init slider input\n\n    var sliderInput0 = document.getElementById('kt_nouislider_modal1.1_input');\n    var sliderInput1 = document.getElementById('kt_nouislider_modal1.2_input');\n    var sliderInputs = [sliderInput1, sliderInput0];\n    slider.noUiSlider.on('update', function (values, handle) {\n      sliderInputs[handle].value = values[handle];\n    });\n  };\n\n  return {\n    // public functions\n    init: function init() {\n      demo1();\n      demo2();\n      demo3();\n      demo4();\n      demo5();\n      demo6();\n      modalDemo1();\n      modalDemo2();\n      modalDemo3();\n    }\n  };\n}();\n\njQuery(document).ready(function () {\n  KTnoUiSliderDemos.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/crud/forms/widgets/nouislider.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/metronic/js/pages/crud/forms/widgets/nouislider.js"]();
/******/ 	
/******/ })()
;