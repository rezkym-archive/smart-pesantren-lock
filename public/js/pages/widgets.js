/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/metronic/js/pages/widgets.js":
/*!************************************************!*\
  !*** ./resources/metronic/js/pages/widgets.js ***!
  \************************************************/
/***/ ((module) => {

eval(" // Class definition\n\nvar KTWidgets = function () {\n  // Private properties\n  // General Controls\n  var _initDaterangepicker = function _initDaterangepicker() {\n    if ($('#kt_dashboard_daterangepicker').length == 0) {\n      return;\n    }\n\n    var picker = $('#kt_dashboard_daterangepicker');\n    var start = moment();\n    var end = moment();\n\n    function cb(start, end, label) {\n      var title = '';\n      var range = '';\n\n      if (end - start < 100 || label == 'Today') {\n        title = 'Today:';\n        range = start.format('MMM D');\n      } else if (label == 'Yesterday') {\n        title = 'Yesterday:';\n        range = start.format('MMM D');\n      } else {\n        range = start.format('MMM D') + ' - ' + end.format('MMM D');\n      }\n\n      $('#kt_dashboard_daterangepicker_date').html(range);\n      $('#kt_dashboard_daterangepicker_title').html(title);\n    }\n\n    picker.daterangepicker({\n      direction: KTUtil.isRTL(),\n      startDate: start,\n      endDate: end,\n      opens: 'left',\n      applyClass: 'btn-primary',\n      cancelClass: 'btn-light-primary',\n      ranges: {\n        'Today': [moment(), moment()],\n        'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],\n        'Last 7 Days': [moment().subtract(6, 'days'), moment()],\n        'Last 30 Days': [moment().subtract(29, 'days'), moment()],\n        'This Month': [moment().startOf('month'), moment().endOf('month')],\n        'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]\n      }\n    }, cb);\n    cb(start, end, '');\n  }; // Stats widgets\n\n\n  var _initStatsWidget7 = function _initStatsWidget7() {\n    var element = document.getElementById(\"kt_stats_widget_7_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 45, 32, 70, 40]\n      }],\n      chart: {\n        type: 'area',\n        height: 150,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base']['success']]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['success']],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['success']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base']['success']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initStatsWidget8 = function _initStatsWidget8() {\n    var element = document.getElementById(\"kt_stats_widget_8_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 45, 32, 70, 40]\n      }],\n      chart: {\n        type: 'area',\n        height: 150,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base']['danger']]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['danger']],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['danger']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base']['danger']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initStatsWidget9 = function _initStatsWidget9() {\n    var element = document.getElementById(\"kt_stats_widget_9_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 45, 32, 70, 40]\n      }],\n      chart: {\n        type: 'area',\n        height: 150,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base']['primary']]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['primary']],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['primary']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base']['primary']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initStatsWidget10 = function _initStatsWidget10() {\n    var element = document.getElementById(\"kt_stats_widget_10_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var color = KTUtil.hasAttr(element, 'data-color') ? KTUtil.attr(element, 'data-color') : 'info';\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [40, 40, 30, 30, 35, 35, 50]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base'][color]]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 55,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base'][color]],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initStatsWidget11 = function _initStatsWidget11() {\n    var element = document.getElementById(\"kt_stats_widget_11_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var color = KTUtil.hasAttr(element, 'data-color') ? KTUtil.attr(element, 'data-color') : 'success';\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [40, 40, 30, 30, 35, 35, 50]\n      }],\n      chart: {\n        type: 'area',\n        height: 150,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base'][color]]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Aug', 'Sep'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 55,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base'][color]],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initStatsWidget12 = function _initStatsWidget12() {\n    var element = document.getElementById(\"kt_stats_widget_12_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var color = KTUtil.hasAttr(element, 'data-color') ? KTUtil.attr(element, 'data-color') : 'primary';\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [40, 40, 30, 30, 35, 35, 50]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base'][color]]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Aug', 'Sep'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 55,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base'][color]],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  }; // Charts widgets\n\n\n  var _initChartsWidget1 = function _initChartsWidget1() {\n    var element = document.getElementById(\"kt_charts_widget_1_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [44, 55, 57, 56, 61, 58]\n      }, {\n        name: 'Revenue',\n        data: [76, 85, 101, 98, 87, 105]\n      }],\n      chart: {\n        type: 'bar',\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['30%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['success'], KTApp.getSettings()['colors']['gray']['gray-300']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initChartsWidget2 = function _initChartsWidget2() {\n    var element = document.getElementById(\"kt_charts_widget_2_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [44, 55, 57, 56, 61, 58]\n      }, {\n        name: 'Revenue',\n        data: [76, 85, 101, 98, 87, 105]\n      }],\n      chart: {\n        type: 'bar',\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['30%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['warning'], KTApp.getSettings()['colors']['gray']['gray-300']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initChartsWidget3 = function _initChartsWidget3() {\n    var element = document.getElementById(\"kt_charts_widget_3_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 40, 40, 90, 90, 70, 70]\n      }],\n      chart: {\n        type: 'area',\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base']['info']]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['theme']['base']['info'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['info']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      },\n      markers: {\n        //size: 5,\n        //colors: [KTApp.getSettings()['colors']['theme']['light']['danger']],\n        strokeColor: KTApp.getSettings()['colors']['theme']['base']['info'],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initChartsWidget4 = function _initChartsWidget4() {\n    var element = document.getElementById(\"kt_charts_widget_4_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [60, 50, 80, 40, 100, 60]\n      }, {\n        name: 'Revenue',\n        data: [70, 60, 110, 40, 50, 70]\n      }],\n      chart: {\n        type: 'area',\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth'\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['theme']['light']['success'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['success'], KTApp.getSettings()['colors']['theme']['base']['warning']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      },\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['success'], KTApp.getSettings()['colors']['theme']['light']['warning']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['light']['success'], KTApp.getSettings()['colors']['theme']['light']['warning']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initChartsWidget5 = function _initChartsWidget5() {\n    var element = document.getElementById(\"kt_charts_widget_5_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [40, 50, 65, 70, 50, 30]\n      }, {\n        name: 'Revenue',\n        data: [-30, -40, -55, -60, -40, -20]\n      }],\n      chart: {\n        type: 'bar',\n        stacked: true,\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['12%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: -80,\n        max: 80,\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['info'], KTApp.getSettings()['colors']['theme']['base']['primary']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initChartsWidget6 = function _initChartsWidget6() {\n    var element = document.getElementById(\"kt_charts_widget_6_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        type: 'bar',\n        stacked: true,\n        data: [40, 50, 65, 70, 50, 30]\n      }, {\n        name: 'Revenue',\n        type: 'bar',\n        stacked: true,\n        data: [20, 20, 25, 30, 30, 20]\n      }, {\n        name: 'Expenses',\n        type: 'area',\n        data: [50, 80, 60, 90, 50, 70]\n      }],\n      chart: {\n        stacked: true,\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          stacked: true,\n          horizontal: false,\n          endingShape: 'rounded',\n          columnWidth: ['12%']\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        max: 120,\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['info'], KTApp.getSettings()['colors']['theme']['base']['primary'], KTApp.getSettings()['colors']['theme']['light']['primary']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        },\n        padding: {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initChartsWidget7 = function _initChartsWidget7() {\n    var element = document.getElementById(\"kt_charts_widget_7_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 30, 50, 50, 35, 35]\n      }, {\n        name: 'Revenue',\n        data: [55, 20, 20, 20, 70, 70]\n      }, {\n        name: 'Expenses',\n        data: [60, 60, 40, 40, 30, 30]\n      }],\n      chart: {\n        type: 'area',\n        height: 300,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 2,\n        colors: [KTApp.getSettings()['colors']['theme']['base']['warning'], 'transparent', 'transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['warning'], KTApp.getSettings()['colors']['theme']['light']['info'], KTApp.getSettings()['colors']['gray']['gray-100']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      },\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['warning'], KTApp.getSettings()['colors']['theme']['light']['info'], KTApp.getSettings()['colors']['gray']['gray-100']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base']['warning'], KTApp.getSettings()['colors']['theme']['base']['info'], KTApp.getSettings()['colors']['gray']['gray-500']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initChartsWidget8 = function _initChartsWidget8() {\n    var element = document.getElementById(\"kt_charts_widget_8_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 30, 50, 50, 35, 35]\n      }, {\n        name: 'Revenue',\n        data: [55, 20, 20, 20, 70, 70]\n      }, {\n        name: 'Expenses',\n        data: [60, 60, 40, 40, 30, 30]\n      }],\n      chart: {\n        type: 'area',\n        height: 300,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 2,\n        colors: ['transparent', 'transparent', 'transparent']\n      },\n      xaxis: {\n        x: 0,\n        offsetX: 0,\n        offsetY: 0,\n        padding: {\n          left: 0,\n          right: 0,\n          top: 0\n        },\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        y: 0,\n        offsetX: 0,\n        offsetY: 0,\n        padding: {\n          left: 0,\n          right: 0\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['success'], KTApp.getSettings()['colors']['theme']['light']['danger'], KTApp.getSettings()['colors']['theme']['light']['info']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        padding: {\n          top: 0,\n          bottom: 0,\n          left: 0,\n          right: 0\n        }\n      },\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['success'], KTApp.getSettings()['colors']['theme']['light']['danger'], KTApp.getSettings()['colors']['theme']['light']['info']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base']['success'], KTApp.getSettings()['colors']['theme']['base']['danger'], KTApp.getSettings()['colors']['theme']['base']['info']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initChartsWidget9 = function _initChartsWidget9() {\n    var element = document.getElementById(\"kt_charts_widget_9_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [20, 30, 45, 35, 25]\n      }, {\n        name: 'Revenue',\n        data: [-20, -30, -45, -35, -25]\n      }],\n      chart: {\n        type: 'bar',\n        stacked: true,\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['17%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        width: 0,\n        colors: ['transparent']\n      },\n      xaxis: {\n        lines: {\n          show: false\n        },\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        lines: {\n          show: false\n        },\n        min: -50,\n        max: 50,\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['info'], KTApp.getSettings()['colors']['theme']['base']['primary']],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  }; // Mixed widgets\n\n\n  var _initMixedWidget1 = function _initMixedWidget1() {\n    var element = document.getElementById(\"kt_mixed_widget_1_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var strokeColor = '#D13647';\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 45, 32, 70, 40, 40, 40]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        },\n        dropShadow: {\n          enabled: true,\n          enabledOnSeries: undefined,\n          top: 5,\n          left: 0,\n          blur: 3,\n          color: strokeColor,\n          opacity: 0.5\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 0\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [strokeColor]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 80,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        },\n        marker: {\n          show: false\n        }\n      },\n      colors: ['transparent'],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['danger']],\n        strokeColor: [strokeColor],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget2 = function _initMixedWidget2() {\n    var element = document.getElementById(\"kt_mixed_widget_2_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var strokeColor = '#287ED7';\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 45, 32, 70, 40, 40, 40]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        },\n        dropShadow: {\n          enabled: true,\n          enabledOnSeries: undefined,\n          top: 5,\n          left: 0,\n          blur: 3,\n          color: strokeColor,\n          opacity: 0.5\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 0\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [strokeColor]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 80,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        },\n        marker: {\n          show: false\n        }\n      },\n      colors: ['transparent'],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['info']],\n        strokeColor: [strokeColor],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget3 = function _initMixedWidget3() {\n    var element = document.getElementById(\"kt_mixed_widget_3_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var strokeColor = KTApp.getSettings()['colors']['theme']['base']['white'];\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 45, 32, 70, 40, 40, 40]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        },\n        dropShadow: {\n          enabled: true,\n          enabledOnSeries: undefined,\n          top: 5,\n          left: 0,\n          blur: 3,\n          color: strokeColor,\n          opacity: 0.3\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 0\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [strokeColor]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 80,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        },\n        marker: {\n          show: false\n        }\n      },\n      colors: ['transparent'],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['dark']],\n        strokeColor: [strokeColor],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget4 = function _initMixedWidget4() {\n    var element = document.getElementById(\"kt_mixed_widget_4_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [35, 65, 75, 55, 45, 60, 55]\n      }, {\n        name: 'Revenue',\n        data: [40, 70, 80, 60, 50, 65, 60]\n      }],\n      chart: {\n        type: 'bar',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['30%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 1,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 100,\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      fill: {\n        type: ['solid', 'solid'],\n        opacity: [0.25, 1]\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        },\n        marker: {\n          show: false\n        }\n      },\n      colors: ['#ffffff', '#ffffff'],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        },\n        padding: {\n          left: 20,\n          right: 20\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget5 = function _initMixedWidget5() {\n    var element = document.getElementById(\"kt_mixed_widget_5_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [35, 65, 75, 55, 45, 60, 55]\n      }, {\n        name: 'Revenue',\n        data: [40, 70, 80, 60, 50, 65, 60]\n      }],\n      chart: {\n        type: 'bar',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['30%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 1,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 100,\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      fill: {\n        type: ['solid', 'solid'],\n        opacity: [0.25, 1]\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        },\n        marker: {\n          show: false\n        }\n      },\n      colors: ['#ffffff', '#ffffff'],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        },\n        padding: {\n          left: 20,\n          right: 20\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget6 = function _initMixedWidget6() {\n    var element = document.getElementById(\"kt_mixed_widget_6_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [35, 65, 75, 55, 45, 60, 55]\n      }, {\n        name: 'Revenue',\n        data: [40, 70, 80, 60, 50, 65, 60]\n      }],\n      chart: {\n        type: 'bar',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['30%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 1,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 100,\n        labels: {\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      fill: {\n        type: ['solid', 'solid'],\n        opacity: [0.25, 1]\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        },\n        marker: {\n          show: false\n        }\n      },\n      colors: ['#ffffff', '#ffffff'],\n      grid: {\n        borderColor: KTApp.getSettings()['colors']['gray']['gray-200'],\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        },\n        padding: {\n          left: 20,\n          right: 20\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget13 = function _initMixedWidget13() {\n    var element = document.getElementById(\"kt_mixed_widget_13_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 25, 45, 30, 55, 55]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base']['info']]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 60,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['info']],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['info']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base']['info']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget14 = function _initMixedWidget14() {\n    var element = document.getElementById(\"kt_mixed_widget_14_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [74],\n      chart: {\n        height: height,\n        type: 'radialBar'\n      },\n      plotOptions: {\n        radialBar: {\n          hollow: {\n            margin: 0,\n            size: \"65%\"\n          },\n          dataLabels: {\n            showOn: \"always\",\n            name: {\n              show: false,\n              fontWeight: '700'\n            },\n            value: {\n              color: KTApp.getSettings()['colors']['gray']['gray-700'],\n              fontSize: \"30px\",\n              fontWeight: '700',\n              offsetY: 12,\n              show: true,\n              formatter: function formatter(val) {\n                return val + '%';\n              }\n            }\n          },\n          track: {\n            background: KTApp.getSettings()['colors']['theme']['light']['success'],\n            strokeWidth: '100%'\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['success']],\n      stroke: {\n        lineCap: \"round\"\n      },\n      labels: [\"Progress\"]\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget15 = function _initMixedWidget15() {\n    var element = document.getElementById(\"kt_mixed_widget_15_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 30, 60, 25, 25, 40]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'gradient',\n        opacity: 1,\n        gradient: {\n          type: \"vertical\",\n          shadeIntensity: 0.5,\n          gradientToColors: undefined,\n          inverseColors: true,\n          opacityFrom: 1,\n          opacityTo: 0.375,\n          stops: [25, 50, 100],\n          colorStops: []\n        }\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base']['danger']]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 65,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['danger']],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['danger']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base']['danger']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget16 = function _initMixedWidget16() {\n    var element = document.getElementById(\"kt_mixed_widget_16_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [60, 50, 75, 80],\n      chart: {\n        height: height,\n        type: 'radialBar'\n      },\n      plotOptions: {\n        radialBar: {\n          hollow: {\n            margin: 0,\n            size: \"30%\"\n          },\n          dataLabels: {\n            showOn: \"always\",\n            name: {\n              show: false,\n              fontWeight: \"700\"\n            },\n            value: {\n              color: KTApp.getSettings()['colors']['gray']['gray-700'],\n              fontSize: \"18px\",\n              fontWeight: \"700\",\n              offsetY: 10,\n              show: true\n            },\n            total: {\n              show: true,\n              label: 'Total',\n              fontWeight: \"bold\",\n              formatter: function formatter(w) {\n                // By default this function returns the average of all series. The below is just an example to show the use of custom formatter function\n                return '60%';\n              }\n            }\n          },\n          track: {\n            background: KTApp.getSettings()['colors']['gray']['gray-100'],\n            strokeWidth: '100%'\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['info'], KTApp.getSettings()['colors']['theme']['base']['danger'], KTApp.getSettings()['colors']['theme']['base']['success'], KTApp.getSettings()['colors']['theme']['base']['primary']],\n      stroke: {\n        lineCap: \"round\"\n      },\n      labels: [\"Progress\"]\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget17 = function _initMixedWidget17() {\n    var element = document.getElementById(\"kt_mixed_widget_17_chart\");\n    var color = KTUtil.hasAttr(element, 'data-color') ? KTUtil.attr(element, 'data-color') : 'warning';\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 25, 45, 30, 55, 55]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base'][color]]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 60,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base'][color]],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget18 = function _initMixedWidget18() {\n    var element = document.getElementById(\"kt_mixed_widget_18_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [74],\n      chart: {\n        height: height,\n        type: 'radialBar',\n        offsetY: 0\n      },\n      plotOptions: {\n        radialBar: {\n          startAngle: -90,\n          endAngle: 90,\n          hollow: {\n            margin: 0,\n            size: \"70%\"\n          },\n          dataLabels: {\n            showOn: \"always\",\n            name: {\n              show: true,\n              fontSize: \"13px\",\n              fontWeight: \"700\",\n              offsetY: -5,\n              color: KTApp.getSettings()['colors']['gray']['gray-500']\n            },\n            value: {\n              color: KTApp.getSettings()['colors']['gray']['gray-700'],\n              fontSize: \"30px\",\n              fontWeight: \"700\",\n              offsetY: -40,\n              show: true\n            }\n          },\n          track: {\n            background: KTApp.getSettings()['colors']['theme']['light']['primary'],\n            strokeWidth: '100%'\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['base']['primary']],\n      stroke: {\n        lineCap: \"round\"\n      },\n      labels: [\"Progress\"]\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  }; // Tiles\n\n\n  var _initTilesWidget1 = function _initTilesWidget1() {\n    var element = document.getElementById(\"kt_tiles_widget_1_chart\");\n    var color = KTUtil.hasAttr(element, 'data-color') ? KTUtil.attr(element, 'data-color') : 'primary';\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [20, 22, 30, 28, 25, 26, 30, 28, 22, 24, 25, 35]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'gradient',\n        opacity: 1,\n        gradient: {\n          type: \"vertical\",\n          shadeIntensity: 0.55,\n          gradientToColors: undefined,\n          inverseColors: true,\n          opacityFrom: 1,\n          opacityTo: 0.2,\n          stops: [25, 50, 100],\n          colorStops: []\n        }\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base'][color]]\n      },\n      xaxis: {\n        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 37,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base'][color]],\n        strokeWidth: 3\n      },\n      padding: {\n        top: 0,\n        bottom: 0\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initTilesWidget2 = function _initTilesWidget2() {\n    var element = document.getElementById(\"kt_tiles_widget_2_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var strokeColor = KTUtil.changeColor(KTApp.getSettings()['colors']['theme']['base']['danger']);\n    var fillColor = KTUtil.changeColor(KTApp.getSettings()['colors']['theme']['base']['danger']);\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [10, 10, 20, 20, 12, 12]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        },\n        padding: {\n          top: 0,\n          bottom: 0\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [strokeColor]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 22,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        fixed: {\n          enabled: false\n        },\n        x: {\n          show: false\n        },\n        y: {\n          title: {\n            formatter: function formatter(val) {\n              return val + \"\";\n            }\n          }\n        }\n      },\n      colors: [fillColor],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['danger']],\n        strokeColor: [strokeColor],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initTilesWidget5 = function _initTilesWidget5() {\n    var element = document.getElementById(\"kt_tiles_widget_5_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [10, 15, 18, 14]\n      }, {\n        name: 'Revenue',\n        data: [8, 13, 16, 12]\n      }],\n      chart: {\n        type: 'bar',\n        height: height,\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        },\n        padding: {\n          left: 20,\n          right: 20\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['25%'],\n          endingShape: 'rounded'\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: ['solid', 'gradient'],\n        opacity: 0.25\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May']\n      },\n      yaxis: {\n        min: 0,\n        max: 20\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        fixed: {\n          enabled: false\n        },\n        x: {\n          show: false\n        },\n        y: {\n          title: {\n            formatter: function formatter(val) {\n              return val + \"\";\n            }\n          }\n        },\n        marker: {\n          show: false\n        }\n      },\n      colors: ['#ffffff', '#ffffff']\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initTilesWidget8 = function _initTilesWidget8() {\n    var element = document.getElementById(\"kt_tiles_widget_8_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var color = KTUtil.hasAttr(element, 'data-color') ? KTUtil.attr(element, 'data-color') : 'danger';\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [20, 20, 30, 15, 40, 30]\n      }],\n      chart: {\n        type: 'area',\n        height: 150,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid'\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base'][color]]\n      },\n      xaxis: {\n        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 45,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base'][color]],\n        strokeWidth: 3\n      },\n      padding: {\n        top: 0,\n        bottom: 0\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initTilesWidget17 = function _initTilesWidget17() {\n    var element = document.getElementById(\"kt_tiles_widget_17_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [10, 20, 20, 8]\n      }],\n      chart: {\n        type: 'area',\n        height: 150,\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        },\n        padding: {\n          top: 0,\n          bottom: 0\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base']['success']]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 22,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        fixed: {\n          enabled: false\n        },\n        x: {\n          show: false\n        },\n        y: {\n          title: {\n            formatter: function formatter(val) {\n              return val + \"\";\n            }\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light']['success']],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light']['success']],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base']['success']],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initTilesWidget20 = function _initTilesWidget20() {\n    var element = document.getElementById(\"kt_tiles_widget_20_chart\");\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [74],\n      chart: {\n        height: 250,\n        type: 'radialBar',\n        offsetY: 0\n      },\n      plotOptions: {\n        radialBar: {\n          startAngle: -90,\n          endAngle: 90,\n          hollow: {\n            margin: 0,\n            size: \"70%\"\n          },\n          dataLabels: {\n            showOn: \"always\",\n            name: {\n              show: true,\n              fontSize: \"13px\",\n              fontWeight: \"400\",\n              offsetY: -5,\n              color: KTApp.getSettings()['colors']['gray']['gray-300']\n            },\n            value: {\n              color: KTApp.getSettings()['colors']['theme']['inverse']['primary'],\n              fontSize: \"22px\",\n              fontWeight: \"bold\",\n              offsetY: -40,\n              show: true\n            }\n          },\n          track: {\n            background: KTUtil.changeColor(KTApp.getSettings()['colors']['theme']['base']['primary'], -7),\n            strokeWidth: '100%'\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['inverse']['primary']],\n      stroke: {\n        lineCap: \"round\"\n      },\n      labels: [\"Progress\"]\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget21 = function _initMixedWidget21() {\n    var element = document.getElementById(\"kt_tiles_widget_21_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var color = KTUtil.hasAttr(element, 'data-color') ? KTUtil.attr(element, 'data-color') : 'info';\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [20, 20, 30, 15, 30, 30]\n      }],\n      chart: {\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base'][color]]\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 32,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base'][color]],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  var _initMixedWidget23 = function _initMixedWidget23() {\n    var element = document.getElementById(\"kt_tiles_widget_23_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var color = KTUtil.hasAttr(element, 'data-color') ? KTUtil.attr(element, 'data-color') : 'primary';\n\n    if (!element) {\n      return;\n    }\n\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [15, 25, 15, 40, 20, 50]\n      }],\n      chart: {\n        type: 'area',\n        height: 125,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: [KTApp.getSettings()['colors']['theme']['base'][color]]\n      },\n      xaxis: {\n        categories: ['Jan, 2020', 'Feb, 2020', 'Mar, 2020', 'Apr, 2020', 'May, 2020', 'Jun, 2020'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTApp.getSettings()['colors']['gray']['gray-300'],\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 55,\n        labels: {\n          show: false,\n          style: {\n            colors: KTApp.getSettings()['colors']['gray']['gray-500'],\n            fontSize: '12px',\n            fontFamily: KTApp.getSettings()['font-family']\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px',\n          fontFamily: KTApp.getSettings()['font-family']\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n      markers: {\n        colors: [KTApp.getSettings()['colors']['theme']['light'][color]],\n        strokeColor: [KTApp.getSettings()['colors']['theme']['base'][color]],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  }; // Forms\n\n\n  var _initFormsWidget1 = function _initFormsWidget1() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_1_input\");\n\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n\n  var _initFormsWidget2 = function _initFormsWidget2() {\n    var formEl = KTUtil.getById(\"kt_forms_widget_2_form\");\n    var editorId = 'kt_forms_widget_2_editor'; // init editor\n\n    var options = {\n      modules: {\n        toolbar: {\n          container: \"#kt_forms_widget_2_editor_toolbar\"\n        }\n      },\n      placeholder: 'Type message...',\n      theme: 'snow'\n    };\n\n    if (!formEl) {\n      return;\n    } // Init editor\n\n\n    var editorObj = new Quill('#' + editorId, options);\n  };\n\n  var _initFormsWidget3 = function _initFormsWidget3() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_3_input\");\n\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n\n  var _initFormsWidget4 = function _initFormsWidget4() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_4_input\");\n\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n\n  var _initFormsWidget5 = function _initFormsWidget5() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_5_input\");\n\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n\n  var _initFormsWidget6 = function _initFormsWidget6() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_6_input\");\n\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n\n  var _initFormsWidget7 = function _initFormsWidget7() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_7_input\");\n\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n\n  var _initFormsWidget8 = function _initFormsWidget8() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_8_input\");\n\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n\n  var _initFormsWidget9 = function _initFormsWidget9() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_9_input\");\n\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n\n  var _initFormsWidget10 = function _initFormsWidget10() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_10_input\");\n\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n\n  var _initFormsWidget11 = function _initFormsWidget11() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_11_input\");\n\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  };\n\n  var _initFormsWidget12 = function _initFormsWidget12() {\n    var inputEl = KTUtil.getById(\"kt_forms_widget_12_input\");\n\n    if (inputEl) {\n      autosize(inputEl);\n    }\n  }; // Advance Tables\n\n\n  var _initAdvancedTableGroupSelection = function _initAdvancedTableGroupSelection(element) {\n    var table = KTUtil.getById(element);\n\n    if (!table) {\n      return;\n    }\n\n    KTUtil.on(table, 'thead th .checkbox > input', 'change', function (e) {\n      var checkboxes = KTUtil.findAll(table, 'tbody td .checkbox > input');\n\n      for (var i = 0, len = checkboxes.length; i < len; i++) {\n        checkboxes[i].checked = this.checked;\n      }\n    });\n  };\n\n  var _initPriceSlider = function _initPriceSlider(element) {\n    // init slider\n    var slider = document.getElementById(element);\n\n    if (typeof slider === 'undefined') {\n      return;\n    }\n\n    if (!slider) {\n      return;\n    }\n\n    noUiSlider.create(slider, {\n      start: [20, 60],\n      connect: true,\n      range: {\n        'min': 0,\n        'max': 100\n      }\n    });\n  }; // Education Show More Demo\n\n\n  var _initEducationShowMoreBtn = function _initEducationShowMoreBtn() {\n    var el = KTUtil.getById('kt_app_education_more_feeds_btn');\n\n    if (!el) {\n      return;\n    }\n\n    KTUtil.addEvent(el, 'click', function (e) {\n      var elements = document.getElementsByClassName('education-more-feeds');\n\n      if (!elements || elements.length <= 0) {\n        return;\n      }\n\n      KTUtil.btnWait(el, 'spinner spinner-right spinner-white pr-15', 'Please wait...', true);\n      setTimeout(function () {\n        KTUtil.btnRelease(el);\n        KTUtil.addClass(el, 'd-none');\n        var item;\n\n        for (var i = 0, len = elements.length; i < len; i++) {\n          item = elements[0];\n          KTUtil.removeClass(elements[i], 'd-none');\n          var textarea = KTUtil.find(item, 'textarea');\n\n          if (textarea) {\n            autosize(textarea);\n          }\n        }\n\n        KTUtil.scrollTo(item);\n      }, 1000);\n    });\n  }; // Public methods\n\n\n  return {\n    init: function init() {\n      // General Controls\n      _initDaterangepicker(); // Stats Widgets\n\n\n      _initStatsWidget7();\n\n      _initStatsWidget8();\n\n      _initStatsWidget9();\n\n      _initStatsWidget10();\n\n      _initStatsWidget11();\n\n      _initStatsWidget12(); // Charts Widgets\n\n\n      _initChartsWidget1();\n\n      _initChartsWidget2();\n\n      _initChartsWidget3();\n\n      _initChartsWidget4();\n\n      _initChartsWidget5();\n\n      _initChartsWidget6();\n\n      _initChartsWidget7();\n\n      _initChartsWidget8();\n\n      _initChartsWidget9(); // Mixed Widgets\n\n\n      _initMixedWidget1();\n\n      _initMixedWidget2();\n\n      _initMixedWidget3();\n\n      _initMixedWidget4();\n\n      _initMixedWidget5();\n\n      _initMixedWidget6();\n\n      _initMixedWidget13();\n\n      _initMixedWidget14();\n\n      _initMixedWidget15();\n\n      _initMixedWidget16();\n\n      _initMixedWidget17();\n\n      _initMixedWidget18(); // Tiles Widgets\n\n\n      _initTilesWidget1();\n\n      _initTilesWidget2();\n\n      _initTilesWidget5();\n\n      _initTilesWidget8();\n\n      _initTilesWidget17();\n\n      _initTilesWidget20();\n\n      _initMixedWidget21();\n\n      _initMixedWidget23(); // Table Widgets\n\n\n      _initAdvancedTableGroupSelection('kt_advance_table_widget_1');\n\n      _initAdvancedTableGroupSelection('kt_advance_table_widget_2');\n\n      _initAdvancedTableGroupSelection('kt_advance_table_widget_3');\n\n      _initAdvancedTableGroupSelection('kt_advance_table_widget_4'); // Form Widgets\n\n\n      _initPriceSlider('kt_price_slider'); // Forms widgets\n\n\n      _initFormsWidget1();\n\n      _initFormsWidget2();\n\n      _initFormsWidget3();\n\n      _initFormsWidget4();\n\n      _initFormsWidget5();\n\n      _initFormsWidget6();\n\n      _initFormsWidget7();\n\n      _initFormsWidget8();\n\n      _initFormsWidget9();\n\n      _initFormsWidget10();\n\n      _initFormsWidget11(); // Education App\n\n\n      _initEducationShowMoreBtn();\n    }\n  };\n}(); // Webpack support\n\n\nif (true) {\n  module.exports = KTWidgets;\n}\n\njQuery(document).ready(function () {\n  KTWidgets.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvbWV0cm9uaWMvanMvcGFnZXMvd2lkZ2V0cy5qcy5qcyIsIm1hcHBpbmdzIjoiQ0FFQTs7QUFDQSxJQUFJQSxTQUFTLEdBQUcsWUFBWTtBQUN4QjtBQUVBO0FBQ0EsTUFBSUMsb0JBQW9CLEdBQUcsU0FBdkJBLG9CQUF1QixHQUFZO0FBQ25DLFFBQUlDLENBQUMsQ0FBQywrQkFBRCxDQUFELENBQW1DQyxNQUFuQyxJQUE2QyxDQUFqRCxFQUFvRDtBQUNoRDtBQUNIOztBQUVELFFBQUlDLE1BQU0sR0FBR0YsQ0FBQyxDQUFDLCtCQUFELENBQWQ7QUFDQSxRQUFJRyxLQUFLLEdBQUdDLE1BQU0sRUFBbEI7QUFDQSxRQUFJQyxHQUFHLEdBQUdELE1BQU0sRUFBaEI7O0FBRUEsYUFBU0UsRUFBVCxDQUFZSCxLQUFaLEVBQW1CRSxHQUFuQixFQUF3QkUsS0FBeEIsRUFBK0I7QUFDM0IsVUFBSUMsS0FBSyxHQUFHLEVBQVo7QUFDQSxVQUFJQyxLQUFLLEdBQUcsRUFBWjs7QUFFQSxVQUFLSixHQUFHLEdBQUdGLEtBQVAsR0FBZ0IsR0FBaEIsSUFBdUJJLEtBQUssSUFBSSxPQUFwQyxFQUE2QztBQUN6Q0MsUUFBQUEsS0FBSyxHQUFHLFFBQVI7QUFDQUMsUUFBQUEsS0FBSyxHQUFHTixLQUFLLENBQUNPLE1BQU4sQ0FBYSxPQUFiLENBQVI7QUFDSCxPQUhELE1BR08sSUFBSUgsS0FBSyxJQUFJLFdBQWIsRUFBMEI7QUFDN0JDLFFBQUFBLEtBQUssR0FBRyxZQUFSO0FBQ0FDLFFBQUFBLEtBQUssR0FBR04sS0FBSyxDQUFDTyxNQUFOLENBQWEsT0FBYixDQUFSO0FBQ0gsT0FITSxNQUdBO0FBQ0hELFFBQUFBLEtBQUssR0FBR04sS0FBSyxDQUFDTyxNQUFOLENBQWEsT0FBYixJQUF3QixLQUF4QixHQUFnQ0wsR0FBRyxDQUFDSyxNQUFKLENBQVcsT0FBWCxDQUF4QztBQUNIOztBQUVEVixNQUFBQSxDQUFDLENBQUMsb0NBQUQsQ0FBRCxDQUF3Q1csSUFB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TUFBQUEsaUJBQWlCOztBQUNqQkMsTUFBQUEsaUJBQWlCOztBQUNqQkMsTUFBQUEsaUJBQWlCOztBQUNqQkMsTUFBQUEsaUJBQWlCOztBQUNqQkMsTUFBQUEsaUJBQWlCOztBQUNqQkMsTUFBQUEsaUJBQWlCOztBQUNqQkMsTUFBQUEsa0JBQWtCOztBQUNsQkMsTUFBQUEsa0JBQWtCLEdBbkVKLENBcUVkOzs7QUFDQWdCLE1BQUFBLHlCQUF5QjtBQUM1QjtBQXhFRSxHQUFQO0FBMEVILENBcmxKZSxFQUFoQixDLENBdWxKQTs7O0FBQ0EsSUFBSSxJQUFKLEVBQW1DO0FBQy9CZSxFQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUI5TixTQUFqQjtBQUNIOztBQUVEK04sTUFBTSxDQUFDbE0sUUFBRCxDQUFOLENBQWlCbU0sS0FBakIsQ0FBdUIsWUFBWTtBQUMvQmhPLEVBQUFBLFNBQVMsQ0FBQzROLElBQVY7QUFDSCxDQUZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL21ldHJvbmljL2pzL3BhZ2VzL3dpZGdldHMuanM/ZTM3NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8vIENsYXNzIGRlZmluaXRpb25cclxudmFyIEtUV2lkZ2V0cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG5cclxuICAgIC8vIEdlbmVyYWwgQ29udHJvbHNcclxuICAgIHZhciBfaW5pdERhdGVyYW5nZXBpY2tlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoJCgnI2t0X2Rhc2hib2FyZF9kYXRlcmFuZ2VwaWNrZXInKS5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgcGlja2VyID0gJCgnI2t0X2Rhc2hib2FyZF9kYXRlcmFuZ2VwaWNrZXInKTtcclxuICAgICAgICB2YXIgc3RhcnQgPSBtb21lbnQoKTtcclxuICAgICAgICB2YXIgZW5kID0gbW9tZW50KCk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGNiKHN0YXJ0LCBlbmQsIGxhYmVsKSB7XHJcbiAgICAgICAgICAgIHZhciB0aXRsZSA9ICcnO1xyXG4gICAgICAgICAgICB2YXIgcmFuZ2UgPSAnJztcclxuXHJcbiAgICAgICAgICAgIGlmICgoZW5kIC0gc3RhcnQpIDwgMTAwIHx8IGxhYmVsID09ICdUb2RheScpIHtcclxuICAgICAgICAgICAgICAgIHRpdGxlID0gJ1RvZGF5Oic7XHJcbiAgICAgICAgICAgICAgICByYW5nZSA9IHN0YXJ0LmZvcm1hdCgnTU1NIEQnKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChsYWJlbCA9PSAnWWVzdGVyZGF5Jykge1xyXG4gICAgICAgICAgICAgICAgdGl0bGUgPSAnWWVzdGVyZGF5Oic7XHJcbiAgICAgICAgICAgICAgICByYW5nZSA9IHN0YXJ0LmZvcm1hdCgnTU1NIEQnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJhbmdlID0gc3RhcnQuZm9ybWF0KCdNTU0gRCcpICsgJyAtICcgKyBlbmQuZm9ybWF0KCdNTU0gRCcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkKCcja3RfZGFzaGJvYXJkX2RhdGVyYW5nZXBpY2tlcl9kYXRlJykuaHRtbChyYW5nZSk7XHJcbiAgICAgICAgICAgICQoJyNrdF9kYXNoYm9hcmRfZGF0ZXJhbmdlcGlja2VyX3RpdGxlJykuaHRtbCh0aXRsZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwaWNrZXIuZGF0ZXJhbmdlcGlja2VyKHtcclxuICAgICAgICAgICAgZGlyZWN0aW9uOiBLVFV0aWwuaXNSVEwoKSxcclxuICAgICAgICAgICAgc3RhcnREYXRlOiBzdGFydCxcclxuICAgICAgICAgICAgZW5kRGF0ZTogZW5kLFxyXG4gICAgICAgICAgICBvcGVuczogJ2xlZnQnLFxyXG4gICAgICAgICAgICBhcHBseUNsYXNzOiAnYnRuLXByaW1hcnknLFxyXG4gICAgICAgICAgICBjYW5jZWxDbGFzczogJ2J0bi1saWdodC1wcmltYXJ5JyxcclxuICAgICAgICAgICAgcmFuZ2VzOiB7XHJcbiAgICAgICAgICAgICAgICAnVG9kYXknOiBbbW9tZW50KCksIG1vbWVudCgpXSxcclxuICAgICAgICAgICAgICAgICdZZXN0ZXJkYXknOiBbbW9tZW50KCkuc3VidHJhY3QoMSwgJ2RheXMnKSwgbW9tZW50KCkuc3VidHJhY3QoMSwgJ2RheXMnKV0sXHJcbiAgICAgICAgICAgICAgICAnTGFzdCA3IERheXMnOiBbbW9tZW50KCkuc3VidHJhY3QoNiwgJ2RheXMnKSwgbW9tZW50KCldLFxyXG4gICAgICAgICAgICAgICAgJ0xhc3QgMzAgRGF5cyc6IFttb21lbnQoKS5zdWJ0cmFjdCgyOSwgJ2RheXMnKSwgbW9tZW50KCldLFxyXG4gICAgICAgICAgICAgICAgJ1RoaXMgTW9udGgnOiBbbW9tZW50KCkuc3RhcnRPZignbW9udGgnKSwgbW9tZW50KCkuZW5kT2YoJ21vbnRoJyldLFxyXG4gICAgICAgICAgICAgICAgJ0xhc3QgTW9udGgnOiBbbW9tZW50KCkuc3VidHJhY3QoMSwgJ21vbnRoJykuc3RhcnRPZignbW9udGgnKSwgbW9tZW50KCkuc3VidHJhY3QoMSwgJ21vbnRoJykuZW5kT2YoJ21vbnRoJyldXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBjYik7XHJcblxyXG4gICAgICAgIGNiKHN0YXJ0LCBlbmQsICcnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTdGF0cyB3aWRnZXRzXHJcbiAgICB2YXIgX2luaXRTdGF0c1dpZGdldDcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X3N0YXRzX3dpZGdldF83X2NoYXJ0XCIpO1xyXG5cclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIHNlcmllczogW3tcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdOZXQgUHJvZml0JyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IFszMCwgNDUsIDMyLCA3MCwgNDBdXHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICBjaGFydDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2FyZWEnLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxNTAsXHJcbiAgICAgICAgICAgICAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB6b29tOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzcGFya2xpbmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7fSxcclxuICAgICAgICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmaWxsOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgIGN1cnZlOiAnc21vb3RoJyxcclxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMyxcclxuICAgICAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ3N1Y2Nlc3MnXV1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeGF4aXM6IHtcclxuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnXSxcclxuICAgICAgICAgICAgICAgIGF4aXNCb3JkZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBheGlzVGlja3M6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjcm9zc2hhaXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdmcm9udCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTMwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGFzaEFycmF5OiAzXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeWF4aXM6IHtcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3RhdGVzOiB7XHJcbiAgICAgICAgICAgICAgICBub3JtYWw6IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbG93TXVsdGlwbGVEYXRhUG9pbnRzU2VsZWN0aW9uOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiRcIiArIHZhbCArIFwiIHRob3VzYW5kc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVsnc3VjY2VzcyddXSxcclxuICAgICAgICAgICAgbWFya2Vyczoge1xyXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bJ3N1Y2Nlc3MnXV0sXHJcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ3N1Y2Nlc3MnXV0sXHJcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogM1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZWxlbWVudCwgb3B0aW9ucyk7XHJcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIF9pbml0U3RhdHNXaWRnZXQ4ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF9zdGF0c193aWRnZXRfOF9jaGFydFwiKTtcclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBzZXJpZXM6IFt7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBbMzAsIDQ1LCAzMiwgNzAsIDQwXVxyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgY2hhcnQ6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdhcmVhJyxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMTUwLFxyXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgem9vbToge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc3BhcmtsaW5lOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge30sXHJcbiAgICAgICAgICAgIGxlZ2VuZDoge1xyXG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGF0YUxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZmlsbDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ3NvbGlkJyxcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgICAgICAgICBjdXJ2ZTogJ3Ntb290aCcsXHJcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDMsXHJcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydkYW5nZXInXV1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeGF4aXM6IHtcclxuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1biddLFxyXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Zyb250JyxcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMzAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNoQXJyYXk6IDNcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdGF0ZXM6IHtcclxuICAgICAgICAgICAgICAgIG5vcm1hbDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0b29sdGlwOiB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHk6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiJFwiICsgdmFsICsgXCIgdGhvdXNhbmRzXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydkYW5nZXInXV0sXHJcbiAgICAgICAgICAgIG1hcmtlcnM6IHtcclxuICAgICAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydkYW5nZXInXV0sXHJcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ2RhbmdlciddXSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcclxuICAgICAgICBjaGFydC5yZW5kZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2luaXRTdGF0c1dpZGdldDkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X3N0YXRzX3dpZGdldF85X2NoYXJ0XCIpO1xyXG5cclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIHNlcmllczogW3tcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdOZXQgUHJvZml0JyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IFszMCwgNDUsIDMyLCA3MCwgNDBdXHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICBjaGFydDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2FyZWEnLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxNTAsXHJcbiAgICAgICAgICAgICAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB6b29tOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzcGFya2xpbmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7fSxcclxuICAgICAgICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmaWxsOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgIGN1cnZlOiAnc21vb3RoJyxcclxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMyxcclxuICAgICAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ3ByaW1hcnknXV1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeGF4aXM6IHtcclxuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1biddLFxyXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Zyb250JyxcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMzAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNoQXJyYXk6IDNcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdGF0ZXM6IHtcclxuICAgICAgICAgICAgICAgIG5vcm1hbDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0b29sdGlwOiB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHk6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiJFwiICsgdmFsICsgXCIgdGhvdXNhbmRzXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydwcmltYXJ5J11dLFxyXG4gICAgICAgICAgICBtYXJrZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVsncHJpbWFyeSddXSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVsncHJpbWFyeSddXSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcclxuICAgICAgICBjaGFydC5yZW5kZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2luaXRTdGF0c1dpZGdldDEwID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF9zdGF0c193aWRnZXRfMTBfY2hhcnRcIik7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcpKTtcclxuICAgICAgICB2YXIgY29sb3IgPSBLVFV0aWwuaGFzQXR0cihlbGVtZW50LCAnZGF0YS1jb2xvcicpID8gS1RVdGlsLmF0dHIoZWxlbWVudCwgJ2RhdGEtY29sb3InKSA6ICdpbmZvJztcclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBzZXJpZXM6IFt7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBbNDAsIDQwLCAzMCwgMzAsIDM1LCAzNSwgNTBdXHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICBjaGFydDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2FyZWEnLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXHJcbiAgICAgICAgICAgICAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB6b29tOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzcGFya2xpbmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7fSxcclxuICAgICAgICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmaWxsOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgIGN1cnZlOiAnc21vb3RoJyxcclxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMyxcclxuICAgICAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bY29sb3JdXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB4YXhpczoge1xyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnXSxcclxuICAgICAgICAgICAgICAgIGF4aXNCb3JkZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBheGlzVGlja3M6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjcm9zc2hhaXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdmcm9udCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTMwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGFzaEFycmF5OiAzXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeWF4aXM6IHtcclxuICAgICAgICAgICAgICAgIG1pbjogMCxcclxuICAgICAgICAgICAgICAgIG1heDogNTUsXHJcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0YXRlczoge1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBhbGxvd011bHRpcGxlRGF0YVBvaW50c1NlbGVjdGlvbjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgeToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIkXCIgKyB2YWwgKyBcIiB0aG91c2FuZHNcIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bY29sb3JdXSxcclxuICAgICAgICAgICAgbWFya2Vyczoge1xyXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bY29sb3JdXSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVtjb2xvcl1dLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xyXG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBfaW5pdFN0YXRzV2lkZ2V0MTEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X3N0YXRzX3dpZGdldF8xMV9jaGFydFwiKTtcclxuXHJcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcpKTtcclxuICAgICAgICB2YXIgY29sb3IgPSBLVFV0aWwuaGFzQXR0cihlbGVtZW50LCAnZGF0YS1jb2xvcicpID8gS1RVdGlsLmF0dHIoZWxlbWVudCwgJ2RhdGEtY29sb3InKSA6ICdzdWNjZXNzJztcclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBzZXJpZXM6IFt7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBbNDAsIDQwLCAzMCwgMzAsIDM1LCAzNSwgNTBdXHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICBjaGFydDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2FyZWEnLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxNTAsXHJcbiAgICAgICAgICAgICAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB6b29tOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzcGFya2xpbmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7fSxcclxuICAgICAgICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmaWxsOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgIGN1cnZlOiAnc21vb3RoJyxcclxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMyxcclxuICAgICAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bY29sb3JdXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB4YXhpczoge1xyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0F1ZycsICdTZXAnXSxcclxuICAgICAgICAgICAgICAgIGF4aXNCb3JkZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBheGlzVGlja3M6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjcm9zc2hhaXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdmcm9udCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTMwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGFzaEFycmF5OiAzXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeWF4aXM6IHtcclxuICAgICAgICAgICAgICAgIG1pbjogMCxcclxuICAgICAgICAgICAgICAgIG1heDogNTUsXHJcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0YXRlczoge1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBhbGxvd011bHRpcGxlRGF0YVBvaW50c1NlbGVjdGlvbjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgeToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIkXCIgKyB2YWwgKyBcIiB0aG91c2FuZHNcIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bY29sb3JdXSxcclxuICAgICAgICAgICAgbWFya2Vyczoge1xyXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bY29sb3JdXSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVtjb2xvcl1dLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xyXG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBfaW5pdFN0YXRzV2lkZ2V0MTIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X3N0YXRzX3dpZGdldF8xMl9jaGFydFwiKTtcclxuXHJcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcpKTtcclxuICAgICAgICB2YXIgY29sb3IgPSBLVFV0aWwuaGFzQXR0cihlbGVtZW50LCAnZGF0YS1jb2xvcicpID8gS1RVdGlsLmF0dHIoZWxlbWVudCwgJ2RhdGEtY29sb3InKSA6ICdwcmltYXJ5JztcclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBzZXJpZXM6IFt7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBbNDAsIDQwLCAzMCwgMzAsIDM1LCAzNSwgNTBdXHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICBjaGFydDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2FyZWEnLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXHJcbiAgICAgICAgICAgICAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB6b29tOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzcGFya2xpbmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7fSxcclxuICAgICAgICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmaWxsOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgIGN1cnZlOiAnc21vb3RoJyxcclxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMyxcclxuICAgICAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bY29sb3JdXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB4YXhpczoge1xyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0F1ZycsICdTZXAnXSxcclxuICAgICAgICAgICAgICAgIGF4aXNCb3JkZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBheGlzVGlja3M6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjcm9zc2hhaXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdmcm9udCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTMwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGFzaEFycmF5OiAzXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeWF4aXM6IHtcclxuICAgICAgICAgICAgICAgIG1pbjogMCxcclxuICAgICAgICAgICAgICAgIG1heDogNTUsXHJcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0YXRlczoge1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBhbGxvd011bHRpcGxlRGF0YVBvaW50c1NlbGVjdGlvbjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgeToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIkXCIgKyB2YWwgKyBcIiB0aG91c2FuZHNcIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bY29sb3JdXSxcclxuICAgICAgICAgICAgbWFya2Vyczoge1xyXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bY29sb3JdXSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVtjb2xvcl1dLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xyXG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENoYXJ0cyB3aWRnZXRzXHJcbiAgICB2YXIgX2luaXRDaGFydHNXaWRnZXQxID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF9jaGFydHNfd2lkZ2V0XzFfY2hhcnRcIik7XHJcblxyXG4gICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgc2VyaWVzOiBbe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ05ldCBQcm9maXQnLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogWzQ0LCA1NSwgNTcsIDU2LCA2MSwgNThdXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdSZXZlbnVlJyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IFs3NiwgODUsIDEwMSwgOTgsIDg3LCAxMDVdXHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICBjaGFydDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2JhcicsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDM1MCxcclxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgYmFyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uV2lkdGg6IFsnMzAlJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kaW5nU2hhcGU6ICdyb3VuZGVkJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMixcclxuICAgICAgICAgICAgICAgIGNvbG9yczogWyd0cmFuc3BhcmVudCddXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHhheGlzOiB7XHJcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBbJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJ10sXHJcbiAgICAgICAgICAgICAgICBheGlzQm9yZGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYXhpc1RpY2tzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHlheGlzOiB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZpbGw6IHtcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3RhdGVzOiB7XHJcbiAgICAgICAgICAgICAgICBub3JtYWw6IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbG93TXVsdGlwbGVEYXRhUG9pbnRzU2VsZWN0aW9uOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiRcIiArIHZhbCArIFwiIHRob3VzYW5kc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydzdWNjZXNzJ10sIEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMzAwJ11dLFxyXG4gICAgICAgICAgICBncmlkOiB7XHJcbiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS0yMDAnXSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZURhc2hBcnJheTogNCxcclxuICAgICAgICAgICAgICAgIHlheGlzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xyXG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBfaW5pdENoYXJ0c1dpZGdldDIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X2NoYXJ0c193aWRnZXRfMl9jaGFydFwiKTtcclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBzZXJpZXM6IFt7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBbNDQsIDU1LCA1NywgNTYsIDYxLCA1OF1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ1JldmVudWUnLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogWzc2LCA4NSwgMTAxLCA5OCwgODcsIDEwNV1cclxuICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnYmFyJyxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMzUwLFxyXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBiYXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBob3Jpem9udGFsOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5XaWR0aDogWyczMCUnXSxcclxuICAgICAgICAgICAgICAgICAgICBlbmRpbmdTaGFwZTogJ3JvdW5kZWQnXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsZWdlbmQ6IHtcclxuICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0cm9rZToge1xyXG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAyLFxyXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbJ3RyYW5zcGFyZW50J11cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeGF4aXM6IHtcclxuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnXSxcclxuICAgICAgICAgICAgICAgIGF4aXNCb3JkZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBheGlzVGlja3M6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeWF4aXM6IHtcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZmlsbDoge1xyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdGF0ZXM6IHtcclxuICAgICAgICAgICAgICAgIG5vcm1hbDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0b29sdGlwOiB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHk6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiJFwiICsgdmFsICsgXCIgdGhvdXNhbmRzXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ3dhcm5pbmcnXSwgS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS0zMDAnXV0sXHJcbiAgICAgICAgICAgIGdyaWQ6IHtcclxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTIwMCddLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlRGFzaEFycmF5OiA0LFxyXG4gICAgICAgICAgICAgICAgeWF4aXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZWxlbWVudCwgb3B0aW9ucyk7XHJcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIF9pbml0Q2hhcnRzV2lkZ2V0MyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3RfY2hhcnRzX3dpZGdldF8zX2NoYXJ0XCIpO1xyXG5cclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIHNlcmllczogW3tcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdOZXQgUHJvZml0JyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IFszMCwgNDAsIDQwLCA5MCwgOTAsIDcwLCA3MF1cclxuICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXJlYScsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDM1MCxcclxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmaWxsOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgIGN1cnZlOiAnc21vb3RoJyxcclxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMyxcclxuICAgICAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ2luZm8nXV1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeGF4aXM6IHtcclxuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJ10sXHJcbiAgICAgICAgICAgICAgICBheGlzQm9yZGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYXhpc1RpY2tzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY3Jvc3NoYWlyczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnZnJvbnQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVsnaW5mbyddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGFzaEFycmF5OiAzXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeWF4aXM6IHtcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3RhdGVzOiB7XHJcbiAgICAgICAgICAgICAgICBub3JtYWw6IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbG93TXVsdGlwbGVEYXRhUG9pbnRzU2VsZWN0aW9uOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiRcIiArIHZhbCArIFwiIHRob3VzYW5kc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVsnaW5mbyddXSxcclxuICAgICAgICAgICAgZ3JpZDoge1xyXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMjAwJ10sXHJcbiAgICAgICAgICAgICAgICBzdHJva2VEYXNoQXJyYXk6IDQsXHJcbiAgICAgICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1hcmtlcnM6IHtcclxuICAgICAgICAgICAgICAgIC8vc2l6ZTogNSxcclxuICAgICAgICAgICAgICAgIC8vY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bJ2RhbmdlciddXSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydpbmZvJ10sXHJcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogM1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZWxlbWVudCwgb3B0aW9ucyk7XHJcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIF9pbml0Q2hhcnRzV2lkZ2V0NCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3RfY2hhcnRzX3dpZGdldF80X2NoYXJ0XCIpO1xyXG5cclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIHNlcmllczogW3tcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdOZXQgUHJvZml0JyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IFs2MCwgNTAsIDgwLCA0MCwgMTAwLCA2MF1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ1JldmVudWUnLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogWzcwLCA2MCwgMTEwLCA0MCwgNTAsIDcwXVxyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgY2hhcnQ6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdhcmVhJyxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMzUwLFxyXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7fSxcclxuICAgICAgICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmaWxsOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgIGN1cnZlOiAnc21vb3RoJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB4YXhpczoge1xyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCddLFxyXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Zyb250JyxcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydzdWNjZXNzJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNoQXJyYXk6IDNcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdGF0ZXM6IHtcclxuICAgICAgICAgICAgICAgIG5vcm1hbDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0b29sdGlwOiB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHk6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiJFwiICsgdmFsICsgXCIgdGhvdXNhbmRzXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ3N1Y2Nlc3MnXSwgS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVsnd2FybmluZyddXSxcclxuICAgICAgICAgICAgZ3JpZDoge1xyXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMjAwJ10sXHJcbiAgICAgICAgICAgICAgICBzdHJva2VEYXNoQXJyYXk6IDQsXHJcbiAgICAgICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1hcmtlcnM6IHtcclxuICAgICAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydzdWNjZXNzJ10sIEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWyd3YXJuaW5nJ11dLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVsnc3VjY2VzcyddLCBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVsnd2FybmluZyddXSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcclxuICAgICAgICBjaGFydC5yZW5kZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2luaXRDaGFydHNXaWRnZXQ1ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF9jaGFydHNfd2lkZ2V0XzVfY2hhcnRcIik7XHJcblxyXG4gICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgc2VyaWVzOiBbe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ05ldCBQcm9maXQnLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogWzQwLCA1MCwgNjUsIDcwLCA1MCwgMzBdXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdSZXZlbnVlJyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IFstMzAsIC00MCwgLTU1LCAtNjAsIC00MCwgLTIwXVxyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgY2hhcnQ6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdiYXInLFxyXG4gICAgICAgICAgICAgICAgc3RhY2tlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMzUwLFxyXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBiYXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBob3Jpem9udGFsOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5XaWR0aDogWycxMiUnXSxcclxuICAgICAgICAgICAgICAgICAgICBlbmRpbmdTaGFwZTogJ3JvdW5kZWQnXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsZWdlbmQ6IHtcclxuICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0cm9rZToge1xyXG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAyLFxyXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbJ3RyYW5zcGFyZW50J11cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeGF4aXM6IHtcclxuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnXSxcclxuICAgICAgICAgICAgICAgIGF4aXNCb3JkZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBheGlzVGlja3M6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeWF4aXM6IHtcclxuICAgICAgICAgICAgICAgIG1pbjogLTgwLFxyXG4gICAgICAgICAgICAgICAgbWF4OiA4MCxcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZmlsbDoge1xyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdGF0ZXM6IHtcclxuICAgICAgICAgICAgICAgIG5vcm1hbDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0b29sdGlwOiB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHk6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiJFwiICsgdmFsICsgXCIgdGhvdXNhbmRzXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ2luZm8nXSwgS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVsncHJpbWFyeSddXSxcclxuICAgICAgICAgICAgZ3JpZDoge1xyXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMjAwJ10sXHJcbiAgICAgICAgICAgICAgICBzdHJva2VEYXNoQXJyYXk6IDQsXHJcbiAgICAgICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcclxuICAgICAgICBjaGFydC5yZW5kZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2luaXRDaGFydHNXaWRnZXQ2ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF9jaGFydHNfd2lkZ2V0XzZfY2hhcnRcIik7XHJcblxyXG4gICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgc2VyaWVzOiBbe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ05ldCBQcm9maXQnLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2JhcicsXHJcbiAgICAgICAgICAgICAgICBzdGFja2VkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogWzQwLCA1MCwgNjUsIDcwLCA1MCwgMzBdXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdSZXZlbnVlJyxcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdiYXInLFxyXG4gICAgICAgICAgICAgICAgc3RhY2tlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGRhdGE6IFsyMCwgMjAsIDI1LCAzMCwgMzAsIDIwXVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnRXhwZW5zZXMnLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2FyZWEnLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogWzUwLCA4MCwgNjAsIDkwLCA1MCwgNzBdXHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICBjaGFydDoge1xyXG4gICAgICAgICAgICAgICAgc3RhY2tlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMzUwLFxyXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBiYXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFja2VkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGhvcml6b250YWw6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZGluZ1NoYXBlOiAncm91bmRlZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uV2lkdGg6IFsnMTIlJ11cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxlZ2VuZDoge1xyXG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGF0YUxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgICAgICAgICBjdXJ2ZTogJ3Ntb290aCcsXHJcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIsXHJcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFsndHJhbnNwYXJlbnQnXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB4YXhpczoge1xyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCddLFxyXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgbWF4OiAxMjAsXHJcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZpbGw6IHtcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3RhdGVzOiB7XHJcbiAgICAgICAgICAgICAgICBub3JtYWw6IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbG93TXVsdGlwbGVEYXRhUG9pbnRzU2VsZWN0aW9uOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiRcIiArIHZhbCArIFwiIHRob3VzYW5kc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydpbmZvJ10sIEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ3ByaW1hcnknXSwgS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bJ3ByaW1hcnknXV0sXHJcbiAgICAgICAgICAgIGdyaWQ6IHtcclxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTIwMCddLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlRGFzaEFycmF5OiA0LFxyXG4gICAgICAgICAgICAgICAgeWF4aXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IHtcclxuICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IDBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xyXG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBfaW5pdENoYXJ0c1dpZGdldDcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X2NoYXJ0c193aWRnZXRfN19jaGFydFwiKTtcclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBzZXJpZXM6IFt7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBbMzAsIDMwLCA1MCwgNTAsIDM1LCAzNV1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ1JldmVudWUnLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogWzU1LCAyMCwgMjAsIDIwLCA3MCwgNzBdXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdFeHBlbnNlcycsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBbNjAsIDYwLCA0MCwgNDAsIDMwLCAzMF1cclxuICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXJlYScsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwMCxcclxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHpvb206IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNwYXJrbGluZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHt9LFxyXG4gICAgICAgICAgICBsZWdlbmQ6IHtcclxuICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZpbGw6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdzb2xpZCcsXHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0cm9rZToge1xyXG4gICAgICAgICAgICAgICAgY3VydmU6ICdzbW9vdGgnLFxyXG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAyLFxyXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVsnd2FybmluZyddLCAndHJhbnNwYXJlbnQnLCAndHJhbnNwYXJlbnQnXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB4YXhpczoge1xyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCddLFxyXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Zyb250JyxcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMzAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNoQXJyYXk6IDNcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdGF0ZXM6IHtcclxuICAgICAgICAgICAgICAgIG5vcm1hbDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0b29sdGlwOiB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHk6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiJFwiICsgdmFsICsgXCIgdGhvdXNhbmRzXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWyd3YXJuaW5nJ10sIEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydpbmZvJ10sIEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMTAwJ11dLFxyXG4gICAgICAgICAgICBncmlkOiB7XHJcbiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS0yMDAnXSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZURhc2hBcnJheTogNCxcclxuICAgICAgICAgICAgICAgIHlheGlzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbWFya2Vyczoge1xyXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bJ3dhcm5pbmcnXSwgS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bJ2luZm8nXSwgS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS0xMDAnXV0sXHJcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ3dhcm5pbmcnXSwgS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVsnaW5mbyddLCBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddXSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcclxuICAgICAgICBjaGFydC5yZW5kZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2luaXRDaGFydHNXaWRnZXQ4ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF9jaGFydHNfd2lkZ2V0XzhfY2hhcnRcIik7XHJcblxyXG4gICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgc2VyaWVzOiBbe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ05ldCBQcm9maXQnLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogWzMwLCAzMCwgNTAsIDUwLCAzNSwgMzVdXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdSZXZlbnVlJyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IFs1NSwgMjAsIDIwLCAyMCwgNzAsIDcwXVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnRXhwZW5zZXMnLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogWzYwLCA2MCwgNDAsIDQwLCAzMCwgMzBdXHJcbiAgICAgICAgICAgIH0sXSxcclxuICAgICAgICAgICAgY2hhcnQ6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdhcmVhJyxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogMzAwLFxyXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgem9vbToge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc3BhcmtsaW5lOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge30sXHJcbiAgICAgICAgICAgIGxlZ2VuZDoge1xyXG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGF0YUxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZmlsbDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ3NvbGlkJyxcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgICAgICAgICBjdXJ2ZTogJ3Ntb290aCcsXHJcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIsXHJcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFsndHJhbnNwYXJlbnQnLCAndHJhbnNwYXJlbnQnLCAndHJhbnNwYXJlbnQnXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB4YXhpczoge1xyXG4gICAgICAgICAgICAgICAgeDogMCxcclxuICAgICAgICAgICAgICAgIG9mZnNldFg6IDAsXHJcbiAgICAgICAgICAgICAgICBvZmZzZXRZOiAwLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnXSxcclxuICAgICAgICAgICAgICAgIGF4aXNCb3JkZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBheGlzVGlja3M6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjcm9zc2hhaXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdmcm9udCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTMwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGFzaEFycmF5OiAzXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeWF4aXM6IHtcclxuICAgICAgICAgICAgICAgIHk6IDAsXHJcbiAgICAgICAgICAgICAgICBvZmZzZXRYOiAwLFxyXG4gICAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IHtcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAwXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdGF0ZXM6IHtcclxuICAgICAgICAgICAgICAgIG5vcm1hbDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0b29sdGlwOiB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHk6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiJFwiICsgdmFsICsgXCIgdGhvdXNhbmRzXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydzdWNjZXNzJ10sIEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydkYW5nZXInXSwgS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bJ2luZm8nXV0sXHJcbiAgICAgICAgICAgIGdyaWQ6IHtcclxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTIwMCddLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlRGFzaEFycmF5OiA0LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogMCxcclxuICAgICAgICAgICAgICAgICAgICBib3R0b206IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogMCxcclxuICAgICAgICAgICAgICAgICAgICByaWdodDogMFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtYXJrZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVsnc3VjY2VzcyddLCBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVsnZGFuZ2VyJ10sIEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydpbmZvJ11dLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydzdWNjZXNzJ10sIEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ2RhbmdlciddLCBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydpbmZvJ11dLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xyXG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBfaW5pdENoYXJ0c1dpZGdldDkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X2NoYXJ0c193aWRnZXRfOV9jaGFydFwiKTtcclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBzZXJpZXM6IFt7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBbMjAsIDMwLCA0NSwgMzUsIDI1XVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnUmV2ZW51ZScsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBbLTIwLCAtMzAsIC00NSwgLTM1LCAtMjVdXHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICBjaGFydDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2JhcicsXHJcbiAgICAgICAgICAgICAgICBzdGFja2VkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAzNTAsXHJcbiAgICAgICAgICAgICAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIGJhcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvcml6b250YWw6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbldpZHRoOiBbJzE3JSddLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZGluZ1NoYXBlOiAncm91bmRlZCdcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxlZ2VuZDoge1xyXG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGF0YUxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMCxcclxuICAgICAgICAgICAgICAgIGNvbG9yczogWyd0cmFuc3BhcmVudCddXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHhheGlzOiB7XHJcbiAgICAgICAgICAgICAgICBsaW5lczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1biddLFxyXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgbGluZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBtaW46IC01MCxcclxuICAgICAgICAgICAgICAgIG1heDogNTAsXHJcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZpbGw6IHtcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3RhdGVzOiB7XHJcbiAgICAgICAgICAgICAgICBub3JtYWw6IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbG93TXVsdGlwbGVEYXRhUG9pbnRzU2VsZWN0aW9uOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiRcIiArIHZhbCArIFwiIHRob3VzYW5kc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydpbmZvJ10sIEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ3ByaW1hcnknXV0sXHJcbiAgICAgICAgICAgIGdyaWQ6IHtcclxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTIwMCddLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlRGFzaEFycmF5OiA0LFxyXG4gICAgICAgICAgICAgICAgeWF4aXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZWxlbWVudCwgb3B0aW9ucyk7XHJcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTWl4ZWQgd2lkZ2V0c1xyXG4gICAgdmFyIF9pbml0TWl4ZWRXaWRnZXQxID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF9taXhlZF93aWRnZXRfMV9jaGFydFwiKTtcclxuICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmNzcyhlbGVtZW50LCAnaGVpZ2h0JykpO1xyXG5cclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHN0cm9rZUNvbG9yID0gJyNEMTM2NDcnO1xyXG5cclxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgc2VyaWVzOiBbe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ05ldCBQcm9maXQnLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogWzMwLCA0NSwgMzIsIDcwLCA0MCwgNDAsIDQwXVxyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgY2hhcnQ6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdhcmVhJyxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgem9vbToge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc3BhcmtsaW5lOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRyb3BTaGFkb3c6IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWRPblNlcmllczogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogNSxcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGJsdXI6IDMsXHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IHN0cm9rZUNvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuNVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge30sXHJcbiAgICAgICAgICAgIGxlZ2VuZDoge1xyXG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGF0YUxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZmlsbDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ3NvbGlkJyxcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgICAgICAgICBjdXJ2ZTogJ3Ntb290aCcsXHJcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDMsXHJcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtzdHJva2VDb2xvcl1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeGF4aXM6IHtcclxuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJ10sXHJcbiAgICAgICAgICAgICAgICBheGlzQm9yZGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYXhpc1RpY2tzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY3Jvc3NoYWlyczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnZnJvbnQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS0zMDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hBcnJheTogM1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeWF4aXM6IHtcclxuICAgICAgICAgICAgICAgIG1pbjogMCxcclxuICAgICAgICAgICAgICAgIG1heDogODAsXHJcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0YXRlczoge1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBhbGxvd011bHRpcGxlRGF0YVBvaW50c1NlbGVjdGlvbjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgeToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIkXCIgKyB2YWwgKyBcIiB0aG91c2FuZHNcIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBtYXJrZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb2xvcnM6IFsndHJhbnNwYXJlbnQnXSxcclxuICAgICAgICAgICAgbWFya2Vyczoge1xyXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bJ2RhbmdlciddXSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBbc3Ryb2tlQ29sb3JdLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xyXG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBfaW5pdE1peGVkV2lkZ2V0MiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3RfbWl4ZWRfd2lkZ2V0XzJfY2hhcnRcIik7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcpKTtcclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBzdHJva2VDb2xvciA9ICcjMjg3RUQ3JztcclxuXHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIHNlcmllczogW3tcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdOZXQgUHJvZml0JyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IFszMCwgNDUsIDMyLCA3MCwgNDAsIDQwLCA0MF1cclxuICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXJlYScsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcclxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHpvb206IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNwYXJrbGluZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkcm9wU2hhZG93OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkT25TZXJpZXM6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICB0b3A6IDUsXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogMCxcclxuICAgICAgICAgICAgICAgICAgICBibHVyOiAzLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBzdHJva2VDb2xvcixcclxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHt9LFxyXG4gICAgICAgICAgICBsZWdlbmQ6IHtcclxuICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZpbGw6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdzb2xpZCcsXHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0cm9rZToge1xyXG4gICAgICAgICAgICAgICAgY3VydmU6ICdzbW9vdGgnLFxyXG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAzLFxyXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbc3Ryb2tlQ29sb3JdXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHhheGlzOiB7XHJcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBbJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZyddLFxyXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Zyb250JyxcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMzAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNoQXJyYXk6IDNcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgbWluOiAwLFxyXG4gICAgICAgICAgICAgICAgbWF4OiA4MCxcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3RhdGVzOiB7XHJcbiAgICAgICAgICAgICAgICBub3JtYWw6IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbG93TXVsdGlwbGVEYXRhUG9pbnRzU2VsZWN0aW9uOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiRcIiArIHZhbCArIFwiIHRob3VzYW5kc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIG1hcmtlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbG9yczogWyd0cmFuc3BhcmVudCddLFxyXG4gICAgICAgICAgICBtYXJrZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVsnaW5mbyddXSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBbc3Ryb2tlQ29sb3JdLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xyXG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBfaW5pdE1peGVkV2lkZ2V0MyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3RfbWl4ZWRfd2lkZ2V0XzNfY2hhcnRcIik7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcpKTtcclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBzdHJva2VDb2xvciA9IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ3doaXRlJ107XHJcblxyXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBzZXJpZXM6IFt7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBbMzAsIDQ1LCAzMiwgNzAsIDQwLCA0MCwgNDBdXHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICBjaGFydDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2FyZWEnLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXHJcbiAgICAgICAgICAgICAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB6b29tOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzcGFya2xpbmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZHJvcFNoYWRvdzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZE9uU2VyaWVzOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wOiA1LFxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgYmx1cjogMyxcclxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogc3Ryb2tlQ29sb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMC4zXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7fSxcclxuICAgICAgICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmaWxsOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgIGN1cnZlOiAnc21vb3RoJyxcclxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMyxcclxuICAgICAgICAgICAgICAgIGNvbG9yczogW3N0cm9rZUNvbG9yXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB4YXhpczoge1xyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnXSxcclxuICAgICAgICAgICAgICAgIGF4aXNCb3JkZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBheGlzVGlja3M6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjcm9zc2hhaXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdmcm9udCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTMwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGFzaEFycmF5OiAzXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeWF4aXM6IHtcclxuICAgICAgICAgICAgICAgIG1pbjogMCxcclxuICAgICAgICAgICAgICAgIG1heDogODAsXHJcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0YXRlczoge1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBhbGxvd011bHRpcGxlRGF0YVBvaW50c1NlbGVjdGlvbjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgeToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIkXCIgKyB2YWwgKyBcIiB0aG91c2FuZHNcIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBtYXJrZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb2xvcnM6IFsndHJhbnNwYXJlbnQnXSxcclxuICAgICAgICAgICAgbWFya2Vyczoge1xyXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bJ2RhcmsnXV0sXHJcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogW3N0cm9rZUNvbG9yXSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcclxuICAgICAgICBjaGFydC5yZW5kZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2luaXRNaXhlZFdpZGdldDQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X21peGVkX3dpZGdldF80X2NoYXJ0XCIpO1xyXG4gICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuY3NzKGVsZW1lbnQsICdoZWlnaHQnKSk7XHJcblxyXG4gICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgc2VyaWVzOiBbe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ05ldCBQcm9maXQnLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogWzM1LCA2NSwgNzUsIDU1LCA0NSwgNjAsIDU1XVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnUmV2ZW51ZScsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBbNDAsIDcwLCA4MCwgNjAsIDUwLCA2NSwgNjBdXHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICBjaGFydDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2JhcicsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcclxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNwYXJrbGluZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBiYXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBob3Jpem9udGFsOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5XaWR0aDogWyczMCUnXSxcclxuICAgICAgICAgICAgICAgICAgICBlbmRpbmdTaGFwZTogJ3JvdW5kZWQnXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsZWdlbmQ6IHtcclxuICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0cm9rZToge1xyXG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxyXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbJ3RyYW5zcGFyZW50J11cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeGF4aXM6IHtcclxuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnXSxcclxuICAgICAgICAgICAgICAgIGF4aXNCb3JkZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBheGlzVGlja3M6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeWF4aXM6IHtcclxuICAgICAgICAgICAgICAgIG1pbjogMCxcclxuICAgICAgICAgICAgICAgIG1heDogMTAwLFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmaWxsOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBbJ3NvbGlkJywgJ3NvbGlkJ10sXHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiBbMC4yNSwgMV1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3RhdGVzOiB7XHJcbiAgICAgICAgICAgICAgICBub3JtYWw6IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbG93TXVsdGlwbGVEYXRhUG9pbnRzU2VsZWN0aW9uOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiRcIiArIHZhbCArIFwiIHRob3VzYW5kc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIG1hcmtlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbG9yczogWycjZmZmZmZmJywgJyNmZmZmZmYnXSxcclxuICAgICAgICAgICAgZ3JpZDoge1xyXG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMjAwJ10sXHJcbiAgICAgICAgICAgICAgICBzdHJva2VEYXNoQXJyYXk6IDQsXHJcbiAgICAgICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IDIwLFxyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAyMFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZWxlbWVudCwgb3B0aW9ucyk7XHJcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIF9pbml0TWl4ZWRXaWRnZXQ1ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF9taXhlZF93aWRnZXRfNV9jaGFydFwiKTtcclxuICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmNzcyhlbGVtZW50LCAnaGVpZ2h0JykpO1xyXG5cclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIHNlcmllczogW3tcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdOZXQgUHJvZml0JyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IFszNSwgNjUsIDc1LCA1NSwgNDUsIDYwLCA1NV1cclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ1JldmVudWUnLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogWzQwLCA3MCwgODAsIDYwLCA1MCwgNjUsIDYwXVxyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgY2hhcnQ6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdiYXInLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXHJcbiAgICAgICAgICAgICAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzcGFya2xpbmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgYmFyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uV2lkdGg6IFsnMzAlJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kaW5nU2hhcGU6ICdyb3VuZGVkJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMSxcclxuICAgICAgICAgICAgICAgIGNvbG9yczogWyd0cmFuc3BhcmVudCddXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHhheGlzOiB7XHJcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBbJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJ10sXHJcbiAgICAgICAgICAgICAgICBheGlzQm9yZGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYXhpc1RpY2tzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHlheGlzOiB7XHJcbiAgICAgICAgICAgICAgICBtaW46IDAsXHJcbiAgICAgICAgICAgICAgICBtYXg6IDEwMCxcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZmlsbDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogWydzb2xpZCcsICdzb2xpZCddLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogWzAuMjUsIDFdXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0YXRlczoge1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBhbGxvd011bHRpcGxlRGF0YVBvaW50c1NlbGVjdGlvbjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgeToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIkXCIgKyB2YWwgKyBcIiB0aG91c2FuZHNcIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBtYXJrZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb2xvcnM6IFsnI2ZmZmZmZicsICcjZmZmZmZmJ10sXHJcbiAgICAgICAgICAgIGdyaWQ6IHtcclxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTIwMCddLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlRGFzaEFycmF5OiA0LFxyXG4gICAgICAgICAgICAgICAgeWF4aXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IHtcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAyMCxcclxuICAgICAgICAgICAgICAgICAgICByaWdodDogMjBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xyXG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBfaW5pdE1peGVkV2lkZ2V0NiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3RfbWl4ZWRfd2lkZ2V0XzZfY2hhcnRcIik7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcpKTtcclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBzZXJpZXM6IFt7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBbMzUsIDY1LCA3NSwgNTUsIDQ1LCA2MCwgNTVdXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdSZXZlbnVlJyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IFs0MCwgNzAsIDgwLCA2MCwgNTAsIDY1LCA2MF1cclxuICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnYmFyJyxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc3BhcmtsaW5lOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIGJhcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvcml6b250YWw6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbldpZHRoOiBbJzMwJSddLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZGluZ1NoYXBlOiAncm91bmRlZCdcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxlZ2VuZDoge1xyXG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGF0YUxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEsXHJcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFsndHJhbnNwYXJlbnQnXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB4YXhpczoge1xyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCddLFxyXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgbWluOiAwLFxyXG4gICAgICAgICAgICAgICAgbWF4OiAxMDAsXHJcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZpbGw6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFsnc29saWQnLCAnc29saWQnXSxcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IFswLjI1LCAxXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdGF0ZXM6IHtcclxuICAgICAgICAgICAgICAgIG5vcm1hbDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0b29sdGlwOiB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHk6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiJFwiICsgdmFsICsgXCIgdGhvdXNhbmRzXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbWFya2VyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29sb3JzOiBbJyNmZmZmZmYnLCAnI2ZmZmZmZiddLFxyXG4gICAgICAgICAgICBncmlkOiB7XHJcbiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS0yMDAnXSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZURhc2hBcnJheTogNCxcclxuICAgICAgICAgICAgICAgIHlheGlzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogMjAsXHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDIwXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcclxuICAgICAgICBjaGFydC5yZW5kZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2luaXRNaXhlZFdpZGdldDEzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF9taXhlZF93aWRnZXRfMTNfY2hhcnRcIik7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcpKTtcclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBzZXJpZXM6IFt7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBbMzAsIDI1LCA0NSwgMzAsIDU1LCA1NV1cclxuICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXJlYScsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcclxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHpvb206IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNwYXJrbGluZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHt9LFxyXG4gICAgICAgICAgICBsZWdlbmQ6IHtcclxuICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZpbGw6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdzb2xpZCcsXHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0cm9rZToge1xyXG4gICAgICAgICAgICAgICAgY3VydmU6ICdzbW9vdGgnLFxyXG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAzLFxyXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVsnaW5mbyddXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB4YXhpczoge1xyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCddLFxyXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Zyb250JyxcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMzAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNoQXJyYXk6IDNcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgbWluOiAwLFxyXG4gICAgICAgICAgICAgICAgbWF4OiA2MCxcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3RhdGVzOiB7XHJcbiAgICAgICAgICAgICAgICBub3JtYWw6IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbG93TXVsdGlwbGVEYXRhUG9pbnRzU2VsZWN0aW9uOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiRcIiArIHZhbCArIFwiIHRob3VzYW5kc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVsnaW5mbyddXSxcclxuICAgICAgICAgICAgbWFya2Vyczoge1xyXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bJ2luZm8nXV0sXHJcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ2luZm8nXV0sXHJcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogM1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZWxlbWVudCwgb3B0aW9ucyk7XHJcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIF9pbml0TWl4ZWRXaWRnZXQxNCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3RfbWl4ZWRfd2lkZ2V0XzE0X2NoYXJ0XCIpO1xyXG4gICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuY3NzKGVsZW1lbnQsICdoZWlnaHQnKSk7XHJcblxyXG4gICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgc2VyaWVzOiBbNzRdLFxyXG4gICAgICAgICAgICBjaGFydDoge1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAncmFkaWFsQmFyJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIHJhZGlhbEJhcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvbGxvdzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IFwiNjUlXCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd09uOiBcImFsd2F5c1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc3MDAnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS03MDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjMwcHhcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICc3MDAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMTIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbCArICclJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhY2s6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bJ3N1Y2Nlc3MnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6ICcxMDAlJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVsnc3VjY2VzcyddXSxcclxuICAgICAgICAgICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgICAgICAgICBsaW5lQ2FwOiBcInJvdW5kXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxhYmVsczogW1wiUHJvZ3Jlc3NcIl1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcclxuICAgICAgICBjaGFydC5yZW5kZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2luaXRNaXhlZFdpZGdldDE1ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF9taXhlZF93aWRnZXRfMTVfY2hhcnRcIik7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcpKTtcclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBzZXJpZXM6IFt7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBbMzAsIDMwLCA2MCwgMjUsIDI1LCA0MF1cclxuICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXJlYScsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcclxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHpvb206IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNwYXJrbGluZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHt9LFxyXG4gICAgICAgICAgICBsZWdlbmQ6IHtcclxuICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZpbGw6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdncmFkaWVudCcsXHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxyXG4gICAgICAgICAgICAgICAgZ3JhZGllbnQ6IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ2ZXJ0aWNhbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHNoYWRlSW50ZW5zaXR5OiAwLjUsXHJcbiAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnRUb0NvbG9yczogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgIGludmVyc2VDb2xvcnM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eUZyb206IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eVRvOiAwLjM3NSxcclxuICAgICAgICAgICAgICAgICAgICBzdG9wczogWzI1LCA1MCwgMTAwXSxcclxuICAgICAgICAgICAgICAgICAgICBjb2xvclN0b3BzOiBbXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgIGN1cnZlOiAnc21vb3RoJyxcclxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMyxcclxuICAgICAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bJ2RhbmdlciddXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB4YXhpczoge1xyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCddLFxyXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Zyb250JyxcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMzAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNoQXJyYXk6IDNcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgbWluOiAwLFxyXG4gICAgICAgICAgICAgICAgbWF4OiA2NSxcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3RhdGVzOiB7XHJcbiAgICAgICAgICAgICAgICBub3JtYWw6IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbG93TXVsdGlwbGVEYXRhUG9pbnRzU2VsZWN0aW9uOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiRcIiArIHZhbCArIFwiIHRob3VzYW5kc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVsnZGFuZ2VyJ11dLFxyXG4gICAgICAgICAgICBtYXJrZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVsnZGFuZ2VyJ11dLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydkYW5nZXInXV0sXHJcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogM1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZWxlbWVudCwgb3B0aW9ucyk7XHJcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIF9pbml0TWl4ZWRXaWRnZXQxNiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3RfbWl4ZWRfd2lkZ2V0XzE2X2NoYXJ0XCIpO1xyXG4gICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuY3NzKGVsZW1lbnQsICdoZWlnaHQnKSk7XHJcblxyXG4gICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgc2VyaWVzOiBbNjAsIDUwLCA3NSwgODBdLFxyXG4gICAgICAgICAgICBjaGFydDoge1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAncmFkaWFsQmFyJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIHJhZGlhbEJhcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvbGxvdzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IFwiMzAlXCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd09uOiBcImFsd2F5c1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IFwiNzAwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS03MDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjE4cHhcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IFwiNzAwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAxMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWw6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1RvdGFsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IFwiYm9sZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJ5IGRlZmF1bHQgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBhdmVyYWdlIG9mIGFsbCBzZXJpZXMuIFRoZSBiZWxvdyBpcyBqdXN0IGFuIGV4YW1wbGUgdG8gc2hvdyB0aGUgdXNlIG9mIGN1c3RvbSBmb3JtYXR0ZXIgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzYwJSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHRyYWNrOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMTAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAnMTAwJSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbG9yczogW1xyXG4gICAgICAgICAgICAgICAgS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVsnaW5mbyddLFxyXG4gICAgICAgICAgICAgICAgS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVsnZGFuZ2VyJ10sXHJcbiAgICAgICAgICAgICAgICBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydzdWNjZXNzJ10sXHJcbiAgICAgICAgICAgICAgICBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydwcmltYXJ5J11cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgICAgICAgICBsaW5lQ2FwOiBcInJvdW5kXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxhYmVsczogW1wiUHJvZ3Jlc3NcIl1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcclxuICAgICAgICBjaGFydC5yZW5kZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2luaXRNaXhlZFdpZGdldDE3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF9taXhlZF93aWRnZXRfMTdfY2hhcnRcIik7XHJcbiAgICAgICAgdmFyIGNvbG9yID0gS1RVdGlsLmhhc0F0dHIoZWxlbWVudCwgJ2RhdGEtY29sb3InKSA/IEtUVXRpbC5hdHRyKGVsZW1lbnQsICdkYXRhLWNvbG9yJykgOiAnd2FybmluZyc7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcpKTtcclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBzZXJpZXM6IFt7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBbMzAsIDI1LCA0NSwgMzAsIDU1LCA1NV1cclxuICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXJlYScsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcclxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHpvb206IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNwYXJrbGluZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHt9LFxyXG4gICAgICAgICAgICBsZWdlbmQ6IHtcclxuICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZpbGw6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdzb2xpZCcsXHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0cm9rZToge1xyXG4gICAgICAgICAgICAgICAgY3VydmU6ICdzbW9vdGgnLFxyXG4gICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAzLFxyXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVtjb2xvcl1dXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHhheGlzOiB7XHJcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBbJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJ10sXHJcbiAgICAgICAgICAgICAgICBheGlzQm9yZGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYXhpc1RpY2tzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY3Jvc3NoYWlyczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnZnJvbnQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS0zMDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hBcnJheTogM1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB0b29sdGlwOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHlheGlzOiB7XHJcbiAgICAgICAgICAgICAgICBtaW46IDAsXHJcbiAgICAgICAgICAgICAgICBtYXg6IDYwLFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdGF0ZXM6IHtcclxuICAgICAgICAgICAgICAgIG5vcm1hbDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0b29sdGlwOiB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHk6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiJFwiICsgdmFsICsgXCIgdGhvdXNhbmRzXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddW2NvbG9yXV0sXHJcbiAgICAgICAgICAgIG1hcmtlcnM6IHtcclxuICAgICAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddW2NvbG9yXV0sXHJcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bY29sb3JdXSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcclxuICAgICAgICBjaGFydC5yZW5kZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2luaXRNaXhlZFdpZGdldDE4ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF9taXhlZF93aWRnZXRfMThfY2hhcnRcIik7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcpKTtcclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBzZXJpZXM6IFs3NF0sXHJcbiAgICAgICAgICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdyYWRpYWxCYXInLFxyXG4gICAgICAgICAgICAgICAgb2Zmc2V0WTogMFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgcmFkaWFsQmFyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRBbmdsZTogLTkwLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZEFuZ2xlOiA5MCxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaG9sbG93OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogXCI3MCVcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YUxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93T246IFwiYWx3YXlzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogXCIxM3B4XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBcIjcwMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogLTUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNzAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogXCIzMHB4XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBcIjcwMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogLTQwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB0cmFjazoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVsncHJpbWFyeSddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogJzEwMCUnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydwcmltYXJ5J11dLFxyXG4gICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgIGxpbmVDYXA6IFwicm91bmRcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGFiZWxzOiBbXCJQcm9ncmVzc1wiXVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xyXG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRpbGVzXHJcbiAgICB2YXIgX2luaXRUaWxlc1dpZGdldDEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X3RpbGVzX3dpZGdldF8xX2NoYXJ0XCIpO1xyXG4gICAgICAgIHZhciBjb2xvciA9IEtUVXRpbC5oYXNBdHRyKGVsZW1lbnQsICdkYXRhLWNvbG9yJykgPyBLVFV0aWwuYXR0cihlbGVtZW50LCAnZGF0YS1jb2xvcicpIDogJ3ByaW1hcnknO1xyXG4gICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuY3NzKGVsZW1lbnQsICdoZWlnaHQnKSk7XHJcblxyXG4gICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgc2VyaWVzOiBbe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ05ldCBQcm9maXQnLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogWzIwLCAyMiwgMzAsIDI4LCAyNSwgMjYsIDMwLCAyOCwgMjIsIDI0LCAyNSwgMzVdXHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICBjaGFydDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2FyZWEnLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXHJcbiAgICAgICAgICAgICAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB6b29tOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzcGFya2xpbmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7fSxcclxuICAgICAgICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmaWxsOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnZ3JhZGllbnQnLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcclxuICAgICAgICAgICAgICAgIGdyYWRpZW50OiB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidmVydGljYWxcIixcclxuICAgICAgICAgICAgICAgICAgICBzaGFkZUludGVuc2l0eTogMC41NSxcclxuICAgICAgICAgICAgICAgICAgICBncmFkaWVudFRvQ29sb3JzOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgaW52ZXJzZUNvbG9yczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5RnJvbTogMSxcclxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5VG86IDAuMixcclxuICAgICAgICAgICAgICAgICAgICBzdG9wczogWzI1LCA1MCwgMTAwXSxcclxuICAgICAgICAgICAgICAgICAgICBjb2xvclN0b3BzOiBbXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgIGN1cnZlOiAnc21vb3RoJyxcclxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMyxcclxuICAgICAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bY29sb3JdXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB4YXhpczoge1xyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddLFxyXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Zyb250JyxcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMzAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNoQXJyYXk6IDNcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgbWluOiAwLFxyXG4gICAgICAgICAgICAgICAgbWF4OiAzNyxcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3RhdGVzOiB7XHJcbiAgICAgICAgICAgICAgICBub3JtYWw6IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbG93TXVsdGlwbGVEYXRhUG9pbnRzU2VsZWN0aW9uOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiRcIiArIHZhbCArIFwiIHRob3VzYW5kc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVtjb2xvcl1dLFxyXG4gICAgICAgICAgICBtYXJrZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVtjb2xvcl1dLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddW2NvbG9yXV0sXHJcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogM1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwYWRkaW5nOiB7XHJcbiAgICAgICAgICAgICAgICB0b3A6IDAsXHJcbiAgICAgICAgICAgICAgICBib3R0b206IDBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xyXG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBfaW5pdFRpbGVzV2lkZ2V0MiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3RfdGlsZXNfd2lkZ2V0XzJfY2hhcnRcIik7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcpKTtcclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBzdHJva2VDb2xvciA9IEtUVXRpbC5jaGFuZ2VDb2xvcihLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydkYW5nZXInXSk7XHJcbiAgICAgICAgdmFyIGZpbGxDb2xvciA9IEtUVXRpbC5jaGFuZ2VDb2xvcihLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydkYW5nZXInXSk7XHJcblxyXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBzZXJpZXM6IFt7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBbMTAsIDEwLCAyMCwgMjAsIDEyLCAxMl1cclxuICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXJlYScsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcclxuICAgICAgICAgICAgICAgIHpvb206IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNwYXJrbGluZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogMFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmaWxsOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgIGN1cnZlOiAnc21vb3RoJyxcclxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMyxcclxuICAgICAgICAgICAgICAgIGNvbG9yczogW3N0cm9rZUNvbG9yXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB4YXhpczoge1xyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCddLFxyXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Zyb250JyxcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMzAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNoQXJyYXk6IDNcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHlheGlzOiB7XHJcbiAgICAgICAgICAgICAgICBtaW46IDAsXHJcbiAgICAgICAgICAgICAgICBtYXg6IDIyLFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdGF0ZXM6IHtcclxuICAgICAgICAgICAgICAgIG5vcm1hbDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0b29sdGlwOiB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZpeGVkOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB4OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsICsgXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29sb3JzOiBbZmlsbENvbG9yXSxcclxuICAgICAgICAgICAgbWFya2Vyczoge1xyXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bJ2RhbmdlciddXSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBbc3Ryb2tlQ29sb3JdLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xyXG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBfaW5pdFRpbGVzV2lkZ2V0NSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3RfdGlsZXNfd2lkZ2V0XzVfY2hhcnRcIik7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcpKTtcclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBzZXJpZXM6IFt7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBbMTAsIDE1LCAxOCwgMTRdXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdSZXZlbnVlJyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IFs4LCAxMywgMTYsIDEyXVxyXG4gICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgY2hhcnQ6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdiYXInLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXHJcbiAgICAgICAgICAgICAgICB6b29tOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzcGFya2xpbmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IDIwLFxyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAyMFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgYmFyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uV2lkdGg6IFsnMjUlJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kaW5nU2hhcGU6ICdyb3VuZGVkJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGF0YUxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZmlsbDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogWydzb2xpZCcsICdncmFkaWVudCddLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMC4yNVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB4YXhpczoge1xyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydGZWInLCAnTWFyJywgJ0FwcicsICdNYXknXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgbWluOiAwLFxyXG4gICAgICAgICAgICAgICAgbWF4OiAyMFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdGF0ZXM6IHtcclxuICAgICAgICAgICAgICAgIG5vcm1hbDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0b29sdGlwOiB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZpeGVkOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB4OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsICsgXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBtYXJrZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb2xvcnM6IFsnI2ZmZmZmZicsICcjZmZmZmZmJ11cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcclxuICAgICAgICBjaGFydC5yZW5kZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2luaXRUaWxlc1dpZGdldDggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X3RpbGVzX3dpZGdldF84X2NoYXJ0XCIpO1xyXG4gICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuY3NzKGVsZW1lbnQsICdoZWlnaHQnKSk7XHJcbiAgICAgICAgdmFyIGNvbG9yID0gS1RVdGlsLmhhc0F0dHIoZWxlbWVudCwgJ2RhdGEtY29sb3InKSA/IEtUVXRpbC5hdHRyKGVsZW1lbnQsICdkYXRhLWNvbG9yJykgOiAnZGFuZ2VyJztcclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBzZXJpZXM6IFt7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBbMjAsIDIwLCAzMCwgMTUsIDQwLCAzMF1cclxuICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXJlYScsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDE1MCxcclxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHpvb206IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNwYXJrbGluZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHt9LFxyXG4gICAgICAgICAgICBsZWdlbmQ6IHtcclxuICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZpbGw6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdzb2xpZCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgICAgICAgICBjdXJ2ZTogJ3Ntb290aCcsXHJcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDMsXHJcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddW2NvbG9yXV1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeGF4aXM6IHtcclxuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nXSxcclxuICAgICAgICAgICAgICAgIGF4aXNCb3JkZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBheGlzVGlja3M6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjcm9zc2hhaXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdmcm9udCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTMwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGFzaEFycmF5OiAzXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeWF4aXM6IHtcclxuICAgICAgICAgICAgICAgIG1pbjogMCxcclxuICAgICAgICAgICAgICAgIG1heDogNDUsXHJcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktNTAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0YXRlczoge1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBhbGxvd011bHRpcGxlRGF0YVBvaW50c1NlbGVjdGlvbjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgeToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIkXCIgKyB2YWwgKyBcIiB0aG91c2FuZHNcIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bY29sb3JdXSxcclxuICAgICAgICAgICAgbWFya2Vyczoge1xyXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bY29sb3JdXSxcclxuICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVtjb2xvcl1dLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDNcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGFkZGluZzoge1xyXG4gICAgICAgICAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgICAgICAgICAgYm90dG9tOiAwXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcclxuICAgICAgICBjaGFydC5yZW5kZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2luaXRUaWxlc1dpZGdldDE3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF90aWxlc193aWRnZXRfMTdfY2hhcnRcIik7XHJcblxyXG4gICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgc2VyaWVzOiBbe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ05ldCBQcm9maXQnLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogWzEwLCAyMCwgMjAsIDhdXHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICBjaGFydDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2FyZWEnLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxNTAsXHJcbiAgICAgICAgICAgICAgICB6b29tOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzcGFya2xpbmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogMCxcclxuICAgICAgICAgICAgICAgICAgICBib3R0b206IDBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGF0YUxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZmlsbDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ3NvbGlkJyxcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3Ryb2tlOiB7XHJcbiAgICAgICAgICAgICAgICBjdXJ2ZTogJ3Ntb290aCcsXHJcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDMsXHJcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydzdWNjZXNzJ11dXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHhheGlzOiB7XHJcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBbJ0ZlYicsICdNYXInLCAnQXByJywgJ01heSddLFxyXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Zyb250JyxcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMzAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNoQXJyYXk6IDNcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHlheGlzOiB7XHJcbiAgICAgICAgICAgICAgICBtaW46IDAsXHJcbiAgICAgICAgICAgICAgICBtYXg6IDIyLFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdGF0ZXM6IHtcclxuICAgICAgICAgICAgICAgIG5vcm1hbDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0b29sdGlwOiB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZpeGVkOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB4OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsICsgXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29sb3JzOiBbS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2xpZ2h0J11bJ3N1Y2Nlc3MnXV0sXHJcbiAgICAgICAgICAgIG1hcmtlcnM6IHtcclxuICAgICAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydsaWdodCddWydzdWNjZXNzJ11dLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddWydzdWNjZXNzJ11dLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IDNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xyXG4gICAgICAgIGNoYXJ0LnJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBfaW5pdFRpbGVzV2lkZ2V0MjAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X3RpbGVzX3dpZGdldF8yMF9jaGFydFwiKTtcclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgICBzZXJpZXM6IFs3NF0sXHJcbiAgICAgICAgICAgIGNoYXJ0OiB7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDI1MCxcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdyYWRpYWxCYXInLFxyXG4gICAgICAgICAgICAgICAgb2Zmc2V0WTogMFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwbG90T3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgcmFkaWFsQmFyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRBbmdsZTogLTkwLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZEFuZ2xlOiA5MCxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaG9sbG93OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogXCI3MCVcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YUxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93T246IFwiYWx3YXlzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogXCIxM3B4XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBcIjQwMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogLTUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS0zMDAnXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydpbnZlcnNlJ11bJ3ByaW1hcnknXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjIycHhcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6IFwiYm9sZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogLTQwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB0cmFjazoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBLVFV0aWwuY2hhbmdlQ29sb3IoS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ3RoZW1lJ11bJ2Jhc2UnXVsncHJpbWFyeSddLCAtNyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiAnMTAwJSdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydpbnZlcnNlJ11bJ3ByaW1hcnknXV0sXHJcbiAgICAgICAgICAgIHN0cm9rZToge1xyXG4gICAgICAgICAgICAgICAgbGluZUNhcDogXCJyb3VuZFwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsYWJlbHM6IFtcIlByb2dyZXNzXCJdXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZWxlbWVudCwgb3B0aW9ucyk7XHJcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIF9pbml0TWl4ZWRXaWRnZXQyMSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3RfdGlsZXNfd2lkZ2V0XzIxX2NoYXJ0XCIpO1xyXG4gICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuY3NzKGVsZW1lbnQsICdoZWlnaHQnKSk7XHJcbiAgICAgICAgdmFyIGNvbG9yID0gS1RVdGlsLmhhc0F0dHIoZWxlbWVudCwgJ2RhdGEtY29sb3InKSA/IEtUVXRpbC5hdHRyKGVsZW1lbnQsICdkYXRhLWNvbG9yJykgOiAnaW5mbyc7XHJcblxyXG4gICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgc2VyaWVzOiBbe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ05ldCBQcm9maXQnLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogWzIwLCAyMCwgMzAsIDE1LCAzMCwgMzBdXHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICBjaGFydDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2FyZWEnLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXHJcbiAgICAgICAgICAgICAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB6b29tOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzcGFya2xpbmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7fSxcclxuICAgICAgICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmaWxsOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgIGN1cnZlOiAnc21vb3RoJyxcclxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMyxcclxuICAgICAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bY29sb3JdXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB4YXhpczoge1xyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCddLFxyXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Zyb250JyxcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMzAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNoQXJyYXk6IDNcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgbWluOiAwLFxyXG4gICAgICAgICAgICAgICAgbWF4OiAzMixcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3RhdGVzOiB7XHJcbiAgICAgICAgICAgICAgICBub3JtYWw6IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbG93TXVsdGlwbGVEYXRhUG9pbnRzU2VsZWN0aW9uOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiRcIiArIHZhbCArIFwiIHRob3VzYW5kc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVtjb2xvcl1dLFxyXG4gICAgICAgICAgICBtYXJrZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVtjb2xvcl1dLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddW2NvbG9yXV0sXHJcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogM1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZWxlbWVudCwgb3B0aW9ucyk7XHJcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIF9pbml0TWl4ZWRXaWRnZXQyMyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3RfdGlsZXNfd2lkZ2V0XzIzX2NoYXJ0XCIpO1xyXG4gICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuY3NzKGVsZW1lbnQsICdoZWlnaHQnKSk7XHJcbiAgICAgICAgdmFyIGNvbG9yID0gS1RVdGlsLmhhc0F0dHIoZWxlbWVudCwgJ2RhdGEtY29sb3InKSA/IEtUVXRpbC5hdHRyKGVsZW1lbnQsICdkYXRhLWNvbG9yJykgOiAncHJpbWFyeSc7XHJcblxyXG4gICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgc2VyaWVzOiBbe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogJ05ldCBQcm9maXQnLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogWzE1LCAyNSwgMTUsIDQwLCAyMCwgNTBdXHJcbiAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICBjaGFydDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2FyZWEnLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxMjUsXHJcbiAgICAgICAgICAgICAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB6b29tOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzcGFya2xpbmU6IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7fSxcclxuICAgICAgICAgICAgbGVnZW5kOiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmaWxsOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnc29saWQnLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgIGN1cnZlOiAnc21vb3RoJyxcclxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMyxcclxuICAgICAgICAgICAgICAgIGNvbG9yczogW0tUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWyd0aGVtZSddWydiYXNlJ11bY29sb3JdXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB4YXhpczoge1xyXG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydKYW4sIDIwMjAnLCAnRmViLCAyMDIwJywgJ01hciwgMjAyMCcsICdBcHIsIDIwMjAnLCAnTWF5LCAyMDIwJywgJ0p1biwgMjAyMCddLFxyXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsnZ3JheSddWydncmF5LTUwMCddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Zyb250JyxcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IEtUQXBwLmdldFNldHRpbmdzKClbJ2NvbG9ycyddWydncmF5J11bJ2dyYXktMzAwJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNoQXJyYXk6IDNcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBLVEFwcC5nZXRTZXR0aW5ncygpWydmb250LWZhbWlseSddXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB5YXhpczoge1xyXG4gICAgICAgICAgICAgICAgbWluOiAwLFxyXG4gICAgICAgICAgICAgICAgbWF4OiA1NSxcclxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnY29sb3JzJ11bJ2dyYXknXVsnZ3JheS01MDAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogS1RBcHAuZ2V0U2V0dGluZ3MoKVsnZm9udC1mYW1pbHknXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3RhdGVzOiB7XHJcbiAgICAgICAgICAgICAgICBub3JtYWw6IHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbG93TXVsdGlwbGVEYXRhUG9pbnRzU2VsZWN0aW9uOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6IEtUQXBwLmdldFNldHRpbmdzKClbJ2ZvbnQtZmFtaWx5J11cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiRcIiArIHZhbCArIFwiIHRob3VzYW5kc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVtjb2xvcl1dLFxyXG4gICAgICAgICAgICBtYXJrZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnbGlnaHQnXVtjb2xvcl1dLFxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IFtLVEFwcC5nZXRTZXR0aW5ncygpWydjb2xvcnMnXVsndGhlbWUnXVsnYmFzZSddW2NvbG9yXV0sXHJcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogM1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGNoYXJ0ID0gbmV3IEFwZXhDaGFydHMoZWxlbWVudCwgb3B0aW9ucyk7XHJcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRm9ybXNcclxuICAgIHZhciBfaW5pdEZvcm1zV2lkZ2V0MSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBpbnB1dEVsID0gS1RVdGlsLmdldEJ5SWQoXCJrdF9mb3Jtc193aWRnZXRfMV9pbnB1dFwiKTtcclxuXHJcbiAgICAgICAgaWYgKGlucHV0RWwpIHtcclxuICAgICAgICAgICAgYXV0b3NpemUoaW5wdXRFbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHZhciBfaW5pdEZvcm1zV2lkZ2V0MiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBmb3JtRWwgPSBLVFV0aWwuZ2V0QnlJZChcImt0X2Zvcm1zX3dpZGdldF8yX2Zvcm1cIik7XHJcbiAgICAgICAgdmFyIGVkaXRvcklkID0gJ2t0X2Zvcm1zX3dpZGdldF8yX2VkaXRvcic7XHJcblxyXG4gICAgICAgIC8vIGluaXQgZWRpdG9yXHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIG1vZHVsZXM6IHtcclxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXI6IFwiI2t0X2Zvcm1zX3dpZGdldF8yX2VkaXRvcl90b29sYmFyXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdUeXBlIG1lc3NhZ2UuLi4nLFxyXG4gICAgICAgICAgICB0aGVtZTogJ3Nub3cnXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKCFmb3JtRWwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSW5pdCBlZGl0b3JcclxuICAgICAgICB2YXIgZWRpdG9yT2JqID0gbmV3IFF1aWxsKCcjJyArIGVkaXRvcklkLCBvcHRpb25zKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2luaXRGb3Jtc1dpZGdldDMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaW5wdXRFbCA9IEtUVXRpbC5nZXRCeUlkKFwia3RfZm9ybXNfd2lkZ2V0XzNfaW5wdXRcIik7XHJcblxyXG4gICAgICAgIGlmIChpbnB1dEVsKSB7XHJcbiAgICAgICAgICAgIGF1dG9zaXplKGlucHV0RWwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2luaXRGb3Jtc1dpZGdldDQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaW5wdXRFbCA9IEtUVXRpbC5nZXRCeUlkKFwia3RfZm9ybXNfd2lkZ2V0XzRfaW5wdXRcIik7XHJcblxyXG4gICAgICAgIGlmIChpbnB1dEVsKSB7XHJcbiAgICAgICAgICAgIGF1dG9zaXplKGlucHV0RWwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2luaXRGb3Jtc1dpZGdldDUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaW5wdXRFbCA9IEtUVXRpbC5nZXRCeUlkKFwia3RfZm9ybXNfd2lkZ2V0XzVfaW5wdXRcIik7XHJcblxyXG4gICAgICAgIGlmIChpbnB1dEVsKSB7XHJcbiAgICAgICAgICAgIGF1dG9zaXplKGlucHV0RWwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2luaXRGb3Jtc1dpZGdldDYgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaW5wdXRFbCA9IEtUVXRpbC5nZXRCeUlkKFwia3RfZm9ybXNfd2lkZ2V0XzZfaW5wdXRcIik7XHJcblxyXG4gICAgICAgIGlmIChpbnB1dEVsKSB7XHJcbiAgICAgICAgICAgIGF1dG9zaXplKGlucHV0RWwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2luaXRGb3Jtc1dpZGdldDcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaW5wdXRFbCA9IEtUVXRpbC5nZXRCeUlkKFwia3RfZm9ybXNfd2lkZ2V0XzdfaW5wdXRcIik7XHJcblxyXG4gICAgICAgIGlmIChpbnB1dEVsKSB7XHJcbiAgICAgICAgICAgIGF1dG9zaXplKGlucHV0RWwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2luaXRGb3Jtc1dpZGdldDggPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaW5wdXRFbCA9IEtUVXRpbC5nZXRCeUlkKFwia3RfZm9ybXNfd2lkZ2V0XzhfaW5wdXRcIik7XHJcblxyXG4gICAgICAgIGlmIChpbnB1dEVsKSB7XHJcbiAgICAgICAgICAgIGF1dG9zaXplKGlucHV0RWwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2luaXRGb3Jtc1dpZGdldDkgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaW5wdXRFbCA9IEtUVXRpbC5nZXRCeUlkKFwia3RfZm9ybXNfd2lkZ2V0XzlfaW5wdXRcIik7XHJcblxyXG4gICAgICAgIGlmIChpbnB1dEVsKSB7XHJcbiAgICAgICAgICAgIGF1dG9zaXplKGlucHV0RWwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgX2luaXRGb3Jtc1dpZGdldDEwID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGlucHV0RWwgPSBLVFV0aWwuZ2V0QnlJZChcImt0X2Zvcm1zX3dpZGdldF8xMF9pbnB1dFwiKTtcclxuXHJcbiAgICAgICAgaWYgKGlucHV0RWwpIHtcclxuICAgICAgICAgICAgYXV0b3NpemUoaW5wdXRFbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHZhciBfaW5pdEZvcm1zV2lkZ2V0MTEgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaW5wdXRFbCA9IEtUVXRpbC5nZXRCeUlkKFwia3RfZm9ybXNfd2lkZ2V0XzExX2lucHV0XCIpO1xyXG5cclxuICAgICAgICBpZiAoaW5wdXRFbCkge1xyXG4gICAgICAgICAgICBhdXRvc2l6ZShpbnB1dEVsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIF9pbml0Rm9ybXNXaWRnZXQxMiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBpbnB1dEVsID0gS1RVdGlsLmdldEJ5SWQoXCJrdF9mb3Jtc193aWRnZXRfMTJfaW5wdXRcIik7XHJcblxyXG4gICAgICAgIGlmIChpbnB1dEVsKSB7XHJcbiAgICAgICAgICAgIGF1dG9zaXplKGlucHV0RWwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBBZHZhbmNlIFRhYmxlc1xyXG4gICAgdmFyIF9pbml0QWR2YW5jZWRUYWJsZUdyb3VwU2VsZWN0aW9uID0gZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gICAgICAgIHZhciB0YWJsZSA9IEtUVXRpbC5nZXRCeUlkKGVsZW1lbnQpO1xyXG5cclxuICAgICAgICBpZiAoIXRhYmxlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIEtUVXRpbC5vbih0YWJsZSwgJ3RoZWFkIHRoIC5jaGVja2JveCA+IGlucHV0JywgJ2NoYW5nZScsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGVja2JveGVzID0gS1RVdGlsLmZpbmRBbGwodGFibGUsICd0Ym9keSB0ZCAuY2hlY2tib3ggPiBpbnB1dCcpO1xyXG5cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNoZWNrYm94ZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNoZWNrYm94ZXNbaV0uY2hlY2tlZCA9IHRoaXMuY2hlY2tlZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBfaW5pdFByaWNlU2xpZGVyID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICAvLyBpbml0IHNsaWRlclxyXG4gICAgICAgIHZhciBzbGlkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50KTtcclxuICAgICAgICBpZiAodHlwZW9mIHNsaWRlciA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFzbGlkZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbm9VaVNsaWRlci5jcmVhdGUoc2xpZGVyLCB7XHJcbiAgICAgICAgICAgIHN0YXJ0OiBbMjAsIDYwXSxcclxuICAgICAgICAgICAgY29ubmVjdDogdHJ1ZSxcclxuICAgICAgICAgICAgcmFuZ2U6IHtcclxuICAgICAgICAgICAgICAgICdtaW4nOiAwLFxyXG4gICAgICAgICAgICAgICAgJ21heCc6IDEwMFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRWR1Y2F0aW9uIFNob3cgTW9yZSBEZW1vXHJcbiAgICB2YXIgX2luaXRFZHVjYXRpb25TaG93TW9yZUJ0biA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBlbCA9IEtUVXRpbC5nZXRCeUlkKCdrdF9hcHBfZWR1Y2F0aW9uX21vcmVfZmVlZHNfYnRuJyk7XHJcblxyXG4gICAgICAgIGlmICghZWwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgS1RVdGlsLmFkZEV2ZW50KGVsLCAnY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2VkdWNhdGlvbi1tb3JlLWZlZWRzJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWVsZW1lbnRzIHx8IGVsZW1lbnRzLmxlbmd0aCA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIEtUVXRpbC5idG5XYWl0KGVsLCAnc3Bpbm5lciBzcGlubmVyLXJpZ2h0IHNwaW5uZXItd2hpdGUgcHItMTUnLCAnUGxlYXNlIHdhaXQuLi4nLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuYnRuUmVsZWFzZShlbCk7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3MoZWwsICdkLW5vbmUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgaXRlbTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZWxlbWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtID0gZWxlbWVudHNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUNsYXNzKGVsZW1lbnRzW2ldLCAnZC1ub25lJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0YXJlYSA9IEtUVXRpbC5maW5kKGl0ZW0sICd0ZXh0YXJlYScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0YXJlYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvc2l6ZSh0ZXh0YXJlYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIEtUVXRpbC5zY3JvbGxUbyhpdGVtKTtcclxuICAgICAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHVibGljIG1ldGhvZHNcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBHZW5lcmFsIENvbnRyb2xzXHJcbiAgICAgICAgICAgIF9pbml0RGF0ZXJhbmdlcGlja2VyKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBTdGF0cyBXaWRnZXRzXHJcbiAgICAgICAgICAgIF9pbml0U3RhdHNXaWRnZXQ3KCk7XHJcbiAgICAgICAgICAgIF9pbml0U3RhdHNXaWRnZXQ4KCk7XHJcbiAgICAgICAgICAgIF9pbml0U3RhdHNXaWRnZXQ5KCk7XHJcbiAgICAgICAgICAgIF9pbml0U3RhdHNXaWRnZXQxMCgpO1xyXG4gICAgICAgICAgICBfaW5pdFN0YXRzV2lkZ2V0MTEoKTtcclxuICAgICAgICAgICAgX2luaXRTdGF0c1dpZGdldDEyKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBDaGFydHMgV2lkZ2V0c1xyXG4gICAgICAgICAgICBfaW5pdENoYXJ0c1dpZGdldDEoKTtcclxuICAgICAgICAgICAgX2luaXRDaGFydHNXaWRnZXQyKCk7XHJcbiAgICAgICAgICAgIF9pbml0Q2hhcnRzV2lkZ2V0MygpO1xyXG4gICAgICAgICAgICBfaW5pdENoYXJ0c1dpZGdldDQoKTtcclxuICAgICAgICAgICAgX2luaXRDaGFydHNXaWRnZXQ1KCk7XHJcbiAgICAgICAgICAgIF9pbml0Q2hhcnRzV2lkZ2V0NigpO1xyXG4gICAgICAgICAgICBfaW5pdENoYXJ0c1dpZGdldDcoKTtcclxuICAgICAgICAgICAgX2luaXRDaGFydHNXaWRnZXQ4KCk7XHJcbiAgICAgICAgICAgIF9pbml0Q2hhcnRzV2lkZ2V0OSgpO1xyXG5cclxuICAgICAgICAgICAgLy8gTWl4ZWQgV2lkZ2V0c1xyXG4gICAgICAgICAgICBfaW5pdE1peGVkV2lkZ2V0MSgpO1xyXG4gICAgICAgICAgICBfaW5pdE1peGVkV2lkZ2V0MigpO1xyXG4gICAgICAgICAgICBfaW5pdE1peGVkV2lkZ2V0MygpO1xyXG4gICAgICAgICAgICBfaW5pdE1peGVkV2lkZ2V0NCgpO1xyXG4gICAgICAgICAgICBfaW5pdE1peGVkV2lkZ2V0NSgpO1xyXG4gICAgICAgICAgICBfaW5pdE1peGVkV2lkZ2V0NigpO1xyXG4gICAgICAgICAgICBfaW5pdE1peGVkV2lkZ2V0MTMoKTtcclxuICAgICAgICAgICAgX2luaXRNaXhlZFdpZGdldDE0KCk7XHJcbiAgICAgICAgICAgIF9pbml0TWl4ZWRXaWRnZXQxNSgpO1xyXG4gICAgICAgICAgICBfaW5pdE1peGVkV2lkZ2V0MTYoKTtcclxuICAgICAgICAgICAgX2luaXRNaXhlZFdpZGdldDE3KCk7XHJcbiAgICAgICAgICAgIF9pbml0TWl4ZWRXaWRnZXQxOCgpO1xyXG5cclxuICAgICAgICAgICAgLy8gVGlsZXMgV2lkZ2V0c1xyXG4gICAgICAgICAgICBfaW5pdFRpbGVzV2lkZ2V0MSgpO1xyXG4gICAgICAgICAgICBfaW5pdFRpbGVzV2lkZ2V0MigpO1xyXG4gICAgICAgICAgICBfaW5pdFRpbGVzV2lkZ2V0NSgpO1xyXG4gICAgICAgICAgICBfaW5pdFRpbGVzV2lkZ2V0OCgpO1xyXG4gICAgICAgICAgICBfaW5pdFRpbGVzV2lkZ2V0MTcoKTtcclxuICAgICAgICAgICAgX2luaXRUaWxlc1dpZGdldDIwKCk7XHJcbiAgICAgICAgICAgIF9pbml0TWl4ZWRXaWRnZXQyMSgpO1xyXG4gICAgICAgICAgICBfaW5pdE1peGVkV2lkZ2V0MjMoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRhYmxlIFdpZGdldHNcclxuICAgICAgICAgICAgX2luaXRBZHZhbmNlZFRhYmxlR3JvdXBTZWxlY3Rpb24oJ2t0X2FkdmFuY2VfdGFibGVfd2lkZ2V0XzEnKTtcclxuICAgICAgICAgICAgX2luaXRBZHZhbmNlZFRhYmxlR3JvdXBTZWxlY3Rpb24oJ2t0X2FkdmFuY2VfdGFibGVfd2lkZ2V0XzInKTtcclxuICAgICAgICAgICAgX2luaXRBZHZhbmNlZFRhYmxlR3JvdXBTZWxlY3Rpb24oJ2t0X2FkdmFuY2VfdGFibGVfd2lkZ2V0XzMnKTtcclxuICAgICAgICAgICAgX2luaXRBZHZhbmNlZFRhYmxlR3JvdXBTZWxlY3Rpb24oJ2t0X2FkdmFuY2VfdGFibGVfd2lkZ2V0XzQnKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEZvcm0gV2lkZ2V0c1xyXG4gICAgICAgICAgICBfaW5pdFByaWNlU2xpZGVyKCdrdF9wcmljZV9zbGlkZXInKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEZvcm1zIHdpZGdldHNcclxuICAgICAgICAgICAgX2luaXRGb3Jtc1dpZGdldDEoKTtcclxuICAgICAgICAgICAgX2luaXRGb3Jtc1dpZGdldDIoKTtcclxuICAgICAgICAgICAgX2luaXRGb3Jtc1dpZGdldDMoKTtcclxuICAgICAgICAgICAgX2luaXRGb3Jtc1dpZGdldDQoKTtcclxuICAgICAgICAgICAgX2luaXRGb3Jtc1dpZGdldDUoKTtcclxuICAgICAgICAgICAgX2luaXRGb3Jtc1dpZGdldDYoKTtcclxuICAgICAgICAgICAgX2luaXRGb3Jtc1dpZGdldDcoKTtcclxuICAgICAgICAgICAgX2luaXRGb3Jtc1dpZGdldDgoKTtcclxuICAgICAgICAgICAgX2luaXRGb3Jtc1dpZGdldDkoKTtcclxuICAgICAgICAgICAgX2luaXRGb3Jtc1dpZGdldDEwKCk7XHJcbiAgICAgICAgICAgIF9pbml0Rm9ybXNXaWRnZXQxMSgpO1xyXG5cclxuICAgICAgICAgICAgLy8gRWR1Y2F0aW9uIEFwcFxyXG4gICAgICAgICAgICBfaW5pdEVkdWNhdGlvblNob3dNb3JlQnRuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KCk7XHJcblxyXG4vLyBXZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEtUV2lkZ2V0cztcclxufVxyXG5cclxualF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcbiAgICBLVFdpZGdldHMuaW5pdCgpO1xyXG59KTtcclxuIl0sIm5hbWVzIjpbIktUV2lkZ2V0cyIsIl9pbml0RGF0ZXJhbmdlcGlja2VyIiwiJCIsImxlbmd0aCIsInBpY2tlciIsInN0YXJ0IiwibW9tZW50IiwiZW5kIiwiY2IiLCJsYWJlbCIsInRpdGxlIiwicmFuZ2UiLCJmb3JtYXQiLCJodG1sIiwiZGF0ZXJhbmdlcGlja2VyIiwiZGlyZWN0aW9uIiwiS1RVdGlsIiwiaXNSVEwiLCJzdGFydERhdGUiLCJlbmREYXRlIiwib3BlbnMiLCJhcHBseUNsYXNzIiwiY2FuY2VsQ2xhc3MiLCJyYW5nZXMiLCJzdWJ0cmFjdCIsInN0YXJ0T2YiLCJlbmRPZiIsIl9pbml0U3RhdHNXaWRnZXQ3IiwiZWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJvcHRpb25zIiwic2VyaWVzIiwibmFtZSIsImRhdGEiLCJjaGFydCIsInR5cGUiLCJoZWlnaHQiLCJ0b29sYmFyIiwic2hvdyIsInpvb20iLCJlbmFibGVkIiwic3BhcmtsaW5lIiwicGxvdE9wdGlvbnMiLCJsZWdlbmQiLCJkYXRhTGFiZWxzIiwiZmlsbCIsIm9wYWNpdHkiLCJzdHJva2UiLCJjdXJ2ZSIsIndpZHRoIiwiY29sb3JzIiwiS1RBcHAiLCJnZXRTZXR0aW5ncyIsInhheGlzIiwiY2F0ZWdvcmllcyIsImF4aXNCb3JkZXIiLCJheGlzVGlja3MiLCJsYWJlbHMiLCJzdHlsZSIsImZvbnRTaXplIiwiZm9udEZhbWlseSIsImNyb3NzaGFpcnMiLCJwb3NpdGlvbiIsImNvbG9yIiwiZGFzaEFycmF5IiwidG9vbHRpcCIsImZvcm1hdHRlciIsInVuZGVmaW5lZCIsIm9mZnNldFkiLCJ5YXhpcyIsInN0YXRlcyIsIm5vcm1hbCIsImZpbHRlciIsInZhbHVlIiwiaG92ZXIiLCJhY3RpdmUiLCJhbGxvd011bHRpcGxlRGF0YVBvaW50c1NlbGVjdGlvbiIsInkiLCJ2YWwiLCJtYXJrZXJzIiwic3Ryb2tlQ29sb3IiLCJzdHJva2VXaWR0aCIsIkFwZXhDaGFydHMiLCJyZW5kZXIiLCJfaW5pdFN0YXRzV2lkZ2V0OCIsIl9pbml0U3RhdHNXaWRnZXQ5IiwiX2luaXRTdGF0c1dpZGdldDEwIiwicGFyc2VJbnQiLCJjc3MiLCJoYXNBdHRyIiwiYXR0ciIsIm1pbiIsIm1heCIsIl9pbml0U3RhdHNXaWRnZXQxMSIsIl9pbml0U3RhdHNXaWRnZXQxMiIsIl9pbml0Q2hhcnRzV2lkZ2V0MSIsImJhciIsImhvcml6b250YWwiLCJjb2x1bW5XaWR0aCIsImVuZGluZ1NoYXBlIiwiZ3JpZCIsImJvcmRlckNvbG9yIiwic3Ryb2tlRGFzaEFycmF5IiwibGluZXMiLCJfaW5pdENoYXJ0c1dpZGdldDIiLCJfaW5pdENoYXJ0c1dpZGdldDMiLCJfaW5pdENoYXJ0c1dpZGdldDQiLCJfaW5pdENoYXJ0c1dpZGdldDUiLCJzdGFja2VkIiwiX2luaXRDaGFydHNXaWRnZXQ2IiwicGFkZGluZyIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsIl9pbml0Q2hhcnRzV2lkZ2V0NyIsIl9pbml0Q2hhcnRzV2lkZ2V0OCIsIngiLCJvZmZzZXRYIiwiX2luaXRDaGFydHNXaWRnZXQ5IiwiX2luaXRNaXhlZFdpZGdldDEiLCJkcm9wU2hhZG93IiwiZW5hYmxlZE9uU2VyaWVzIiwiYmx1ciIsIm1hcmtlciIsIl9pbml0TWl4ZWRXaWRnZXQyIiwiX2luaXRNaXhlZFdpZGdldDMiLCJfaW5pdE1peGVkV2lkZ2V0NCIsIl9pbml0TWl4ZWRXaWRnZXQ1IiwiX2luaXRNaXhlZFdpZGdldDYiLCJfaW5pdE1peGVkV2lkZ2V0MTMiLCJfaW5pdE1peGVkV2lkZ2V0MTQiLCJyYWRpYWxCYXIiLCJob2xsb3ciLCJtYXJnaW4iLCJzaXplIiwic2hvd09uIiwiZm9udFdlaWdodCIsInRyYWNrIiwiYmFja2dyb3VuZCIsImxpbmVDYXAiLCJfaW5pdE1peGVkV2lkZ2V0MTUiLCJncmFkaWVudCIsInNoYWRlSW50ZW5zaXR5IiwiZ3JhZGllbnRUb0NvbG9ycyIsImludmVyc2VDb2xvcnMiLCJvcGFjaXR5RnJvbSIsIm9wYWNpdHlUbyIsInN0b3BzIiwiY29sb3JTdG9wcyIsIl9pbml0TWl4ZWRXaWRnZXQxNiIsInRvdGFsIiwidyIsIl9pbml0TWl4ZWRXaWRnZXQxNyIsIl9pbml0TWl4ZWRXaWRnZXQxOCIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsIl9pbml0VGlsZXNXaWRnZXQxIiwiX2luaXRUaWxlc1dpZGdldDIiLCJjaGFuZ2VDb2xvciIsImZpbGxDb2xvciIsImZpeGVkIiwiX2luaXRUaWxlc1dpZGdldDUiLCJfaW5pdFRpbGVzV2lkZ2V0OCIsIl9pbml0VGlsZXNXaWRnZXQxNyIsIl9pbml0VGlsZXNXaWRnZXQyMCIsIl9pbml0TWl4ZWRXaWRnZXQyMSIsIl9pbml0TWl4ZWRXaWRnZXQyMyIsIl9pbml0Rm9ybXNXaWRnZXQxIiwiaW5wdXRFbCIsImdldEJ5SWQiLCJhdXRvc2l6ZSIsIl9pbml0Rm9ybXNXaWRnZXQyIiwiZm9ybUVsIiwiZWRpdG9ySWQiLCJtb2R1bGVzIiwiY29udGFpbmVyIiwicGxhY2Vob2xkZXIiLCJ0aGVtZSIsImVkaXRvck9iaiIsIlF1aWxsIiwiX2luaXRGb3Jtc1dpZGdldDMiLCJfaW5pdEZvcm1zV2lkZ2V0NCIsIl9pbml0Rm9ybXNXaWRnZXQ1IiwiX2luaXRGb3Jtc1dpZGdldDYiLCJfaW5pdEZvcm1zV2lkZ2V0NyIsIl9pbml0Rm9ybXNXaWRnZXQ4IiwiX2luaXRGb3Jtc1dpZGdldDkiLCJfaW5pdEZvcm1zV2lkZ2V0MTAiLCJfaW5pdEZvcm1zV2lkZ2V0MTEiLCJfaW5pdEZvcm1zV2lkZ2V0MTIiLCJfaW5pdEFkdmFuY2VkVGFibGVHcm91cFNlbGVjdGlvbiIsInRhYmxlIiwib24iLCJlIiwiY2hlY2tib3hlcyIsImZpbmRBbGwiLCJpIiwibGVuIiwiY2hlY2tlZCIsIl9pbml0UHJpY2VTbGlkZXIiLCJzbGlkZXIiLCJub1VpU2xpZGVyIiwiY3JlYXRlIiwiY29ubmVjdCIsIl9pbml0RWR1Y2F0aW9uU2hvd01vcmVCdG4iLCJlbCIsImFkZEV2ZW50IiwiZWxlbWVudHMiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiYnRuV2FpdCIsInNldFRpbWVvdXQiLCJidG5SZWxlYXNlIiwiYWRkQ2xhc3MiLCJpdGVtIiwicmVtb3ZlQ2xhc3MiLCJ0ZXh0YXJlYSIsImZpbmQiLCJzY3JvbGxUbyIsImluaXQiLCJtb2R1bGUiLCJleHBvcnRzIiwialF1ZXJ5IiwicmVhZHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/metronic/js/pages/widgets.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/metronic/js/pages/widgets.js");
/******/ 	
/******/ })()
;