/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@fullcalendar/core/main.esm.js":
/*!*****************************************************!*\
  !*** ./node_modules/@fullcalendar/core/main.esm.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Calendar\": () => (/* binding */ Calendar),\n/* harmony export */   \"Component\": () => (/* binding */ Component),\n/* harmony export */   \"ComponentContext\": () => (/* binding */ ComponentContext),\n/* harmony export */   \"DateComponent\": () => (/* binding */ DateComponent),\n/* harmony export */   \"DateEnv\": () => (/* binding */ DateEnv),\n/* harmony export */   \"DateProfileGenerator\": () => (/* binding */ DateProfileGenerator),\n/* harmony export */   \"DayHeader\": () => (/* binding */ DayHeader),\n/* harmony export */   \"DaySeries\": () => (/* binding */ DaySeries),\n/* harmony export */   \"DayTable\": () => (/* binding */ DayTable),\n/* harmony export */   \"ElementDragging\": () => (/* binding */ ElementDragging),\n/* harmony export */   \"ElementScrollController\": () => (/* binding */ ElementScrollController),\n/* harmony export */   \"EmitterMixin\": () => (/* binding */ EmitterMixin),\n/* harmony export */   \"EventApi\": () => (/* binding */ EventApi),\n/* harmony export */   \"FgEventRenderer\": () => (/* binding */ FgEventRenderer),\n/* harmony export */   \"FillRenderer\": () => (/* binding */ FillRenderer),\n/* harmony export */   \"Interaction\": () => (/* binding */ Interaction),\n/* harmony export */   \"Mixin\": () => (/* binding */ Mixin),\n/* harmony export */   \"NamedTimeZoneImpl\": () => (/* binding */ NamedTimeZoneImpl),\n/* harmony export */   \"PositionCache\": () => (/* binding */ PositionCache),\n/* harmony export */   \"ScrollComponent\": () => (/* binding */ ScrollComponent),\n/* harmony export */   \"ScrollController\": () => (/* binding */ ScrollController),\n/* harmony export */   \"Slicer\": () => (/* binding */ Slicer),\n/* harmony export */   \"Splitter\": () => (/* binding */ Splitter),\n/* harmony export */   \"Theme\": () => (/* binding */ Theme),\n/* harmony export */   \"View\": () => (/* binding */ View),\n/* harmony export */   \"WindowScrollController\": () => (/* binding */ WindowScrollController),\n/* harmony export */   \"addDays\": () => (/* binding */ addDays),\n/* harmony export */   \"addDurations\": () => (/* binding */ addDurations),\n/* harmony export */   \"addMs\": () => (/* binding */ addMs),\n/* harmony export */   \"addWeeks\": () => (/* binding */ addWeeks),\n/* harmony export */   \"allowContextMenu\": () => (/* binding */ allowContextMenu),\n/* harmony export */   \"allowSelection\": () => (/* binding */ allowSelection),\n/* harmony export */   \"appendToElement\": () => (/* binding */ appendToElement),\n/* harmony export */   \"applyAll\": () => (/* binding */ applyAll),\n/* harmony export */   \"applyMutationToEventStore\": () => (/* binding */ applyMutationToEventStore),\n/* harmony export */   \"applyStyle\": () => (/* binding */ applyStyle),\n/* harmony export */   \"applyStyleProp\": () => (/* binding */ applyStyleProp),\n/* harmony export */   \"asRoughMinutes\": () => (/* binding */ asRoughMinutes),\n/* harmony export */   \"asRoughMs\": () => (/* binding */ asRoughMs),\n/* harmony export */   \"asRoughSeconds\": () => (/* binding */ asRoughSeconds),\n/* harmony export */   \"buildGotoAnchorHtml\": () => (/* binding */ buildGotoAnchorHtml),\n/* harmony export */   \"buildSegCompareObj\": () => (/* binding */ buildSegCompareObj),\n/* harmony export */   \"capitaliseFirstLetter\": () => (/* binding */ capitaliseFirstLetter),\n/* harmony export */   \"combineEventUis\": () => (/* binding */ combineEventUis),\n/* harmony export */   \"compareByFieldSpec\": () => (/* binding */ compareByFieldSpec),\n/* harmony export */   \"compareByFieldSpecs\": () => (/* binding */ compareByFieldSpecs),\n/* harmony export */   \"compareNumbers\": () => (/* binding */ compareNumbers),\n/* harmony export */   \"compensateScroll\": () => (/* binding */ compensateScroll),\n/* harmony export */   \"computeClippingRect\": () => (/* binding */ computeClippingRect),\n/* harmony export */   \"computeEdges\": () => (/* binding */ computeEdges),\n/* harmony export */   \"computeEventDraggable\": () => (/* binding */ computeEventDraggable),\n/* harmony export */   \"computeEventEndResizable\": () => (/* binding */ computeEventEndResizable),\n/* harmony export */   \"computeEventStartResizable\": () => (/* binding */ computeEventStartResizable),\n/* harmony export */   \"computeFallbackHeaderFormat\": () => (/* binding */ computeFallbackHeaderFormat),\n/* harmony export */   \"computeHeightAndMargins\": () => (/* binding */ computeHeightAndMargins),\n/* harmony export */   \"computeInnerRect\": () => (/* binding */ computeInnerRect),\n/* harmony export */   \"computeRect\": () => (/* binding */ computeRect),\n/* harmony export */   \"computeVisibleDayRange\": () => (/* binding */ computeVisibleDayRange),\n/* harmony export */   \"config\": () => (/* binding */ config),\n/* harmony export */   \"constrainPoint\": () => (/* binding */ constrainPoint),\n/* harmony export */   \"createDuration\": () => (/* binding */ createDuration),\n/* harmony export */   \"createElement\": () => (/* binding */ createElement),\n/* harmony export */   \"createEmptyEventStore\": () => (/* binding */ createEmptyEventStore),\n/* harmony export */   \"createEventInstance\": () => (/* binding */ createEventInstance),\n/* harmony export */   \"createFormatter\": () => (/* binding */ createFormatter),\n/* harmony export */   \"createPlugin\": () => (/* binding */ createPlugin),\n/* harmony export */   \"cssToStr\": () => (/* binding */ cssToStr),\n/* harmony export */   \"debounce\": () => (/* binding */ debounce),\n/* harmony export */   \"diffDates\": () => (/* binding */ diffDates),\n/* harmony export */   \"diffDayAndTime\": () => (/* binding */ diffDayAndTime),\n/* harmony export */   \"diffDays\": () => (/* binding */ diffDays),\n/* harmony export */   \"diffPoints\": () => (/* binding */ diffPoints),\n/* harmony export */   \"diffWeeks\": () => (/* binding */ diffWeeks),\n/* harmony export */   \"diffWholeDays\": () => (/* binding */ diffWholeDays),\n/* harmony export */   \"diffWholeWeeks\": () => (/* binding */ diffWholeWeeks),\n/* harmony export */   \"disableCursor\": () => (/* binding */ disableCursor),\n/* harmony export */   \"distributeHeight\": () => (/* binding */ distributeHeight),\n/* harmony export */   \"elementClosest\": () => (/* binding */ elementClosest),\n/* harmony export */   \"elementMatches\": () => (/* binding */ elementMatches),\n/* harmony export */   \"enableCursor\": () => (/* binding */ enableCursor),\n/* harmony export */   \"eventTupleToStore\": () => (/* binding */ eventTupleToStore),\n/* harmony export */   \"filterEventStoreDefs\": () => (/* binding */ filterEventStoreDefs),\n/* harmony export */   \"filterHash\": () => (/* binding */ filterHash),\n/* harmony export */   \"findChildren\": () => (/* binding */ findChildren),\n/* harmony export */   \"findElements\": () => (/* binding */ findElements),\n/* harmony export */   \"flexibleCompare\": () => (/* binding */ flexibleCompare),\n/* harmony export */   \"forceClassName\": () => (/* binding */ forceClassName),\n/* harmony export */   \"formatDate\": () => (/* binding */ formatDate),\n/* harmony export */   \"formatIsoTimeString\": () => (/* binding */ formatIsoTimeString),\n/* harmony export */   \"formatRange\": () => (/* binding */ formatRange),\n/* harmony export */   \"getAllDayHtml\": () => (/* binding */ getAllDayHtml),\n/* harmony export */   \"getClippingParents\": () => (/* binding */ getClippingParents),\n/* harmony export */   \"getDayClasses\": () => (/* binding */ getDayClasses),\n/* harmony export */   \"getElSeg\": () => (/* binding */ getElSeg),\n/* harmony export */   \"getRectCenter\": () => (/* binding */ getRectCenter),\n/* harmony export */   \"getRelevantEvents\": () => (/* binding */ getRelevantEvents),\n/* harmony export */   \"globalDefaults\": () => (/* binding */ globalDefaults),\n/* harmony export */   \"greatestDurationDenominator\": () => (/* binding */ greatestDurationDenominator),\n/* harmony export */   \"hasBgRendering\": () => (/* binding */ hasBgRendering),\n/* harmony export */   \"htmlEscape\": () => (/* binding */ htmlEscape),\n/* harmony export */   \"htmlToElement\": () => (/* binding */ htmlToElement),\n/* harmony export */   \"insertAfterElement\": () => (/* binding */ insertAfterElement),\n/* harmony export */   \"interactionSettingsStore\": () => (/* binding */ interactionSettingsStore),\n/* harmony export */   \"interactionSettingsToStore\": () => (/* binding */ interactionSettingsToStore),\n/* harmony export */   \"intersectRanges\": () => (/* binding */ intersectRanges),\n/* harmony export */   \"intersectRects\": () => (/* binding */ intersectRects),\n/* harmony export */   \"isArraysEqual\": () => (/* binding */ isArraysEqual),\n/* harmony export */   \"isDateSpansEqual\": () => (/* binding */ isDateSpansEqual),\n/* harmony export */   \"isInt\": () => (/* binding */ isInt),\n/* harmony export */   \"isInteractionValid\": () => (/* binding */ isInteractionValid),\n/* harmony export */   \"isMultiDayRange\": () => (/* binding */ isMultiDayRange),\n/* harmony export */   \"isPropsEqual\": () => (/* binding */ isPropsEqual),\n/* harmony export */   \"isPropsValid\": () => (/* binding */ isPropsValid),\n/* harmony export */   \"isSingleDay\": () => (/* binding */ isSingleDay),\n/* harmony export */   \"isValidDate\": () => (/* binding */ isValidDate),\n/* harmony export */   \"listenBySelector\": () => (/* binding */ listenBySelector),\n/* harmony export */   \"mapHash\": () => (/* binding */ mapHash),\n/* harmony export */   \"matchCellWidths\": () => (/* binding */ matchCellWidths),\n/* harmony export */   \"memoize\": () => (/* binding */ memoize),\n/* harmony export */   \"memoizeOutput\": () => (/* binding */ memoizeOutput),\n/* harmony export */   \"memoizeRendering\": () => (/* binding */ memoizeRendering),\n/* harmony export */   \"mergeEventStores\": () => (/* binding */ mergeEventStores),\n/* harmony export */   \"multiplyDuration\": () => (/* binding */ multiplyDuration),\n/* harmony export */   \"padStart\": () => (/* binding */ padStart),\n/* harmony export */   \"parseBusinessHours\": () => (/* binding */ parseBusinessHours),\n/* harmony export */   \"parseDragMeta\": () => (/* binding */ parseDragMeta),\n/* harmony export */   \"parseEventDef\": () => (/* binding */ parseEventDef),\n/* harmony export */   \"parseFieldSpecs\": () => (/* binding */ parseFieldSpecs),\n/* harmony export */   \"parseMarker\": () => (/* binding */ parse),\n/* harmony export */   \"pointInsideRect\": () => (/* binding */ pointInsideRect),\n/* harmony export */   \"prependToElement\": () => (/* binding */ prependToElement),\n/* harmony export */   \"preventContextMenu\": () => (/* binding */ preventContextMenu),\n/* harmony export */   \"preventDefault\": () => (/* binding */ preventDefault),\n/* harmony export */   \"preventSelection\": () => (/* binding */ preventSelection),\n/* harmony export */   \"processScopedUiProps\": () => (/* binding */ processScopedUiProps),\n/* harmony export */   \"rangeContainsMarker\": () => (/* binding */ rangeContainsMarker),\n/* harmony export */   \"rangeContainsRange\": () => (/* binding */ rangeContainsRange),\n/* harmony export */   \"rangesEqual\": () => (/* binding */ rangesEqual),\n/* harmony export */   \"rangesIntersect\": () => (/* binding */ rangesIntersect),\n/* harmony export */   \"refineProps\": () => (/* binding */ refineProps),\n/* harmony export */   \"removeElement\": () => (/* binding */ removeElement),\n/* harmony export */   \"removeExact\": () => (/* binding */ removeExact),\n/* harmony export */   \"renderDateCell\": () => (/* binding */ renderDateCell),\n/* harmony export */   \"requestJson\": () => (/* binding */ requestJson),\n/* harmony export */   \"sliceEventStore\": () => (/* binding */ sliceEventStore),\n/* harmony export */   \"startOfDay\": () => (/* binding */ startOfDay),\n/* harmony export */   \"subtractInnerElHeight\": () => (/* binding */ subtractInnerElHeight),\n/* harmony export */   \"translateRect\": () => (/* binding */ translateRect),\n/* harmony export */   \"uncompensateScroll\": () => (/* binding */ uncompensateScroll),\n/* harmony export */   \"undistributeHeight\": () => (/* binding */ undistributeHeight),\n/* harmony export */   \"unpromisify\": () => (/* binding */ unpromisify),\n/* harmony export */   \"version\": () => (/* binding */ version),\n/* harmony export */   \"whenTransitionDone\": () => (/* binding */ whenTransitionDone),\n/* harmony export */   \"wholeDivideDurations\": () => (/* binding */ wholeDivideDurations)\n/* harmony export */ });\n/*!\nFullCalendar Core Package v4.4.2\nDocs & License: https://fullcalendar.io/\n(c) 2019 Adam Shaw\n*/\n\n// Creating\n// ----------------------------------------------------------------------------------------------------------------\nvar elementPropHash = {\n    className: true,\n    colSpan: true,\n    rowSpan: true\n};\nvar containerTagHash = {\n    '<tr': 'tbody',\n    '<td': 'tr'\n};\nfunction createElement(tagName, attrs, content) {\n    var el = document.createElement(tagName);\n    if (attrs) {\n        for (var attrName in attrs) {\n            if (attrName === 'style') {\n                applyStyle(el, attrs[attrName]);\n            }\n            else if (elementPropHash[attrName]) {\n                el[attrName] = attrs[attrName];\n            }\n            else {\n                el.setAttribute(attrName, attrs[attrName]);\n            }\n        }\n    }\n    if (typeof content === 'string') {\n        el.innerHTML = content; // shortcut. no need to process HTML in any way\n    }\n    else if (content != null) {\n        appendToElement(el, content);\n    }\n    return el;\n}\nfunction htmlToElement(html) {\n    html = html.trim();\n    var container = document.createElement(computeContainerTag(html));\n    container.innerHTML = html;\n    return container.firstChild;\n}\nfunction htmlToElements(html) {\n    return Array.prototype.slice.call(htmlToNodeList(html));\n}\nfunction htmlToNodeList(html) {\n    html = html.trim();\n    var container = document.createElement(computeContainerTag(html));\n    container.innerHTML = html;\n    return container.childNodes;\n}\n// assumes html already trimmed and tag names are lowercase\nfunction computeContainerTag(html) {\n    return containerTagHash[html.substr(0, 3) // faster than using regex\n    ] || 'div';\n}\nfunction appendToElement(el, content) {\n    var childNodes = normalizeContent(content);\n    for (var i = 0; i < childNodes.length; i++) {\n        el.appendChild(childNodes[i]);\n    }\n}\nfunction prependToElement(parent, content) {\n    var newEls = normalizeContent(content);\n    var afterEl = parent.firstChild || null; // if no firstChild, will append to end, but that's okay, b/c there were no children\n    for (var i = 0; i < newEls.length; i++) {\n        parent.insertBefore(newEls[i], afterEl);\n    }\n}\nfunction insertAfterElement(refEl, content) {\n    var newEls = normalizeContent(content);\n    var afterEl = refEl.nextSibling || null;\n    for (var i = 0; i < newEls.length; i++) {\n        refEl.parentNode.insertBefore(newEls[i], afterEl);\n    }\n}\nfunction normalizeContent(content) {\n    var els;\n    if (typeof content === 'string') {\n        els = htmlToElements(content);\n    }\n    else if (content instanceof Node) {\n        els = [content];\n    }\n    else { // Node[] or NodeList\n        els = Array.prototype.slice.call(content);\n    }\n    return els;\n}\nfunction removeElement(el) {\n    if (el.parentNode) {\n        el.parentNode.removeChild(el);\n    }\n}\n// Querying\n// ----------------------------------------------------------------------------------------------------------------\n// from https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\nvar matchesMethod = Element.prototype.matches ||\n    Element.prototype.matchesSelector ||\n    Element.prototype.msMatchesSelector;\nvar closestMethod = Element.prototype.closest || function (selector) {\n    // polyfill\n    var el = this;\n    if (!document.documentElement.contains(el)) {\n        return null;\n    }\n    do {\n        if (elementMatches(el, selector)) {\n            return el;\n        }\n        el = el.parentElement || el.parentNode;\n    } while (el !== null && el.nodeType === 1);\n    return null;\n};\nfunction elementClosest(el, selector) {\n    return closestMethod.call(el, selector);\n}\nfunction elementMatches(el, selector) {\n    return matchesMethod.call(el, selector);\n}\n// accepts multiple subject els\n// returns a real array. good for methods like forEach\nfunction findElements(container, selector) {\n    var containers = container instanceof HTMLElement ? [container] : container;\n    var allMatches = [];\n    for (var i = 0; i < containers.length; i++) {\n        var matches = containers[i].querySelectorAll(selector);\n        for (var j = 0; j < matches.length; j++) {\n            allMatches.push(matches[j]);\n        }\n    }\n    return allMatches;\n}\n// accepts multiple subject els\n// only queries direct child elements\nfunction findChildren(parent, selector) {\n    var parents = parent instanceof HTMLElement ? [parent] : parent;\n    var allMatches = [];\n    for (var i = 0; i < parents.length; i++) {\n        var childNodes = parents[i].children; // only ever elements\n        for (var j = 0; j < childNodes.length; j++) {\n            var childNode = childNodes[j];\n            if (!selector || elementMatches(childNode, selector)) {\n                allMatches.push(childNode);\n            }\n        }\n    }\n    return allMatches;\n}\n// Attributes\n// ----------------------------------------------------------------------------------------------------------------\nfunction forceClassName(el, className, bool) {\n    if (bool) {\n        el.classList.add(className);\n    }\n    else {\n        el.classList.remove(className);\n    }\n}\n// Style\n// ----------------------------------------------------------------------------------------------------------------\nvar PIXEL_PROP_RE = /(top|left|right|bottom|width|height)$/i;\nfunction applyStyle(el, props) {\n    for (var propName in props) {\n        applyStyleProp(el, propName, props[propName]);\n    }\n}\nfunction applyStyleProp(el, name, val) {\n    if (val == null) {\n        el.style[name] = '';\n    }\n    else if (typeof val === 'number' && PIXEL_PROP_RE.test(name)) {\n        el.style[name] = val + 'px';\n    }\n    else {\n        el.style[name] = val;\n    }\n}\n\nfunction pointInsideRect(point, rect) {\n    return point.left >= rect.left &&\n        point.left < rect.right &&\n        point.top >= rect.top &&\n        point.top < rect.bottom;\n}\n// Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false\nfunction intersectRects(rect1, rect2) {\n    var res = {\n        left: Math.max(rect1.left, rect2.left),\n        right: Math.min(rect1.right, rect2.right),\n        top: Math.max(rect1.top, rect2.top),\n        bottom: Math.min(rect1.bottom, rect2.bottom)\n    };\n    if (res.left < res.right && res.top < res.bottom) {\n        return res;\n    }\n    return false;\n}\nfunction translateRect(rect, deltaX, deltaY) {\n    return {\n        left: rect.left + deltaX,\n        right: rect.right + deltaX,\n        top: rect.top + deltaY,\n        bottom: rect.bottom + deltaY\n    };\n}\n// Returns a new point that will have been moved to reside within the given rectangle\nfunction constrainPoint(point, rect) {\n    return {\n        left: Math.min(Math.max(point.left, rect.left), rect.right),\n        top: Math.min(Math.max(point.top, rect.top), rect.bottom)\n    };\n}\n// Returns a point that is the center of the given rectangle\nfunction getRectCenter(rect) {\n    return {\n        left: (rect.left + rect.right) / 2,\n        top: (rect.top + rect.bottom) / 2\n    };\n}\n// Subtracts point2's coordinates from point1's coordinates, returning a delta\nfunction diffPoints(point1, point2) {\n    return {\n        left: point1.left - point2.left,\n        top: point1.top - point2.top\n    };\n}\n\n// Logic for determining if, when the element is right-to-left, the scrollbar appears on the left side\nvar isRtlScrollbarOnLeft = null;\nfunction getIsRtlScrollbarOnLeft() {\n    if (isRtlScrollbarOnLeft === null) {\n        isRtlScrollbarOnLeft = computeIsRtlScrollbarOnLeft();\n    }\n    return isRtlScrollbarOnLeft;\n}\nfunction computeIsRtlScrollbarOnLeft() {\n    var outerEl = createElement('div', {\n        style: {\n            position: 'absolute',\n            top: -1000,\n            left: 0,\n            border: 0,\n            padding: 0,\n            overflow: 'scroll',\n            direction: 'rtl'\n        }\n    }, '<div></div>');\n    document.body.appendChild(outerEl);\n    var innerEl = outerEl.firstChild;\n    var res = innerEl.getBoundingClientRect().left > outerEl.getBoundingClientRect().left;\n    removeElement(outerEl);\n    return res;\n}\n// The scrollbar width computations in computeEdges are sometimes flawed when it comes to\n// retina displays, rounding, and IE11. Massage them into a usable value.\nfunction sanitizeScrollbarWidth(width) {\n    width = Math.max(0, width); // no negatives\n    width = Math.round(width);\n    return width;\n}\n\nfunction computeEdges(el, getPadding) {\n    if (getPadding === void 0) { getPadding = false; }\n    var computedStyle = window.getComputedStyle(el);\n    var borderLeft = parseInt(computedStyle.borderLeftWidth, 10) || 0;\n    var borderRight = parseInt(computedStyle.borderRightWidth, 10) || 0;\n    var borderTop = parseInt(computedStyle.borderTopWidth, 10) || 0;\n    var borderBottom = parseInt(computedStyle.borderBottomWidth, 10) || 0;\n    // must use offset(Width|Height) because compatible with client(Width|Height)\n    var scrollbarLeftRight = sanitizeScrollbarWidth(el.offsetWidth - el.clientWidth - borderLeft - borderRight);\n    var scrollbarBottom = sanitizeScrollbarWidth(el.offsetHeight - el.clientHeight - borderTop - borderBottom);\n    var res = {\n        borderLeft: borderLeft,\n        borderRight: borderRight,\n        borderTop: borderTop,\n        borderBottom: borderBottom,\n        scrollbarBottom: scrollbarBottom,\n        scrollbarLeft: 0,\n        scrollbarRight: 0\n    };\n    if (getIsRtlScrollbarOnLeft() && computedStyle.direction === 'rtl') { // is the scrollbar on the left side?\n        res.scrollbarLeft = scrollbarLeftRight;\n    }\n    else {\n        res.scrollbarRight = scrollbarLeftRight;\n    }\n    if (getPadding) {\n        res.paddingLeft = parseInt(computedStyle.paddingLeft, 10) || 0;\n        res.paddingRight = parseInt(computedStyle.paddingRight, 10) || 0;\n        res.paddingTop = parseInt(computedStyle.paddingTop, 10) || 0;\n        res.paddingBottom = parseInt(computedStyle.paddingBottom, 10) || 0;\n    }\n    return res;\n}\nfunction computeInnerRect(el, goWithinPadding) {\n    if (goWithinPadding === void 0) { goWithinPadding = false; }\n    var outerRect = computeRect(el);\n    var edges = computeEdges(el, goWithinPadding);\n    var res = {\n        left: outerRect.left + edges.borderLeft + edges.scrollbarLeft,\n        right: outerRect.right - edges.borderRight - edges.scrollbarRight,\n        top: outerRect.top + edges.borderTop,\n        bottom: outerRect.bottom - edges.borderBottom - edges.scrollbarBottom\n    };\n    if (goWithinPadding) {\n        res.left += edges.paddingLeft;\n        res.right -= edges.paddingRight;\n        res.top += edges.paddingTop;\n        res.bottom -= edges.paddingBottom;\n    }\n    return res;\n}\nfunction computeRect(el) {\n    var rect = el.getBoundingClientRect();\n    return {\n        left: rect.left + window.pageXOffset,\n        top: rect.top + window.pageYOffset,\n        right: rect.right + window.pageXOffset,\n        bottom: rect.bottom + window.pageYOffset\n    };\n}\nfunction computeViewportRect() {\n    return {\n        left: window.pageXOffset,\n        right: window.pageXOffset + document.documentElement.clientWidth,\n        top: window.pageYOffset,\n        bottom: window.pageYOffset + document.documentElement.clientHeight\n    };\n}\nfunction computeHeightAndMargins(el) {\n    return el.getBoundingClientRect().height + computeVMargins(el);\n}\nfunction computeVMargins(el) {\n    var computed = window.getComputedStyle(el);\n    return parseInt(computed.marginTop, 10) +\n        parseInt(computed.marginBottom, 10);\n}\n// does not return window\nfunction getClippingParents(el) {\n    var parents = [];\n    while (el instanceof HTMLElement) { // will stop when gets to document or null\n        var computedStyle = window.getComputedStyle(el);\n        if (computedStyle.position === 'fixed') {\n            break;\n        }\n        if ((/(auto|scroll)/).test(computedStyle.overflow + computedStyle.overflowY + computedStyle.overflowX)) {\n            parents.push(el);\n        }\n        el = el.parentNode;\n    }\n    return parents;\n}\nfunction computeClippingRect(el) {\n    return getClippingParents(el)\n        .map(function (el) {\n        return computeInnerRect(el);\n    })\n        .concat(computeViewportRect())\n        .reduce(function (rect0, rect1) {\n        return intersectRects(rect0, rect1) || rect1; // should always intersect\n    });\n}\n\n// Stops a mouse/touch event from doing it's native browser action\nfunction preventDefault(ev) {\n    ev.preventDefault();\n}\n// Event Delegation\n// ----------------------------------------------------------------------------------------------------------------\nfunction listenBySelector(container, eventType, selector, handler) {\n    function realHandler(ev) {\n        var matchedChild = elementClosest(ev.target, selector);\n        if (matchedChild) {\n            handler.call(matchedChild, ev, matchedChild);\n        }\n    }\n    container.addEventListener(eventType, realHandler);\n    return function () {\n        container.removeEventListener(eventType, realHandler);\n    };\n}\nfunction listenToHoverBySelector(container, selector, onMouseEnter, onMouseLeave) {\n    var currentMatchedChild;\n    return listenBySelector(container, 'mouseover', selector, function (ev, matchedChild) {\n        if (matchedChild !== currentMatchedChild) {\n            currentMatchedChild = matchedChild;\n            onMouseEnter(ev, matchedChild);\n            var realOnMouseLeave_1 = function (ev) {\n                currentMatchedChild = null;\n                onMouseLeave(ev, matchedChild);\n                matchedChild.removeEventListener('mouseleave', realOnMouseLeave_1);\n            };\n            // listen to the next mouseleave, and then unattach\n            matchedChild.addEventListener('mouseleave', realOnMouseLeave_1);\n        }\n    });\n}\n// Animation\n// ----------------------------------------------------------------------------------------------------------------\nvar transitionEventNames = [\n    'webkitTransitionEnd',\n    'otransitionend',\n    'oTransitionEnd',\n    'msTransitionEnd',\n    'transitionend'\n];\n// triggered only when the next single subsequent transition finishes\nfunction whenTransitionDone(el, callback) {\n    var realCallback = function (ev) {\n        callback(ev);\n        transitionEventNames.forEach(function (eventName) {\n            el.removeEventListener(eventName, realCallback);\n        });\n    };\n    transitionEventNames.forEach(function (eventName) {\n        el.addEventListener(eventName, realCallback); // cross-browser way to determine when the transition finishes\n    });\n}\n\nvar DAY_IDS = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\n// Adding\nfunction addWeeks(m, n) {\n    var a = dateToUtcArray(m);\n    a[2] += n * 7;\n    return arrayToUtcDate(a);\n}\nfunction addDays(m, n) {\n    var a = dateToUtcArray(m);\n    a[2] += n;\n    return arrayToUtcDate(a);\n}\nfunction addMs(m, n) {\n    var a = dateToUtcArray(m);\n    a[6] += n;\n    return arrayToUtcDate(a);\n}\n// Diffing (all return floats)\nfunction diffWeeks(m0, m1) {\n    return diffDays(m0, m1) / 7;\n}\nfunction diffDays(m0, m1) {\n    return (m1.valueOf() - m0.valueOf()) / (1000 * 60 * 60 * 24);\n}\nfunction diffHours(m0, m1) {\n    return (m1.valueOf() - m0.valueOf()) / (1000 * 60 * 60);\n}\nfunction diffMinutes(m0, m1) {\n    return (m1.valueOf() - m0.valueOf()) / (1000 * 60);\n}\nfunction diffSeconds(m0, m1) {\n    return (m1.valueOf() - m0.valueOf()) / 1000;\n}\nfunction diffDayAndTime(m0, m1) {\n    var m0day = startOfDay(m0);\n    var m1day = startOfDay(m1);\n    return {\n        years: 0,\n        months: 0,\n        days: Math.round(diffDays(m0day, m1day)),\n        milliseconds: (m1.valueOf() - m1day.valueOf()) - (m0.valueOf() - m0day.valueOf())\n    };\n}\n// Diffing Whole Units\nfunction diffWholeWeeks(m0, m1) {\n    var d = diffWholeDays(m0, m1);\n    if (d !== null && d % 7 === 0) {\n        return d / 7;\n    }\n    return null;\n}\nfunction diffWholeDays(m0, m1) {\n    if (timeAsMs(m0) === timeAsMs(m1)) {\n        return Math.round(diffDays(m0, m1));\n    }\n    return null;\n}\n// Start-Of\nfunction startOfDay(m) {\n    return arrayToUtcDate([\n        m.getUTCFullYear(),\n        m.getUTCMonth(),\n        m.getUTCDate()\n    ]);\n}\nfunction startOfHour(m) {\n    return arrayToUtcDate([\n        m.getUTCFullYear(),\n        m.getUTCMonth(),\n        m.getUTCDate(),\n        m.getUTCHours()\n    ]);\n}\nfunction startOfMinute(m) {\n    return arrayToUtcDate([\n        m.getUTCFullYear(),\n        m.getUTCMonth(),\n        m.getUTCDate(),\n        m.getUTCHours(),\n        m.getUTCMinutes()\n    ]);\n}\nfunction startOfSecond(m) {\n    return arrayToUtcDate([\n        m.getUTCFullYear(),\n        m.getUTCMonth(),\n        m.getUTCDate(),\n        m.getUTCHours(),\n        m.getUTCMinutes(),\n        m.getUTCSeconds()\n    ]);\n}\n// Week Computation\nfunction weekOfYear(marker, dow, doy) {\n    var y = marker.getUTCFullYear();\n    var w = weekOfGivenYear(marker, y, dow, doy);\n    if (w < 1) {\n        return weekOfGivenYear(marker, y - 1, dow, doy);\n    }\n    var nextW = weekOfGivenYear(marker, y + 1, dow, doy);\n    if (nextW >= 1) {\n        return Math.min(w, nextW);\n    }\n    return w;\n}\nfunction weekOfGivenYear(marker, year, dow, doy) {\n    var firstWeekStart = arrayToUtcDate([year, 0, 1 + firstWeekOffset(year, dow, doy)]);\n    var dayStart = startOfDay(marker);\n    var days = Math.round(diffDays(firstWeekStart, dayStart));\n    return Math.floor(days / 7) + 1; // zero-indexed\n}\n// start-of-first-week - start-of-year\nfunction firstWeekOffset(year, dow, doy) {\n    // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n    var fwd = 7 + dow - doy;\n    // first-week day local weekday -- which local weekday is fwd\n    var fwdlw = (7 + arrayToUtcDate([year, 0, fwd]).getUTCDay() - dow) % 7;\n    return -fwdlw + fwd - 1;\n}\n// Array Conversion\nfunction dateToLocalArray(date) {\n    return [\n        date.getFullYear(),\n        date.getMonth(),\n        date.getDate(),\n        date.getHours(),\n        date.getMinutes(),\n        date.getSeconds(),\n        date.getMilliseconds()\n    ];\n}\nfunction arrayToLocalDate(a) {\n    return new Date(a[0], a[1] || 0, a[2] == null ? 1 : a[2], // day of month\n    a[3] || 0, a[4] || 0, a[5] || 0);\n}\nfunction dateToUtcArray(date) {\n    return [\n        date.getUTCFullYear(),\n        date.getUTCMonth(),\n        date.getUTCDate(),\n        date.getUTCHours(),\n        date.getUTCMinutes(),\n        date.getUTCSeconds(),\n        date.getUTCMilliseconds()\n    ];\n}\nfunction arrayToUtcDate(a) {\n    // according to web standards (and Safari), a month index is required.\n    // massage if only given a year.\n    if (a.length === 1) {\n        a = a.concat([0]);\n    }\n    return new Date(Date.UTC.apply(Date, a));\n}\n// Other Utils\nfunction isValidDate(m) {\n    return !isNaN(m.valueOf());\n}\nfunction timeAsMs(m) {\n    return m.getUTCHours() * 1000 * 60 * 60 +\n        m.getUTCMinutes() * 1000 * 60 +\n        m.getUTCSeconds() * 1000 +\n        m.getUTCMilliseconds();\n}\n\nvar INTERNAL_UNITS = ['years', 'months', 'days', 'milliseconds'];\nvar PARSE_RE = /^(-?)(?:(\\d+)\\.)?(\\d+):(\\d\\d)(?::(\\d\\d)(?:\\.(\\d\\d\\d))?)?/;\n// Parsing and Creation\nfunction createDuration(input, unit) {\n    var _a;\n    if (typeof input === 'string') {\n        return parseString(input);\n    }\n    else if (typeof input === 'object' && input) { // non-null object\n        return normalizeObject(input);\n    }\n    else if (typeof input === 'number') {\n        return normalizeObject((_a = {}, _a[unit || 'milliseconds'] = input, _a));\n    }\n    else {\n        return null;\n    }\n}\nfunction parseString(s) {\n    var m = PARSE_RE.exec(s);\n    if (m) {\n        var sign = m[1] ? -1 : 1;\n        return {\n            years: 0,\n            months: 0,\n            days: sign * (m[2] ? parseInt(m[2], 10) : 0),\n            milliseconds: sign * ((m[3] ? parseInt(m[3], 10) : 0) * 60 * 60 * 1000 + // hours\n                (m[4] ? parseInt(m[4], 10) : 0) * 60 * 1000 + // minutes\n                (m[5] ? parseInt(m[5], 10) : 0) * 1000 + // seconds\n                (m[6] ? parseInt(m[6], 10) : 0) // ms\n            )\n        };\n    }\n    return null;\n}\nfunction normalizeObject(obj) {\n    return {\n        years: obj.years || obj.year || 0,\n        months: obj.months || obj.month || 0,\n        days: (obj.days || obj.day || 0) +\n            getWeeksFromInput(obj) * 7,\n        milliseconds: (obj.hours || obj.hour || 0) * 60 * 60 * 1000 + // hours\n            (obj.minutes || obj.minute || 0) * 60 * 1000 + // minutes\n            (obj.seconds || obj.second || 0) * 1000 + // seconds\n            (obj.milliseconds || obj.millisecond || obj.ms || 0) // ms\n    };\n}\nfunction getWeeksFromInput(obj) {\n    return obj.weeks || obj.week || 0;\n}\n// Equality\nfunction durationsEqual(d0, d1) {\n    return d0.years === d1.years &&\n        d0.months === d1.months &&\n        d0.days === d1.days &&\n        d0.milliseconds === d1.milliseconds;\n}\nfunction isSingleDay(dur) {\n    return dur.years === 0 && dur.months === 0 && dur.days === 1 && dur.milliseconds === 0;\n}\n// Simple Math\nfunction addDurations(d0, d1) {\n    return {\n        years: d0.years + d1.years,\n        months: d0.months + d1.months,\n        days: d0.days + d1.days,\n        milliseconds: d0.milliseconds + d1.milliseconds\n    };\n}\nfunction subtractDurations(d1, d0) {\n    return {\n        years: d1.years - d0.years,\n        months: d1.months - d0.months,\n        days: d1.days - d0.days,\n        milliseconds: d1.milliseconds - d0.milliseconds\n    };\n}\nfunction multiplyDuration(d, n) {\n    return {\n        years: d.years * n,\n        months: d.months * n,\n        days: d.days * n,\n        milliseconds: d.milliseconds * n\n    };\n}\n// Conversions\n// \"Rough\" because they are based on average-case Gregorian months/years\nfunction asRoughYears(dur) {\n    return asRoughDays(dur) / 365;\n}\nfunction asRoughMonths(dur) {\n    return asRoughDays(dur) / 30;\n}\nfunction asRoughDays(dur) {\n    return asRoughMs(dur) / 864e5;\n}\nfunction asRoughMinutes(dur) {\n    return asRoughMs(dur) / (1000 * 60);\n}\nfunction asRoughSeconds(dur) {\n    return asRoughMs(dur) / 1000;\n}\nfunction asRoughMs(dur) {\n    return dur.years * (365 * 864e5) +\n        dur.months * (30 * 864e5) +\n        dur.days * 864e5 +\n        dur.milliseconds;\n}\n// Advanced Math\nfunction wholeDivideDurations(numerator, denominator) {\n    var res = null;\n    for (var i = 0; i < INTERNAL_UNITS.length; i++) {\n        var unit = INTERNAL_UNITS[i];\n        if (denominator[unit]) {\n            var localRes = numerator[unit] / denominator[unit];\n            if (!isInt(localRes) || (res !== null && res !== localRes)) {\n                return null;\n            }\n            res = localRes;\n        }\n        else if (numerator[unit]) {\n            // needs to divide by something but can't!\n            return null;\n        }\n    }\n    return res;\n}\nfunction greatestDurationDenominator(dur, dontReturnWeeks) {\n    var ms = dur.milliseconds;\n    if (ms) {\n        if (ms % 1000 !== 0) {\n            return { unit: 'millisecond', value: ms };\n        }\n        if (ms % (1000 * 60) !== 0) {\n            return { unit: 'second', value: ms / 1000 };\n        }\n        if (ms % (1000 * 60 * 60) !== 0) {\n            return { unit: 'minute', value: ms / (1000 * 60) };\n        }\n        if (ms) {\n            return { unit: 'hour', value: ms / (1000 * 60 * 60) };\n        }\n    }\n    if (dur.days) {\n        if (!dontReturnWeeks && dur.days % 7 === 0) {\n            return { unit: 'week', value: dur.days / 7 };\n        }\n        return { unit: 'day', value: dur.days };\n    }\n    if (dur.months) {\n        return { unit: 'month', value: dur.months };\n    }\n    if (dur.years) {\n        return { unit: 'year', value: dur.years };\n    }\n    return { unit: 'millisecond', value: 0 };\n}\n\n/* FullCalendar-specific DOM Utilities\n----------------------------------------------------------------------------------------------------------------------*/\n// Given the scrollbar widths of some other container, create borders/margins on rowEls in order to match the left\n// and right space that was offset by the scrollbars. A 1-pixel border first, then margin beyond that.\nfunction compensateScroll(rowEl, scrollbarWidths) {\n    if (scrollbarWidths.left) {\n        applyStyle(rowEl, {\n            borderLeftWidth: 1,\n            marginLeft: scrollbarWidths.left - 1\n        });\n    }\n    if (scrollbarWidths.right) {\n        applyStyle(rowEl, {\n            borderRightWidth: 1,\n            marginRight: scrollbarWidths.right - 1\n        });\n    }\n}\n// Undoes compensateScroll and restores all borders/margins\nfunction uncompensateScroll(rowEl) {\n    applyStyle(rowEl, {\n        marginLeft: '',\n        marginRight: '',\n        borderLeftWidth: '',\n        borderRightWidth: ''\n    });\n}\n// Make the mouse cursor express that an event is not allowed in the current area\nfunction disableCursor() {\n    document.body.classList.add('fc-not-allowed');\n}\n// Returns the mouse cursor to its original look\nfunction enableCursor() {\n    document.body.classList.remove('fc-not-allowed');\n}\n// Given a total available height to fill, have `els` (essentially child rows) expand to accomodate.\n// By default, all elements that are shorter than the recommended height are expanded uniformly, not considering\n// any other els that are already too tall. if `shouldRedistribute` is on, it considers these tall rows and\n// reduces the available height.\nfunction distributeHeight(els, availableHeight, shouldRedistribute) {\n    // *FLOORING NOTE*: we floor in certain places because zoom can give inaccurate floating-point dimensions,\n    // and it is better to be shorter than taller, to avoid creating unnecessary scrollbars.\n    var minOffset1 = Math.floor(availableHeight / els.length); // for non-last element\n    var minOffset2 = Math.floor(availableHeight - minOffset1 * (els.length - 1)); // for last element *FLOORING NOTE*\n    var flexEls = []; // elements that are allowed to expand. array of DOM nodes\n    var flexOffsets = []; // amount of vertical space it takes up\n    var flexHeights = []; // actual css height\n    var usedHeight = 0;\n    undistributeHeight(els); // give all elements their natural height\n    // find elements that are below the recommended height (expandable).\n    // important to query for heights in a single first pass (to avoid reflow oscillation).\n    els.forEach(function (el, i) {\n        var minOffset = i === els.length - 1 ? minOffset2 : minOffset1;\n        var naturalHeight = el.getBoundingClientRect().height;\n        var naturalOffset = naturalHeight + computeVMargins(el);\n        if (naturalOffset < minOffset) {\n            flexEls.push(el);\n            flexOffsets.push(naturalOffset);\n            flexHeights.push(naturalHeight);\n        }\n        else {\n            // this element stretches past recommended height (non-expandable). mark the space as occupied.\n            usedHeight += naturalOffset;\n        }\n    });\n    // readjust the recommended height to only consider the height available to non-maxed-out rows.\n    if (shouldRedistribute) {\n        availableHeight -= usedHeight;\n        minOffset1 = Math.floor(availableHeight / flexEls.length);\n        minOffset2 = Math.floor(availableHeight - minOffset1 * (flexEls.length - 1)); // *FLOORING NOTE*\n    }\n    // assign heights to all expandable elements\n    flexEls.forEach(function (el, i) {\n        var minOffset = i === flexEls.length - 1 ? minOffset2 : minOffset1;\n        var naturalOffset = flexOffsets[i];\n        var naturalHeight = flexHeights[i];\n        var newHeight = minOffset - (naturalOffset - naturalHeight); // subtract the margin/padding\n        if (naturalOffset < minOffset) { // we check this again because redistribution might have changed things\n            el.style.height = newHeight + 'px';\n        }\n    });\n}\n// Undoes distrubuteHeight, restoring all els to their natural height\nfunction undistributeHeight(els) {\n    els.forEach(function (el) {\n        el.style.height = '';\n    });\n}\n// Given `els`, a set of <td> cells, find the cell with the largest natural width and set the widths of all the\n// cells to be that width.\n// PREREQUISITE: if you want a cell to take up width, it needs to have a single inner element w/ display:inline\nfunction matchCellWidths(els) {\n    var maxInnerWidth = 0;\n    els.forEach(function (el) {\n        var innerEl = el.firstChild; // hopefully an element\n        if (innerEl instanceof HTMLElement) {\n            var innerWidth_1 = innerEl.getBoundingClientRect().width;\n            if (innerWidth_1 > maxInnerWidth) {\n                maxInnerWidth = innerWidth_1;\n            }\n        }\n    });\n    maxInnerWidth++; // sometimes not accurate of width the text needs to stay on one line. insurance\n    els.forEach(function (el) {\n        el.style.width = maxInnerWidth + 'px';\n    });\n    return maxInnerWidth;\n}\n// Given one element that resides inside another,\n// Subtracts the height of the inner element from the outer element.\nfunction subtractInnerElHeight(outerEl, innerEl) {\n    // effin' IE8/9/10/11 sometimes returns 0 for dimensions. this weird hack was the only thing that worked\n    var reflowStyleProps = {\n        position: 'relative',\n        left: -1 // ensure reflow in case the el was already relative. negative is less likely to cause new scroll\n    };\n    applyStyle(outerEl, reflowStyleProps);\n    applyStyle(innerEl, reflowStyleProps);\n    var diff = // grab the dimensions\n     outerEl.getBoundingClientRect().height -\n        innerEl.getBoundingClientRect().height;\n    // undo hack\n    var resetStyleProps = { position: '', left: '' };\n    applyStyle(outerEl, resetStyleProps);\n    applyStyle(innerEl, resetStyleProps);\n    return diff;\n}\n/* Selection\n----------------------------------------------------------------------------------------------------------------------*/\nfunction preventSelection(el) {\n    el.classList.add('fc-unselectable');\n    el.addEventListener('selectstart', preventDefault);\n}\nfunction allowSelection(el) {\n    el.classList.remove('fc-unselectable');\n    el.removeEventListener('selectstart', preventDefault);\n}\n/* Context Menu\n----------------------------------------------------------------------------------------------------------------------*/\nfunction preventContextMenu(el) {\n    el.addEventListener('contextmenu', preventDefault);\n}\nfunction allowContextMenu(el) {\n    el.removeEventListener('contextmenu', preventDefault);\n}\n/* Object Ordering by Field\n----------------------------------------------------------------------------------------------------------------------*/\nfunction parseFieldSpecs(input) {\n    var specs = [];\n    var tokens = [];\n    var i;\n    var token;\n    if (typeof input === 'string') {\n        tokens = input.split(/\\s*,\\s*/);\n    }\n    else if (typeof input === 'function') {\n        tokens = [input];\n    }\n    else if (Array.isArray(input)) {\n        tokens = input;\n    }\n    for (i = 0; i < tokens.length; i++) {\n        token = tokens[i];\n        if (typeof token === 'string') {\n            specs.push(token.charAt(0) === '-' ?\n                { field: token.substring(1), order: -1 } :\n                { field: token, order: 1 });\n        }\n        else if (typeof token === 'function') {\n            specs.push({ func: token });\n        }\n    }\n    return specs;\n}\nfunction compareByFieldSpecs(obj0, obj1, fieldSpecs) {\n    var i;\n    var cmp;\n    for (i = 0; i < fieldSpecs.length; i++) {\n        cmp = compareByFieldSpec(obj0, obj1, fieldSpecs[i]);\n        if (cmp) {\n            return cmp;\n        }\n    }\n    return 0;\n}\nfunction compareByFieldSpec(obj0, obj1, fieldSpec) {\n    if (fieldSpec.func) {\n        return fieldSpec.func(obj0, obj1);\n    }\n    return flexibleCompare(obj0[fieldSpec.field], obj1[fieldSpec.field])\n        * (fieldSpec.order || 1);\n}\nfunction flexibleCompare(a, b) {\n    if (!a && !b) {\n        return 0;\n    }\n    if (b == null) {\n        return -1;\n    }\n    if (a == null) {\n        return 1;\n    }\n    if (typeof a === 'string' || typeof b === 'string') {\n        return String(a).localeCompare(String(b));\n    }\n    return a - b;\n}\n/* String Utilities\n----------------------------------------------------------------------------------------------------------------------*/\nfunction capitaliseFirstLetter(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nfunction padStart(val, len) {\n    var s = String(val);\n    return '000'.substr(0, len - s.length) + s;\n}\n/* Number Utilities\n----------------------------------------------------------------------------------------------------------------------*/\nfunction compareNumbers(a, b) {\n    return a - b;\n}\nfunction isInt(n) {\n    return n % 1 === 0;\n}\n/* Weird Utilities\n----------------------------------------------------------------------------------------------------------------------*/\nfunction applyAll(functions, thisObj, args) {\n    if (typeof functions === 'function') { // supplied a single function\n        functions = [functions];\n    }\n    if (functions) {\n        var i = void 0;\n        var ret = void 0;\n        for (i = 0; i < functions.length; i++) {\n            ret = functions[i].apply(thisObj, args) || ret;\n        }\n        return ret;\n    }\n}\nfunction firstDefined() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    for (var i = 0; i < args.length; i++) {\n        if (args[i] !== undefined) {\n            return args[i];\n        }\n    }\n}\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\n// https://github.com/jashkenas/underscore/blob/1.6.0/underscore.js#L714\nfunction debounce(func, wait) {\n    var timeout;\n    var args;\n    var context;\n    var timestamp;\n    var result;\n    var later = function () {\n        var last = new Date().valueOf() - timestamp;\n        if (last < wait) {\n            timeout = setTimeout(later, wait - last);\n        }\n        else {\n            timeout = null;\n            result = func.apply(context, args);\n            context = args = null;\n        }\n    };\n    return function () {\n        context = this;\n        args = arguments;\n        timestamp = new Date().valueOf();\n        if (!timeout) {\n            timeout = setTimeout(later, wait);\n        }\n        return result;\n    };\n}\n// Number and Boolean are only types that defaults or not computed for\n// TODO: write more comments\nfunction refineProps(rawProps, processors, defaults, leftoverProps) {\n    if (defaults === void 0) { defaults = {}; }\n    var refined = {};\n    for (var key in processors) {\n        var processor = processors[key];\n        if (rawProps[key] !== undefined) {\n            // found\n            if (processor === Function) {\n                refined[key] = typeof rawProps[key] === 'function' ? rawProps[key] : null;\n            }\n            else if (processor) { // a refining function?\n                refined[key] = processor(rawProps[key]);\n            }\n            else {\n                refined[key] = rawProps[key];\n            }\n        }\n        else if (defaults[key] !== undefined) {\n            // there's an explicit default\n            refined[key] = defaults[key];\n        }\n        else {\n            // must compute a default\n            if (processor === String) {\n                refined[key] = ''; // empty string is default for String\n            }\n            else if (!processor || processor === Number || processor === Boolean || processor === Function) {\n                refined[key] = null; // assign null for other non-custom processor funcs\n            }\n            else {\n                refined[key] = processor(null); // run the custom processor func\n            }\n        }\n    }\n    if (leftoverProps) {\n        for (var key in rawProps) {\n            if (processors[key] === undefined) {\n                leftoverProps[key] = rawProps[key];\n            }\n        }\n    }\n    return refined;\n}\n/* Date stuff that doesn't belong in datelib core\n----------------------------------------------------------------------------------------------------------------------*/\n// given a timed range, computes an all-day range that has the same exact duration,\n// but whose start time is aligned with the start of the day.\nfunction computeAlignedDayRange(timedRange) {\n    var dayCnt = Math.floor(diffDays(timedRange.start, timedRange.end)) || 1;\n    var start = startOfDay(timedRange.start);\n    var end = addDays(start, dayCnt);\n    return { start: start, end: end };\n}\n// given a timed range, computes an all-day range based on how for the end date bleeds into the next day\n// TODO: give nextDayThreshold a default arg\nfunction computeVisibleDayRange(timedRange, nextDayThreshold) {\n    if (nextDayThreshold === void 0) { nextDayThreshold = createDuration(0); }\n    var startDay = null;\n    var endDay = null;\n    if (timedRange.end) {\n        endDay = startOfDay(timedRange.end);\n        var endTimeMS = timedRange.end.valueOf() - endDay.valueOf(); // # of milliseconds into `endDay`\n        // If the end time is actually inclusively part of the next day and is equal to or\n        // beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.\n        // Otherwise, leaving it as inclusive will cause it to exclude `endDay`.\n        if (endTimeMS && endTimeMS >= asRoughMs(nextDayThreshold)) {\n            endDay = addDays(endDay, 1);\n        }\n    }\n    if (timedRange.start) {\n        startDay = startOfDay(timedRange.start); // the beginning of the day the range starts\n        // If end is within `startDay` but not past nextDayThreshold, assign the default duration of one day.\n        if (endDay && endDay <= startDay) {\n            endDay = addDays(startDay, 1);\n        }\n    }\n    return { start: startDay, end: endDay };\n}\n// spans from one day into another?\nfunction isMultiDayRange(range) {\n    var visibleRange = computeVisibleDayRange(range);\n    return diffDays(visibleRange.start, visibleRange.end) > 1;\n}\nfunction diffDates(date0, date1, dateEnv, largeUnit) {\n    if (largeUnit === 'year') {\n        return createDuration(dateEnv.diffWholeYears(date0, date1), 'year');\n    }\n    else if (largeUnit === 'month') {\n        return createDuration(dateEnv.diffWholeMonths(date0, date1), 'month');\n    }\n    else {\n        return diffDayAndTime(date0, date1); // returns a duration\n    }\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\n\nfunction parseRecurring(eventInput, allDayDefault, dateEnv, recurringTypes, leftovers) {\n    for (var i = 0; i < recurringTypes.length; i++) {\n        var localLeftovers = {};\n        var parsed = recurringTypes[i].parse(eventInput, localLeftovers, dateEnv);\n        if (parsed) {\n            var allDay = localLeftovers.allDay;\n            delete localLeftovers.allDay; // remove from leftovers\n            if (allDay == null) {\n                allDay = allDayDefault;\n                if (allDay == null) {\n                    allDay = parsed.allDayGuess;\n                    if (allDay == null) {\n                        allDay = false;\n                    }\n                }\n            }\n            __assign(leftovers, localLeftovers);\n            return {\n                allDay: allDay,\n                duration: parsed.duration,\n                typeData: parsed.typeData,\n                typeId: i\n            };\n        }\n    }\n    return null;\n}\n/*\nEvent MUST have a recurringDef\n*/\nfunction expandRecurringRanges(eventDef, duration, framingRange, dateEnv, recurringTypes) {\n    var typeDef = recurringTypes[eventDef.recurringDef.typeId];\n    var markers = typeDef.expand(eventDef.recurringDef.typeData, {\n        start: dateEnv.subtract(framingRange.start, duration),\n        end: framingRange.end\n    }, dateEnv);\n    // the recurrence plugins don't guarantee that all-day events are start-of-day, so we have to\n    if (eventDef.allDay) {\n        markers = markers.map(startOfDay);\n    }\n    return markers;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n// Merges an array of objects into a single object.\n// The second argument allows for an array of property names who's object values will be merged together.\nfunction mergeProps(propObjs, complexProps) {\n    var dest = {};\n    var i;\n    var name;\n    var complexObjs;\n    var j;\n    var val;\n    var props;\n    if (complexProps) {\n        for (i = 0; i < complexProps.length; i++) {\n            name = complexProps[i];\n            complexObjs = [];\n            // collect the trailing object values, stopping when a non-object is discovered\n            for (j = propObjs.length - 1; j >= 0; j--) {\n                val = propObjs[j][name];\n                if (typeof val === 'object' && val) { // non-null object\n                    complexObjs.unshift(val);\n                }\n                else if (val !== undefined) {\n                    dest[name] = val; // if there were no objects, this value will be used\n                    break;\n                }\n            }\n            // if the trailing values were objects, use the merged value\n            if (complexObjs.length) {\n                dest[name] = mergeProps(complexObjs);\n            }\n        }\n    }\n    // copy values into the destination, going from last to first\n    for (i = propObjs.length - 1; i >= 0; i--) {\n        props = propObjs[i];\n        for (name in props) {\n            if (!(name in dest)) { // if already assigned by previous props or complex props, don't reassign\n                dest[name] = props[name];\n            }\n        }\n    }\n    return dest;\n}\nfunction filterHash(hash, func) {\n    var filtered = {};\n    for (var key in hash) {\n        if (func(hash[key], key)) {\n            filtered[key] = hash[key];\n        }\n    }\n    return filtered;\n}\nfunction mapHash(hash, func) {\n    var newHash = {};\n    for (var key in hash) {\n        newHash[key] = func(hash[key], key);\n    }\n    return newHash;\n}\nfunction arrayToHash(a) {\n    var hash = {};\n    for (var _i = 0, a_1 = a; _i < a_1.length; _i++) {\n        var item = a_1[_i];\n        hash[item] = true;\n    }\n    return hash;\n}\nfunction hashValuesToArray(obj) {\n    var a = [];\n    for (var key in obj) {\n        a.push(obj[key]);\n    }\n    return a;\n}\nfunction isPropsEqual(obj0, obj1) {\n    for (var key in obj0) {\n        if (hasOwnProperty.call(obj0, key)) {\n            if (!(key in obj1)) {\n                return false;\n            }\n        }\n    }\n    for (var key in obj1) {\n        if (hasOwnProperty.call(obj1, key)) {\n            if (obj0[key] !== obj1[key]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction parseEvents(rawEvents, sourceId, calendar, allowOpenRange) {\n    var eventStore = createEmptyEventStore();\n    for (var _i = 0, rawEvents_1 = rawEvents; _i < rawEvents_1.length; _i++) {\n        var rawEvent = rawEvents_1[_i];\n        var tuple = parseEvent(rawEvent, sourceId, calendar, allowOpenRange);\n        if (tuple) {\n            eventTupleToStore(tuple, eventStore);\n        }\n    }\n    return eventStore;\n}\nfunction eventTupleToStore(tuple, eventStore) {\n    if (eventStore === void 0) { eventStore = createEmptyEventStore(); }\n    eventStore.defs[tuple.def.defId] = tuple.def;\n    if (tuple.instance) {\n        eventStore.instances[tuple.instance.instanceId] = tuple.instance;\n    }\n    return eventStore;\n}\nfunction expandRecurring(eventStore, framingRange, calendar) {\n    var dateEnv = calendar.dateEnv;\n    var defs = eventStore.defs, instances = eventStore.instances;\n    // remove existing recurring instances\n    instances = filterHash(instances, function (instance) {\n        return !defs[instance.defId].recurringDef;\n    });\n    for (var defId in defs) {\n        var def = defs[defId];\n        if (def.recurringDef) {\n            var duration = def.recurringDef.duration;\n            if (!duration) {\n                duration = def.allDay ?\n                    calendar.defaultAllDayEventDuration :\n                    calendar.defaultTimedEventDuration;\n            }\n            var starts = expandRecurringRanges(def, duration, framingRange, calendar.dateEnv, calendar.pluginSystem.hooks.recurringTypes);\n            for (var _i = 0, starts_1 = starts; _i < starts_1.length; _i++) {\n                var start = starts_1[_i];\n                var instance = createEventInstance(defId, {\n                    start: start,\n                    end: dateEnv.add(start, duration)\n                });\n                instances[instance.instanceId] = instance;\n            }\n        }\n    }\n    return { defs: defs, instances: instances };\n}\n// retrieves events that have the same groupId as the instance specified by `instanceId`\n// or they are the same as the instance.\n// why might instanceId not be in the store? an event from another calendar?\nfunction getRelevantEvents(eventStore, instanceId) {\n    var instance = eventStore.instances[instanceId];\n    if (instance) {\n        var def_1 = eventStore.defs[instance.defId];\n        // get events/instances with same group\n        var newStore = filterEventStoreDefs(eventStore, function (lookDef) {\n            return isEventDefsGrouped(def_1, lookDef);\n        });\n        // add the original\n        // TODO: wish we could use eventTupleToStore or something like it\n        newStore.defs[def_1.defId] = def_1;\n        newStore.instances[instance.instanceId] = instance;\n        return newStore;\n    }\n    return createEmptyEventStore();\n}\nfunction isEventDefsGrouped(def0, def1) {\n    return Boolean(def0.groupId && def0.groupId === def1.groupId);\n}\nfunction transformRawEvents(rawEvents, eventSource, calendar) {\n    var calEachTransform = calendar.opt('eventDataTransform');\n    var sourceEachTransform = eventSource ? eventSource.eventDataTransform : null;\n    if (sourceEachTransform) {\n        rawEvents = transformEachRawEvent(rawEvents, sourceEachTransform);\n    }\n    if (calEachTransform) {\n        rawEvents = transformEachRawEvent(rawEvents, calEachTransform);\n    }\n    return rawEvents;\n}\nfunction transformEachRawEvent(rawEvents, func) {\n    var refinedEvents;\n    if (!func) {\n        refinedEvents = rawEvents;\n    }\n    else {\n        refinedEvents = [];\n        for (var _i = 0, rawEvents_2 = rawEvents; _i < rawEvents_2.length; _i++) {\n            var rawEvent = rawEvents_2[_i];\n            var refinedEvent = func(rawEvent);\n            if (refinedEvent) {\n                refinedEvents.push(refinedEvent);\n            }\n            else if (refinedEvent == null) {\n                refinedEvents.push(rawEvent);\n            } // if a different falsy value, do nothing\n        }\n    }\n    return refinedEvents;\n}\nfunction createEmptyEventStore() {\n    return { defs: {}, instances: {} };\n}\nfunction mergeEventStores(store0, store1) {\n    return {\n        defs: __assign({}, store0.defs, store1.defs),\n        instances: __assign({}, store0.instances, store1.instances)\n    };\n}\nfunction filterEventStoreDefs(eventStore, filterFunc) {\n    var defs = filterHash(eventStore.defs, filterFunc);\n    var instances = filterHash(eventStore.instances, function (instance) {\n        return defs[instance.defId]; // still exists?\n    });\n    return { defs: defs, instances: instances };\n}\n\nfunction parseRange(input, dateEnv) {\n    var start = null;\n    var end = null;\n    if (input.start) {\n        start = dateEnv.createMarker(input.start);\n    }\n    if (input.end) {\n        end = dateEnv.createMarker(input.end);\n    }\n    if (!start && !end) {\n        return null;\n    }\n    if (start && end && end < start) {\n        return null;\n    }\n    return { start: start, end: end };\n}\n// SIDE-EFFECT: will mutate ranges.\n// Will return a new array result.\nfunction invertRanges(ranges, constraintRange) {\n    var invertedRanges = [];\n    var start = constraintRange.start; // the end of the previous range. the start of the new range\n    var i;\n    var dateRange;\n    // ranges need to be in order. required for our date-walking algorithm\n    ranges.sort(compareRanges);\n    for (i = 0; i < ranges.length; i++) {\n        dateRange = ranges[i];\n        // add the span of time before the event (if there is any)\n        if (dateRange.start > start) { // compare millisecond time (skip any ambig logic)\n            invertedRanges.push({ start: start, end: dateRange.start });\n        }\n        if (dateRange.end > start) {\n            start = dateRange.end;\n        }\n    }\n    // add the span of time after the last event (if there is any)\n    if (start < constraintRange.end) { // compare millisecond time (skip any ambig logic)\n        invertedRanges.push({ start: start, end: constraintRange.end });\n    }\n    return invertedRanges;\n}\nfunction compareRanges(range0, range1) {\n    return range0.start.valueOf() - range1.start.valueOf(); // earlier ranges go first\n}\nfunction intersectRanges(range0, range1) {\n    var start = range0.start;\n    var end = range0.end;\n    var newRange = null;\n    if (range1.start !== null) {\n        if (start === null) {\n            start = range1.start;\n        }\n        else {\n            start = new Date(Math.max(start.valueOf(), range1.start.valueOf()));\n        }\n    }\n    if (range1.end != null) {\n        if (end === null) {\n            end = range1.end;\n        }\n        else {\n            end = new Date(Math.min(end.valueOf(), range1.end.valueOf()));\n        }\n    }\n    if (start === null || end === null || start < end) {\n        newRange = { start: start, end: end };\n    }\n    return newRange;\n}\nfunction rangesEqual(range0, range1) {\n    return (range0.start === null ? null : range0.start.valueOf()) === (range1.start === null ? null : range1.start.valueOf()) &&\n        (range0.end === null ? null : range0.end.valueOf()) === (range1.end === null ? null : range1.end.valueOf());\n}\nfunction rangesIntersect(range0, range1) {\n    return (range0.end === null || range1.start === null || range0.end > range1.start) &&\n        (range0.start === null || range1.end === null || range0.start < range1.end);\n}\nfunction rangeContainsRange(outerRange, innerRange) {\n    return (outerRange.start === null || (innerRange.start !== null && innerRange.start >= outerRange.start)) &&\n        (outerRange.end === null || (innerRange.end !== null && innerRange.end <= outerRange.end));\n}\nfunction rangeContainsMarker(range, date) {\n    return (range.start === null || date >= range.start) &&\n        (range.end === null || date < range.end);\n}\n// If the given date is not within the given range, move it inside.\n// (If it's past the end, make it one millisecond before the end).\nfunction constrainMarkerToRange(date, range) {\n    if (range.start != null && date < range.start) {\n        return range.start;\n    }\n    if (range.end != null && date >= range.end) {\n        return new Date(range.end.valueOf() - 1);\n    }\n    return date;\n}\n\nfunction removeExact(array, exactVal) {\n    var removeCnt = 0;\n    var i = 0;\n    while (i < array.length) {\n        if (array[i] === exactVal) {\n            array.splice(i, 1);\n            removeCnt++;\n        }\n        else {\n            i++;\n        }\n    }\n    return removeCnt;\n}\nfunction isArraysEqual(a0, a1) {\n    var len = a0.length;\n    var i;\n    if (len !== a1.length) { // not array? or not same length?\n        return false;\n    }\n    for (i = 0; i < len; i++) {\n        if (a0[i] !== a1[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction memoize(workerFunc) {\n    var args;\n    var res;\n    return function () {\n        if (!args || !isArraysEqual(args, arguments)) {\n            args = arguments;\n            res = workerFunc.apply(this, arguments);\n        }\n        return res;\n    };\n}\n/*\nalways executes the workerFunc, but if the result is equal to the previous result,\nreturn the previous result instead.\n*/\nfunction memoizeOutput(workerFunc, equalityFunc) {\n    var cachedRes = null;\n    return function () {\n        var newRes = workerFunc.apply(this, arguments);\n        if (cachedRes === null || !(cachedRes === newRes || equalityFunc(cachedRes, newRes))) {\n            cachedRes = newRes;\n        }\n        return cachedRes;\n    };\n}\n\nvar EXTENDED_SETTINGS_AND_SEVERITIES = {\n    week: 3,\n    separator: 0,\n    omitZeroMinute: 0,\n    meridiem: 0,\n    omitCommas: 0\n};\nvar STANDARD_DATE_PROP_SEVERITIES = {\n    timeZoneName: 7,\n    era: 6,\n    year: 5,\n    month: 4,\n    day: 2,\n    weekday: 2,\n    hour: 1,\n    minute: 1,\n    second: 1\n};\nvar MERIDIEM_RE = /\\s*([ap])\\.?m\\.?/i; // eats up leading spaces too\nvar COMMA_RE = /,/g; // we need re for globalness\nvar MULTI_SPACE_RE = /\\s+/g;\nvar LTR_RE = /\\u200e/g; // control character\nvar UTC_RE = /UTC|GMT/;\nvar NativeFormatter = /** @class */ (function () {\n    function NativeFormatter(formatSettings) {\n        var standardDateProps = {};\n        var extendedSettings = {};\n        var severity = 0;\n        for (var name_1 in formatSettings) {\n            if (name_1 in EXTENDED_SETTINGS_AND_SEVERITIES) {\n                extendedSettings[name_1] = formatSettings[name_1];\n                severity = Math.max(EXTENDED_SETTINGS_AND_SEVERITIES[name_1], severity);\n            }\n            else {\n                standardDateProps[name_1] = formatSettings[name_1];\n                if (name_1 in STANDARD_DATE_PROP_SEVERITIES) {\n                    severity = Math.max(STANDARD_DATE_PROP_SEVERITIES[name_1], severity);\n                }\n            }\n        }\n        this.standardDateProps = standardDateProps;\n        this.extendedSettings = extendedSettings;\n        this.severity = severity;\n        this.buildFormattingFunc = memoize(buildFormattingFunc);\n    }\n    NativeFormatter.prototype.format = function (date, context) {\n        return this.buildFormattingFunc(this.standardDateProps, this.extendedSettings, context)(date);\n    };\n    NativeFormatter.prototype.formatRange = function (start, end, context) {\n        var _a = this, standardDateProps = _a.standardDateProps, extendedSettings = _a.extendedSettings;\n        var diffSeverity = computeMarkerDiffSeverity(start.marker, end.marker, context.calendarSystem);\n        if (!diffSeverity) {\n            return this.format(start, context);\n        }\n        var biggestUnitForPartial = diffSeverity;\n        if (biggestUnitForPartial > 1 && // the two dates are different in a way that's larger scale than time\n            (standardDateProps.year === 'numeric' || standardDateProps.year === '2-digit') &&\n            (standardDateProps.month === 'numeric' || standardDateProps.month === '2-digit') &&\n            (standardDateProps.day === 'numeric' || standardDateProps.day === '2-digit')) {\n            biggestUnitForPartial = 1; // make it look like the dates are only different in terms of time\n        }\n        var full0 = this.format(start, context);\n        var full1 = this.format(end, context);\n        if (full0 === full1) {\n            return full0;\n        }\n        var partialDateProps = computePartialFormattingOptions(standardDateProps, biggestUnitForPartial);\n        var partialFormattingFunc = buildFormattingFunc(partialDateProps, extendedSettings, context);\n        var partial0 = partialFormattingFunc(start);\n        var partial1 = partialFormattingFunc(end);\n        var insertion = findCommonInsertion(full0, partial0, full1, partial1);\n        var separator = extendedSettings.separator || '';\n        if (insertion) {\n            return insertion.before + partial0 + separator + partial1 + insertion.after;\n        }\n        return full0 + separator + full1;\n    };\n    NativeFormatter.prototype.getLargestUnit = function () {\n        switch (this.severity) {\n            case 7:\n            case 6:\n            case 5:\n                return 'year';\n            case 4:\n                return 'month';\n            case 3:\n                return 'week';\n            default:\n                return 'day';\n        }\n    };\n    return NativeFormatter;\n}());\nfunction buildFormattingFunc(standardDateProps, extendedSettings, context) {\n    var standardDatePropCnt = Object.keys(standardDateProps).length;\n    if (standardDatePropCnt === 1 && standardDateProps.timeZoneName === 'short') {\n        return function (date) {\n            return formatTimeZoneOffset(date.timeZoneOffset);\n        };\n    }\n    if (standardDatePropCnt === 0 && extendedSettings.week) {\n        return function (date) {\n            return formatWeekNumber(context.computeWeekNumber(date.marker), context.weekLabel, context.locale, extendedSettings.week);\n        };\n    }\n    return buildNativeFormattingFunc(standardDateProps, extendedSettings, context);\n}\nfunction buildNativeFormattingFunc(standardDateProps, extendedSettings, context) {\n    standardDateProps = __assign({}, standardDateProps); // copy\n    extendedSettings = __assign({}, extendedSettings); // copy\n    sanitizeSettings(standardDateProps, extendedSettings);\n    standardDateProps.timeZone = 'UTC'; // we leverage the only guaranteed timeZone for our UTC markers\n    var normalFormat = new Intl.DateTimeFormat(context.locale.codes, standardDateProps);\n    var zeroFormat; // needed?\n    if (extendedSettings.omitZeroMinute) {\n        var zeroProps = __assign({}, standardDateProps);\n        delete zeroProps.minute; // seconds and ms were already considered in sanitizeSettings\n        zeroFormat = new Intl.DateTimeFormat(context.locale.codes, zeroProps);\n    }\n    return function (date) {\n        var marker = date.marker;\n        var format;\n        if (zeroFormat && !marker.getUTCMinutes()) {\n            format = zeroFormat;\n        }\n        else {\n            format = normalFormat;\n        }\n        var s = format.format(marker);\n        return postProcess(s, date, standardDateProps, extendedSettings, context);\n    };\n}\nfunction sanitizeSettings(standardDateProps, extendedSettings) {\n    // deal with a browser inconsistency where formatting the timezone\n    // requires that the hour/minute be present.\n    if (standardDateProps.timeZoneName) {\n        if (!standardDateProps.hour) {\n            standardDateProps.hour = '2-digit';\n        }\n        if (!standardDateProps.minute) {\n            standardDateProps.minute = '2-digit';\n        }\n    }\n    // only support short timezone names\n    if (standardDateProps.timeZoneName === 'long') {\n        standardDateProps.timeZoneName = 'short';\n    }\n    // if requesting to display seconds, MUST display minutes\n    if (extendedSettings.omitZeroMinute && (standardDateProps.second || standardDateProps.millisecond)) {\n        delete extendedSettings.omitZeroMinute;\n    }\n}\nfunction postProcess(s, date, standardDateProps, extendedSettings, context) {\n    s = s.replace(LTR_RE, ''); // remove left-to-right control chars. do first. good for other regexes\n    if (standardDateProps.timeZoneName === 'short') {\n        s = injectTzoStr(s, (context.timeZone === 'UTC' || date.timeZoneOffset == null) ?\n            'UTC' : // important to normalize for IE, which does \"GMT\"\n            formatTimeZoneOffset(date.timeZoneOffset));\n    }\n    if (extendedSettings.omitCommas) {\n        s = s.replace(COMMA_RE, '').trim();\n    }\n    if (extendedSettings.omitZeroMinute) {\n        s = s.replace(':00', ''); // zeroFormat doesn't always achieve this\n    }\n    // ^ do anything that might create adjacent spaces before this point,\n    // because MERIDIEM_RE likes to eat up loading spaces\n    if (extendedSettings.meridiem === false) {\n        s = s.replace(MERIDIEM_RE, '').trim();\n    }\n    else if (extendedSettings.meridiem === 'narrow') { // a/p\n        s = s.replace(MERIDIEM_RE, function (m0, m1) {\n            return m1.toLocaleLowerCase();\n        });\n    }\n    else if (extendedSettings.meridiem === 'short') { // am/pm\n        s = s.replace(MERIDIEM_RE, function (m0, m1) {\n            return m1.toLocaleLowerCase() + 'm';\n        });\n    }\n    else if (extendedSettings.meridiem === 'lowercase') { // other meridiem transformers already converted to lowercase\n        s = s.replace(MERIDIEM_RE, function (m0) {\n            return m0.toLocaleLowerCase();\n        });\n    }\n    s = s.replace(MULTI_SPACE_RE, ' ');\n    s = s.trim();\n    return s;\n}\nfunction injectTzoStr(s, tzoStr) {\n    var replaced = false;\n    s = s.replace(UTC_RE, function () {\n        replaced = true;\n        return tzoStr;\n    });\n    // IE11 doesn't include UTC/GMT in the original string, so append to end\n    if (!replaced) {\n        s += ' ' + tzoStr;\n    }\n    return s;\n}\nfunction formatWeekNumber(num, weekLabel, locale, display) {\n    var parts = [];\n    if (display === 'narrow') {\n        parts.push(weekLabel);\n    }\n    else if (display === 'short') {\n        parts.push(weekLabel, ' ');\n    }\n    // otherwise, considered 'numeric'\n    parts.push(locale.simpleNumberFormat.format(num));\n    if (locale.options.isRtl) { // TODO: use control characters instead?\n        parts.reverse();\n    }\n    return parts.join('');\n}\n// Range Formatting Utils\n// 0 = exactly the same\n// 1 = different by time\n// and bigger\nfunction computeMarkerDiffSeverity(d0, d1, ca) {\n    if (ca.getMarkerYear(d0) !== ca.getMarkerYear(d1)) {\n        return 5;\n    }\n    if (ca.getMarkerMonth(d0) !== ca.getMarkerMonth(d1)) {\n        return 4;\n    }\n    if (ca.getMarkerDay(d0) !== ca.getMarkerDay(d1)) {\n        return 2;\n    }\n    if (timeAsMs(d0) !== timeAsMs(d1)) {\n        return 1;\n    }\n    return 0;\n}\nfunction computePartialFormattingOptions(options, biggestUnit) {\n    var partialOptions = {};\n    for (var name_2 in options) {\n        if (!(name_2 in STANDARD_DATE_PROP_SEVERITIES) || // not a date part prop (like timeZone)\n            STANDARD_DATE_PROP_SEVERITIES[name_2] <= biggestUnit) {\n            partialOptions[name_2] = options[name_2];\n        }\n    }\n    return partialOptions;\n}\nfunction findCommonInsertion(full0, partial0, full1, partial1) {\n    var i0 = 0;\n    while (i0 < full0.length) {\n        var found0 = full0.indexOf(partial0, i0);\n        if (found0 === -1) {\n            break;\n        }\n        var before0 = full0.substr(0, found0);\n        i0 = found0 + partial0.length;\n        var after0 = full0.substr(i0);\n        var i1 = 0;\n        while (i1 < full1.length) {\n            var found1 = full1.indexOf(partial1, i1);\n            if (found1 === -1) {\n                break;\n            }\n            var before1 = full1.substr(0, found1);\n            i1 = found1 + partial1.length;\n            var after1 = full1.substr(i1);\n            if (before0 === before1 && after0 === after1) {\n                return {\n                    before: before0,\n                    after: after0\n                };\n            }\n        }\n    }\n    return null;\n}\n\n/*\nTODO: fix the terminology of \"formatter\" vs \"formatting func\"\n*/\n/*\nAt the time of instantiation, this object does not know which cmd-formatting system it will use.\nIt receives this at the time of formatting, as a setting.\n*/\nvar CmdFormatter = /** @class */ (function () {\n    function CmdFormatter(cmdStr, separator) {\n        this.cmdStr = cmdStr;\n        this.separator = separator;\n    }\n    CmdFormatter.prototype.format = function (date, context) {\n        return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(date, null, context, this.separator));\n    };\n    CmdFormatter.prototype.formatRange = function (start, end, context) {\n        return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(start, end, context, this.separator));\n    };\n    return CmdFormatter;\n}());\n\nvar FuncFormatter = /** @class */ (function () {\n    function FuncFormatter(func) {\n        this.func = func;\n    }\n    FuncFormatter.prototype.format = function (date, context) {\n        return this.func(createVerboseFormattingArg(date, null, context));\n    };\n    FuncFormatter.prototype.formatRange = function (start, end, context) {\n        return this.func(createVerboseFormattingArg(start, end, context));\n    };\n    return FuncFormatter;\n}());\n\n// Formatter Object Creation\nfunction createFormatter(input, defaultSeparator) {\n    if (typeof input === 'object' && input) { // non-null object\n        if (typeof defaultSeparator === 'string') {\n            input = __assign({ separator: defaultSeparator }, input);\n        }\n        return new NativeFormatter(input);\n    }\n    else if (typeof input === 'string') {\n        return new CmdFormatter(input, defaultSeparator);\n    }\n    else if (typeof input === 'function') {\n        return new FuncFormatter(input);\n    }\n}\n// String Utils\n// timeZoneOffset is in minutes\nfunction buildIsoString(marker, timeZoneOffset, stripZeroTime) {\n    if (stripZeroTime === void 0) { stripZeroTime = false; }\n    var s = marker.toISOString();\n    s = s.replace('.000', '');\n    if (stripZeroTime) {\n        s = s.replace('T00:00:00Z', '');\n    }\n    if (s.length > 10) { // time part wasn't stripped, can add timezone info\n        if (timeZoneOffset == null) {\n            s = s.replace('Z', '');\n        }\n        else if (timeZoneOffset !== 0) {\n            s = s.replace('Z', formatTimeZoneOffset(timeZoneOffset, true));\n        }\n        // otherwise, its UTC-0 and we want to keep the Z\n    }\n    return s;\n}\nfunction formatIsoTimeString(marker) {\n    return padStart(marker.getUTCHours(), 2) + ':' +\n        padStart(marker.getUTCMinutes(), 2) + ':' +\n        padStart(marker.getUTCSeconds(), 2);\n}\nfunction formatTimeZoneOffset(minutes, doIso) {\n    if (doIso === void 0) { doIso = false; }\n    var sign = minutes < 0 ? '-' : '+';\n    var abs = Math.abs(minutes);\n    var hours = Math.floor(abs / 60);\n    var mins = Math.round(abs % 60);\n    if (doIso) {\n        return sign + padStart(hours, 2) + ':' + padStart(mins, 2);\n    }\n    else {\n        return 'GMT' + sign + hours + (mins ? ':' + padStart(mins, 2) : '');\n    }\n}\n// Arg Utils\nfunction createVerboseFormattingArg(start, end, context, separator) {\n    var startInfo = expandZonedMarker(start, context.calendarSystem);\n    var endInfo = end ? expandZonedMarker(end, context.calendarSystem) : null;\n    return {\n        date: startInfo,\n        start: startInfo,\n        end: endInfo,\n        timeZone: context.timeZone,\n        localeCodes: context.locale.codes,\n        separator: separator\n    };\n}\nfunction expandZonedMarker(dateInfo, calendarSystem) {\n    var a = calendarSystem.markerToArray(dateInfo.marker);\n    return {\n        marker: dateInfo.marker,\n        timeZoneOffset: dateInfo.timeZoneOffset,\n        array: a,\n        year: a[0],\n        month: a[1],\n        day: a[2],\n        hour: a[3],\n        minute: a[4],\n        second: a[5],\n        millisecond: a[6]\n    };\n}\n\nvar EventSourceApi = /** @class */ (function () {\n    function EventSourceApi(calendar, internalEventSource) {\n        this.calendar = calendar;\n        this.internalEventSource = internalEventSource;\n    }\n    EventSourceApi.prototype.remove = function () {\n        this.calendar.dispatch({\n            type: 'REMOVE_EVENT_SOURCE',\n            sourceId: this.internalEventSource.sourceId\n        });\n    };\n    EventSourceApi.prototype.refetch = function () {\n        this.calendar.dispatch({\n            type: 'FETCH_EVENT_SOURCES',\n            sourceIds: [this.internalEventSource.sourceId]\n        });\n    };\n    Object.defineProperty(EventSourceApi.prototype, \"id\", {\n        get: function () {\n            return this.internalEventSource.publicId;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EventSourceApi.prototype, \"url\", {\n        // only relevant to json-feed event sources\n        get: function () {\n            return this.internalEventSource.meta.url;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return EventSourceApi;\n}());\n\nvar EventApi = /** @class */ (function () {\n    function EventApi(calendar, def, instance) {\n        this._calendar = calendar;\n        this._def = def;\n        this._instance = instance || null;\n    }\n    /*\n    TODO: make event struct more responsible for this\n    */\n    EventApi.prototype.setProp = function (name, val) {\n        var _a, _b;\n        if (name in DATE_PROPS) ;\n        else if (name in NON_DATE_PROPS) {\n            if (typeof NON_DATE_PROPS[name] === 'function') {\n                val = NON_DATE_PROPS[name](val);\n            }\n            this.mutate({\n                standardProps: (_a = {}, _a[name] = val, _a)\n            });\n        }\n        else if (name in UNSCOPED_EVENT_UI_PROPS) {\n            var ui = void 0;\n            if (typeof UNSCOPED_EVENT_UI_PROPS[name] === 'function') {\n                val = UNSCOPED_EVENT_UI_PROPS[name](val);\n            }\n            if (name === 'color') {\n                ui = { backgroundColor: val, borderColor: val };\n            }\n            else if (name === 'editable') {\n                ui = { startEditable: val, durationEditable: val };\n            }\n            else {\n                ui = (_b = {}, _b[name] = val, _b);\n            }\n            this.mutate({\n                standardProps: { ui: ui }\n            });\n        }\n    };\n    EventApi.prototype.setExtendedProp = function (name, val) {\n        var _a;\n        this.mutate({\n            extendedProps: (_a = {}, _a[name] = val, _a)\n        });\n    };\n    EventApi.prototype.setStart = function (startInput, options) {\n        if (options === void 0) { options = {}; }\n        var dateEnv = this._calendar.dateEnv;\n        var start = dateEnv.createMarker(startInput);\n        if (start && this._instance) { // TODO: warning if parsed bad\n            var instanceRange = this._instance.range;\n            var startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity); // what if parsed bad!?\n            if (options.maintainDuration) {\n                this.mutate({ datesDelta: startDelta });\n            }\n            else {\n                this.mutate({ startDelta: startDelta });\n            }\n        }\n    };\n    EventApi.prototype.setEnd = function (endInput, options) {\n        if (options === void 0) { options = {}; }\n        var dateEnv = this._calendar.dateEnv;\n        var end;\n        if (endInput != null) {\n            end = dateEnv.createMarker(endInput);\n            if (!end) {\n                return; // TODO: warning if parsed bad\n            }\n        }\n        if (this._instance) {\n            if (end) {\n                var endDelta = diffDates(this._instance.range.end, end, dateEnv, options.granularity);\n                this.mutate({ endDelta: endDelta });\n            }\n            else {\n                this.mutate({ standardProps: { hasEnd: false } });\n            }\n        }\n    };\n    EventApi.prototype.setDates = function (startInput, endInput, options) {\n        if (options === void 0) { options = {}; }\n        var dateEnv = this._calendar.dateEnv;\n        var standardProps = { allDay: options.allDay };\n        var start = dateEnv.createMarker(startInput);\n        var end;\n        if (!start) {\n            return; // TODO: warning if parsed bad\n        }\n        if (endInput != null) {\n            end = dateEnv.createMarker(endInput);\n            if (!end) { // TODO: warning if parsed bad\n                return;\n            }\n        }\n        if (this._instance) {\n            var instanceRange = this._instance.range;\n            // when computing the diff for an event being converted to all-day,\n            // compute diff off of the all-day values the way event-mutation does.\n            if (options.allDay === true) {\n                instanceRange = computeAlignedDayRange(instanceRange);\n            }\n            var startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity);\n            if (end) {\n                var endDelta = diffDates(instanceRange.end, end, dateEnv, options.granularity);\n                if (durationsEqual(startDelta, endDelta)) {\n                    this.mutate({ datesDelta: startDelta, standardProps: standardProps });\n                }\n                else {\n                    this.mutate({ startDelta: startDelta, endDelta: endDelta, standardProps: standardProps });\n                }\n            }\n            else { // means \"clear the end\"\n                standardProps.hasEnd = false;\n                this.mutate({ datesDelta: startDelta, standardProps: standardProps });\n            }\n        }\n    };\n    EventApi.prototype.moveStart = function (deltaInput) {\n        var delta = createDuration(deltaInput);\n        if (delta) { // TODO: warning if parsed bad\n            this.mutate({ startDelta: delta });\n        }\n    };\n    EventApi.prototype.moveEnd = function (deltaInput) {\n        var delta = createDuration(deltaInput);\n        if (delta) { // TODO: warning if parsed bad\n            this.mutate({ endDelta: delta });\n        }\n    };\n    EventApi.prototype.moveDates = function (deltaInput) {\n        var delta = createDuration(deltaInput);\n        if (delta) { // TODO: warning if parsed bad\n            this.mutate({ datesDelta: delta });\n        }\n    };\n    EventApi.prototype.setAllDay = function (allDay, options) {\n        if (options === void 0) { options = {}; }\n        var standardProps = { allDay: allDay };\n        var maintainDuration = options.maintainDuration;\n        if (maintainDuration == null) {\n            maintainDuration = this._calendar.opt('allDayMaintainDuration');\n        }\n        if (this._def.allDay !== allDay) {\n            standardProps.hasEnd = maintainDuration;\n        }\n        this.mutate({ standardProps: standardProps });\n    };\n    EventApi.prototype.formatRange = function (formatInput) {\n        var dateEnv = this._calendar.dateEnv;\n        var instance = this._instance;\n        var formatter = createFormatter(formatInput, this._calendar.opt('defaultRangeSeparator'));\n        if (this._def.hasEnd) {\n            return dateEnv.formatRange(instance.range.start, instance.range.end, formatter, {\n                forcedStartTzo: instance.forcedStartTzo,\n                forcedEndTzo: instance.forcedEndTzo\n            });\n        }\n        else {\n            return dateEnv.format(instance.range.start, formatter, {\n                forcedTzo: instance.forcedStartTzo\n            });\n        }\n    };\n    EventApi.prototype.mutate = function (mutation) {\n        var def = this._def;\n        var instance = this._instance;\n        if (instance) {\n            this._calendar.dispatch({\n                type: 'MUTATE_EVENTS',\n                instanceId: instance.instanceId,\n                mutation: mutation,\n                fromApi: true\n            });\n            var eventStore = this._calendar.state.eventStore;\n            this._def = eventStore.defs[def.defId];\n            this._instance = eventStore.instances[instance.instanceId];\n        }\n    };\n    EventApi.prototype.remove = function () {\n        this._calendar.dispatch({\n            type: 'REMOVE_EVENT_DEF',\n            defId: this._def.defId\n        });\n    };\n    Object.defineProperty(EventApi.prototype, \"source\", {\n        get: function () {\n            var sourceId = this._def.sourceId;\n            if (sourceId) {\n                return new EventSourceApi(this._calendar, this._calendar.state.eventSources[sourceId]);\n            }\n            return null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"start\", {\n        get: function () {\n            return this._instance ?\n                this._calendar.dateEnv.toDate(this._instance.range.start) :\n                null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"end\", {\n        get: function () {\n            return (this._instance && this._def.hasEnd) ?\n                this._calendar.dateEnv.toDate(this._instance.range.end) :\n                null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"id\", {\n        // computable props that all access the def\n        // TODO: find a TypeScript-compatible way to do this at scale\n        get: function () { return this._def.publicId; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"groupId\", {\n        get: function () { return this._def.groupId; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"allDay\", {\n        get: function () { return this._def.allDay; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"title\", {\n        get: function () { return this._def.title; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"url\", {\n        get: function () { return this._def.url; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"rendering\", {\n        get: function () { return this._def.rendering; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"startEditable\", {\n        get: function () { return this._def.ui.startEditable; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"durationEditable\", {\n        get: function () { return this._def.ui.durationEditable; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"constraint\", {\n        get: function () { return this._def.ui.constraints[0] || null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"overlap\", {\n        get: function () { return this._def.ui.overlap; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"allow\", {\n        get: function () { return this._def.ui.allows[0] || null; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"backgroundColor\", {\n        get: function () { return this._def.ui.backgroundColor; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"borderColor\", {\n        get: function () { return this._def.ui.borderColor; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"textColor\", {\n        get: function () { return this._def.ui.textColor; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"classNames\", {\n        // NOTE: user can't modify these because Object.freeze was called in event-def parsing\n        get: function () { return this._def.ui.classNames; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(EventApi.prototype, \"extendedProps\", {\n        get: function () { return this._def.extendedProps; },\n        enumerable: true,\n        configurable: true\n    });\n    return EventApi;\n}());\n\n/*\nSpecifying nextDayThreshold signals that all-day ranges should be sliced.\n*/\nfunction sliceEventStore(eventStore, eventUiBases, framingRange, nextDayThreshold) {\n    var inverseBgByGroupId = {};\n    var inverseBgByDefId = {};\n    var defByGroupId = {};\n    var bgRanges = [];\n    var fgRanges = [];\n    var eventUis = compileEventUis(eventStore.defs, eventUiBases);\n    for (var defId in eventStore.defs) {\n        var def = eventStore.defs[defId];\n        if (def.rendering === 'inverse-background') {\n            if (def.groupId) {\n                inverseBgByGroupId[def.groupId] = [];\n                if (!defByGroupId[def.groupId]) {\n                    defByGroupId[def.groupId] = def;\n                }\n            }\n            else {\n                inverseBgByDefId[defId] = [];\n            }\n        }\n    }\n    for (var instanceId in eventStore.instances) {\n        var instance = eventStore.instances[instanceId];\n        var def = eventStore.defs[instance.defId];\n        var ui = eventUis[def.defId];\n        var origRange = instance.range;\n        var normalRange = (!def.allDay && nextDayThreshold) ?\n            computeVisibleDayRange(origRange, nextDayThreshold) :\n            origRange;\n        var slicedRange = intersectRanges(normalRange, framingRange);\n        if (slicedRange) {\n            if (def.rendering === 'inverse-background') {\n                if (def.groupId) {\n                    inverseBgByGroupId[def.groupId].push(slicedRange);\n                }\n                else {\n                    inverseBgByDefId[instance.defId].push(slicedRange);\n                }\n            }\n            else {\n                (def.rendering === 'background' ? bgRanges : fgRanges).push({\n                    def: def,\n                    ui: ui,\n                    instance: instance,\n                    range: slicedRange,\n                    isStart: normalRange.start && normalRange.start.valueOf() === slicedRange.start.valueOf(),\n                    isEnd: normalRange.end && normalRange.end.valueOf() === slicedRange.end.valueOf()\n                });\n            }\n        }\n    }\n    for (var groupId in inverseBgByGroupId) { // BY GROUP\n        var ranges = inverseBgByGroupId[groupId];\n        var invertedRanges = invertRanges(ranges, framingRange);\n        for (var _i = 0, invertedRanges_1 = invertedRanges; _i < invertedRanges_1.length; _i++) {\n            var invertedRange = invertedRanges_1[_i];\n            var def = defByGroupId[groupId];\n            var ui = eventUis[def.defId];\n            bgRanges.push({\n                def: def,\n                ui: ui,\n                instance: null,\n                range: invertedRange,\n                isStart: false,\n                isEnd: false\n            });\n        }\n    }\n    for (var defId in inverseBgByDefId) {\n        var ranges = inverseBgByDefId[defId];\n        var invertedRanges = invertRanges(ranges, framingRange);\n        for (var _a = 0, invertedRanges_2 = invertedRanges; _a < invertedRanges_2.length; _a++) {\n            var invertedRange = invertedRanges_2[_a];\n            bgRanges.push({\n                def: eventStore.defs[defId],\n                ui: eventUis[defId],\n                instance: null,\n                range: invertedRange,\n                isStart: false,\n                isEnd: false\n            });\n        }\n    }\n    return { bg: bgRanges, fg: fgRanges };\n}\nfunction hasBgRendering(def) {\n    return def.rendering === 'background' || def.rendering === 'inverse-background';\n}\nfunction filterSegsViaEls(context, segs, isMirror) {\n    var calendar = context.calendar, view = context.view;\n    if (calendar.hasPublicHandlers('eventRender')) {\n        segs = segs.filter(function (seg) {\n            var custom = calendar.publiclyTrigger('eventRender', [\n                {\n                    event: new EventApi(calendar, seg.eventRange.def, seg.eventRange.instance),\n                    isMirror: isMirror,\n                    isStart: seg.isStart,\n                    isEnd: seg.isEnd,\n                    // TODO: include seg.range once all components consistently generate it\n                    el: seg.el,\n                    view: view\n                }\n            ]);\n            if (custom === false) { // means don't render at all\n                return false;\n            }\n            else if (custom && custom !== true) {\n                seg.el = custom;\n            }\n            return true;\n        });\n    }\n    for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n        var seg = segs_1[_i];\n        setElSeg(seg.el, seg);\n    }\n    return segs;\n}\nfunction setElSeg(el, seg) {\n    el.fcSeg = seg;\n}\nfunction getElSeg(el) {\n    return el.fcSeg || null;\n}\n// event ui computation\nfunction compileEventUis(eventDefs, eventUiBases) {\n    return mapHash(eventDefs, function (eventDef) {\n        return compileEventUi(eventDef, eventUiBases);\n    });\n}\nfunction compileEventUi(eventDef, eventUiBases) {\n    var uis = [];\n    if (eventUiBases['']) {\n        uis.push(eventUiBases['']);\n    }\n    if (eventUiBases[eventDef.defId]) {\n        uis.push(eventUiBases[eventDef.defId]);\n    }\n    uis.push(eventDef.ui);\n    return combineEventUis(uis);\n}\n// triggers\nfunction triggerRenderedSegs(context, segs, isMirrors) {\n    var calendar = context.calendar, view = context.view;\n    if (calendar.hasPublicHandlers('eventPositioned')) {\n        for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {\n            var seg = segs_2[_i];\n            calendar.publiclyTriggerAfterSizing('eventPositioned', [\n                {\n                    event: new EventApi(calendar, seg.eventRange.def, seg.eventRange.instance),\n                    isMirror: isMirrors,\n                    isStart: seg.isStart,\n                    isEnd: seg.isEnd,\n                    el: seg.el,\n                    view: view\n                }\n            ]);\n        }\n    }\n    if (!calendar.state.eventSourceLoadingLevel) { // avoid initial empty state while pending\n        calendar.afterSizingTriggers._eventsPositioned = [null]; // fire once\n    }\n}\nfunction triggerWillRemoveSegs(context, segs, isMirrors) {\n    var calendar = context.calendar, view = context.view;\n    for (var _i = 0, segs_3 = segs; _i < segs_3.length; _i++) {\n        var seg = segs_3[_i];\n        calendar.trigger('eventElRemove', seg.el);\n    }\n    if (calendar.hasPublicHandlers('eventDestroy')) {\n        for (var _a = 0, segs_4 = segs; _a < segs_4.length; _a++) {\n            var seg = segs_4[_a];\n            calendar.publiclyTrigger('eventDestroy', [\n                {\n                    event: new EventApi(calendar, seg.eventRange.def, seg.eventRange.instance),\n                    isMirror: isMirrors,\n                    el: seg.el,\n                    view: view\n                }\n            ]);\n        }\n    }\n}\n// is-interactable\nfunction computeEventDraggable(context, eventDef, eventUi) {\n    var calendar = context.calendar, view = context.view;\n    var transformers = calendar.pluginSystem.hooks.isDraggableTransformers;\n    var val = eventUi.startEditable;\n    for (var _i = 0, transformers_1 = transformers; _i < transformers_1.length; _i++) {\n        var transformer = transformers_1[_i];\n        val = transformer(val, eventDef, eventUi, view);\n    }\n    return val;\n}\nfunction computeEventStartResizable(context, eventDef, eventUi) {\n    return eventUi.durationEditable && context.options.eventResizableFromStart;\n}\nfunction computeEventEndResizable(context, eventDef, eventUi) {\n    return eventUi.durationEditable;\n}\n\n// applies the mutation to ALL defs/instances within the event store\nfunction applyMutationToEventStore(eventStore, eventConfigBase, mutation, calendar) {\n    var eventConfigs = compileEventUis(eventStore.defs, eventConfigBase);\n    var dest = createEmptyEventStore();\n    for (var defId in eventStore.defs) {\n        var def = eventStore.defs[defId];\n        dest.defs[defId] = applyMutationToEventDef(def, eventConfigs[defId], mutation, calendar.pluginSystem.hooks.eventDefMutationAppliers, calendar);\n    }\n    for (var instanceId in eventStore.instances) {\n        var instance = eventStore.instances[instanceId];\n        var def = dest.defs[instance.defId]; // important to grab the newly modified def\n        dest.instances[instanceId] = applyMutationToEventInstance(instance, def, eventConfigs[instance.defId], mutation, calendar);\n    }\n    return dest;\n}\nfunction applyMutationToEventDef(eventDef, eventConfig, mutation, appliers, calendar) {\n    var standardProps = mutation.standardProps || {};\n    // if hasEnd has not been specified, guess a good value based on deltas.\n    // if duration will change, there's no way the default duration will persist,\n    // and thus, we need to mark the event as having a real end\n    if (standardProps.hasEnd == null &&\n        eventConfig.durationEditable &&\n        (mutation.startDelta || mutation.endDelta)) {\n        standardProps.hasEnd = true; // TODO: is this mutation okay?\n    }\n    var copy = __assign({}, eventDef, standardProps, { ui: __assign({}, eventDef.ui, standardProps.ui) });\n    if (mutation.extendedProps) {\n        copy.extendedProps = __assign({}, copy.extendedProps, mutation.extendedProps);\n    }\n    for (var _i = 0, appliers_1 = appliers; _i < appliers_1.length; _i++) {\n        var applier = appliers_1[_i];\n        applier(copy, mutation, calendar);\n    }\n    if (!copy.hasEnd && calendar.opt('forceEventDuration')) {\n        copy.hasEnd = true;\n    }\n    return copy;\n}\nfunction applyMutationToEventInstance(eventInstance, eventDef, // must first be modified by applyMutationToEventDef\neventConfig, mutation, calendar) {\n    var dateEnv = calendar.dateEnv;\n    var forceAllDay = mutation.standardProps && mutation.standardProps.allDay === true;\n    var clearEnd = mutation.standardProps && mutation.standardProps.hasEnd === false;\n    var copy = __assign({}, eventInstance);\n    if (forceAllDay) {\n        copy.range = computeAlignedDayRange(copy.range);\n    }\n    if (mutation.datesDelta && eventConfig.startEditable) {\n        copy.range = {\n            start: dateEnv.add(copy.range.start, mutation.datesDelta),\n            end: dateEnv.add(copy.range.end, mutation.datesDelta)\n        };\n    }\n    if (mutation.startDelta && eventConfig.durationEditable) {\n        copy.range = {\n            start: dateEnv.add(copy.range.start, mutation.startDelta),\n            end: copy.range.end\n        };\n    }\n    if (mutation.endDelta && eventConfig.durationEditable) {\n        copy.range = {\n            start: copy.range.start,\n            end: dateEnv.add(copy.range.end, mutation.endDelta)\n        };\n    }\n    if (clearEnd) {\n        copy.range = {\n            start: copy.range.start,\n            end: calendar.getDefaultEventEnd(eventDef.allDay, copy.range.start)\n        };\n    }\n    // in case event was all-day but the supplied deltas were not\n    // better util for this?\n    if (eventDef.allDay) {\n        copy.range = {\n            start: startOfDay(copy.range.start),\n            end: startOfDay(copy.range.end)\n        };\n    }\n    // handle invalid durations\n    if (copy.range.end < copy.range.start) {\n        copy.range.end = calendar.getDefaultEventEnd(eventDef.allDay, copy.range.start);\n    }\n    return copy;\n}\n\nfunction reduceEventStore (eventStore, action, eventSources, dateProfile, calendar) {\n    switch (action.type) {\n        case 'RECEIVE_EVENTS': // raw\n            return receiveRawEvents(eventStore, eventSources[action.sourceId], action.fetchId, action.fetchRange, action.rawEvents, calendar);\n        case 'ADD_EVENTS': // already parsed, but not expanded\n            return addEvent(eventStore, action.eventStore, // new ones\n            dateProfile ? dateProfile.activeRange : null, calendar);\n        case 'MERGE_EVENTS': // already parsed and expanded\n            return mergeEventStores(eventStore, action.eventStore);\n        case 'PREV': // TODO: how do we track all actions that affect dateProfile :(\n        case 'NEXT':\n        case 'SET_DATE':\n        case 'SET_VIEW_TYPE':\n            if (dateProfile) {\n                return expandRecurring(eventStore, dateProfile.activeRange, calendar);\n            }\n            else {\n                return eventStore;\n            }\n        case 'CHANGE_TIMEZONE':\n            return rezoneDates(eventStore, action.oldDateEnv, calendar.dateEnv);\n        case 'MUTATE_EVENTS':\n            return applyMutationToRelated(eventStore, action.instanceId, action.mutation, action.fromApi, calendar);\n        case 'REMOVE_EVENT_INSTANCES':\n            return excludeInstances(eventStore, action.instances);\n        case 'REMOVE_EVENT_DEF':\n            return filterEventStoreDefs(eventStore, function (eventDef) {\n                return eventDef.defId !== action.defId;\n            });\n        case 'REMOVE_EVENT_SOURCE':\n            return excludeEventsBySourceId(eventStore, action.sourceId);\n        case 'REMOVE_ALL_EVENT_SOURCES':\n            return filterEventStoreDefs(eventStore, function (eventDef) {\n                return !eventDef.sourceId; // only keep events with no source id\n            });\n        case 'REMOVE_ALL_EVENTS':\n            return createEmptyEventStore();\n        case 'RESET_EVENTS':\n            return {\n                defs: eventStore.defs,\n                instances: eventStore.instances\n            };\n        default:\n            return eventStore;\n    }\n}\nfunction receiveRawEvents(eventStore, eventSource, fetchId, fetchRange, rawEvents, calendar) {\n    if (eventSource && // not already removed\n        fetchId === eventSource.latestFetchId // TODO: wish this logic was always in event-sources\n    ) {\n        var subset = parseEvents(transformRawEvents(rawEvents, eventSource, calendar), eventSource.sourceId, calendar);\n        if (fetchRange) {\n            subset = expandRecurring(subset, fetchRange, calendar);\n        }\n        return mergeEventStores(excludeEventsBySourceId(eventStore, eventSource.sourceId), subset);\n    }\n    return eventStore;\n}\nfunction addEvent(eventStore, subset, expandRange, calendar) {\n    if (expandRange) {\n        subset = expandRecurring(subset, expandRange, calendar);\n    }\n    return mergeEventStores(eventStore, subset);\n}\nfunction rezoneDates(eventStore, oldDateEnv, newDateEnv) {\n    var defs = eventStore.defs;\n    var instances = mapHash(eventStore.instances, function (instance) {\n        var def = defs[instance.defId];\n        if (def.allDay || def.recurringDef) {\n            return instance; // isn't dependent on timezone\n        }\n        else {\n            return __assign({}, instance, { range: {\n                    start: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.start, instance.forcedStartTzo)),\n                    end: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.end, instance.forcedEndTzo))\n                }, forcedStartTzo: newDateEnv.canComputeOffset ? null : instance.forcedStartTzo, forcedEndTzo: newDateEnv.canComputeOffset ? null : instance.forcedEndTzo });\n        }\n    });\n    return { defs: defs, instances: instances };\n}\nfunction applyMutationToRelated(eventStore, instanceId, mutation, fromApi, calendar) {\n    var relevant = getRelevantEvents(eventStore, instanceId);\n    var eventConfigBase = fromApi ?\n        { '': {\n                startEditable: true,\n                durationEditable: true,\n                constraints: [],\n                overlap: null,\n                allows: [],\n                backgroundColor: '',\n                borderColor: '',\n                textColor: '',\n                classNames: []\n            } } :\n        calendar.eventUiBases;\n    relevant = applyMutationToEventStore(relevant, eventConfigBase, mutation, calendar);\n    return mergeEventStores(eventStore, relevant);\n}\nfunction excludeEventsBySourceId(eventStore, sourceId) {\n    return filterEventStoreDefs(eventStore, function (eventDef) {\n        return eventDef.sourceId !== sourceId;\n    });\n}\n// QUESTION: why not just return instances? do a general object-property-exclusion util\nfunction excludeInstances(eventStore, removals) {\n    return {\n        defs: eventStore.defs,\n        instances: filterHash(eventStore.instances, function (instance) {\n            return !removals[instance.instanceId];\n        })\n    };\n}\n\n// high-level segmenting-aware tester functions\n// ------------------------------------------------------------------------------------------------------------------------\nfunction isInteractionValid(interaction, calendar) {\n    return isNewPropsValid({ eventDrag: interaction }, calendar); // HACK: the eventDrag props is used for ALL interactions\n}\nfunction isDateSelectionValid(dateSelection, calendar) {\n    return isNewPropsValid({ dateSelection: dateSelection }, calendar);\n}\nfunction isNewPropsValid(newProps, calendar) {\n    var view = calendar.view;\n    var props = __assign({ businessHours: view ? view.props.businessHours : createEmptyEventStore(), dateSelection: '', eventStore: calendar.state.eventStore, eventUiBases: calendar.eventUiBases, eventSelection: '', eventDrag: null, eventResize: null }, newProps);\n    return (calendar.pluginSystem.hooks.isPropsValid || isPropsValid)(props, calendar);\n}\nfunction isPropsValid(state, calendar, dateSpanMeta, filterConfig) {\n    if (dateSpanMeta === void 0) { dateSpanMeta = {}; }\n    if (state.eventDrag && !isInteractionPropsValid(state, calendar, dateSpanMeta, filterConfig)) {\n        return false;\n    }\n    if (state.dateSelection && !isDateSelectionPropsValid(state, calendar, dateSpanMeta, filterConfig)) {\n        return false;\n    }\n    return true;\n}\n// Moving Event Validation\n// ------------------------------------------------------------------------------------------------------------------------\nfunction isInteractionPropsValid(state, calendar, dateSpanMeta, filterConfig) {\n    var interaction = state.eventDrag; // HACK: the eventDrag props is used for ALL interactions\n    var subjectEventStore = interaction.mutatedEvents;\n    var subjectDefs = subjectEventStore.defs;\n    var subjectInstances = subjectEventStore.instances;\n    var subjectConfigs = compileEventUis(subjectDefs, interaction.isEvent ?\n        state.eventUiBases :\n        { '': calendar.selectionConfig } // if not a real event, validate as a selection\n    );\n    if (filterConfig) {\n        subjectConfigs = mapHash(subjectConfigs, filterConfig);\n    }\n    var otherEventStore = excludeInstances(state.eventStore, interaction.affectedEvents.instances); // exclude the subject events. TODO: exclude defs too?\n    var otherDefs = otherEventStore.defs;\n    var otherInstances = otherEventStore.instances;\n    var otherConfigs = compileEventUis(otherDefs, state.eventUiBases);\n    for (var subjectInstanceId in subjectInstances) {\n        var subjectInstance = subjectInstances[subjectInstanceId];\n        var subjectRange = subjectInstance.range;\n        var subjectConfig = subjectConfigs[subjectInstance.defId];\n        var subjectDef = subjectDefs[subjectInstance.defId];\n        // constraint\n        if (!allConstraintsPass(subjectConfig.constraints, subjectRange, otherEventStore, state.businessHours, calendar)) {\n            return false;\n        }\n        // overlap\n        var overlapFunc = calendar.opt('eventOverlap');\n        if (typeof overlapFunc !== 'function') {\n            overlapFunc = null;\n        }\n        for (var otherInstanceId in otherInstances) {\n            var otherInstance = otherInstances[otherInstanceId];\n            // intersect! evaluate\n            if (rangesIntersect(subjectRange, otherInstance.range)) {\n                var otherOverlap = otherConfigs[otherInstance.defId].overlap;\n                // consider the other event's overlap. only do this if the subject event is a \"real\" event\n                if (otherOverlap === false && interaction.isEvent) {\n                    return false;\n                }\n                if (subjectConfig.overlap === false) {\n                    return false;\n                }\n                if (overlapFunc && !overlapFunc(new EventApi(calendar, otherDefs[otherInstance.defId], otherInstance), // still event\n                new EventApi(calendar, subjectDef, subjectInstance) // moving event\n                )) {\n                    return false;\n                }\n            }\n        }\n        // allow (a function)\n        var calendarEventStore = calendar.state.eventStore; // need global-to-calendar, not local to component (splittable)state\n        for (var _i = 0, _a = subjectConfig.allows; _i < _a.length; _i++) {\n            var subjectAllow = _a[_i];\n            var subjectDateSpan = __assign({}, dateSpanMeta, { range: subjectInstance.range, allDay: subjectDef.allDay });\n            var origDef = calendarEventStore.defs[subjectDef.defId];\n            var origInstance = calendarEventStore.instances[subjectInstanceId];\n            var eventApi = void 0;\n            if (origDef) { // was previously in the calendar\n                eventApi = new EventApi(calendar, origDef, origInstance);\n            }\n            else { // was an external event\n                eventApi = new EventApi(calendar, subjectDef); // no instance, because had no dates\n            }\n            if (!subjectAllow(calendar.buildDateSpanApi(subjectDateSpan), eventApi)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n// Date Selection Validation\n// ------------------------------------------------------------------------------------------------------------------------\nfunction isDateSelectionPropsValid(state, calendar, dateSpanMeta, filterConfig) {\n    var relevantEventStore = state.eventStore;\n    var relevantDefs = relevantEventStore.defs;\n    var relevantInstances = relevantEventStore.instances;\n    var selection = state.dateSelection;\n    var selectionRange = selection.range;\n    var selectionConfig = calendar.selectionConfig;\n    if (filterConfig) {\n        selectionConfig = filterConfig(selectionConfig);\n    }\n    // constraint\n    if (!allConstraintsPass(selectionConfig.constraints, selectionRange, relevantEventStore, state.businessHours, calendar)) {\n        return false;\n    }\n    // overlap\n    var overlapFunc = calendar.opt('selectOverlap');\n    if (typeof overlapFunc !== 'function') {\n        overlapFunc = null;\n    }\n    for (var relevantInstanceId in relevantInstances) {\n        var relevantInstance = relevantInstances[relevantInstanceId];\n        // intersect! evaluate\n        if (rangesIntersect(selectionRange, relevantInstance.range)) {\n            if (selectionConfig.overlap === false) {\n                return false;\n            }\n            if (overlapFunc && !overlapFunc(new EventApi(calendar, relevantDefs[relevantInstance.defId], relevantInstance))) {\n                return false;\n            }\n        }\n    }\n    // allow (a function)\n    for (var _i = 0, _a = selectionConfig.allows; _i < _a.length; _i++) {\n        var selectionAllow = _a[_i];\n        var fullDateSpan = __assign({}, dateSpanMeta, selection);\n        if (!selectionAllow(calendar.buildDateSpanApi(fullDateSpan), null)) {\n            return false;\n        }\n    }\n    return true;\n}\n// Constraint Utils\n// ------------------------------------------------------------------------------------------------------------------------\nfunction allConstraintsPass(constraints, subjectRange, otherEventStore, businessHoursUnexpanded, calendar) {\n    for (var _i = 0, constraints_1 = constraints; _i < constraints_1.length; _i++) {\n        var constraint = constraints_1[_i];\n        if (!anyRangesContainRange(constraintToRanges(constraint, subjectRange, otherEventStore, businessHoursUnexpanded, calendar), subjectRange)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction constraintToRanges(constraint, subjectRange, // for expanding a recurring constraint, or expanding business hours\notherEventStore, // for if constraint is an even group ID\nbusinessHoursUnexpanded, // for if constraint is 'businessHours'\ncalendar // for expanding businesshours\n) {\n    if (constraint === 'businessHours') {\n        return eventStoreToRanges(expandRecurring(businessHoursUnexpanded, subjectRange, calendar));\n    }\n    else if (typeof constraint === 'string') { // an group ID\n        return eventStoreToRanges(filterEventStoreDefs(otherEventStore, function (eventDef) {\n            return eventDef.groupId === constraint;\n        }));\n    }\n    else if (typeof constraint === 'object' && constraint) { // non-null object\n        return eventStoreToRanges(expandRecurring(constraint, subjectRange, calendar));\n    }\n    return []; // if it's false\n}\n// TODO: move to event-store file?\nfunction eventStoreToRanges(eventStore) {\n    var instances = eventStore.instances;\n    var ranges = [];\n    for (var instanceId in instances) {\n        ranges.push(instances[instanceId].range);\n    }\n    return ranges;\n}\n// TODO: move to geom file?\nfunction anyRangesContainRange(outerRanges, innerRange) {\n    for (var _i = 0, outerRanges_1 = outerRanges; _i < outerRanges_1.length; _i++) {\n        var outerRange = outerRanges_1[_i];\n        if (rangeContainsRange(outerRange, innerRange)) {\n            return true;\n        }\n    }\n    return false;\n}\n// Parsing\n// ------------------------------------------------------------------------------------------------------------------------\nfunction normalizeConstraint(input, calendar) {\n    if (Array.isArray(input)) {\n        return parseEvents(input, '', calendar, true); // allowOpenRange=true\n    }\n    else if (typeof input === 'object' && input) { // non-null object\n        return parseEvents([input], '', calendar, true); // allowOpenRange=true\n    }\n    else if (input != null) {\n        return String(input);\n    }\n    else {\n        return null;\n    }\n}\n\nfunction htmlEscape(s) {\n    return (s + '').replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/'/g, '&#039;')\n        .replace(/\"/g, '&quot;')\n        .replace(/\\n/g, '<br />');\n}\n// Given a hash of CSS properties, returns a string of CSS.\n// Uses property names as-is (no camel-case conversion). Will not make statements for null/undefined values.\nfunction cssToStr(cssProps) {\n    var statements = [];\n    for (var name_1 in cssProps) {\n        var val = cssProps[name_1];\n        if (val != null && val !== '') {\n            statements.push(name_1 + ':' + val);\n        }\n    }\n    return statements.join(';');\n}\n// Given an object hash of HTML attribute names to values,\n// generates a string that can be injected between < > in HTML\nfunction attrsToStr(attrs) {\n    var parts = [];\n    for (var name_2 in attrs) {\n        var val = attrs[name_2];\n        if (val != null) {\n            parts.push(name_2 + '=\"' + htmlEscape(val) + '\"');\n        }\n    }\n    return parts.join(' ');\n}\nfunction parseClassName(raw) {\n    if (Array.isArray(raw)) {\n        return raw;\n    }\n    else if (typeof raw === 'string') {\n        return raw.split(/\\s+/);\n    }\n    else {\n        return [];\n    }\n}\n\nvar UNSCOPED_EVENT_UI_PROPS = {\n    editable: Boolean,\n    startEditable: Boolean,\n    durationEditable: Boolean,\n    constraint: null,\n    overlap: null,\n    allow: null,\n    className: parseClassName,\n    classNames: parseClassName,\n    color: String,\n    backgroundColor: String,\n    borderColor: String,\n    textColor: String\n};\nfunction processUnscopedUiProps(rawProps, calendar, leftovers) {\n    var props = refineProps(rawProps, UNSCOPED_EVENT_UI_PROPS, {}, leftovers);\n    var constraint = normalizeConstraint(props.constraint, calendar);\n    return {\n        startEditable: props.startEditable != null ? props.startEditable : props.editable,\n        durationEditable: props.durationEditable != null ? props.durationEditable : props.editable,\n        constraints: constraint != null ? [constraint] : [],\n        overlap: props.overlap,\n        allows: props.allow != null ? [props.allow] : [],\n        backgroundColor: props.backgroundColor || props.color,\n        borderColor: props.borderColor || props.color,\n        textColor: props.textColor,\n        classNames: props.classNames.concat(props.className)\n    };\n}\nfunction processScopedUiProps(prefix, rawScoped, calendar, leftovers) {\n    var rawUnscoped = {};\n    var wasFound = {};\n    for (var key in UNSCOPED_EVENT_UI_PROPS) {\n        var scopedKey = prefix + capitaliseFirstLetter(key);\n        rawUnscoped[key] = rawScoped[scopedKey];\n        wasFound[scopedKey] = true;\n    }\n    if (prefix === 'event') {\n        rawUnscoped.editable = rawScoped.editable; // special case. there is no 'eventEditable', just 'editable'\n    }\n    if (leftovers) {\n        for (var key in rawScoped) {\n            if (!wasFound[key]) {\n                leftovers[key] = rawScoped[key];\n            }\n        }\n    }\n    return processUnscopedUiProps(rawUnscoped, calendar);\n}\nvar EMPTY_EVENT_UI = {\n    startEditable: null,\n    durationEditable: null,\n    constraints: [],\n    overlap: null,\n    allows: [],\n    backgroundColor: '',\n    borderColor: '',\n    textColor: '',\n    classNames: []\n};\n// prevent against problems with <2 args!\nfunction combineEventUis(uis) {\n    return uis.reduce(combineTwoEventUis, EMPTY_EVENT_UI);\n}\nfunction combineTwoEventUis(item0, item1) {\n    return {\n        startEditable: item1.startEditable != null ? item1.startEditable : item0.startEditable,\n        durationEditable: item1.durationEditable != null ? item1.durationEditable : item0.durationEditable,\n        constraints: item0.constraints.concat(item1.constraints),\n        overlap: typeof item1.overlap === 'boolean' ? item1.overlap : item0.overlap,\n        allows: item0.allows.concat(item1.allows),\n        backgroundColor: item1.backgroundColor || item0.backgroundColor,\n        borderColor: item1.borderColor || item0.borderColor,\n        textColor: item1.textColor || item0.textColor,\n        classNames: item0.classNames.concat(item1.classNames)\n    };\n}\n\nvar NON_DATE_PROPS = {\n    id: String,\n    groupId: String,\n    title: String,\n    url: String,\n    rendering: String,\n    extendedProps: null\n};\nvar DATE_PROPS = {\n    start: null,\n    date: null,\n    end: null,\n    allDay: null\n};\nvar uid = 0;\nfunction parseEvent(raw, sourceId, calendar, allowOpenRange) {\n    var allDayDefault = computeIsAllDayDefault(sourceId, calendar);\n    var leftovers0 = {};\n    var recurringRes = parseRecurring(raw, // raw, but with single-event stuff stripped out\n    allDayDefault, calendar.dateEnv, calendar.pluginSystem.hooks.recurringTypes, leftovers0 // will populate with non-recurring props\n    );\n    if (recurringRes) {\n        var def = parseEventDef(leftovers0, sourceId, recurringRes.allDay, Boolean(recurringRes.duration), calendar);\n        def.recurringDef = {\n            typeId: recurringRes.typeId,\n            typeData: recurringRes.typeData,\n            duration: recurringRes.duration\n        };\n        return { def: def, instance: null };\n    }\n    else {\n        var leftovers1 = {};\n        var singleRes = parseSingle(raw, allDayDefault, calendar, leftovers1, allowOpenRange);\n        if (singleRes) {\n            var def = parseEventDef(leftovers1, sourceId, singleRes.allDay, singleRes.hasEnd, calendar);\n            var instance = createEventInstance(def.defId, singleRes.range, singleRes.forcedStartTzo, singleRes.forcedEndTzo);\n            return { def: def, instance: instance };\n        }\n    }\n    return null;\n}\n/*\nWill NOT populate extendedProps with the leftover properties.\nWill NOT populate date-related props.\nThe EventNonDateInput has been normalized (id => publicId, etc).\n*/\nfunction parseEventDef(raw, sourceId, allDay, hasEnd, calendar) {\n    var leftovers = {};\n    var def = pluckNonDateProps(raw, calendar, leftovers);\n    def.defId = String(uid++);\n    def.sourceId = sourceId;\n    def.allDay = allDay;\n    def.hasEnd = hasEnd;\n    for (var _i = 0, _a = calendar.pluginSystem.hooks.eventDefParsers; _i < _a.length; _i++) {\n        var eventDefParser = _a[_i];\n        var newLeftovers = {};\n        eventDefParser(def, leftovers, newLeftovers);\n        leftovers = newLeftovers;\n    }\n    def.extendedProps = __assign(leftovers, def.extendedProps || {});\n    // help out EventApi from having user modify props\n    Object.freeze(def.ui.classNames);\n    Object.freeze(def.extendedProps);\n    return def;\n}\nfunction createEventInstance(defId, range, forcedStartTzo, forcedEndTzo) {\n    return {\n        instanceId: String(uid++),\n        defId: defId,\n        range: range,\n        forcedStartTzo: forcedStartTzo == null ? null : forcedStartTzo,\n        forcedEndTzo: forcedEndTzo == null ? null : forcedEndTzo\n    };\n}\nfunction parseSingle(raw, allDayDefault, calendar, leftovers, allowOpenRange) {\n    var props = pluckDateProps(raw, leftovers);\n    var allDay = props.allDay;\n    var startMeta;\n    var startMarker = null;\n    var hasEnd = false;\n    var endMeta;\n    var endMarker = null;\n    startMeta = calendar.dateEnv.createMarkerMeta(props.start);\n    if (startMeta) {\n        startMarker = startMeta.marker;\n    }\n    else if (!allowOpenRange) {\n        return null;\n    }\n    if (props.end != null) {\n        endMeta = calendar.dateEnv.createMarkerMeta(props.end);\n    }\n    if (allDay == null) {\n        if (allDayDefault != null) {\n            allDay = allDayDefault;\n        }\n        else {\n            // fall back to the date props LAST\n            allDay = (!startMeta || startMeta.isTimeUnspecified) &&\n                (!endMeta || endMeta.isTimeUnspecified);\n        }\n    }\n    if (allDay && startMarker) {\n        startMarker = startOfDay(startMarker);\n    }\n    if (endMeta) {\n        endMarker = endMeta.marker;\n        if (allDay) {\n            endMarker = startOfDay(endMarker);\n        }\n        if (startMarker && endMarker <= startMarker) {\n            endMarker = null;\n        }\n    }\n    if (endMarker) {\n        hasEnd = true;\n    }\n    else if (!allowOpenRange) {\n        hasEnd = calendar.opt('forceEventDuration') || false;\n        endMarker = calendar.dateEnv.add(startMarker, allDay ?\n            calendar.defaultAllDayEventDuration :\n            calendar.defaultTimedEventDuration);\n    }\n    return {\n        allDay: allDay,\n        hasEnd: hasEnd,\n        range: { start: startMarker, end: endMarker },\n        forcedStartTzo: startMeta ? startMeta.forcedTzo : null,\n        forcedEndTzo: endMeta ? endMeta.forcedTzo : null\n    };\n}\nfunction pluckDateProps(raw, leftovers) {\n    var props = refineProps(raw, DATE_PROPS, {}, leftovers);\n    props.start = (props.start !== null) ? props.start : props.date;\n    delete props.date;\n    return props;\n}\nfunction pluckNonDateProps(raw, calendar, leftovers) {\n    var preLeftovers = {};\n    var props = refineProps(raw, NON_DATE_PROPS, {}, preLeftovers);\n    var ui = processUnscopedUiProps(preLeftovers, calendar, leftovers);\n    props.publicId = props.id;\n    delete props.id;\n    props.ui = ui;\n    return props;\n}\nfunction computeIsAllDayDefault(sourceId, calendar) {\n    var res = null;\n    if (sourceId) {\n        var source = calendar.state.eventSources[sourceId];\n        res = source.allDayDefault;\n    }\n    if (res == null) {\n        res = calendar.opt('allDayDefault');\n    }\n    return res;\n}\n\nvar DEF_DEFAULTS = {\n    startTime: '09:00',\n    endTime: '17:00',\n    daysOfWeek: [1, 2, 3, 4, 5],\n    rendering: 'inverse-background',\n    classNames: 'fc-nonbusiness',\n    groupId: '_businessHours' // so multiple defs get grouped\n};\n/*\nTODO: pass around as EventDefHash!!!\n*/\nfunction parseBusinessHours(input, calendar) {\n    return parseEvents(refineInputs(input), '', calendar);\n}\nfunction refineInputs(input) {\n    var rawDefs;\n    if (input === true) {\n        rawDefs = [{}]; // will get DEF_DEFAULTS verbatim\n    }\n    else if (Array.isArray(input)) {\n        // if specifying an array, every sub-definition NEEDS a day-of-week\n        rawDefs = input.filter(function (rawDef) {\n            return rawDef.daysOfWeek;\n        });\n    }\n    else if (typeof input === 'object' && input) { // non-null object\n        rawDefs = [input];\n    }\n    else { // is probably false\n        rawDefs = [];\n    }\n    rawDefs = rawDefs.map(function (rawDef) {\n        return __assign({}, DEF_DEFAULTS, rawDef);\n    });\n    return rawDefs;\n}\n\nfunction memoizeRendering(renderFunc, unrenderFunc, dependencies) {\n    if (dependencies === void 0) { dependencies = []; }\n    var dependents = [];\n    var thisContext;\n    var prevArgs;\n    function unrender() {\n        if (prevArgs) {\n            for (var _i = 0, dependents_1 = dependents; _i < dependents_1.length; _i++) {\n                var dependent = dependents_1[_i];\n                dependent.unrender();\n            }\n            if (unrenderFunc) {\n                unrenderFunc.apply(thisContext, prevArgs);\n            }\n            prevArgs = null;\n        }\n    }\n    function res() {\n        if (!prevArgs || !isArraysEqual(prevArgs, arguments)) {\n            unrender();\n            thisContext = this;\n            prevArgs = arguments;\n            renderFunc.apply(this, arguments);\n        }\n    }\n    res.dependents = dependents;\n    res.unrender = unrender;\n    for (var _i = 0, dependencies_1 = dependencies; _i < dependencies_1.length; _i++) {\n        var dependency = dependencies_1[_i];\n        dependency.dependents.push(res);\n    }\n    return res;\n}\n\nvar EMPTY_EVENT_STORE = createEmptyEventStore(); // for purecomponents. TODO: keep elsewhere\nvar Splitter = /** @class */ (function () {\n    function Splitter() {\n        this.getKeysForEventDefs = memoize(this._getKeysForEventDefs);\n        this.splitDateSelection = memoize(this._splitDateSpan);\n        this.splitEventStore = memoize(this._splitEventStore);\n        this.splitIndividualUi = memoize(this._splitIndividualUi);\n        this.splitEventDrag = memoize(this._splitInteraction);\n        this.splitEventResize = memoize(this._splitInteraction);\n        this.eventUiBuilders = {}; // TODO: typescript protection\n    }\n    Splitter.prototype.splitProps = function (props) {\n        var _this = this;\n        var keyInfos = this.getKeyInfo(props);\n        var defKeys = this.getKeysForEventDefs(props.eventStore);\n        var dateSelections = this.splitDateSelection(props.dateSelection);\n        var individualUi = this.splitIndividualUi(props.eventUiBases, defKeys); // the individual *bases*\n        var eventStores = this.splitEventStore(props.eventStore, defKeys);\n        var eventDrags = this.splitEventDrag(props.eventDrag);\n        var eventResizes = this.splitEventResize(props.eventResize);\n        var splitProps = {};\n        this.eventUiBuilders = mapHash(keyInfos, function (info, key) {\n            return _this.eventUiBuilders[key] || memoize(buildEventUiForKey);\n        });\n        for (var key in keyInfos) {\n            var keyInfo = keyInfos[key];\n            var eventStore = eventStores[key] || EMPTY_EVENT_STORE;\n            var buildEventUi = this.eventUiBuilders[key];\n            splitProps[key] = {\n                businessHours: keyInfo.businessHours || props.businessHours,\n                dateSelection: dateSelections[key] || null,\n                eventStore: eventStore,\n                eventUiBases: buildEventUi(props.eventUiBases[''], keyInfo.ui, individualUi[key]),\n                eventSelection: eventStore.instances[props.eventSelection] ? props.eventSelection : '',\n                eventDrag: eventDrags[key] || null,\n                eventResize: eventResizes[key] || null\n            };\n        }\n        return splitProps;\n    };\n    Splitter.prototype._splitDateSpan = function (dateSpan) {\n        var dateSpans = {};\n        if (dateSpan) {\n            var keys = this.getKeysForDateSpan(dateSpan);\n            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n                var key = keys_1[_i];\n                dateSpans[key] = dateSpan;\n            }\n        }\n        return dateSpans;\n    };\n    Splitter.prototype._getKeysForEventDefs = function (eventStore) {\n        var _this = this;\n        return mapHash(eventStore.defs, function (eventDef) {\n            return _this.getKeysForEventDef(eventDef);\n        });\n    };\n    Splitter.prototype._splitEventStore = function (eventStore, defKeys) {\n        var defs = eventStore.defs, instances = eventStore.instances;\n        var splitStores = {};\n        for (var defId in defs) {\n            for (var _i = 0, _a = defKeys[defId]; _i < _a.length; _i++) {\n                var key = _a[_i];\n                if (!splitStores[key]) {\n                    splitStores[key] = createEmptyEventStore();\n                }\n                splitStores[key].defs[defId] = defs[defId];\n            }\n        }\n        for (var instanceId in instances) {\n            var instance = instances[instanceId];\n            for (var _b = 0, _c = defKeys[instance.defId]; _b < _c.length; _b++) {\n                var key = _c[_b];\n                if (splitStores[key]) { // must have already been created\n                    splitStores[key].instances[instanceId] = instance;\n                }\n            }\n        }\n        return splitStores;\n    };\n    Splitter.prototype._splitIndividualUi = function (eventUiBases, defKeys) {\n        var splitHashes = {};\n        for (var defId in eventUiBases) {\n            if (defId) { // not the '' key\n                for (var _i = 0, _a = defKeys[defId]; _i < _a.length; _i++) {\n                    var key = _a[_i];\n                    if (!splitHashes[key]) {\n                        splitHashes[key] = {};\n                    }\n                    splitHashes[key][defId] = eventUiBases[defId];\n                }\n            }\n        }\n        return splitHashes;\n    };\n    Splitter.prototype._splitInteraction = function (interaction) {\n        var splitStates = {};\n        if (interaction) {\n            var affectedStores_1 = this._splitEventStore(interaction.affectedEvents, this._getKeysForEventDefs(interaction.affectedEvents) // can't use cached. might be events from other calendar\n            );\n            // can't rely on defKeys because event data is mutated\n            var mutatedKeysByDefId = this._getKeysForEventDefs(interaction.mutatedEvents);\n            var mutatedStores_1 = this._splitEventStore(interaction.mutatedEvents, mutatedKeysByDefId);\n            var populate = function (key) {\n                if (!splitStates[key]) {\n                    splitStates[key] = {\n                        affectedEvents: affectedStores_1[key] || EMPTY_EVENT_STORE,\n                        mutatedEvents: mutatedStores_1[key] || EMPTY_EVENT_STORE,\n                        isEvent: interaction.isEvent,\n                        origSeg: interaction.origSeg\n                    };\n                }\n            };\n            for (var key in affectedStores_1) {\n                populate(key);\n            }\n            for (var key in mutatedStores_1) {\n                populate(key);\n            }\n        }\n        return splitStates;\n    };\n    return Splitter;\n}());\nfunction buildEventUiForKey(allUi, eventUiForKey, individualUi) {\n    var baseParts = [];\n    if (allUi) {\n        baseParts.push(allUi);\n    }\n    if (eventUiForKey) {\n        baseParts.push(eventUiForKey);\n    }\n    var stuff = {\n        '': combineEventUis(baseParts)\n    };\n    if (individualUi) {\n        __assign(stuff, individualUi);\n    }\n    return stuff;\n}\n\n// Generates HTML for an anchor to another view into the calendar.\n// Will either generate an <a> tag or a non-clickable <span> tag, depending on enabled settings.\n// `gotoOptions` can either be a DateMarker, or an object with the form:\n// { date, type, forceOff }\n// `type` is a view-type like \"day\" or \"week\". default value is \"day\".\n// `attrs` and `innerHtml` are use to generate the rest of the HTML tag.\nfunction buildGotoAnchorHtml(allOptions, dateEnv, gotoOptions, attrs, innerHtml) {\n    var date;\n    var type;\n    var forceOff;\n    var finalOptions;\n    if (gotoOptions instanceof Date) {\n        date = gotoOptions; // a single date-like input\n    }\n    else {\n        date = gotoOptions.date;\n        type = gotoOptions.type;\n        forceOff = gotoOptions.forceOff;\n    }\n    finalOptions = {\n        date: dateEnv.formatIso(date, { omitTime: true }),\n        type: type || 'day'\n    };\n    if (typeof attrs === 'string') {\n        innerHtml = attrs;\n        attrs = null;\n    }\n    attrs = attrs ? ' ' + attrsToStr(attrs) : ''; // will have a leading space\n    innerHtml = innerHtml || '';\n    if (!forceOff && allOptions.navLinks) {\n        return '<a' + attrs +\n            ' data-goto=\"' + htmlEscape(JSON.stringify(finalOptions)) + '\">' +\n            innerHtml +\n            '</a>';\n    }\n    else {\n        return '<span' + attrs + '>' +\n            innerHtml +\n            '</span>';\n    }\n}\nfunction getAllDayHtml(allOptions) {\n    return allOptions.allDayHtml || htmlEscape(allOptions.allDayText);\n}\n// Computes HTML classNames for a single-day element\nfunction getDayClasses(date, dateProfile, context, noThemeHighlight) {\n    var calendar = context.calendar, options = context.options, theme = context.theme, dateEnv = context.dateEnv;\n    var classes = [];\n    var todayStart;\n    var todayEnd;\n    if (!rangeContainsMarker(dateProfile.activeRange, date)) {\n        classes.push('fc-disabled-day');\n    }\n    else {\n        classes.push('fc-' + DAY_IDS[date.getUTCDay()]);\n        if (options.monthMode &&\n            dateEnv.getMonth(date) !== dateEnv.getMonth(dateProfile.currentRange.start)) {\n            classes.push('fc-other-month');\n        }\n        todayStart = startOfDay(calendar.getNow());\n        todayEnd = addDays(todayStart, 1);\n        if (date < todayStart) {\n            classes.push('fc-past');\n        }\n        else if (date >= todayEnd) {\n            classes.push('fc-future');\n        }\n        else {\n            classes.push('fc-today');\n            if (noThemeHighlight !== true) {\n                classes.push(theme.getClass('today'));\n            }\n        }\n    }\n    return classes;\n}\n\n// given a function that resolves a result asynchronously.\n// the function can either call passed-in success and failure callbacks,\n// or it can return a promise.\n// if you need to pass additional params to func, bind them first.\nfunction unpromisify(func, success, failure) {\n    // guard against success/failure callbacks being called more than once\n    // and guard against a promise AND callback being used together.\n    var isResolved = false;\n    var wrappedSuccess = function () {\n        if (!isResolved) {\n            isResolved = true;\n            success.apply(this, arguments);\n        }\n    };\n    var wrappedFailure = function () {\n        if (!isResolved) {\n            isResolved = true;\n            if (failure) {\n                failure.apply(this, arguments);\n            }\n        }\n    };\n    var res = func(wrappedSuccess, wrappedFailure);\n    if (res && typeof res.then === 'function') {\n        res.then(wrappedSuccess, wrappedFailure);\n    }\n}\n\nvar Mixin = /** @class */ (function () {\n    function Mixin() {\n    }\n    // mix into a CLASS\n    Mixin.mixInto = function (destClass) {\n        this.mixIntoObj(destClass.prototype);\n    };\n    // mix into ANY object\n    Mixin.mixIntoObj = function (destObj) {\n        var _this = this;\n        Object.getOwnPropertyNames(this.prototype).forEach(function (name) {\n            if (!destObj[name]) { // if destination doesn't already define it\n                destObj[name] = _this.prototype[name];\n            }\n        });\n    };\n    /*\n    will override existing methods\n    TODO: remove! not used anymore\n    */\n    Mixin.mixOver = function (destClass) {\n        var _this = this;\n        Object.getOwnPropertyNames(this.prototype).forEach(function (name) {\n            destClass.prototype[name] = _this.prototype[name];\n        });\n    };\n    return Mixin;\n}());\n\n/*\nUSAGE:\n  import { default as EmitterMixin, EmitterInterface } from './EmitterMixin'\nin class:\n  on: EmitterInterface['on']\n  one: EmitterInterface['one']\n  off: EmitterInterface['off']\n  trigger: EmitterInterface['trigger']\n  triggerWith: EmitterInterface['triggerWith']\n  hasHandlers: EmitterInterface['hasHandlers']\nafter class:\n  EmitterMixin.mixInto(TheClass)\n*/\nvar EmitterMixin = /** @class */ (function (_super) {\n    __extends(EmitterMixin, _super);\n    function EmitterMixin() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    EmitterMixin.prototype.on = function (type, handler) {\n        addToHash(this._handlers || (this._handlers = {}), type, handler);\n        return this; // for chaining\n    };\n    // todo: add comments\n    EmitterMixin.prototype.one = function (type, handler) {\n        addToHash(this._oneHandlers || (this._oneHandlers = {}), type, handler);\n        return this; // for chaining\n    };\n    EmitterMixin.prototype.off = function (type, handler) {\n        if (this._handlers) {\n            removeFromHash(this._handlers, type, handler);\n        }\n        if (this._oneHandlers) {\n            removeFromHash(this._oneHandlers, type, handler);\n        }\n        return this; // for chaining\n    };\n    EmitterMixin.prototype.trigger = function (type) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        this.triggerWith(type, this, args);\n        return this; // for chaining\n    };\n    EmitterMixin.prototype.triggerWith = function (type, context, args) {\n        if (this._handlers) {\n            applyAll(this._handlers[type], context, args);\n        }\n        if (this._oneHandlers) {\n            applyAll(this._oneHandlers[type], context, args);\n            delete this._oneHandlers[type]; // will never fire again\n        }\n        return this; // for chaining\n    };\n    EmitterMixin.prototype.hasHandlers = function (type) {\n        return (this._handlers && this._handlers[type] && this._handlers[type].length) ||\n            (this._oneHandlers && this._oneHandlers[type] && this._oneHandlers[type].length);\n    };\n    return EmitterMixin;\n}(Mixin));\nfunction addToHash(hash, type, handler) {\n    (hash[type] || (hash[type] = []))\n        .push(handler);\n}\nfunction removeFromHash(hash, type, handler) {\n    if (handler) {\n        if (hash[type]) {\n            hash[type] = hash[type].filter(function (func) {\n                return func !== handler;\n            });\n        }\n    }\n    else {\n        delete hash[type]; // remove all handler funcs for this type\n    }\n}\n\n/*\nRecords offset information for a set of elements, relative to an origin element.\nCan record the left/right OR the top/bottom OR both.\nProvides methods for querying the cache by position.\n*/\nvar PositionCache = /** @class */ (function () {\n    function PositionCache(originEl, els, isHorizontal, isVertical) {\n        this.originEl = originEl;\n        this.els = els;\n        this.isHorizontal = isHorizontal;\n        this.isVertical = isVertical;\n    }\n    // Queries the els for coordinates and stores them.\n    // Call this method before using and of the get* methods below.\n    PositionCache.prototype.build = function () {\n        var originEl = this.originEl;\n        var originClientRect = this.originClientRect =\n            originEl.getBoundingClientRect(); // relative to viewport top-left\n        if (this.isHorizontal) {\n            this.buildElHorizontals(originClientRect.left);\n        }\n        if (this.isVertical) {\n            this.buildElVerticals(originClientRect.top);\n        }\n    };\n    // Populates the left/right internal coordinate arrays\n    PositionCache.prototype.buildElHorizontals = function (originClientLeft) {\n        var lefts = [];\n        var rights = [];\n        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\n            var el = _a[_i];\n            var rect = el.getBoundingClientRect();\n            lefts.push(rect.left - originClientLeft);\n            rights.push(rect.right - originClientLeft);\n        }\n        this.lefts = lefts;\n        this.rights = rights;\n    };\n    // Populates the top/bottom internal coordinate arrays\n    PositionCache.prototype.buildElVerticals = function (originClientTop) {\n        var tops = [];\n        var bottoms = [];\n        for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\n            var el = _a[_i];\n            var rect = el.getBoundingClientRect();\n            tops.push(rect.top - originClientTop);\n            bottoms.push(rect.bottom - originClientTop);\n        }\n        this.tops = tops;\n        this.bottoms = bottoms;\n    };\n    // Given a left offset (from document left), returns the index of the el that it horizontally intersects.\n    // If no intersection is made, returns undefined.\n    PositionCache.prototype.leftToIndex = function (leftPosition) {\n        var lefts = this.lefts;\n        var rights = this.rights;\n        var len = lefts.length;\n        var i;\n        for (i = 0; i < len; i++) {\n            if (leftPosition >= lefts[i] && leftPosition < rights[i]) {\n                return i;\n            }\n        }\n    };\n    // Given a top offset (from document top), returns the index of the el that it vertically intersects.\n    // If no intersection is made, returns undefined.\n    PositionCache.prototype.topToIndex = function (topPosition) {\n        var tops = this.tops;\n        var bottoms = this.bottoms;\n        var len = tops.length;\n        var i;\n        for (i = 0; i < len; i++) {\n            if (topPosition >= tops[i] && topPosition < bottoms[i]) {\n                return i;\n            }\n        }\n    };\n    // Gets the width of the element at the given index\n    PositionCache.prototype.getWidth = function (leftIndex) {\n        return this.rights[leftIndex] - this.lefts[leftIndex];\n    };\n    // Gets the height of the element at the given index\n    PositionCache.prototype.getHeight = function (topIndex) {\n        return this.bottoms[topIndex] - this.tops[topIndex];\n    };\n    return PositionCache;\n}());\n\n/*\nAn object for getting/setting scroll-related information for an element.\nInternally, this is done very differently for window versus DOM element,\nso this object serves as a common interface.\n*/\nvar ScrollController = /** @class */ (function () {\n    function ScrollController() {\n    }\n    ScrollController.prototype.getMaxScrollTop = function () {\n        return this.getScrollHeight() - this.getClientHeight();\n    };\n    ScrollController.prototype.getMaxScrollLeft = function () {\n        return this.getScrollWidth() - this.getClientWidth();\n    };\n    ScrollController.prototype.canScrollVertically = function () {\n        return this.getMaxScrollTop() > 0;\n    };\n    ScrollController.prototype.canScrollHorizontally = function () {\n        return this.getMaxScrollLeft() > 0;\n    };\n    ScrollController.prototype.canScrollUp = function () {\n        return this.getScrollTop() > 0;\n    };\n    ScrollController.prototype.canScrollDown = function () {\n        return this.getScrollTop() < this.getMaxScrollTop();\n    };\n    ScrollController.prototype.canScrollLeft = function () {\n        return this.getScrollLeft() > 0;\n    };\n    ScrollController.prototype.canScrollRight = function () {\n        return this.getScrollLeft() < this.getMaxScrollLeft();\n    };\n    return ScrollController;\n}());\nvar ElementScrollController = /** @class */ (function (_super) {\n    __extends(ElementScrollController, _super);\n    function ElementScrollController(el) {\n        var _this = _super.call(this) || this;\n        _this.el = el;\n        return _this;\n    }\n    ElementScrollController.prototype.getScrollTop = function () {\n        return this.el.scrollTop;\n    };\n    ElementScrollController.prototype.getScrollLeft = function () {\n        return this.el.scrollLeft;\n    };\n    ElementScrollController.prototype.setScrollTop = function (top) {\n        this.el.scrollTop = top;\n    };\n    ElementScrollController.prototype.setScrollLeft = function (left) {\n        this.el.scrollLeft = left;\n    };\n    ElementScrollController.prototype.getScrollWidth = function () {\n        return this.el.scrollWidth;\n    };\n    ElementScrollController.prototype.getScrollHeight = function () {\n        return this.el.scrollHeight;\n    };\n    ElementScrollController.prototype.getClientHeight = function () {\n        return this.el.clientHeight;\n    };\n    ElementScrollController.prototype.getClientWidth = function () {\n        return this.el.clientWidth;\n    };\n    return ElementScrollController;\n}(ScrollController));\nvar WindowScrollController = /** @class */ (function (_super) {\n    __extends(WindowScrollController, _super);\n    function WindowScrollController() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    WindowScrollController.prototype.getScrollTop = function () {\n        return window.pageYOffset;\n    };\n    WindowScrollController.prototype.getScrollLeft = function () {\n        return window.pageXOffset;\n    };\n    WindowScrollController.prototype.setScrollTop = function (n) {\n        window.scroll(window.pageXOffset, n);\n    };\n    WindowScrollController.prototype.setScrollLeft = function (n) {\n        window.scroll(n, window.pageYOffset);\n    };\n    WindowScrollController.prototype.getScrollWidth = function () {\n        return document.documentElement.scrollWidth;\n    };\n    WindowScrollController.prototype.getScrollHeight = function () {\n        return document.documentElement.scrollHeight;\n    };\n    WindowScrollController.prototype.getClientHeight = function () {\n        return document.documentElement.clientHeight;\n    };\n    WindowScrollController.prototype.getClientWidth = function () {\n        return document.documentElement.clientWidth;\n    };\n    return WindowScrollController;\n}(ScrollController));\n\n/*\nEmbodies a div that has potential scrollbars\n*/\nvar ScrollComponent = /** @class */ (function (_super) {\n    __extends(ScrollComponent, _super);\n    function ScrollComponent(overflowX, overflowY) {\n        var _this = _super.call(this, createElement('div', {\n            className: 'fc-scroller'\n        })) || this;\n        _this.overflowX = overflowX;\n        _this.overflowY = overflowY;\n        _this.applyOverflow();\n        return _this;\n    }\n    // sets to natural height, unlocks overflow\n    ScrollComponent.prototype.clear = function () {\n        this.setHeight('auto');\n        this.applyOverflow();\n    };\n    ScrollComponent.prototype.destroy = function () {\n        removeElement(this.el);\n    };\n    // Overflow\n    // -----------------------------------------------------------------------------------------------------------------\n    ScrollComponent.prototype.applyOverflow = function () {\n        applyStyle(this.el, {\n            overflowX: this.overflowX,\n            overflowY: this.overflowY\n        });\n    };\n    // Causes any 'auto' overflow values to resolves to 'scroll' or 'hidden'.\n    // Useful for preserving scrollbar widths regardless of future resizes.\n    // Can pass in scrollbarWidths for optimization.\n    ScrollComponent.prototype.lockOverflow = function (scrollbarWidths) {\n        var overflowX = this.overflowX;\n        var overflowY = this.overflowY;\n        scrollbarWidths = scrollbarWidths || this.getScrollbarWidths();\n        if (overflowX === 'auto') {\n            overflowX = (scrollbarWidths.bottom || // horizontal scrollbars?\n                this.canScrollHorizontally() // OR scrolling pane with massless scrollbars?\n            ) ? 'scroll' : 'hidden';\n        }\n        if (overflowY === 'auto') {\n            overflowY = (scrollbarWidths.left || scrollbarWidths.right || // horizontal scrollbars?\n                this.canScrollVertically() // OR scrolling pane with massless scrollbars?\n            ) ? 'scroll' : 'hidden';\n        }\n        applyStyle(this.el, { overflowX: overflowX, overflowY: overflowY });\n    };\n    ScrollComponent.prototype.setHeight = function (height) {\n        applyStyleProp(this.el, 'height', height);\n    };\n    ScrollComponent.prototype.getScrollbarWidths = function () {\n        var edges = computeEdges(this.el);\n        return {\n            left: edges.scrollbarLeft,\n            right: edges.scrollbarRight,\n            bottom: edges.scrollbarBottom\n        };\n    };\n    return ScrollComponent;\n}(ElementScrollController));\n\nvar Theme = /** @class */ (function () {\n    function Theme(calendarOptions) {\n        this.calendarOptions = calendarOptions;\n        this.processIconOverride();\n    }\n    Theme.prototype.processIconOverride = function () {\n        if (this.iconOverrideOption) {\n            this.setIconOverride(this.calendarOptions[this.iconOverrideOption]);\n        }\n    };\n    Theme.prototype.setIconOverride = function (iconOverrideHash) {\n        var iconClassesCopy;\n        var buttonName;\n        if (typeof iconOverrideHash === 'object' && iconOverrideHash) { // non-null object\n            iconClassesCopy = __assign({}, this.iconClasses);\n            for (buttonName in iconOverrideHash) {\n                iconClassesCopy[buttonName] = this.applyIconOverridePrefix(iconOverrideHash[buttonName]);\n            }\n            this.iconClasses = iconClassesCopy;\n        }\n        else if (iconOverrideHash === false) {\n            this.iconClasses = {};\n        }\n    };\n    Theme.prototype.applyIconOverridePrefix = function (className) {\n        var prefix = this.iconOverridePrefix;\n        if (prefix && className.indexOf(prefix) !== 0) { // if not already present\n            className = prefix + className;\n        }\n        return className;\n    };\n    Theme.prototype.getClass = function (key) {\n        return this.classes[key] || '';\n    };\n    Theme.prototype.getIconClass = function (buttonName) {\n        var className = this.iconClasses[buttonName];\n        if (className) {\n            return this.baseIconClass + ' ' + className;\n        }\n        return '';\n    };\n    Theme.prototype.getCustomButtonIconClass = function (customButtonProps) {\n        var className;\n        if (this.iconOverrideCustomButtonOption) {\n            className = customButtonProps[this.iconOverrideCustomButtonOption];\n            if (className) {\n                return this.baseIconClass + ' ' + this.applyIconOverridePrefix(className);\n            }\n        }\n        return '';\n    };\n    return Theme;\n}());\nTheme.prototype.classes = {};\nTheme.prototype.iconClasses = {};\nTheme.prototype.baseIconClass = '';\nTheme.prototype.iconOverridePrefix = '';\n\nvar guid = 0;\nvar ComponentContext = /** @class */ (function () {\n    function ComponentContext(calendar, theme, dateEnv, options, view) {\n        this.calendar = calendar;\n        this.theme = theme;\n        this.dateEnv = dateEnv;\n        this.options = options;\n        this.view = view;\n        this.isRtl = options.dir === 'rtl';\n        this.eventOrderSpecs = parseFieldSpecs(options.eventOrder);\n        this.nextDayThreshold = createDuration(options.nextDayThreshold);\n    }\n    ComponentContext.prototype.extend = function (options, view) {\n        return new ComponentContext(this.calendar, this.theme, this.dateEnv, options || this.options, view || this.view);\n    };\n    return ComponentContext;\n}());\nvar Component = /** @class */ (function () {\n    function Component() {\n        this.everRendered = false;\n        this.uid = String(guid++);\n    }\n    Component.addEqualityFuncs = function (newFuncs) {\n        this.prototype.equalityFuncs = __assign({}, this.prototype.equalityFuncs, newFuncs);\n    };\n    Component.prototype.receiveProps = function (props, context) {\n        this.receiveContext(context);\n        var _a = recycleProps(this.props || {}, props, this.equalityFuncs), anyChanges = _a.anyChanges, comboProps = _a.comboProps;\n        this.props = comboProps;\n        if (anyChanges) {\n            if (this.everRendered) {\n                this.beforeUpdate();\n            }\n            this.render(comboProps, context);\n            if (this.everRendered) {\n                this.afterUpdate();\n            }\n        }\n        this.everRendered = true;\n    };\n    Component.prototype.receiveContext = function (context) {\n        var oldContext = this.context;\n        this.context = context;\n        if (!oldContext) {\n            this.firstContext(context);\n        }\n    };\n    Component.prototype.render = function (props, context) {\n    };\n    Component.prototype.firstContext = function (context) {\n    };\n    Component.prototype.beforeUpdate = function () {\n    };\n    Component.prototype.afterUpdate = function () {\n    };\n    // after destroy is called, this component won't ever be used again\n    Component.prototype.destroy = function () {\n    };\n    return Component;\n}());\nComponent.prototype.equalityFuncs = {};\n/*\nReuses old values when equal. If anything is unequal, returns newProps as-is.\nGreat for PureComponent, but won't be feasible with React, so just eliminate and use React's DOM diffing.\n*/\nfunction recycleProps(oldProps, newProps, equalityFuncs) {\n    var comboProps = {}; // some old, some new\n    var anyChanges = false;\n    for (var key in newProps) {\n        if (key in oldProps && (oldProps[key] === newProps[key] ||\n            (equalityFuncs[key] && equalityFuncs[key](oldProps[key], newProps[key])))) {\n            // equal to old? use old prop\n            comboProps[key] = oldProps[key];\n        }\n        else {\n            comboProps[key] = newProps[key];\n            anyChanges = true;\n        }\n    }\n    for (var key in oldProps) {\n        if (!(key in newProps)) {\n            anyChanges = true;\n            break;\n        }\n    }\n    return { anyChanges: anyChanges, comboProps: comboProps };\n}\n\n/*\nPURPOSES:\n- hook up to fg, fill, and mirror renderers\n- interface for dragging and hits\n*/\nvar DateComponent = /** @class */ (function (_super) {\n    __extends(DateComponent, _super);\n    function DateComponent(el) {\n        var _this = _super.call(this) || this;\n        _this.el = el;\n        return _this;\n    }\n    DateComponent.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        removeElement(this.el);\n    };\n    // Hit System\n    // -----------------------------------------------------------------------------------------------------------------\n    DateComponent.prototype.buildPositionCaches = function () {\n    };\n    DateComponent.prototype.queryHit = function (positionLeft, positionTop, elWidth, elHeight) {\n        return null; // this should be abstract\n    };\n    // Validation\n    // -----------------------------------------------------------------------------------------------------------------\n    DateComponent.prototype.isInteractionValid = function (interaction) {\n        var calendar = this.context.calendar;\n        var dateProfile = this.props.dateProfile; // HACK\n        var instances = interaction.mutatedEvents.instances;\n        if (dateProfile) { // HACK for DayTile\n            for (var instanceId in instances) {\n                if (!rangeContainsRange(dateProfile.validRange, instances[instanceId].range)) {\n                    return false;\n                }\n            }\n        }\n        return isInteractionValid(interaction, calendar);\n    };\n    DateComponent.prototype.isDateSelectionValid = function (selection) {\n        var calendar = this.context.calendar;\n        var dateProfile = this.props.dateProfile; // HACK\n        if (dateProfile && // HACK for DayTile\n            !rangeContainsRange(dateProfile.validRange, selection.range)) {\n            return false;\n        }\n        return isDateSelectionValid(selection, calendar);\n    };\n    // Pointer Interaction Utils\n    // -----------------------------------------------------------------------------------------------------------------\n    DateComponent.prototype.isValidSegDownEl = function (el) {\n        return !this.props.eventDrag && // HACK\n            !this.props.eventResize && // HACK\n            !elementClosest(el, '.fc-mirror') &&\n            (this.isPopover() || !this.isInPopover(el));\n        // ^above line ensures we don't detect a seg interaction within a nested component.\n        // it's a HACK because it only supports a popover as the nested component.\n    };\n    DateComponent.prototype.isValidDateDownEl = function (el) {\n        var segEl = elementClosest(el, this.fgSegSelector);\n        return (!segEl || segEl.classList.contains('fc-mirror')) &&\n            !elementClosest(el, '.fc-more') && // a \"more..\" link\n            !elementClosest(el, 'a[data-goto]') && // a clickable nav link\n            !this.isInPopover(el);\n    };\n    DateComponent.prototype.isPopover = function () {\n        return this.el.classList.contains('fc-popover');\n    };\n    DateComponent.prototype.isInPopover = function (el) {\n        return Boolean(elementClosest(el, '.fc-popover'));\n    };\n    return DateComponent;\n}(Component));\nDateComponent.prototype.fgSegSelector = '.fc-event-container > *';\nDateComponent.prototype.bgSegSelector = '.fc-bgevent:not(.fc-nonbusiness)';\n\nvar uid$1 = 0;\nfunction createPlugin(input) {\n    return {\n        id: String(uid$1++),\n        deps: input.deps || [],\n        reducers: input.reducers || [],\n        eventDefParsers: input.eventDefParsers || [],\n        isDraggableTransformers: input.isDraggableTransformers || [],\n        eventDragMutationMassagers: input.eventDragMutationMassagers || [],\n        eventDefMutationAppliers: input.eventDefMutationAppliers || [],\n        dateSelectionTransformers: input.dateSelectionTransformers || [],\n        datePointTransforms: input.datePointTransforms || [],\n        dateSpanTransforms: input.dateSpanTransforms || [],\n        views: input.views || {},\n        viewPropsTransformers: input.viewPropsTransformers || [],\n        isPropsValid: input.isPropsValid || null,\n        externalDefTransforms: input.externalDefTransforms || [],\n        eventResizeJoinTransforms: input.eventResizeJoinTransforms || [],\n        viewContainerModifiers: input.viewContainerModifiers || [],\n        eventDropTransformers: input.eventDropTransformers || [],\n        componentInteractions: input.componentInteractions || [],\n        calendarInteractions: input.calendarInteractions || [],\n        themeClasses: input.themeClasses || {},\n        eventSourceDefs: input.eventSourceDefs || [],\n        cmdFormatter: input.cmdFormatter,\n        recurringTypes: input.recurringTypes || [],\n        namedTimeZonedImpl: input.namedTimeZonedImpl,\n        defaultView: input.defaultView || '',\n        elementDraggingImpl: input.elementDraggingImpl,\n        optionChangeHandlers: input.optionChangeHandlers || {}\n    };\n}\nvar PluginSystem = /** @class */ (function () {\n    function PluginSystem() {\n        this.hooks = {\n            reducers: [],\n            eventDefParsers: [],\n            isDraggableTransformers: [],\n            eventDragMutationMassagers: [],\n            eventDefMutationAppliers: [],\n            dateSelectionTransformers: [],\n            datePointTransforms: [],\n            dateSpanTransforms: [],\n            views: {},\n            viewPropsTransformers: [],\n            isPropsValid: null,\n            externalDefTransforms: [],\n            eventResizeJoinTransforms: [],\n            viewContainerModifiers: [],\n            eventDropTransformers: [],\n            componentInteractions: [],\n            calendarInteractions: [],\n            themeClasses: {},\n            eventSourceDefs: [],\n            cmdFormatter: null,\n            recurringTypes: [],\n            namedTimeZonedImpl: null,\n            defaultView: '',\n            elementDraggingImpl: null,\n            optionChangeHandlers: {}\n        };\n        this.addedHash = {};\n    }\n    PluginSystem.prototype.add = function (plugin) {\n        if (!this.addedHash[plugin.id]) {\n            this.addedHash[plugin.id] = true;\n            for (var _i = 0, _a = plugin.deps; _i < _a.length; _i++) {\n                var dep = _a[_i];\n                this.add(dep);\n            }\n            this.hooks = combineHooks(this.hooks, plugin);\n        }\n    };\n    return PluginSystem;\n}());\nfunction combineHooks(hooks0, hooks1) {\n    return {\n        reducers: hooks0.reducers.concat(hooks1.reducers),\n        eventDefParsers: hooks0.eventDefParsers.concat(hooks1.eventDefParsers),\n        isDraggableTransformers: hooks0.isDraggableTransformers.concat(hooks1.isDraggableTransformers),\n        eventDragMutationMassagers: hooks0.eventDragMutationMassagers.concat(hooks1.eventDragMutationMassagers),\n        eventDefMutationAppliers: hooks0.eventDefMutationAppliers.concat(hooks1.eventDefMutationAppliers),\n        dateSelectionTransformers: hooks0.dateSelectionTransformers.concat(hooks1.dateSelectionTransformers),\n        datePointTransforms: hooks0.datePointTransforms.concat(hooks1.datePointTransforms),\n        dateSpanTransforms: hooks0.dateSpanTransforms.concat(hooks1.dateSpanTransforms),\n        views: __assign({}, hooks0.views, hooks1.views),\n        viewPropsTransformers: hooks0.viewPropsTransformers.concat(hooks1.viewPropsTransformers),\n        isPropsValid: hooks1.isPropsValid || hooks0.isPropsValid,\n        externalDefTransforms: hooks0.externalDefTransforms.concat(hooks1.externalDefTransforms),\n        eventResizeJoinTransforms: hooks0.eventResizeJoinTransforms.concat(hooks1.eventResizeJoinTransforms),\n        viewContainerModifiers: hooks0.viewContainerModifiers.concat(hooks1.viewContainerModifiers),\n        eventDropTransformers: hooks0.eventDropTransformers.concat(hooks1.eventDropTransformers),\n        calendarInteractions: hooks0.calendarInteractions.concat(hooks1.calendarInteractions),\n        componentInteractions: hooks0.componentInteractions.concat(hooks1.componentInteractions),\n        themeClasses: __assign({}, hooks0.themeClasses, hooks1.themeClasses),\n        eventSourceDefs: hooks0.eventSourceDefs.concat(hooks1.eventSourceDefs),\n        cmdFormatter: hooks1.cmdFormatter || hooks0.cmdFormatter,\n        recurringTypes: hooks0.recurringTypes.concat(hooks1.recurringTypes),\n        namedTimeZonedImpl: hooks1.namedTimeZonedImpl || hooks0.namedTimeZonedImpl,\n        defaultView: hooks0.defaultView || hooks1.defaultView,\n        elementDraggingImpl: hooks0.elementDraggingImpl || hooks1.elementDraggingImpl,\n        optionChangeHandlers: __assign({}, hooks0.optionChangeHandlers, hooks1.optionChangeHandlers)\n    };\n}\n\nvar eventSourceDef = {\n    ignoreRange: true,\n    parseMeta: function (raw) {\n        if (Array.isArray(raw)) { // short form\n            return raw;\n        }\n        else if (Array.isArray(raw.events)) {\n            return raw.events;\n        }\n        return null;\n    },\n    fetch: function (arg, success) {\n        success({\n            rawEvents: arg.eventSource.meta\n        });\n    }\n};\nvar ArrayEventSourcePlugin = createPlugin({\n    eventSourceDefs: [eventSourceDef]\n});\n\nvar eventSourceDef$1 = {\n    parseMeta: function (raw) {\n        if (typeof raw === 'function') { // short form\n            return raw;\n        }\n        else if (typeof raw.events === 'function') {\n            return raw.events;\n        }\n        return null;\n    },\n    fetch: function (arg, success, failure) {\n        var dateEnv = arg.calendar.dateEnv;\n        var func = arg.eventSource.meta;\n        unpromisify(func.bind(null, {\n            start: dateEnv.toDate(arg.range.start),\n            end: dateEnv.toDate(arg.range.end),\n            startStr: dateEnv.formatIso(arg.range.start),\n            endStr: dateEnv.formatIso(arg.range.end),\n            timeZone: dateEnv.timeZone\n        }), function (rawEvents) {\n            success({ rawEvents: rawEvents }); // needs an object response\n        }, failure // send errorObj directly to failure callback\n        );\n    }\n};\nvar FuncEventSourcePlugin = createPlugin({\n    eventSourceDefs: [eventSourceDef$1]\n});\n\nfunction requestJson(method, url, params, successCallback, failureCallback) {\n    method = method.toUpperCase();\n    var body = null;\n    if (method === 'GET') {\n        url = injectQueryStringParams(url, params);\n    }\n    else {\n        body = encodeParams(params);\n    }\n    var xhr = new XMLHttpRequest();\n    xhr.open(method, url, true);\n    if (method !== 'GET') {\n        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    }\n    xhr.onload = function () {\n        if (xhr.status >= 200 && xhr.status < 400) {\n            try {\n                var res = JSON.parse(xhr.responseText);\n                successCallback(res, xhr);\n            }\n            catch (err) {\n                failureCallback('Failure parsing JSON', xhr);\n            }\n        }\n        else {\n            failureCallback('Request failed', xhr);\n        }\n    };\n    xhr.onerror = function () {\n        failureCallback('Request failed', xhr);\n    };\n    xhr.send(body);\n}\nfunction injectQueryStringParams(url, params) {\n    return url +\n        (url.indexOf('?') === -1 ? '?' : '&') +\n        encodeParams(params);\n}\nfunction encodeParams(params) {\n    var parts = [];\n    for (var key in params) {\n        parts.push(encodeURIComponent(key) + '=' + encodeURIComponent(params[key]));\n    }\n    return parts.join('&');\n}\n\nvar eventSourceDef$2 = {\n    parseMeta: function (raw) {\n        if (typeof raw === 'string') { // short form\n            raw = { url: raw };\n        }\n        else if (!raw || typeof raw !== 'object' || !raw.url) {\n            return null;\n        }\n        return {\n            url: raw.url,\n            method: (raw.method || 'GET').toUpperCase(),\n            extraParams: raw.extraParams,\n            startParam: raw.startParam,\n            endParam: raw.endParam,\n            timeZoneParam: raw.timeZoneParam\n        };\n    },\n    fetch: function (arg, success, failure) {\n        var meta = arg.eventSource.meta;\n        var requestParams = buildRequestParams(meta, arg.range, arg.calendar);\n        requestJson(meta.method, meta.url, requestParams, function (rawEvents, xhr) {\n            success({ rawEvents: rawEvents, xhr: xhr });\n        }, function (errorMessage, xhr) {\n            failure({ message: errorMessage, xhr: xhr });\n        });\n    }\n};\nvar JsonFeedEventSourcePlugin = createPlugin({\n    eventSourceDefs: [eventSourceDef$2]\n});\nfunction buildRequestParams(meta, range, calendar) {\n    var dateEnv = calendar.dateEnv;\n    var startParam;\n    var endParam;\n    var timeZoneParam;\n    var customRequestParams;\n    var params = {};\n    startParam = meta.startParam;\n    if (startParam == null) {\n        startParam = calendar.opt('startParam');\n    }\n    endParam = meta.endParam;\n    if (endParam == null) {\n        endParam = calendar.opt('endParam');\n    }\n    timeZoneParam = meta.timeZoneParam;\n    if (timeZoneParam == null) {\n        timeZoneParam = calendar.opt('timeZoneParam');\n    }\n    // retrieve any outbound GET/POST data from the options\n    if (typeof meta.extraParams === 'function') {\n        // supplied as a function that returns a key/value object\n        customRequestParams = meta.extraParams();\n    }\n    else {\n        // probably supplied as a straight key/value object\n        customRequestParams = meta.extraParams || {};\n    }\n    __assign(params, customRequestParams);\n    params[startParam] = dateEnv.formatIso(range.start);\n    params[endParam] = dateEnv.formatIso(range.end);\n    if (dateEnv.timeZone !== 'local') {\n        params[timeZoneParam] = dateEnv.timeZone;\n    }\n    return params;\n}\n\nvar recurring = {\n    parse: function (rawEvent, leftoverProps, dateEnv) {\n        var createMarker = dateEnv.createMarker.bind(dateEnv);\n        var processors = {\n            daysOfWeek: null,\n            startTime: createDuration,\n            endTime: createDuration,\n            startRecur: createMarker,\n            endRecur: createMarker\n        };\n        var props = refineProps(rawEvent, processors, {}, leftoverProps);\n        var anyValid = false;\n        for (var propName in props) {\n            if (props[propName] != null) {\n                anyValid = true;\n                break;\n            }\n        }\n        if (anyValid) {\n            var duration = null;\n            if ('duration' in leftoverProps) {\n                duration = createDuration(leftoverProps.duration);\n                delete leftoverProps.duration;\n            }\n            if (!duration && props.startTime && props.endTime) {\n                duration = subtractDurations(props.endTime, props.startTime);\n            }\n            return {\n                allDayGuess: Boolean(!props.startTime && !props.endTime),\n                duration: duration,\n                typeData: props // doesn't need endTime anymore but oh well\n            };\n        }\n        return null;\n    },\n    expand: function (typeData, framingRange, dateEnv) {\n        var clippedFramingRange = intersectRanges(framingRange, { start: typeData.startRecur, end: typeData.endRecur });\n        if (clippedFramingRange) {\n            return expandRanges(typeData.daysOfWeek, typeData.startTime, clippedFramingRange, dateEnv);\n        }\n        else {\n            return [];\n        }\n    }\n};\nvar SimpleRecurrencePlugin = createPlugin({\n    recurringTypes: [recurring]\n});\nfunction expandRanges(daysOfWeek, startTime, framingRange, dateEnv) {\n    var dowHash = daysOfWeek ? arrayToHash(daysOfWeek) : null;\n    var dayMarker = startOfDay(framingRange.start);\n    var endMarker = framingRange.end;\n    var instanceStarts = [];\n    while (dayMarker < endMarker) {\n        var instanceStart \n        // if everyday, or this particular day-of-week\n        = void 0;\n        // if everyday, or this particular day-of-week\n        if (!dowHash || dowHash[dayMarker.getUTCDay()]) {\n            if (startTime) {\n                instanceStart = dateEnv.add(dayMarker, startTime);\n            }\n            else {\n                instanceStart = dayMarker;\n            }\n            instanceStarts.push(instanceStart);\n        }\n        dayMarker = addDays(dayMarker, 1);\n    }\n    return instanceStarts;\n}\n\nvar DefaultOptionChangeHandlers = createPlugin({\n    optionChangeHandlers: {\n        events: function (events, calendar, deepEqual) {\n            handleEventSources([events], calendar, deepEqual);\n        },\n        eventSources: handleEventSources,\n        plugins: handlePlugins\n    }\n});\nfunction handleEventSources(inputs, calendar, deepEqual) {\n    var unfoundSources = hashValuesToArray(calendar.state.eventSources);\n    var newInputs = [];\n    for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {\n        var input = inputs_1[_i];\n        var inputFound = false;\n        for (var i = 0; i < unfoundSources.length; i++) {\n            if (deepEqual(unfoundSources[i]._raw, input)) {\n                unfoundSources.splice(i, 1); // delete\n                inputFound = true;\n                break;\n            }\n        }\n        if (!inputFound) {\n            newInputs.push(input);\n        }\n    }\n    for (var _a = 0, unfoundSources_1 = unfoundSources; _a < unfoundSources_1.length; _a++) {\n        var unfoundSource = unfoundSources_1[_a];\n        calendar.dispatch({\n            type: 'REMOVE_EVENT_SOURCE',\n            sourceId: unfoundSource.sourceId\n        });\n    }\n    for (var _b = 0, newInputs_1 = newInputs; _b < newInputs_1.length; _b++) {\n        var newInput = newInputs_1[_b];\n        calendar.addEventSource(newInput);\n    }\n}\n// shortcoming: won't remove plugins\nfunction handlePlugins(inputs, calendar) {\n    calendar.addPluginInputs(inputs); // will gracefully handle duplicates\n}\n\nvar config = {}; // TODO: make these options\nvar globalDefaults = {\n    defaultRangeSeparator: ' - ',\n    titleRangeSeparator: ' \\u2013 ',\n    defaultTimedEventDuration: '01:00:00',\n    defaultAllDayEventDuration: { day: 1 },\n    forceEventDuration: false,\n    nextDayThreshold: '00:00:00',\n    // display\n    columnHeader: true,\n    defaultView: '',\n    aspectRatio: 1.35,\n    header: {\n        left: 'title',\n        center: '',\n        right: 'today prev,next'\n    },\n    weekends: true,\n    weekNumbers: false,\n    weekNumberCalculation: 'local',\n    editable: false,\n    // nowIndicator: false,\n    scrollTime: '06:00:00',\n    minTime: '00:00:00',\n    maxTime: '24:00:00',\n    showNonCurrentDates: true,\n    // event ajax\n    lazyFetching: true,\n    startParam: 'start',\n    endParam: 'end',\n    timeZoneParam: 'timeZone',\n    timeZone: 'local',\n    // allDayDefault: undefined,\n    // locale\n    locales: [],\n    locale: '',\n    // dir: will get this from the default locale\n    // buttonIcons: null,\n    // allows setting a min-height to the event segment to prevent short events overlapping each other\n    timeGridEventMinHeight: 0,\n    themeSystem: 'standard',\n    // eventResizableFromStart: false,\n    dragRevertDuration: 500,\n    dragScroll: true,\n    allDayMaintainDuration: false,\n    // selectable: false,\n    unselectAuto: true,\n    // selectMinDistance: 0,\n    dropAccept: '*',\n    eventOrder: 'start,-duration,allDay,title',\n    // ^ if start tie, longer events go before shorter. final tie-breaker is title text\n    // rerenderDelay: null,\n    eventLimit: false,\n    eventLimitClick: 'popover',\n    dayPopoverFormat: { month: 'long', day: 'numeric', year: 'numeric' },\n    handleWindowResize: true,\n    windowResizeDelay: 100,\n    longPressDelay: 1000,\n    eventDragMinDistance: 5 // only applies to mouse\n};\nvar rtlDefaults = {\n    header: {\n        left: 'next,prev today',\n        center: '',\n        right: 'title'\n    },\n    buttonIcons: {\n        // TODO: make RTL support the responibility of the theme\n        prev: 'fc-icon-chevron-right',\n        next: 'fc-icon-chevron-left',\n        prevYear: 'fc-icon-chevrons-right',\n        nextYear: 'fc-icon-chevrons-left'\n    }\n};\nvar complexOptions = [\n    'header',\n    'footer',\n    'buttonText',\n    'buttonIcons'\n];\n// Merges an array of option objects into a single object\nfunction mergeOptions(optionObjs) {\n    return mergeProps(optionObjs, complexOptions);\n}\n// TODO: move this stuff to a \"plugin\"-related file...\nvar INTERNAL_PLUGINS = [\n    ArrayEventSourcePlugin,\n    FuncEventSourcePlugin,\n    JsonFeedEventSourcePlugin,\n    SimpleRecurrencePlugin,\n    DefaultOptionChangeHandlers\n];\nfunction refinePluginDefs(pluginInputs) {\n    var plugins = [];\n    for (var _i = 0, pluginInputs_1 = pluginInputs; _i < pluginInputs_1.length; _i++) {\n        var pluginInput = pluginInputs_1[_i];\n        if (typeof pluginInput === 'string') {\n            var globalName = 'FullCalendar' + capitaliseFirstLetter(pluginInput);\n            if (!window[globalName]) {\n                console.warn('Plugin file not loaded for ' + pluginInput);\n            }\n            else {\n                plugins.push(window[globalName].default); // is an ES6 module\n            }\n        }\n        else {\n            plugins.push(pluginInput);\n        }\n    }\n    return INTERNAL_PLUGINS.concat(plugins);\n}\n\nvar RAW_EN_LOCALE = {\n    code: 'en',\n    week: {\n        dow: 0,\n        doy: 4 // 4 days need to be within the year to be considered the first week\n    },\n    dir: 'ltr',\n    buttonText: {\n        prev: 'prev',\n        next: 'next',\n        prevYear: 'prev year',\n        nextYear: 'next year',\n        year: 'year',\n        today: 'today',\n        month: 'month',\n        week: 'week',\n        day: 'day',\n        list: 'list'\n    },\n    weekLabel: 'W',\n    allDayText: 'all-day',\n    eventLimitText: 'more',\n    noEventsMessage: 'No events to display'\n};\nfunction parseRawLocales(explicitRawLocales) {\n    var defaultCode = explicitRawLocales.length > 0 ? explicitRawLocales[0].code : 'en';\n    var globalArray = window['FullCalendarLocalesAll'] || []; // from locales-all.js\n    var globalObject = window['FullCalendarLocales'] || {}; // from locales/*.js. keys are meaningless\n    var allRawLocales = globalArray.concat(// globalArray is low prio\n    hashValuesToArray(globalObject), // medium prio\n    explicitRawLocales // highest prio\n    );\n    var rawLocaleMap = {\n        en: RAW_EN_LOCALE // necessary?\n    };\n    for (var _i = 0, allRawLocales_1 = allRawLocales; _i < allRawLocales_1.length; _i++) {\n        var rawLocale = allRawLocales_1[_i];\n        rawLocaleMap[rawLocale.code] = rawLocale;\n    }\n    return {\n        map: rawLocaleMap,\n        defaultCode: defaultCode\n    };\n}\nfunction buildLocale(inputSingular, available) {\n    if (typeof inputSingular === 'object' && !Array.isArray(inputSingular)) {\n        return parseLocale(inputSingular.code, [inputSingular.code], inputSingular);\n    }\n    else {\n        return queryLocale(inputSingular, available);\n    }\n}\nfunction queryLocale(codeArg, available) {\n    var codes = [].concat(codeArg || []); // will convert to array\n    var raw = queryRawLocale(codes, available) || RAW_EN_LOCALE;\n    return parseLocale(codeArg, codes, raw);\n}\nfunction queryRawLocale(codes, available) {\n    for (var i = 0; i < codes.length; i++) {\n        var parts = codes[i].toLocaleLowerCase().split('-');\n        for (var j = parts.length; j > 0; j--) {\n            var simpleId = parts.slice(0, j).join('-');\n            if (available[simpleId]) {\n                return available[simpleId];\n            }\n        }\n    }\n    return null;\n}\nfunction parseLocale(codeArg, codes, raw) {\n    var merged = mergeProps([RAW_EN_LOCALE, raw], ['buttonText']);\n    delete merged.code; // don't want this part of the options\n    var week = merged.week;\n    delete merged.week;\n    return {\n        codeArg: codeArg,\n        codes: codes,\n        week: week,\n        simpleNumberFormat: new Intl.NumberFormat(codeArg),\n        options: merged\n    };\n}\n\nvar OptionsManager = /** @class */ (function () {\n    function OptionsManager(overrides) {\n        this.overrides = __assign({}, overrides); // make a copy\n        this.dynamicOverrides = {};\n        this.compute();\n    }\n    OptionsManager.prototype.mutate = function (updates, removals, isDynamic) {\n        if (!Object.keys(updates).length && !removals.length) {\n            return;\n        }\n        var overrideHash = isDynamic ? this.dynamicOverrides : this.overrides;\n        __assign(overrideHash, updates);\n        for (var _i = 0, removals_1 = removals; _i < removals_1.length; _i++) {\n            var propName = removals_1[_i];\n            delete overrideHash[propName];\n        }\n        this.compute();\n    };\n    // Computes the flattened options hash for the calendar and assigns to `this.options`.\n    // Assumes this.overrides and this.dynamicOverrides have already been initialized.\n    OptionsManager.prototype.compute = function () {\n        // TODO: not a very efficient system\n        var locales = firstDefined(// explicit locale option given?\n        this.dynamicOverrides.locales, this.overrides.locales, globalDefaults.locales);\n        var locale = firstDefined(// explicit locales option given?\n        this.dynamicOverrides.locale, this.overrides.locale, globalDefaults.locale);\n        var available = parseRawLocales(locales);\n        var localeDefaults = buildLocale(locale || available.defaultCode, available.map).options;\n        var dir = firstDefined(// based on options computed so far, is direction RTL?\n        this.dynamicOverrides.dir, this.overrides.dir, localeDefaults.dir);\n        var dirDefaults = dir === 'rtl' ? rtlDefaults : {};\n        this.dirDefaults = dirDefaults;\n        this.localeDefaults = localeDefaults;\n        this.computed = mergeOptions([\n            globalDefaults,\n            dirDefaults,\n            localeDefaults,\n            this.overrides,\n            this.dynamicOverrides\n        ]);\n    };\n    return OptionsManager;\n}());\n\nvar calendarSystemClassMap = {};\nfunction registerCalendarSystem(name, theClass) {\n    calendarSystemClassMap[name] = theClass;\n}\nfunction createCalendarSystem(name) {\n    return new calendarSystemClassMap[name]();\n}\nvar GregorianCalendarSystem = /** @class */ (function () {\n    function GregorianCalendarSystem() {\n    }\n    GregorianCalendarSystem.prototype.getMarkerYear = function (d) {\n        return d.getUTCFullYear();\n    };\n    GregorianCalendarSystem.prototype.getMarkerMonth = function (d) {\n        return d.getUTCMonth();\n    };\n    GregorianCalendarSystem.prototype.getMarkerDay = function (d) {\n        return d.getUTCDate();\n    };\n    GregorianCalendarSystem.prototype.arrayToMarker = function (arr) {\n        return arrayToUtcDate(arr);\n    };\n    GregorianCalendarSystem.prototype.markerToArray = function (marker) {\n        return dateToUtcArray(marker);\n    };\n    return GregorianCalendarSystem;\n}());\nregisterCalendarSystem('gregory', GregorianCalendarSystem);\n\nvar ISO_RE = /^\\s*(\\d{4})(-(\\d{2})(-(\\d{2})([T ](\\d{2}):(\\d{2})(:(\\d{2})(\\.(\\d+))?)?(Z|(([-+])(\\d{2})(:?(\\d{2}))?))?)?)?)?$/;\nfunction parse(str) {\n    var m = ISO_RE.exec(str);\n    if (m) {\n        var marker = new Date(Date.UTC(Number(m[1]), m[3] ? Number(m[3]) - 1 : 0, Number(m[5] || 1), Number(m[7] || 0), Number(m[8] || 0), Number(m[10] || 0), m[12] ? Number('0.' + m[12]) * 1000 : 0));\n        if (isValidDate(marker)) {\n            var timeZoneOffset = null;\n            if (m[13]) {\n                timeZoneOffset = (m[15] === '-' ? -1 : 1) * (Number(m[16] || 0) * 60 +\n                    Number(m[18] || 0));\n            }\n            return {\n                marker: marker,\n                isTimeUnspecified: !m[6],\n                timeZoneOffset: timeZoneOffset\n            };\n        }\n    }\n    return null;\n}\n\nvar DateEnv = /** @class */ (function () {\n    function DateEnv(settings) {\n        var timeZone = this.timeZone = settings.timeZone;\n        var isNamedTimeZone = timeZone !== 'local' && timeZone !== 'UTC';\n        if (settings.namedTimeZoneImpl && isNamedTimeZone) {\n            this.namedTimeZoneImpl = new settings.namedTimeZoneImpl(timeZone);\n        }\n        this.canComputeOffset = Boolean(!isNamedTimeZone || this.namedTimeZoneImpl);\n        this.calendarSystem = createCalendarSystem(settings.calendarSystem);\n        this.locale = settings.locale;\n        this.weekDow = settings.locale.week.dow;\n        this.weekDoy = settings.locale.week.doy;\n        if (settings.weekNumberCalculation === 'ISO') {\n            this.weekDow = 1;\n            this.weekDoy = 4;\n        }\n        if (typeof settings.firstDay === 'number') {\n            this.weekDow = settings.firstDay;\n        }\n        if (typeof settings.weekNumberCalculation === 'function') {\n            this.weekNumberFunc = settings.weekNumberCalculation;\n        }\n        this.weekLabel = settings.weekLabel != null ? settings.weekLabel : settings.locale.options.weekLabel;\n        this.cmdFormatter = settings.cmdFormatter;\n    }\n    // Creating / Parsing\n    DateEnv.prototype.createMarker = function (input) {\n        var meta = this.createMarkerMeta(input);\n        if (meta === null) {\n            return null;\n        }\n        return meta.marker;\n    };\n    DateEnv.prototype.createNowMarker = function () {\n        if (this.canComputeOffset) {\n            return this.timestampToMarker(new Date().valueOf());\n        }\n        else {\n            // if we can't compute the current date val for a timezone,\n            // better to give the current local date vals than UTC\n            return arrayToUtcDate(dateToLocalArray(new Date()));\n        }\n    };\n    DateEnv.prototype.createMarkerMeta = function (input) {\n        if (typeof input === 'string') {\n            return this.parse(input);\n        }\n        var marker = null;\n        if (typeof input === 'number') {\n            marker = this.timestampToMarker(input);\n        }\n        else if (input instanceof Date) {\n            input = input.valueOf();\n            if (!isNaN(input)) {\n                marker = this.timestampToMarker(input);\n            }\n        }\n        else if (Array.isArray(input)) {\n            marker = arrayToUtcDate(input);\n        }\n        if (marker === null || !isValidDate(marker)) {\n            return null;\n        }\n        return { marker: marker, isTimeUnspecified: false, forcedTzo: null };\n    };\n    DateEnv.prototype.parse = function (s) {\n        var parts = parse(s);\n        if (parts === null) {\n            return null;\n        }\n        var marker = parts.marker;\n        var forcedTzo = null;\n        if (parts.timeZoneOffset !== null) {\n            if (this.canComputeOffset) {\n                marker = this.timestampToMarker(marker.valueOf() - parts.timeZoneOffset * 60 * 1000);\n            }\n            else {\n                forcedTzo = parts.timeZoneOffset;\n            }\n        }\n        return { marker: marker, isTimeUnspecified: parts.isTimeUnspecified, forcedTzo: forcedTzo };\n    };\n    // Accessors\n    DateEnv.prototype.getYear = function (marker) {\n        return this.calendarSystem.getMarkerYear(marker);\n    };\n    DateEnv.prototype.getMonth = function (marker) {\n        return this.calendarSystem.getMarkerMonth(marker);\n    };\n    // Adding / Subtracting\n    DateEnv.prototype.add = function (marker, dur) {\n        var a = this.calendarSystem.markerToArray(marker);\n        a[0] += dur.years;\n        a[1] += dur.months;\n        a[2] += dur.days;\n        a[6] += dur.milliseconds;\n        return this.calendarSystem.arrayToMarker(a);\n    };\n    DateEnv.prototype.subtract = function (marker, dur) {\n        var a = this.calendarSystem.markerToArray(marker);\n        a[0] -= dur.years;\n        a[1] -= dur.months;\n        a[2] -= dur.days;\n        a[6] -= dur.milliseconds;\n        return this.calendarSystem.arrayToMarker(a);\n    };\n    DateEnv.prototype.addYears = function (marker, n) {\n        var a = this.calendarSystem.markerToArray(marker);\n        a[0] += n;\n        return this.calendarSystem.arrayToMarker(a);\n    };\n    DateEnv.prototype.addMonths = function (marker, n) {\n        var a = this.calendarSystem.markerToArray(marker);\n        a[1] += n;\n        return this.calendarSystem.arrayToMarker(a);\n    };\n    // Diffing Whole Units\n    DateEnv.prototype.diffWholeYears = function (m0, m1) {\n        var calendarSystem = this.calendarSystem;\n        if (timeAsMs(m0) === timeAsMs(m1) &&\n            calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1) &&\n            calendarSystem.getMarkerMonth(m0) === calendarSystem.getMarkerMonth(m1)) {\n            return calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0);\n        }\n        return null;\n    };\n    DateEnv.prototype.diffWholeMonths = function (m0, m1) {\n        var calendarSystem = this.calendarSystem;\n        if (timeAsMs(m0) === timeAsMs(m1) &&\n            calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1)) {\n            return (calendarSystem.getMarkerMonth(m1) - calendarSystem.getMarkerMonth(m0)) +\n                (calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0)) * 12;\n        }\n        return null;\n    };\n    // Range / Duration\n    DateEnv.prototype.greatestWholeUnit = function (m0, m1) {\n        var n = this.diffWholeYears(m0, m1);\n        if (n !== null) {\n            return { unit: 'year', value: n };\n        }\n        n = this.diffWholeMonths(m0, m1);\n        if (n !== null) {\n            return { unit: 'month', value: n };\n        }\n        n = diffWholeWeeks(m0, m1);\n        if (n !== null) {\n            return { unit: 'week', value: n };\n        }\n        n = diffWholeDays(m0, m1);\n        if (n !== null) {\n            return { unit: 'day', value: n };\n        }\n        n = diffHours(m0, m1);\n        if (isInt(n)) {\n            return { unit: 'hour', value: n };\n        }\n        n = diffMinutes(m0, m1);\n        if (isInt(n)) {\n            return { unit: 'minute', value: n };\n        }\n        n = diffSeconds(m0, m1);\n        if (isInt(n)) {\n            return { unit: 'second', value: n };\n        }\n        return { unit: 'millisecond', value: m1.valueOf() - m0.valueOf() };\n    };\n    DateEnv.prototype.countDurationsBetween = function (m0, m1, d) {\n        // TODO: can use greatestWholeUnit\n        var diff;\n        if (d.years) {\n            diff = this.diffWholeYears(m0, m1);\n            if (diff !== null) {\n                return diff / asRoughYears(d);\n            }\n        }\n        if (d.months) {\n            diff = this.diffWholeMonths(m0, m1);\n            if (diff !== null) {\n                return diff / asRoughMonths(d);\n            }\n        }\n        if (d.days) {\n            diff = diffWholeDays(m0, m1);\n            if (diff !== null) {\n                return diff / asRoughDays(d);\n            }\n        }\n        return (m1.valueOf() - m0.valueOf()) / asRoughMs(d);\n    };\n    // Start-Of\n    DateEnv.prototype.startOf = function (m, unit) {\n        if (unit === 'year') {\n            return this.startOfYear(m);\n        }\n        else if (unit === 'month') {\n            return this.startOfMonth(m);\n        }\n        else if (unit === 'week') {\n            return this.startOfWeek(m);\n        }\n        else if (unit === 'day') {\n            return startOfDay(m);\n        }\n        else if (unit === 'hour') {\n            return startOfHour(m);\n        }\n        else if (unit === 'minute') {\n            return startOfMinute(m);\n        }\n        else if (unit === 'second') {\n            return startOfSecond(m);\n        }\n    };\n    DateEnv.prototype.startOfYear = function (m) {\n        return this.calendarSystem.arrayToMarker([\n            this.calendarSystem.getMarkerYear(m)\n        ]);\n    };\n    DateEnv.prototype.startOfMonth = function (m) {\n        return this.calendarSystem.arrayToMarker([\n            this.calendarSystem.getMarkerYear(m),\n            this.calendarSystem.getMarkerMonth(m)\n        ]);\n    };\n    DateEnv.prototype.startOfWeek = function (m) {\n        return this.calendarSystem.arrayToMarker([\n            this.calendarSystem.getMarkerYear(m),\n            this.calendarSystem.getMarkerMonth(m),\n            m.getUTCDate() - ((m.getUTCDay() - this.weekDow + 7) % 7)\n        ]);\n    };\n    // Week Number\n    DateEnv.prototype.computeWeekNumber = function (marker) {\n        if (this.weekNumberFunc) {\n            return this.weekNumberFunc(this.toDate(marker));\n        }\n        else {\n            return weekOfYear(marker, this.weekDow, this.weekDoy);\n        }\n    };\n    // TODO: choke on timeZoneName: long\n    DateEnv.prototype.format = function (marker, formatter, dateOptions) {\n        if (dateOptions === void 0) { dateOptions = {}; }\n        return formatter.format({\n            marker: marker,\n            timeZoneOffset: dateOptions.forcedTzo != null ?\n                dateOptions.forcedTzo :\n                this.offsetForMarker(marker)\n        }, this);\n    };\n    DateEnv.prototype.formatRange = function (start, end, formatter, dateOptions) {\n        if (dateOptions === void 0) { dateOptions = {}; }\n        if (dateOptions.isEndExclusive) {\n            end = addMs(end, -1);\n        }\n        return formatter.formatRange({\n            marker: start,\n            timeZoneOffset: dateOptions.forcedStartTzo != null ?\n                dateOptions.forcedStartTzo :\n                this.offsetForMarker(start)\n        }, {\n            marker: end,\n            timeZoneOffset: dateOptions.forcedEndTzo != null ?\n                dateOptions.forcedEndTzo :\n                this.offsetForMarker(end)\n        }, this);\n    };\n    DateEnv.prototype.formatIso = function (marker, extraOptions) {\n        if (extraOptions === void 0) { extraOptions = {}; }\n        var timeZoneOffset = null;\n        if (!extraOptions.omitTimeZoneOffset) {\n            if (extraOptions.forcedTzo != null) {\n                timeZoneOffset = extraOptions.forcedTzo;\n            }\n            else {\n                timeZoneOffset = this.offsetForMarker(marker);\n            }\n        }\n        return buildIsoString(marker, timeZoneOffset, extraOptions.omitTime);\n    };\n    // TimeZone\n    DateEnv.prototype.timestampToMarker = function (ms) {\n        if (this.timeZone === 'local') {\n            return arrayToUtcDate(dateToLocalArray(new Date(ms)));\n        }\n        else if (this.timeZone === 'UTC' || !this.namedTimeZoneImpl) {\n            return new Date(ms);\n        }\n        else {\n            return arrayToUtcDate(this.namedTimeZoneImpl.timestampToArray(ms));\n        }\n    };\n    DateEnv.prototype.offsetForMarker = function (m) {\n        if (this.timeZone === 'local') {\n            return -arrayToLocalDate(dateToUtcArray(m)).getTimezoneOffset(); // convert \"inverse\" offset to \"normal\" offset\n        }\n        else if (this.timeZone === 'UTC') {\n            return 0;\n        }\n        else if (this.namedTimeZoneImpl) {\n            return this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m));\n        }\n        return null;\n    };\n    // Conversion\n    DateEnv.prototype.toDate = function (m, forcedTzo) {\n        if (this.timeZone === 'local') {\n            return arrayToLocalDate(dateToUtcArray(m));\n        }\n        else if (this.timeZone === 'UTC') {\n            return new Date(m.valueOf()); // make sure it's a copy\n        }\n        else if (!this.namedTimeZoneImpl) {\n            return new Date(m.valueOf() - (forcedTzo || 0));\n        }\n        else {\n            return new Date(m.valueOf() -\n                this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m)) * 1000 * 60 // convert minutes -> ms\n            );\n        }\n    };\n    return DateEnv;\n}());\n\nvar SIMPLE_SOURCE_PROPS = {\n    id: String,\n    allDayDefault: Boolean,\n    eventDataTransform: Function,\n    success: Function,\n    failure: Function\n};\nvar uid$2 = 0;\nfunction doesSourceNeedRange(eventSource, calendar) {\n    var defs = calendar.pluginSystem.hooks.eventSourceDefs;\n    return !defs[eventSource.sourceDefId].ignoreRange;\n}\nfunction parseEventSource(raw, calendar) {\n    var defs = calendar.pluginSystem.hooks.eventSourceDefs;\n    for (var i = defs.length - 1; i >= 0; i--) { // later-added plugins take precedence\n        var def = defs[i];\n        var meta = def.parseMeta(raw);\n        if (meta) {\n            var res = parseEventSourceProps(typeof raw === 'object' ? raw : {}, meta, i, calendar);\n            res._raw = raw;\n            return res;\n        }\n    }\n    return null;\n}\nfunction parseEventSourceProps(raw, meta, sourceDefId, calendar) {\n    var leftovers0 = {};\n    var props = refineProps(raw, SIMPLE_SOURCE_PROPS, {}, leftovers0);\n    var leftovers1 = {};\n    var ui = processUnscopedUiProps(leftovers0, calendar, leftovers1);\n    props.isFetching = false;\n    props.latestFetchId = '';\n    props.fetchRange = null;\n    props.publicId = String(raw.id || '');\n    props.sourceId = String(uid$2++);\n    props.sourceDefId = sourceDefId;\n    props.meta = meta;\n    props.ui = ui;\n    props.extendedProps = leftovers1;\n    return props;\n}\n\nfunction reduceEventSources (eventSources, action, dateProfile, calendar) {\n    switch (action.type) {\n        case 'ADD_EVENT_SOURCES': // already parsed\n            return addSources(eventSources, action.sources, dateProfile ? dateProfile.activeRange : null, calendar);\n        case 'REMOVE_EVENT_SOURCE':\n            return removeSource(eventSources, action.sourceId);\n        case 'PREV': // TODO: how do we track all actions that affect dateProfile :(\n        case 'NEXT':\n        case 'SET_DATE':\n        case 'SET_VIEW_TYPE':\n            if (dateProfile) {\n                return fetchDirtySources(eventSources, dateProfile.activeRange, calendar);\n            }\n            else {\n                return eventSources;\n            }\n        case 'FETCH_EVENT_SOURCES':\n        case 'CHANGE_TIMEZONE':\n            return fetchSourcesByIds(eventSources, action.sourceIds ?\n                arrayToHash(action.sourceIds) :\n                excludeStaticSources(eventSources, calendar), dateProfile ? dateProfile.activeRange : null, calendar);\n        case 'RECEIVE_EVENTS':\n        case 'RECEIVE_EVENT_ERROR':\n            return receiveResponse(eventSources, action.sourceId, action.fetchId, action.fetchRange);\n        case 'REMOVE_ALL_EVENT_SOURCES':\n            return {};\n        default:\n            return eventSources;\n    }\n}\nvar uid$3 = 0;\nfunction addSources(eventSourceHash, sources, fetchRange, calendar) {\n    var hash = {};\n    for (var _i = 0, sources_1 = sources; _i < sources_1.length; _i++) {\n        var source = sources_1[_i];\n        hash[source.sourceId] = source;\n    }\n    if (fetchRange) {\n        hash = fetchDirtySources(hash, fetchRange, calendar);\n    }\n    return __assign({}, eventSourceHash, hash);\n}\nfunction removeSource(eventSourceHash, sourceId) {\n    return filterHash(eventSourceHash, function (eventSource) {\n        return eventSource.sourceId !== sourceId;\n    });\n}\nfunction fetchDirtySources(sourceHash, fetchRange, calendar) {\n    return fetchSourcesByIds(sourceHash, filterHash(sourceHash, function (eventSource) {\n        return isSourceDirty(eventSource, fetchRange, calendar);\n    }), fetchRange, calendar);\n}\nfunction isSourceDirty(eventSource, fetchRange, calendar) {\n    if (!doesSourceNeedRange(eventSource, calendar)) {\n        return !eventSource.latestFetchId;\n    }\n    else {\n        return !calendar.opt('lazyFetching') ||\n            !eventSource.fetchRange ||\n            eventSource.isFetching || // always cancel outdated in-progress fetches\n            fetchRange.start < eventSource.fetchRange.start ||\n            fetchRange.end > eventSource.fetchRange.end;\n    }\n}\nfunction fetchSourcesByIds(prevSources, sourceIdHash, fetchRange, calendar) {\n    var nextSources = {};\n    for (var sourceId in prevSources) {\n        var source = prevSources[sourceId];\n        if (sourceIdHash[sourceId]) {\n            nextSources[sourceId] = fetchSource(source, fetchRange, calendar);\n        }\n        else {\n            nextSources[sourceId] = source;\n        }\n    }\n    return nextSources;\n}\nfunction fetchSource(eventSource, fetchRange, calendar) {\n    var sourceDef = calendar.pluginSystem.hooks.eventSourceDefs[eventSource.sourceDefId];\n    var fetchId = String(uid$3++);\n    sourceDef.fetch({\n        eventSource: eventSource,\n        calendar: calendar,\n        range: fetchRange\n    }, function (res) {\n        var rawEvents = res.rawEvents;\n        var calSuccess = calendar.opt('eventSourceSuccess');\n        var calSuccessRes;\n        var sourceSuccessRes;\n        if (eventSource.success) {\n            sourceSuccessRes = eventSource.success(rawEvents, res.xhr);\n        }\n        if (calSuccess) {\n            calSuccessRes = calSuccess(rawEvents, res.xhr);\n        }\n        rawEvents = sourceSuccessRes || calSuccessRes || rawEvents;\n        calendar.dispatch({\n            type: 'RECEIVE_EVENTS',\n            sourceId: eventSource.sourceId,\n            fetchId: fetchId,\n            fetchRange: fetchRange,\n            rawEvents: rawEvents\n        });\n    }, function (error) {\n        var callFailure = calendar.opt('eventSourceFailure');\n        console.warn(error.message, error);\n        if (eventSource.failure) {\n            eventSource.failure(error);\n        }\n        if (callFailure) {\n            callFailure(error);\n        }\n        calendar.dispatch({\n            type: 'RECEIVE_EVENT_ERROR',\n            sourceId: eventSource.sourceId,\n            fetchId: fetchId,\n            fetchRange: fetchRange,\n            error: error\n        });\n    });\n    return __assign({}, eventSource, { isFetching: true, latestFetchId: fetchId });\n}\nfunction receiveResponse(sourceHash, sourceId, fetchId, fetchRange) {\n    var _a;\n    var eventSource = sourceHash[sourceId];\n    if (eventSource && // not already removed\n        fetchId === eventSource.latestFetchId) {\n        return __assign({}, sourceHash, (_a = {}, _a[sourceId] = __assign({}, eventSource, { isFetching: false, fetchRange: fetchRange // also serves as a marker that at least one fetch has completed\n         }), _a));\n    }\n    return sourceHash;\n}\nfunction excludeStaticSources(eventSources, calendar) {\n    return filterHash(eventSources, function (eventSource) {\n        return doesSourceNeedRange(eventSource, calendar);\n    });\n}\n\nvar DateProfileGenerator = /** @class */ (function () {\n    function DateProfileGenerator(viewSpec, calendar) {\n        this.viewSpec = viewSpec;\n        this.options = viewSpec.options;\n        this.dateEnv = calendar.dateEnv;\n        this.calendar = calendar;\n        this.initHiddenDays();\n    }\n    /* Date Range Computation\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Builds a structure with info about what the dates/ranges will be for the \"prev\" view.\n    DateProfileGenerator.prototype.buildPrev = function (currentDateProfile, currentDate) {\n        var dateEnv = this.dateEnv;\n        var prevDate = dateEnv.subtract(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit), // important for start-of-month\n        currentDateProfile.dateIncrement);\n        return this.build(prevDate, -1);\n    };\n    // Builds a structure with info about what the dates/ranges will be for the \"next\" view.\n    DateProfileGenerator.prototype.buildNext = function (currentDateProfile, currentDate) {\n        var dateEnv = this.dateEnv;\n        var nextDate = dateEnv.add(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit), // important for start-of-month\n        currentDateProfile.dateIncrement);\n        return this.build(nextDate, 1);\n    };\n    // Builds a structure holding dates/ranges for rendering around the given date.\n    // Optional direction param indicates whether the date is being incremented/decremented\n    // from its previous value. decremented = -1, incremented = 1 (default).\n    DateProfileGenerator.prototype.build = function (currentDate, direction, forceToValid) {\n        if (forceToValid === void 0) { forceToValid = false; }\n        var validRange;\n        var minTime = null;\n        var maxTime = null;\n        var currentInfo;\n        var isRangeAllDay;\n        var renderRange;\n        var activeRange;\n        var isValid;\n        validRange = this.buildValidRange();\n        validRange = this.trimHiddenDays(validRange);\n        if (forceToValid) {\n            currentDate = constrainMarkerToRange(currentDate, validRange);\n        }\n        currentInfo = this.buildCurrentRangeInfo(currentDate, direction);\n        isRangeAllDay = /^(year|month|week|day)$/.test(currentInfo.unit);\n        renderRange = this.buildRenderRange(this.trimHiddenDays(currentInfo.range), currentInfo.unit, isRangeAllDay);\n        renderRange = this.trimHiddenDays(renderRange);\n        activeRange = renderRange;\n        if (!this.options.showNonCurrentDates) {\n            activeRange = intersectRanges(activeRange, currentInfo.range);\n        }\n        minTime = createDuration(this.options.minTime);\n        maxTime = createDuration(this.options.maxTime);\n        activeRange = this.adjustActiveRange(activeRange, minTime, maxTime);\n        activeRange = intersectRanges(activeRange, validRange); // might return null\n        // it's invalid if the originally requested date is not contained,\n        // or if the range is completely outside of the valid range.\n        isValid = rangesIntersect(currentInfo.range, validRange);\n        return {\n            // constraint for where prev/next operations can go and where events can be dragged/resized to.\n            // an object with optional start and end properties.\n            validRange: validRange,\n            // range the view is formally responsible for.\n            // for example, a month view might have 1st-31st, excluding padded dates\n            currentRange: currentInfo.range,\n            // name of largest unit being displayed, like \"month\" or \"week\"\n            currentRangeUnit: currentInfo.unit,\n            isRangeAllDay: isRangeAllDay,\n            // dates that display events and accept drag-n-drop\n            // will be `null` if no dates accept events\n            activeRange: activeRange,\n            // date range with a rendered skeleton\n            // includes not-active days that need some sort of DOM\n            renderRange: renderRange,\n            // Duration object that denotes the first visible time of any given day\n            minTime: minTime,\n            // Duration object that denotes the exclusive visible end time of any given day\n            maxTime: maxTime,\n            isValid: isValid,\n            // how far the current date will move for a prev/next operation\n            dateIncrement: this.buildDateIncrement(currentInfo.duration)\n            // pass a fallback (might be null) ^\n        };\n    };\n    // Builds an object with optional start/end properties.\n    // Indicates the minimum/maximum dates to display.\n    // not responsible for trimming hidden days.\n    DateProfileGenerator.prototype.buildValidRange = function () {\n        return this.getRangeOption('validRange', this.calendar.getNow()) ||\n            { start: null, end: null }; // completely open-ended\n    };\n    // Builds a structure with info about the \"current\" range, the range that is\n    // highlighted as being the current month for example.\n    // See build() for a description of `direction`.\n    // Guaranteed to have `range` and `unit` properties. `duration` is optional.\n    DateProfileGenerator.prototype.buildCurrentRangeInfo = function (date, direction) {\n        var _a = this, viewSpec = _a.viewSpec, dateEnv = _a.dateEnv;\n        var duration = null;\n        var unit = null;\n        var range = null;\n        var dayCount;\n        if (viewSpec.duration) {\n            duration = viewSpec.duration;\n            unit = viewSpec.durationUnit;\n            range = this.buildRangeFromDuration(date, direction, duration, unit);\n        }\n        else if ((dayCount = this.options.dayCount)) {\n            unit = 'day';\n            range = this.buildRangeFromDayCount(date, direction, dayCount);\n        }\n        else if ((range = this.buildCustomVisibleRange(date))) {\n            unit = dateEnv.greatestWholeUnit(range.start, range.end).unit;\n        }\n        else {\n            duration = this.getFallbackDuration();\n            unit = greatestDurationDenominator(duration).unit;\n            range = this.buildRangeFromDuration(date, direction, duration, unit);\n        }\n        return { duration: duration, unit: unit, range: range };\n    };\n    DateProfileGenerator.prototype.getFallbackDuration = function () {\n        return createDuration({ day: 1 });\n    };\n    // Returns a new activeRange to have time values (un-ambiguate)\n    // minTime or maxTime causes the range to expand.\n    DateProfileGenerator.prototype.adjustActiveRange = function (range, minTime, maxTime) {\n        var dateEnv = this.dateEnv;\n        var start = range.start;\n        var end = range.end;\n        if (this.viewSpec.class.prototype.usesMinMaxTime) {\n            // expand active range if minTime is negative (why not when positive?)\n            if (asRoughDays(minTime) < 0) {\n                start = startOfDay(start); // necessary?\n                start = dateEnv.add(start, minTime);\n            }\n            // expand active range if maxTime is beyond one day (why not when positive?)\n            if (asRoughDays(maxTime) > 1) {\n                end = startOfDay(end); // necessary?\n                end = addDays(end, -1);\n                end = dateEnv.add(end, maxTime);\n            }\n        }\n        return { start: start, end: end };\n    };\n    // Builds the \"current\" range when it is specified as an explicit duration.\n    // `unit` is the already-computed greatestDurationDenominator unit of duration.\n    DateProfileGenerator.prototype.buildRangeFromDuration = function (date, direction, duration, unit) {\n        var dateEnv = this.dateEnv;\n        var alignment = this.options.dateAlignment;\n        var dateIncrementInput;\n        var dateIncrementDuration;\n        var start;\n        var end;\n        var res;\n        // compute what the alignment should be\n        if (!alignment) {\n            dateIncrementInput = this.options.dateIncrement;\n            if (dateIncrementInput) {\n                dateIncrementDuration = createDuration(dateIncrementInput);\n                // use the smaller of the two units\n                if (asRoughMs(dateIncrementDuration) < asRoughMs(duration)) {\n                    alignment = greatestDurationDenominator(dateIncrementDuration, !getWeeksFromInput(dateIncrementInput)).unit;\n                }\n                else {\n                    alignment = unit;\n                }\n            }\n            else {\n                alignment = unit;\n            }\n        }\n        // if the view displays a single day or smaller\n        if (asRoughDays(duration) <= 1) {\n            if (this.isHiddenDay(start)) {\n                start = this.skipHiddenDays(start, direction);\n                start = startOfDay(start);\n            }\n        }\n        function computeRes() {\n            start = dateEnv.startOf(date, alignment);\n            end = dateEnv.add(start, duration);\n            res = { start: start, end: end };\n        }\n        computeRes();\n        // if range is completely enveloped by hidden days, go past the hidden days\n        if (!this.trimHiddenDays(res)) {\n            date = this.skipHiddenDays(date, direction);\n            computeRes();\n        }\n        return res;\n    };\n    // Builds the \"current\" range when a dayCount is specified.\n    DateProfileGenerator.prototype.buildRangeFromDayCount = function (date, direction, dayCount) {\n        var dateEnv = this.dateEnv;\n        var customAlignment = this.options.dateAlignment;\n        var runningCount = 0;\n        var start = date;\n        var end;\n        if (customAlignment) {\n            start = dateEnv.startOf(start, customAlignment);\n        }\n        start = startOfDay(start);\n        start = this.skipHiddenDays(start, direction);\n        end = start;\n        do {\n            end = addDays(end, 1);\n            if (!this.isHiddenDay(end)) {\n                runningCount++;\n            }\n        } while (runningCount < dayCount);\n        return { start: start, end: end };\n    };\n    // Builds a normalized range object for the \"visible\" range,\n    // which is a way to define the currentRange and activeRange at the same time.\n    DateProfileGenerator.prototype.buildCustomVisibleRange = function (date) {\n        var dateEnv = this.dateEnv;\n        var visibleRange = this.getRangeOption('visibleRange', dateEnv.toDate(date));\n        if (visibleRange && (visibleRange.start == null || visibleRange.end == null)) {\n            return null;\n        }\n        return visibleRange;\n    };\n    // Computes the range that will represent the element/cells for *rendering*,\n    // but which may have voided days/times.\n    // not responsible for trimming hidden days.\n    DateProfileGenerator.prototype.buildRenderRange = function (currentRange, currentRangeUnit, isRangeAllDay) {\n        return currentRange;\n    };\n    // Compute the duration value that should be added/substracted to the current date\n    // when a prev/next operation happens.\n    DateProfileGenerator.prototype.buildDateIncrement = function (fallback) {\n        var dateIncrementInput = this.options.dateIncrement;\n        var customAlignment;\n        if (dateIncrementInput) {\n            return createDuration(dateIncrementInput);\n        }\n        else if ((customAlignment = this.options.dateAlignment)) {\n            return createDuration(1, customAlignment);\n        }\n        else if (fallback) {\n            return fallback;\n        }\n        else {\n            return createDuration({ days: 1 });\n        }\n    };\n    // Arguments after name will be forwarded to a hypothetical function value\n    // WARNING: passed-in arguments will be given to generator functions as-is and can cause side-effects.\n    // Always clone your objects if you fear mutation.\n    DateProfileGenerator.prototype.getRangeOption = function (name) {\n        var otherArgs = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            otherArgs[_i - 1] = arguments[_i];\n        }\n        var val = this.options[name];\n        if (typeof val === 'function') {\n            val = val.apply(null, otherArgs);\n        }\n        if (val) {\n            val = parseRange(val, this.dateEnv);\n        }\n        if (val) {\n            val = computeVisibleDayRange(val);\n        }\n        return val;\n    };\n    /* Hidden Days\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Initializes internal variables related to calculating hidden days-of-week\n    DateProfileGenerator.prototype.initHiddenDays = function () {\n        var hiddenDays = this.options.hiddenDays || []; // array of day-of-week indices that are hidden\n        var isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)\n        var dayCnt = 0;\n        var i;\n        if (this.options.weekends === false) {\n            hiddenDays.push(0, 6); // 0=sunday, 6=saturday\n        }\n        for (i = 0; i < 7; i++) {\n            if (!(isHiddenDayHash[i] = hiddenDays.indexOf(i) !== -1)) {\n                dayCnt++;\n            }\n        }\n        if (!dayCnt) {\n            throw new Error('invalid hiddenDays'); // all days were hidden? bad.\n        }\n        this.isHiddenDayHash = isHiddenDayHash;\n    };\n    // Remove days from the beginning and end of the range that are computed as hidden.\n    // If the whole range is trimmed off, returns null\n    DateProfileGenerator.prototype.trimHiddenDays = function (range) {\n        var start = range.start;\n        var end = range.end;\n        if (start) {\n            start = this.skipHiddenDays(start);\n        }\n        if (end) {\n            end = this.skipHiddenDays(end, -1, true);\n        }\n        if (start == null || end == null || start < end) {\n            return { start: start, end: end };\n        }\n        return null;\n    };\n    // Is the current day hidden?\n    // `day` is a day-of-week index (0-6), or a Date (used for UTC)\n    DateProfileGenerator.prototype.isHiddenDay = function (day) {\n        if (day instanceof Date) {\n            day = day.getUTCDay();\n        }\n        return this.isHiddenDayHash[day];\n    };\n    // Incrementing the current day until it is no longer a hidden day, returning a copy.\n    // DOES NOT CONSIDER validRange!\n    // If the initial value of `date` is not a hidden day, don't do anything.\n    // Pass `isExclusive` as `true` if you are dealing with an end date.\n    // `inc` defaults to `1` (increment one day forward each time)\n    DateProfileGenerator.prototype.skipHiddenDays = function (date, inc, isExclusive) {\n        if (inc === void 0) { inc = 1; }\n        if (isExclusive === void 0) { isExclusive = false; }\n        while (this.isHiddenDayHash[(date.getUTCDay() + (isExclusive ? inc : 0) + 7) % 7]) {\n            date = addDays(date, inc);\n        }\n        return date;\n    };\n    return DateProfileGenerator;\n}());\n// TODO: find a way to avoid comparing DateProfiles. it's tedious\nfunction isDateProfilesEqual(p0, p1) {\n    return rangesEqual(p0.validRange, p1.validRange) &&\n        rangesEqual(p0.activeRange, p1.activeRange) &&\n        rangesEqual(p0.renderRange, p1.renderRange) &&\n        durationsEqual(p0.minTime, p1.minTime) &&\n        durationsEqual(p0.maxTime, p1.maxTime);\n    /*\n    TODO: compare more?\n      currentRange: DateRange\n      currentRangeUnit: string\n      isRangeAllDay: boolean\n      isValid: boolean\n      dateIncrement: Duration\n    */\n}\n\nfunction reduce (state, action, calendar) {\n    var viewType = reduceViewType(state.viewType, action);\n    var dateProfile = reduceDateProfile(state.dateProfile, action, state.currentDate, viewType, calendar);\n    var eventSources = reduceEventSources(state.eventSources, action, dateProfile, calendar);\n    var nextState = __assign({}, state, { viewType: viewType,\n        dateProfile: dateProfile, currentDate: reduceCurrentDate(state.currentDate, action, dateProfile), eventSources: eventSources, eventStore: reduceEventStore(state.eventStore, action, eventSources, dateProfile, calendar), dateSelection: reduceDateSelection(state.dateSelection, action, calendar), eventSelection: reduceSelectedEvent(state.eventSelection, action), eventDrag: reduceEventDrag(state.eventDrag, action, eventSources, calendar), eventResize: reduceEventResize(state.eventResize, action, eventSources, calendar), eventSourceLoadingLevel: computeLoadingLevel(eventSources), loadingLevel: computeLoadingLevel(eventSources) });\n    for (var _i = 0, _a = calendar.pluginSystem.hooks.reducers; _i < _a.length; _i++) {\n        var reducerFunc = _a[_i];\n        nextState = reducerFunc(nextState, action, calendar);\n    }\n    // console.log(action.type, nextState)\n    return nextState;\n}\nfunction reduceViewType(currentViewType, action) {\n    switch (action.type) {\n        case 'SET_VIEW_TYPE':\n            return action.viewType;\n        default:\n            return currentViewType;\n    }\n}\nfunction reduceDateProfile(currentDateProfile, action, currentDate, viewType, calendar) {\n    var newDateProfile;\n    switch (action.type) {\n        case 'PREV':\n            newDateProfile = calendar.dateProfileGenerators[viewType].buildPrev(currentDateProfile, currentDate);\n            break;\n        case 'NEXT':\n            newDateProfile = calendar.dateProfileGenerators[viewType].buildNext(currentDateProfile, currentDate);\n            break;\n        case 'SET_DATE':\n            if (!currentDateProfile.activeRange ||\n                !rangeContainsMarker(currentDateProfile.currentRange, action.dateMarker)) {\n                newDateProfile = calendar.dateProfileGenerators[viewType].build(action.dateMarker, undefined, true // forceToValid\n                );\n            }\n            break;\n        case 'SET_VIEW_TYPE':\n            var generator = calendar.dateProfileGenerators[viewType];\n            if (!generator) {\n                throw new Error(viewType ?\n                    'The FullCalendar view \"' + viewType + '\" does not exist. Make sure your plugins are loaded correctly.' :\n                    'No available FullCalendar view plugins.');\n            }\n            newDateProfile = generator.build(action.dateMarker || currentDate, undefined, true // forceToValid\n            );\n            break;\n    }\n    if (newDateProfile &&\n        newDateProfile.isValid &&\n        !(currentDateProfile && isDateProfilesEqual(currentDateProfile, newDateProfile))) {\n        return newDateProfile;\n    }\n    else {\n        return currentDateProfile;\n    }\n}\nfunction reduceCurrentDate(currentDate, action, dateProfile) {\n    switch (action.type) {\n        case 'PREV':\n        case 'NEXT':\n            if (!rangeContainsMarker(dateProfile.currentRange, currentDate)) {\n                return dateProfile.currentRange.start;\n            }\n            else {\n                return currentDate;\n            }\n        case 'SET_DATE':\n        case 'SET_VIEW_TYPE':\n            var newDate = action.dateMarker || currentDate;\n            if (dateProfile.activeRange && !rangeContainsMarker(dateProfile.activeRange, newDate)) {\n                return dateProfile.currentRange.start;\n            }\n            else {\n                return newDate;\n            }\n        default:\n            return currentDate;\n    }\n}\nfunction reduceDateSelection(currentSelection, action, calendar) {\n    switch (action.type) {\n        case 'SELECT_DATES':\n            return action.selection;\n        case 'UNSELECT_DATES':\n            return null;\n        default:\n            return currentSelection;\n    }\n}\nfunction reduceSelectedEvent(currentInstanceId, action) {\n    switch (action.type) {\n        case 'SELECT_EVENT':\n            return action.eventInstanceId;\n        case 'UNSELECT_EVENT':\n            return '';\n        default:\n            return currentInstanceId;\n    }\n}\nfunction reduceEventDrag(currentDrag, action, sources, calendar) {\n    switch (action.type) {\n        case 'SET_EVENT_DRAG':\n            var newDrag = action.state;\n            return {\n                affectedEvents: newDrag.affectedEvents,\n                mutatedEvents: newDrag.mutatedEvents,\n                isEvent: newDrag.isEvent,\n                origSeg: newDrag.origSeg\n            };\n        case 'UNSET_EVENT_DRAG':\n            return null;\n        default:\n            return currentDrag;\n    }\n}\nfunction reduceEventResize(currentResize, action, sources, calendar) {\n    switch (action.type) {\n        case 'SET_EVENT_RESIZE':\n            var newResize = action.state;\n            return {\n                affectedEvents: newResize.affectedEvents,\n                mutatedEvents: newResize.mutatedEvents,\n                isEvent: newResize.isEvent,\n                origSeg: newResize.origSeg\n            };\n        case 'UNSET_EVENT_RESIZE':\n            return null;\n        default:\n            return currentResize;\n    }\n}\nfunction computeLoadingLevel(eventSources) {\n    var cnt = 0;\n    for (var sourceId in eventSources) {\n        if (eventSources[sourceId].isFetching) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n\nvar STANDARD_PROPS = {\n    start: null,\n    end: null,\n    allDay: Boolean\n};\nfunction parseDateSpan(raw, dateEnv, defaultDuration) {\n    var span = parseOpenDateSpan(raw, dateEnv);\n    var range = span.range;\n    if (!range.start) {\n        return null;\n    }\n    if (!range.end) {\n        if (defaultDuration == null) {\n            return null;\n        }\n        else {\n            range.end = dateEnv.add(range.start, defaultDuration);\n        }\n    }\n    return span;\n}\n/*\nTODO: somehow combine with parseRange?\nWill return null if the start/end props were present but parsed invalidly.\n*/\nfunction parseOpenDateSpan(raw, dateEnv) {\n    var leftovers = {};\n    var standardProps = refineProps(raw, STANDARD_PROPS, {}, leftovers);\n    var startMeta = standardProps.start ? dateEnv.createMarkerMeta(standardProps.start) : null;\n    var endMeta = standardProps.end ? dateEnv.createMarkerMeta(standardProps.end) : null;\n    var allDay = standardProps.allDay;\n    if (allDay == null) {\n        allDay = (startMeta && startMeta.isTimeUnspecified) &&\n            (!endMeta || endMeta.isTimeUnspecified);\n    }\n    // use this leftover object as the selection object\n    leftovers.range = {\n        start: startMeta ? startMeta.marker : null,\n        end: endMeta ? endMeta.marker : null\n    };\n    leftovers.allDay = allDay;\n    return leftovers;\n}\nfunction isDateSpansEqual(span0, span1) {\n    return rangesEqual(span0.range, span1.range) &&\n        span0.allDay === span1.allDay &&\n        isSpanPropsEqual(span0, span1);\n}\n// the NON-DATE-RELATED props\nfunction isSpanPropsEqual(span0, span1) {\n    for (var propName in span1) {\n        if (propName !== 'range' && propName !== 'allDay') {\n            if (span0[propName] !== span1[propName]) {\n                return false;\n            }\n        }\n    }\n    // are there any props that span0 has that span1 DOESN'T have?\n    // both have range/allDay, so no need to special-case.\n    for (var propName in span0) {\n        if (!(propName in span1)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction buildDateSpanApi(span, dateEnv) {\n    return {\n        start: dateEnv.toDate(span.range.start),\n        end: dateEnv.toDate(span.range.end),\n        startStr: dateEnv.formatIso(span.range.start, { omitTime: span.allDay }),\n        endStr: dateEnv.formatIso(span.range.end, { omitTime: span.allDay }),\n        allDay: span.allDay\n    };\n}\nfunction buildDatePointApi(span, dateEnv) {\n    return {\n        date: dateEnv.toDate(span.range.start),\n        dateStr: dateEnv.formatIso(span.range.start, { omitTime: span.allDay }),\n        allDay: span.allDay\n    };\n}\nfunction fabricateEventRange(dateSpan, eventUiBases, calendar) {\n    var def = parseEventDef({ editable: false }, '', // sourceId\n    dateSpan.allDay, true, // hasEnd\n    calendar);\n    return {\n        def: def,\n        ui: compileEventUi(def, eventUiBases),\n        instance: createEventInstance(def.defId, dateSpan.range),\n        range: dateSpan.range,\n        isStart: true,\n        isEnd: true\n    };\n}\n\nfunction compileViewDefs(defaultConfigs, overrideConfigs) {\n    var hash = {};\n    var viewType;\n    for (viewType in defaultConfigs) {\n        ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);\n    }\n    for (viewType in overrideConfigs) {\n        ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);\n    }\n    return hash;\n}\nfunction ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs) {\n    if (hash[viewType]) {\n        return hash[viewType];\n    }\n    var viewDef = buildViewDef(viewType, hash, defaultConfigs, overrideConfigs);\n    if (viewDef) {\n        hash[viewType] = viewDef;\n    }\n    return viewDef;\n}\nfunction buildViewDef(viewType, hash, defaultConfigs, overrideConfigs) {\n    var defaultConfig = defaultConfigs[viewType];\n    var overrideConfig = overrideConfigs[viewType];\n    var queryProp = function (name) {\n        return (defaultConfig && defaultConfig[name] !== null) ? defaultConfig[name] :\n            ((overrideConfig && overrideConfig[name] !== null) ? overrideConfig[name] : null);\n    };\n    var theClass = queryProp('class');\n    var superType = queryProp('superType');\n    if (!superType && theClass) {\n        superType =\n            findViewNameBySubclass(theClass, overrideConfigs) ||\n                findViewNameBySubclass(theClass, defaultConfigs);\n    }\n    var superDef = null;\n    if (superType) {\n        if (superType === viewType) {\n            throw new Error('Can\\'t have a custom view type that references itself');\n        }\n        superDef = ensureViewDef(superType, hash, defaultConfigs, overrideConfigs);\n    }\n    if (!theClass && superDef) {\n        theClass = superDef.class;\n    }\n    if (!theClass) {\n        return null; // don't throw a warning, might be settings for a single-unit view\n    }\n    return {\n        type: viewType,\n        class: theClass,\n        defaults: __assign({}, (superDef ? superDef.defaults : {}), (defaultConfig ? defaultConfig.options : {})),\n        overrides: __assign({}, (superDef ? superDef.overrides : {}), (overrideConfig ? overrideConfig.options : {}))\n    };\n}\nfunction findViewNameBySubclass(viewSubclass, configs) {\n    var superProto = Object.getPrototypeOf(viewSubclass.prototype);\n    for (var viewType in configs) {\n        var parsed = configs[viewType];\n        // need DIRECT subclass, so instanceof won't do it\n        if (parsed.class && parsed.class.prototype === superProto) {\n            return viewType;\n        }\n    }\n    return '';\n}\n\nfunction parseViewConfigs(inputs) {\n    return mapHash(inputs, parseViewConfig);\n}\nvar VIEW_DEF_PROPS = {\n    type: String,\n    class: null\n};\nfunction parseViewConfig(input) {\n    if (typeof input === 'function') {\n        input = { class: input };\n    }\n    var options = {};\n    var props = refineProps(input, VIEW_DEF_PROPS, {}, options);\n    return {\n        superType: props.type,\n        class: props.class,\n        options: options\n    };\n}\n\nfunction buildViewSpecs(defaultInputs, optionsManager) {\n    var defaultConfigs = parseViewConfigs(defaultInputs);\n    var overrideConfigs = parseViewConfigs(optionsManager.overrides.views);\n    var viewDefs = compileViewDefs(defaultConfigs, overrideConfigs);\n    return mapHash(viewDefs, function (viewDef) {\n        return buildViewSpec(viewDef, overrideConfigs, optionsManager);\n    });\n}\nfunction buildViewSpec(viewDef, overrideConfigs, optionsManager) {\n    var durationInput = viewDef.overrides.duration ||\n        viewDef.defaults.duration ||\n        optionsManager.dynamicOverrides.duration ||\n        optionsManager.overrides.duration;\n    var duration = null;\n    var durationUnit = '';\n    var singleUnit = '';\n    var singleUnitOverrides = {};\n    if (durationInput) {\n        duration = createDuration(durationInput);\n        if (duration) { // valid?\n            var denom = greatestDurationDenominator(duration, !getWeeksFromInput(durationInput));\n            durationUnit = denom.unit;\n            if (denom.value === 1) {\n                singleUnit = durationUnit;\n                singleUnitOverrides = overrideConfigs[durationUnit] ? overrideConfigs[durationUnit].options : {};\n            }\n        }\n    }\n    var queryButtonText = function (options) {\n        var buttonTextMap = options.buttonText || {};\n        var buttonTextKey = viewDef.defaults.buttonTextKey;\n        if (buttonTextKey != null && buttonTextMap[buttonTextKey] != null) {\n            return buttonTextMap[buttonTextKey];\n        }\n        if (buttonTextMap[viewDef.type] != null) {\n            return buttonTextMap[viewDef.type];\n        }\n        if (buttonTextMap[singleUnit] != null) {\n            return buttonTextMap[singleUnit];\n        }\n    };\n    return {\n        type: viewDef.type,\n        class: viewDef.class,\n        duration: duration,\n        durationUnit: durationUnit,\n        singleUnit: singleUnit,\n        options: __assign({}, globalDefaults, viewDef.defaults, optionsManager.dirDefaults, optionsManager.localeDefaults, optionsManager.overrides, singleUnitOverrides, viewDef.overrides, optionsManager.dynamicOverrides),\n        buttonTextOverride: queryButtonText(optionsManager.dynamicOverrides) ||\n            queryButtonText(optionsManager.overrides) || // constructor-specified buttonText lookup hash takes precedence\n            viewDef.overrides.buttonText,\n        buttonTextDefault: queryButtonText(optionsManager.localeDefaults) ||\n            queryButtonText(optionsManager.dirDefaults) ||\n            viewDef.defaults.buttonText ||\n            queryButtonText(globalDefaults) ||\n            viewDef.type // fall back to given view name\n    };\n}\n\nvar Toolbar = /** @class */ (function (_super) {\n    __extends(Toolbar, _super);\n    function Toolbar(extraClassName) {\n        var _this = _super.call(this) || this;\n        _this._renderLayout = memoizeRendering(_this.renderLayout, _this.unrenderLayout);\n        _this._updateTitle = memoizeRendering(_this.updateTitle, null, [_this._renderLayout]);\n        _this._updateActiveButton = memoizeRendering(_this.updateActiveButton, null, [_this._renderLayout]);\n        _this._updateToday = memoizeRendering(_this.updateToday, null, [_this._renderLayout]);\n        _this._updatePrev = memoizeRendering(_this.updatePrev, null, [_this._renderLayout]);\n        _this._updateNext = memoizeRendering(_this.updateNext, null, [_this._renderLayout]);\n        _this.el = createElement('div', { className: 'fc-toolbar ' + extraClassName });\n        return _this;\n    }\n    Toolbar.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this._renderLayout.unrender(); // should unrender everything else\n        removeElement(this.el);\n    };\n    Toolbar.prototype.render = function (props) {\n        this._renderLayout(props.layout);\n        this._updateTitle(props.title);\n        this._updateActiveButton(props.activeButton);\n        this._updateToday(props.isTodayEnabled);\n        this._updatePrev(props.isPrevEnabled);\n        this._updateNext(props.isNextEnabled);\n    };\n    Toolbar.prototype.renderLayout = function (layout) {\n        var el = this.el;\n        this.viewsWithButtons = [];\n        appendToElement(el, this.renderSection('left', layout.left));\n        appendToElement(el, this.renderSection('center', layout.center));\n        appendToElement(el, this.renderSection('right', layout.right));\n    };\n    Toolbar.prototype.unrenderLayout = function () {\n        this.el.innerHTML = '';\n    };\n    Toolbar.prototype.renderSection = function (position, buttonStr) {\n        var _this = this;\n        var _a = this.context, theme = _a.theme, calendar = _a.calendar;\n        var optionsManager = calendar.optionsManager;\n        var viewSpecs = calendar.viewSpecs;\n        var sectionEl = createElement('div', { className: 'fc-' + position });\n        var calendarCustomButtons = optionsManager.computed.customButtons || {};\n        var calendarButtonTextOverrides = optionsManager.overrides.buttonText || {};\n        var calendarButtonText = optionsManager.computed.buttonText || {};\n        if (buttonStr) {\n            buttonStr.split(' ').forEach(function (buttonGroupStr, i) {\n                var groupChildren = [];\n                var isOnlyButtons = true;\n                var groupEl;\n                buttonGroupStr.split(',').forEach(function (buttonName, j) {\n                    var customButtonProps;\n                    var viewSpec;\n                    var buttonClick;\n                    var buttonIcon; // only one of these will be set\n                    var buttonText; // \"\n                    var buttonInnerHtml;\n                    var buttonClasses;\n                    var buttonEl;\n                    var buttonAriaAttr;\n                    if (buttonName === 'title') {\n                        groupChildren.push(htmlToElement('<h2>&nbsp;</h2>')); // we always want it to take up height\n                        isOnlyButtons = false;\n                    }\n                    else {\n                        if ((customButtonProps = calendarCustomButtons[buttonName])) {\n                            buttonClick = function (ev) {\n                                if (customButtonProps.click) {\n                                    customButtonProps.click.call(buttonEl, ev);\n                                }\n                            };\n                            (buttonIcon = theme.getCustomButtonIconClass(customButtonProps)) ||\n                                (buttonIcon = theme.getIconClass(buttonName)) ||\n                                (buttonText = customButtonProps.text);\n                        }\n                        else if ((viewSpec = viewSpecs[buttonName])) {\n                            _this.viewsWithButtons.push(buttonName);\n                            buttonClick = function () {\n                                calendar.changeView(buttonName);\n                            };\n                            (buttonText = viewSpec.buttonTextOverride) ||\n                                (buttonIcon = theme.getIconClass(buttonName)) ||\n                                (buttonText = viewSpec.buttonTextDefault);\n                        }\n                        else if (calendar[buttonName]) { // a calendar method\n                            buttonClick = function () {\n                                calendar[buttonName]();\n                            };\n                            (buttonText = calendarButtonTextOverrides[buttonName]) ||\n                                (buttonIcon = theme.getIconClass(buttonName)) ||\n                                (buttonText = calendarButtonText[buttonName]);\n                            //            ^ everything else is considered default\n                        }\n                        if (buttonClick) {\n                            buttonClasses = [\n                                'fc-' + buttonName + '-button',\n                                theme.getClass('button')\n                            ];\n                            if (buttonText) {\n                                buttonInnerHtml = htmlEscape(buttonText);\n                                buttonAriaAttr = '';\n                            }\n                            else if (buttonIcon) {\n                                buttonInnerHtml = \"<span class='\" + buttonIcon + \"'></span>\";\n                                buttonAriaAttr = ' aria-label=\"' + buttonName + '\"';\n                            }\n                            buttonEl = htmlToElement(// type=\"button\" so that it doesn't submit a form\n                            '<button type=\"button\" class=\"' + buttonClasses.join(' ') + '\"' +\n                                buttonAriaAttr +\n                                '>' + buttonInnerHtml + '</button>');\n                            buttonEl.addEventListener('click', buttonClick);\n                            groupChildren.push(buttonEl);\n                        }\n                    }\n                });\n                if (groupChildren.length > 1) {\n                    groupEl = document.createElement('div');\n                    var buttonGroupClassName = theme.getClass('buttonGroup');\n                    if (isOnlyButtons && buttonGroupClassName) {\n                        groupEl.classList.add(buttonGroupClassName);\n                    }\n                    appendToElement(groupEl, groupChildren);\n                    sectionEl.appendChild(groupEl);\n                }\n                else {\n                    appendToElement(sectionEl, groupChildren); // 1 or 0 children\n                }\n            });\n        }\n        return sectionEl;\n    };\n    Toolbar.prototype.updateToday = function (isTodayEnabled) {\n        this.toggleButtonEnabled('today', isTodayEnabled);\n    };\n    Toolbar.prototype.updatePrev = function (isPrevEnabled) {\n        this.toggleButtonEnabled('prev', isPrevEnabled);\n    };\n    Toolbar.prototype.updateNext = function (isNextEnabled) {\n        this.toggleButtonEnabled('next', isNextEnabled);\n    };\n    Toolbar.prototype.updateTitle = function (text) {\n        findElements(this.el, 'h2').forEach(function (titleEl) {\n            titleEl.innerText = text;\n        });\n    };\n    Toolbar.prototype.updateActiveButton = function (buttonName) {\n        var theme = this.context.theme;\n        var className = theme.getClass('buttonActive');\n        findElements(this.el, 'button').forEach(function (buttonEl) {\n            if (buttonName && buttonEl.classList.contains('fc-' + buttonName + '-button')) {\n                buttonEl.classList.add(className);\n            }\n            else {\n                buttonEl.classList.remove(className);\n            }\n        });\n    };\n    Toolbar.prototype.toggleButtonEnabled = function (buttonName, bool) {\n        findElements(this.el, '.fc-' + buttonName + '-button').forEach(function (buttonEl) {\n            buttonEl.disabled = !bool;\n        });\n    };\n    return Toolbar;\n}(Component));\n\nvar CalendarComponent = /** @class */ (function (_super) {\n    __extends(CalendarComponent, _super);\n    function CalendarComponent(el) {\n        var _this = _super.call(this) || this;\n        _this.elClassNames = [];\n        _this.renderSkeleton = memoizeRendering(_this._renderSkeleton, _this._unrenderSkeleton);\n        _this.renderToolbars = memoizeRendering(_this._renderToolbars, _this._unrenderToolbars, [_this.renderSkeleton]);\n        _this.buildComponentContext = memoize(buildComponentContext);\n        _this.buildViewPropTransformers = memoize(buildViewPropTransformers);\n        _this.el = el;\n        _this.computeTitle = memoize(computeTitle);\n        _this.parseBusinessHours = memoize(function (input) {\n            return parseBusinessHours(input, _this.context.calendar);\n        });\n        return _this;\n    }\n    CalendarComponent.prototype.render = function (props, context) {\n        this.freezeHeight();\n        var title = this.computeTitle(props.dateProfile, props.viewSpec.options);\n        this.renderSkeleton(context);\n        this.renderToolbars(props.viewSpec, props.dateProfile, props.currentDate, title);\n        this.renderView(props, title);\n        this.updateSize();\n        this.thawHeight();\n    };\n    CalendarComponent.prototype.destroy = function () {\n        if (this.header) {\n            this.header.destroy();\n        }\n        if (this.footer) {\n            this.footer.destroy();\n        }\n        this.renderSkeleton.unrender(); // will call destroyView\n        _super.prototype.destroy.call(this);\n    };\n    CalendarComponent.prototype._renderSkeleton = function (context) {\n        this.updateElClassNames(context);\n        prependToElement(this.el, this.contentEl = createElement('div', { className: 'fc-view-container' }));\n        var calendar = context.calendar;\n        for (var _i = 0, _a = calendar.pluginSystem.hooks.viewContainerModifiers; _i < _a.length; _i++) {\n            var modifyViewContainer = _a[_i];\n            modifyViewContainer(this.contentEl, calendar);\n        }\n    };\n    CalendarComponent.prototype._unrenderSkeleton = function () {\n        // weird to have this here\n        if (this.view) {\n            this.savedScroll = this.view.queryScroll();\n            this.view.destroy();\n            this.view = null;\n        }\n        removeElement(this.contentEl);\n        this.removeElClassNames();\n    };\n    CalendarComponent.prototype.removeElClassNames = function () {\n        var classList = this.el.classList;\n        for (var _i = 0, _a = this.elClassNames; _i < _a.length; _i++) {\n            var className = _a[_i];\n            classList.remove(className);\n        }\n        this.elClassNames = [];\n    };\n    CalendarComponent.prototype.updateElClassNames = function (context) {\n        this.removeElClassNames();\n        var theme = context.theme, options = context.options;\n        this.elClassNames = [\n            'fc',\n            'fc-' + options.dir,\n            theme.getClass('widget')\n        ];\n        var classList = this.el.classList;\n        for (var _i = 0, _a = this.elClassNames; _i < _a.length; _i++) {\n            var className = _a[_i];\n            classList.add(className);\n        }\n    };\n    CalendarComponent.prototype._renderToolbars = function (viewSpec, dateProfile, currentDate, title) {\n        var _a = this, context = _a.context, header = _a.header, footer = _a.footer;\n        var options = context.options, calendar = context.calendar;\n        var headerLayout = options.header;\n        var footerLayout = options.footer;\n        var dateProfileGenerator = this.props.dateProfileGenerator;\n        var now = calendar.getNow();\n        var todayInfo = dateProfileGenerator.build(now);\n        var prevInfo = dateProfileGenerator.buildPrev(dateProfile, currentDate);\n        var nextInfo = dateProfileGenerator.buildNext(dateProfile, currentDate);\n        var toolbarProps = {\n            title: title,\n            activeButton: viewSpec.type,\n            isTodayEnabled: todayInfo.isValid && !rangeContainsMarker(dateProfile.currentRange, now),\n            isPrevEnabled: prevInfo.isValid,\n            isNextEnabled: nextInfo.isValid\n        };\n        if (headerLayout) {\n            if (!header) {\n                header = this.header = new Toolbar('fc-header-toolbar');\n                prependToElement(this.el, header.el);\n            }\n            header.receiveProps(__assign({ layout: headerLayout }, toolbarProps), context);\n        }\n        else if (header) {\n            header.destroy();\n            header = this.header = null;\n        }\n        if (footerLayout) {\n            if (!footer) {\n                footer = this.footer = new Toolbar('fc-footer-toolbar');\n                appendToElement(this.el, footer.el);\n            }\n            footer.receiveProps(__assign({ layout: footerLayout }, toolbarProps), context);\n        }\n        else if (footer) {\n            footer.destroy();\n            footer = this.footer = null;\n        }\n    };\n    CalendarComponent.prototype._unrenderToolbars = function () {\n        if (this.header) {\n            this.header.destroy();\n            this.header = null;\n        }\n        if (this.footer) {\n            this.footer.destroy();\n            this.footer = null;\n        }\n    };\n    CalendarComponent.prototype.renderView = function (props, title) {\n        var view = this.view;\n        var _a = this.context, calendar = _a.calendar, options = _a.options;\n        var viewSpec = props.viewSpec, dateProfileGenerator = props.dateProfileGenerator;\n        if (!view || view.viewSpec !== viewSpec) {\n            if (view) {\n                view.destroy();\n            }\n            view = this.view = new viewSpec['class'](viewSpec, this.contentEl);\n            if (this.savedScroll) {\n                view.addScroll(this.savedScroll, true);\n                this.savedScroll = null;\n            }\n        }\n        view.title = title; // for the API\n        var viewProps = {\n            dateProfileGenerator: dateProfileGenerator,\n            dateProfile: props.dateProfile,\n            businessHours: this.parseBusinessHours(viewSpec.options.businessHours),\n            eventStore: props.eventStore,\n            eventUiBases: props.eventUiBases,\n            dateSelection: props.dateSelection,\n            eventSelection: props.eventSelection,\n            eventDrag: props.eventDrag,\n            eventResize: props.eventResize\n        };\n        var transformers = this.buildViewPropTransformers(calendar.pluginSystem.hooks.viewPropsTransformers);\n        for (var _i = 0, transformers_1 = transformers; _i < transformers_1.length; _i++) {\n            var transformer = transformers_1[_i];\n            __assign(viewProps, transformer.transform(viewProps, viewSpec, props, options));\n        }\n        view.receiveProps(viewProps, this.buildComponentContext(this.context, viewSpec, view));\n    };\n    // Sizing\n    // -----------------------------------------------------------------------------------------------------------------\n    CalendarComponent.prototype.updateSize = function (isResize) {\n        if (isResize === void 0) { isResize = false; }\n        var view = this.view;\n        if (!view) {\n            return; // why?\n        }\n        if (isResize || this.isHeightAuto == null) {\n            this.computeHeightVars();\n        }\n        view.updateSize(isResize, this.viewHeight, this.isHeightAuto);\n        view.updateNowIndicator(); // we need to guarantee this will run after updateSize\n        view.popScroll(isResize);\n    };\n    CalendarComponent.prototype.computeHeightVars = function () {\n        var calendar = this.context.calendar; // yuck. need to handle dynamic options\n        var heightInput = calendar.opt('height');\n        var contentHeightInput = calendar.opt('contentHeight');\n        this.isHeightAuto = heightInput === 'auto' || contentHeightInput === 'auto';\n        if (typeof contentHeightInput === 'number') { // exists and not 'auto'\n            this.viewHeight = contentHeightInput;\n        }\n        else if (typeof contentHeightInput === 'function') { // exists and is a function\n            this.viewHeight = contentHeightInput();\n        }\n        else if (typeof heightInput === 'number') { // exists and not 'auto'\n            this.viewHeight = heightInput - this.queryToolbarsHeight();\n        }\n        else if (typeof heightInput === 'function') { // exists and is a function\n            this.viewHeight = heightInput() - this.queryToolbarsHeight();\n        }\n        else if (heightInput === 'parent') { // set to height of parent element\n            var parentEl = this.el.parentNode;\n            this.viewHeight = parentEl.getBoundingClientRect().height - this.queryToolbarsHeight();\n        }\n        else {\n            this.viewHeight = Math.round(this.contentEl.getBoundingClientRect().width /\n                Math.max(calendar.opt('aspectRatio'), .5));\n        }\n    };\n    CalendarComponent.prototype.queryToolbarsHeight = function () {\n        var height = 0;\n        if (this.header) {\n            height += computeHeightAndMargins(this.header.el);\n        }\n        if (this.footer) {\n            height += computeHeightAndMargins(this.footer.el);\n        }\n        return height;\n    };\n    // Height \"Freezing\"\n    // -----------------------------------------------------------------------------------------------------------------\n    CalendarComponent.prototype.freezeHeight = function () {\n        applyStyle(this.el, {\n            height: this.el.getBoundingClientRect().height,\n            overflow: 'hidden'\n        });\n    };\n    CalendarComponent.prototype.thawHeight = function () {\n        applyStyle(this.el, {\n            height: '',\n            overflow: ''\n        });\n    };\n    return CalendarComponent;\n}(Component));\n// Title and Date Formatting\n// -----------------------------------------------------------------------------------------------------------------\n// Computes what the title at the top of the calendar should be for this view\nfunction computeTitle(dateProfile, viewOptions) {\n    var range;\n    // for views that span a large unit of time, show the proper interval, ignoring stray days before and after\n    if (/^(year|month)$/.test(dateProfile.currentRangeUnit)) {\n        range = dateProfile.currentRange;\n    }\n    else { // for day units or smaller, use the actual day range\n        range = dateProfile.activeRange;\n    }\n    return this.context.dateEnv.formatRange(range.start, range.end, createFormatter(viewOptions.titleFormat || computeTitleFormat(dateProfile), viewOptions.titleRangeSeparator), { isEndExclusive: dateProfile.isRangeAllDay });\n}\n// Generates the format string that should be used to generate the title for the current date range.\n// Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.\nfunction computeTitleFormat(dateProfile) {\n    var currentRangeUnit = dateProfile.currentRangeUnit;\n    if (currentRangeUnit === 'year') {\n        return { year: 'numeric' };\n    }\n    else if (currentRangeUnit === 'month') {\n        return { year: 'numeric', month: 'long' }; // like \"September 2014\"\n    }\n    else {\n        var days = diffWholeDays(dateProfile.currentRange.start, dateProfile.currentRange.end);\n        if (days !== null && days > 1) {\n            // multi-day range. shorter, like \"Sep 9 - 10 2014\"\n            return { year: 'numeric', month: 'short', day: 'numeric' };\n        }\n        else {\n            // one day. longer, like \"September 9 2014\"\n            return { year: 'numeric', month: 'long', day: 'numeric' };\n        }\n    }\n}\n// build a context scoped to the view\nfunction buildComponentContext(context, viewSpec, view) {\n    return context.extend(viewSpec.options, view);\n}\n// Plugin\n// -----------------------------------------------------------------------------------------------------------------\nfunction buildViewPropTransformers(theClasses) {\n    return theClasses.map(function (theClass) {\n        return new theClass();\n    });\n}\n\nvar Interaction = /** @class */ (function () {\n    function Interaction(settings) {\n        this.component = settings.component;\n    }\n    Interaction.prototype.destroy = function () {\n    };\n    return Interaction;\n}());\nfunction parseInteractionSettings(component, input) {\n    return {\n        component: component,\n        el: input.el,\n        useEventCenter: input.useEventCenter != null ? input.useEventCenter : true\n    };\n}\nfunction interactionSettingsToStore(settings) {\n    var _a;\n    return _a = {},\n        _a[settings.component.uid] = settings,\n        _a;\n}\n// global state\nvar interactionSettingsStore = {};\n\n/*\nDetects when the user clicks on an event within a DateComponent\n*/\nvar EventClicking = /** @class */ (function (_super) {\n    __extends(EventClicking, _super);\n    function EventClicking(settings) {\n        var _this = _super.call(this, settings) || this;\n        _this.handleSegClick = function (ev, segEl) {\n            var component = _this.component;\n            var _a = component.context, calendar = _a.calendar, view = _a.view;\n            var seg = getElSeg(segEl);\n            if (seg && // might be the <div> surrounding the more link\n                component.isValidSegDownEl(ev.target)) {\n                // our way to simulate a link click for elements that can't be <a> tags\n                // grab before trigger fired in case trigger trashes DOM thru rerendering\n                var hasUrlContainer = elementClosest(ev.target, '.fc-has-url');\n                var url = hasUrlContainer ? hasUrlContainer.querySelector('a[href]').href : '';\n                calendar.publiclyTrigger('eventClick', [\n                    {\n                        el: segEl,\n                        event: new EventApi(component.context.calendar, seg.eventRange.def, seg.eventRange.instance),\n                        jsEvent: ev,\n                        view: view\n                    }\n                ]);\n                if (url && !ev.defaultPrevented) {\n                    window.location.href = url;\n                }\n            }\n        };\n        var component = settings.component;\n        _this.destroy = listenBySelector(component.el, 'click', component.fgSegSelector + ',' + component.bgSegSelector, _this.handleSegClick);\n        return _this;\n    }\n    return EventClicking;\n}(Interaction));\n\n/*\nTriggers events and adds/removes core classNames when the user's pointer\nenters/leaves event-elements of a component.\n*/\nvar EventHovering = /** @class */ (function (_super) {\n    __extends(EventHovering, _super);\n    function EventHovering(settings) {\n        var _this = _super.call(this, settings) || this;\n        // for simulating an eventMouseLeave when the event el is destroyed while mouse is over it\n        _this.handleEventElRemove = function (el) {\n            if (el === _this.currentSegEl) {\n                _this.handleSegLeave(null, _this.currentSegEl);\n            }\n        };\n        _this.handleSegEnter = function (ev, segEl) {\n            if (getElSeg(segEl)) { // TODO: better way to make sure not hovering over more+ link or its wrapper\n                segEl.classList.add('fc-allow-mouse-resize');\n                _this.currentSegEl = segEl;\n                _this.triggerEvent('eventMouseEnter', ev, segEl);\n            }\n        };\n        _this.handleSegLeave = function (ev, segEl) {\n            if (_this.currentSegEl) {\n                segEl.classList.remove('fc-allow-mouse-resize');\n                _this.currentSegEl = null;\n                _this.triggerEvent('eventMouseLeave', ev, segEl);\n            }\n        };\n        var component = settings.component;\n        _this.removeHoverListeners = listenToHoverBySelector(component.el, component.fgSegSelector + ',' + component.bgSegSelector, _this.handleSegEnter, _this.handleSegLeave);\n        // how to make sure component already has context?\n        component.context.calendar.on('eventElRemove', _this.handleEventElRemove);\n        return _this;\n    }\n    EventHovering.prototype.destroy = function () {\n        this.removeHoverListeners();\n        this.component.context.calendar.off('eventElRemove', this.handleEventElRemove);\n    };\n    EventHovering.prototype.triggerEvent = function (publicEvName, ev, segEl) {\n        var component = this.component;\n        var _a = component.context, calendar = _a.calendar, view = _a.view;\n        var seg = getElSeg(segEl);\n        if (!ev || component.isValidSegDownEl(ev.target)) {\n            calendar.publiclyTrigger(publicEvName, [\n                {\n                    el: segEl,\n                    event: new EventApi(calendar, seg.eventRange.def, seg.eventRange.instance),\n                    jsEvent: ev,\n                    view: view\n                }\n            ]);\n        }\n    };\n    return EventHovering;\n}(Interaction));\n\nvar StandardTheme = /** @class */ (function (_super) {\n    __extends(StandardTheme, _super);\n    function StandardTheme() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return StandardTheme;\n}(Theme));\nStandardTheme.prototype.classes = {\n    widget: 'fc-unthemed',\n    widgetHeader: 'fc-widget-header',\n    widgetContent: 'fc-widget-content',\n    buttonGroup: 'fc-button-group',\n    button: 'fc-button fc-button-primary',\n    buttonActive: 'fc-button-active',\n    popoverHeader: 'fc-widget-header',\n    popoverContent: 'fc-widget-content',\n    // day grid\n    headerRow: 'fc-widget-header',\n    dayRow: 'fc-widget-content',\n    // list view\n    listView: 'fc-widget-content'\n};\nStandardTheme.prototype.baseIconClass = 'fc-icon';\nStandardTheme.prototype.iconClasses = {\n    close: 'fc-icon-x',\n    prev: 'fc-icon-chevron-left',\n    next: 'fc-icon-chevron-right',\n    prevYear: 'fc-icon-chevrons-left',\n    nextYear: 'fc-icon-chevrons-right'\n};\nStandardTheme.prototype.iconOverrideOption = 'buttonIcons';\nStandardTheme.prototype.iconOverrideCustomButtonOption = 'icon';\nStandardTheme.prototype.iconOverridePrefix = 'fc-icon-';\n\nvar Calendar = /** @class */ (function () {\n    function Calendar(el, overrides) {\n        var _this = this;\n        this.buildComponentContext = memoize(buildComponentContext$1);\n        this.parseRawLocales = memoize(parseRawLocales);\n        this.buildLocale = memoize(buildLocale);\n        this.buildDateEnv = memoize(buildDateEnv);\n        this.buildTheme = memoize(buildTheme);\n        this.buildEventUiSingleBase = memoize(this._buildEventUiSingleBase);\n        this.buildSelectionConfig = memoize(this._buildSelectionConfig);\n        this.buildEventUiBySource = memoizeOutput(buildEventUiBySource, isPropsEqual);\n        this.buildEventUiBases = memoize(buildEventUiBases);\n        this.interactionsStore = {};\n        this.actionQueue = [];\n        this.isReducing = false;\n        // isDisplaying: boolean = false // installed in DOM? accepting renders?\n        this.needsRerender = false; // needs a render?\n        this.isRendering = false; // currently in the executeRender function?\n        this.renderingPauseDepth = 0;\n        this.buildDelayedRerender = memoize(buildDelayedRerender);\n        this.afterSizingTriggers = {};\n        this.isViewUpdated = false;\n        this.isDatesUpdated = false;\n        this.isEventsUpdated = false;\n        this.el = el;\n        this.optionsManager = new OptionsManager(overrides || {});\n        this.pluginSystem = new PluginSystem();\n        // only do once. don't do in handleOptions. because can't remove plugins\n        this.addPluginInputs(this.optionsManager.computed.plugins || []);\n        this.handleOptions(this.optionsManager.computed);\n        this.publiclyTrigger('_init'); // for tests\n        this.hydrate();\n        this.calendarInteractions = this.pluginSystem.hooks.calendarInteractions\n            .map(function (calendarInteractionClass) {\n            return new calendarInteractionClass(_this);\n        });\n    }\n    Calendar.prototype.addPluginInputs = function (pluginInputs) {\n        var pluginDefs = refinePluginDefs(pluginInputs);\n        for (var _i = 0, pluginDefs_1 = pluginDefs; _i < pluginDefs_1.length; _i++) {\n            var pluginDef = pluginDefs_1[_i];\n            this.pluginSystem.add(pluginDef);\n        }\n    };\n    Object.defineProperty(Calendar.prototype, \"view\", {\n        // public API\n        get: function () {\n            return this.component ? this.component.view : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // Public API for rendering\n    // -----------------------------------------------------------------------------------------------------------------\n    Calendar.prototype.render = function () {\n        if (!this.component) {\n            this.component = new CalendarComponent(this.el);\n            this.renderableEventStore = createEmptyEventStore();\n            this.bindHandlers();\n            this.executeRender();\n        }\n        else {\n            this.requestRerender();\n        }\n    };\n    Calendar.prototype.destroy = function () {\n        if (this.component) {\n            this.unbindHandlers();\n            this.component.destroy(); // don't null-out. in case API needs access\n            this.component = null; // umm ???\n            for (var _i = 0, _a = this.calendarInteractions; _i < _a.length; _i++) {\n                var interaction = _a[_i];\n                interaction.destroy();\n            }\n            this.publiclyTrigger('_destroyed');\n        }\n    };\n    // Handlers\n    // -----------------------------------------------------------------------------------------------------------------\n    Calendar.prototype.bindHandlers = function () {\n        var _this = this;\n        // event delegation for nav links\n        this.removeNavLinkListener = listenBySelector(this.el, 'click', 'a[data-goto]', function (ev, anchorEl) {\n            var gotoOptions = anchorEl.getAttribute('data-goto');\n            gotoOptions = gotoOptions ? JSON.parse(gotoOptions) : {};\n            var dateEnv = _this.dateEnv;\n            var dateMarker = dateEnv.createMarker(gotoOptions.date);\n            var viewType = gotoOptions.type;\n            // property like \"navLinkDayClick\". might be a string or a function\n            var customAction = _this.viewOpt('navLink' + capitaliseFirstLetter(viewType) + 'Click');\n            if (typeof customAction === 'function') {\n                customAction(dateEnv.toDate(dateMarker), ev);\n            }\n            else {\n                if (typeof customAction === 'string') {\n                    viewType = customAction;\n                }\n                _this.zoomTo(dateMarker, viewType);\n            }\n        });\n        if (this.opt('handleWindowResize')) {\n            window.addEventListener('resize', this.windowResizeProxy = debounce(// prevents rapid calls\n            this.windowResize.bind(this), this.opt('windowResizeDelay')));\n        }\n    };\n    Calendar.prototype.unbindHandlers = function () {\n        this.removeNavLinkListener();\n        if (this.windowResizeProxy) {\n            window.removeEventListener('resize', this.windowResizeProxy);\n            this.windowResizeProxy = null;\n        }\n    };\n    // Dispatcher\n    // -----------------------------------------------------------------------------------------------------------------\n    Calendar.prototype.hydrate = function () {\n        var _this = this;\n        this.state = this.buildInitialState();\n        var rawSources = this.opt('eventSources') || [];\n        var singleRawSource = this.opt('events');\n        var sources = []; // parsed\n        if (singleRawSource) {\n            rawSources.unshift(singleRawSource);\n        }\n        for (var _i = 0, rawSources_1 = rawSources; _i < rawSources_1.length; _i++) {\n            var rawSource = rawSources_1[_i];\n            var source = parseEventSource(rawSource, this);\n            if (source) {\n                sources.push(source);\n            }\n        }\n        this.batchRendering(function () {\n            _this.dispatch({ type: 'INIT' }); // pass in sources here?\n            _this.dispatch({ type: 'ADD_EVENT_SOURCES', sources: sources });\n            _this.dispatch({\n                type: 'SET_VIEW_TYPE',\n                viewType: _this.opt('defaultView') || _this.pluginSystem.hooks.defaultView\n            });\n        });\n    };\n    Calendar.prototype.buildInitialState = function () {\n        return {\n            viewType: null,\n            loadingLevel: 0,\n            eventSourceLoadingLevel: 0,\n            currentDate: this.getInitialDate(),\n            dateProfile: null,\n            eventSources: {},\n            eventStore: createEmptyEventStore(),\n            dateSelection: null,\n            eventSelection: '',\n            eventDrag: null,\n            eventResize: null\n        };\n    };\n    Calendar.prototype.dispatch = function (action) {\n        this.actionQueue.push(action);\n        if (!this.isReducing) {\n            this.isReducing = true;\n            var oldState = this.state;\n            while (this.actionQueue.length) {\n                this.state = this.reduce(this.state, this.actionQueue.shift(), this);\n            }\n            var newState = this.state;\n            this.isReducing = false;\n            if (!oldState.loadingLevel && newState.loadingLevel) {\n                this.publiclyTrigger('loading', [true]);\n            }\n            else if (oldState.loadingLevel && !newState.loadingLevel) {\n                this.publiclyTrigger('loading', [false]);\n            }\n            var view = this.component && this.component.view;\n            if (oldState.eventStore !== newState.eventStore) {\n                if (oldState.eventStore) {\n                    this.isEventsUpdated = true;\n                }\n            }\n            if (oldState.dateProfile !== newState.dateProfile) {\n                if (oldState.dateProfile && view) { // why would view be null!?\n                    this.publiclyTrigger('datesDestroy', [\n                        {\n                            view: view,\n                            el: view.el\n                        }\n                    ]);\n                }\n                this.isDatesUpdated = true;\n            }\n            if (oldState.viewType !== newState.viewType) {\n                if (oldState.viewType && view) { // why would view be null!?\n                    this.publiclyTrigger('viewSkeletonDestroy', [\n                        {\n                            view: view,\n                            el: view.el\n                        }\n                    ]);\n                }\n                this.isViewUpdated = true;\n            }\n            this.requestRerender();\n        }\n    };\n    Calendar.prototype.reduce = function (state, action, calendar) {\n        return reduce(state, action, calendar);\n    };\n    // Render Queue\n    // -----------------------------------------------------------------------------------------------------------------\n    Calendar.prototype.requestRerender = function () {\n        this.needsRerender = true;\n        this.delayedRerender(); // will call a debounced-version of tryRerender\n    };\n    Calendar.prototype.tryRerender = function () {\n        if (this.component && // must be accepting renders\n            this.needsRerender && // indicates that a rerender was requested\n            !this.renderingPauseDepth && // not paused\n            !this.isRendering // not currently in the render loop\n        ) {\n            this.executeRender();\n        }\n    };\n    Calendar.prototype.batchRendering = function (func) {\n        this.renderingPauseDepth++;\n        func();\n        this.renderingPauseDepth--;\n        if (this.needsRerender) {\n            this.requestRerender();\n        }\n    };\n    // Rendering\n    // -----------------------------------------------------------------------------------------------------------------\n    Calendar.prototype.executeRender = function () {\n        // clear these BEFORE the render so that new values will accumulate during render\n        this.needsRerender = false;\n        this.isRendering = true;\n        this.renderComponent();\n        this.isRendering = false;\n        // received a rerender request while rendering\n        if (this.needsRerender) {\n            this.delayedRerender();\n        }\n    };\n    /*\n    don't call this directly. use executeRender instead\n    */\n    Calendar.prototype.renderComponent = function () {\n        var _a = this, state = _a.state, component = _a.component;\n        var viewType = state.viewType;\n        var viewSpec = this.viewSpecs[viewType];\n        if (!viewSpec) {\n            throw new Error(\"View type \\\"\" + viewType + \"\\\" is not valid\");\n        }\n        // if event sources are still loading and progressive rendering hasn't been enabled,\n        // keep rendering the last fully loaded set of events\n        var renderableEventStore = this.renderableEventStore =\n            (state.eventSourceLoadingLevel && !this.opt('progressiveEventRendering')) ?\n                this.renderableEventStore :\n                state.eventStore;\n        var eventUiSingleBase = this.buildEventUiSingleBase(viewSpec.options);\n        var eventUiBySource = this.buildEventUiBySource(state.eventSources);\n        var eventUiBases = this.eventUiBases = this.buildEventUiBases(renderableEventStore.defs, eventUiSingleBase, eventUiBySource);\n        component.receiveProps(__assign({}, state, { viewSpec: viewSpec, dateProfileGenerator: this.dateProfileGenerators[viewType], dateProfile: state.dateProfile, eventStore: renderableEventStore, eventUiBases: eventUiBases, dateSelection: state.dateSelection, eventSelection: state.eventSelection, eventDrag: state.eventDrag, eventResize: state.eventResize }), this.buildComponentContext(this.theme, this.dateEnv, this.optionsManager.computed));\n        if (this.isViewUpdated) {\n            this.isViewUpdated = false;\n            this.publiclyTrigger('viewSkeletonRender', [\n                {\n                    view: component.view,\n                    el: component.view.el\n                }\n            ]);\n        }\n        if (this.isDatesUpdated) {\n            this.isDatesUpdated = false;\n            this.publiclyTrigger('datesRender', [\n                {\n                    view: component.view,\n                    el: component.view.el\n                }\n            ]);\n        }\n        if (this.isEventsUpdated) {\n            this.isEventsUpdated = false;\n        }\n        this.releaseAfterSizingTriggers();\n    };\n    // Options\n    // -----------------------------------------------------------------------------------------------------------------\n    Calendar.prototype.setOption = function (name, val) {\n        var _a;\n        this.mutateOptions((_a = {}, _a[name] = val, _a), [], true);\n    };\n    Calendar.prototype.getOption = function (name) {\n        return this.optionsManager.computed[name];\n    };\n    Calendar.prototype.opt = function (name) {\n        return this.optionsManager.computed[name];\n    };\n    Calendar.prototype.viewOpt = function (name) {\n        return this.viewOpts()[name];\n    };\n    Calendar.prototype.viewOpts = function () {\n        return this.viewSpecs[this.state.viewType].options;\n    };\n    /*\n    handles option changes (like a diff)\n    */\n    Calendar.prototype.mutateOptions = function (updates, removals, isDynamic, deepEqual) {\n        var _this = this;\n        var changeHandlers = this.pluginSystem.hooks.optionChangeHandlers;\n        var normalUpdates = {};\n        var specialUpdates = {};\n        var oldDateEnv = this.dateEnv; // do this before handleOptions\n        var isTimeZoneDirty = false;\n        var isSizeDirty = false;\n        var anyDifficultOptions = Boolean(removals.length);\n        for (var name_1 in updates) {\n            if (changeHandlers[name_1]) {\n                specialUpdates[name_1] = updates[name_1];\n            }\n            else {\n                normalUpdates[name_1] = updates[name_1];\n            }\n        }\n        for (var name_2 in normalUpdates) {\n            if (/^(height|contentHeight|aspectRatio)$/.test(name_2)) {\n                isSizeDirty = true;\n            }\n            else if (/^(defaultDate|defaultView)$/.test(name_2)) ;\n            else {\n                anyDifficultOptions = true;\n                if (name_2 === 'timeZone') {\n                    isTimeZoneDirty = true;\n                }\n            }\n        }\n        this.optionsManager.mutate(normalUpdates, removals, isDynamic);\n        if (anyDifficultOptions) {\n            this.handleOptions(this.optionsManager.computed);\n        }\n        this.batchRendering(function () {\n            if (anyDifficultOptions) {\n                if (isTimeZoneDirty) {\n                    _this.dispatch({\n                        type: 'CHANGE_TIMEZONE',\n                        oldDateEnv: oldDateEnv\n                    });\n                }\n                /* HACK\n                has the same effect as calling this.requestRerender()\n                but recomputes the state's dateProfile\n                */\n                _this.dispatch({\n                    type: 'SET_VIEW_TYPE',\n                    viewType: _this.state.viewType\n                });\n            }\n            else if (isSizeDirty) {\n                _this.updateSize();\n            }\n            // special updates\n            if (deepEqual) {\n                for (var name_3 in specialUpdates) {\n                    changeHandlers[name_3](specialUpdates[name_3], _this, deepEqual);\n                }\n            }\n        });\n    };\n    /*\n    rebuilds things based off of a complete set of refined options\n    */\n    Calendar.prototype.handleOptions = function (options) {\n        var _this = this;\n        var pluginHooks = this.pluginSystem.hooks;\n        this.defaultAllDayEventDuration = createDuration(options.defaultAllDayEventDuration);\n        this.defaultTimedEventDuration = createDuration(options.defaultTimedEventDuration);\n        this.delayedRerender = this.buildDelayedRerender(options.rerenderDelay);\n        this.theme = this.buildTheme(options);\n        var available = this.parseRawLocales(options.locales);\n        this.availableRawLocales = available.map;\n        var locale = this.buildLocale(options.locale || available.defaultCode, available.map);\n        this.dateEnv = this.buildDateEnv(locale, options.timeZone, pluginHooks.namedTimeZonedImpl, options.firstDay, options.weekNumberCalculation, options.weekLabel, pluginHooks.cmdFormatter);\n        this.selectionConfig = this.buildSelectionConfig(options); // needs dateEnv. do after :(\n        // ineffecient to do every time?\n        this.viewSpecs = buildViewSpecs(pluginHooks.views, this.optionsManager);\n        // ineffecient to do every time?\n        this.dateProfileGenerators = mapHash(this.viewSpecs, function (viewSpec) {\n            return new viewSpec.class.prototype.dateProfileGeneratorClass(viewSpec, _this);\n        });\n    };\n    Calendar.prototype.getAvailableLocaleCodes = function () {\n        return Object.keys(this.availableRawLocales);\n    };\n    Calendar.prototype._buildSelectionConfig = function (rawOpts) {\n        return processScopedUiProps('select', rawOpts, this);\n    };\n    Calendar.prototype._buildEventUiSingleBase = function (rawOpts) {\n        if (rawOpts.editable) { // so 'editable' affected events\n            rawOpts = __assign({}, rawOpts, { eventEditable: true });\n        }\n        return processScopedUiProps('event', rawOpts, this);\n    };\n    // Trigger\n    // -----------------------------------------------------------------------------------------------------------------\n    Calendar.prototype.hasPublicHandlers = function (name) {\n        return this.hasHandlers(name) ||\n            this.opt(name); // handler specified in options\n    };\n    Calendar.prototype.publiclyTrigger = function (name, args) {\n        var optHandler = this.opt(name);\n        this.triggerWith(name, this, args);\n        if (optHandler) {\n            return optHandler.apply(this, args);\n        }\n    };\n    Calendar.prototype.publiclyTriggerAfterSizing = function (name, args) {\n        var afterSizingTriggers = this.afterSizingTriggers;\n        (afterSizingTriggers[name] || (afterSizingTriggers[name] = [])).push(args);\n    };\n    Calendar.prototype.releaseAfterSizingTriggers = function () {\n        var afterSizingTriggers = this.afterSizingTriggers;\n        for (var name_4 in afterSizingTriggers) {\n            for (var _i = 0, _a = afterSizingTriggers[name_4]; _i < _a.length; _i++) {\n                var args = _a[_i];\n                this.publiclyTrigger(name_4, args);\n            }\n        }\n        this.afterSizingTriggers = {};\n    };\n    // View\n    // -----------------------------------------------------------------------------------------------------------------\n    // Returns a boolean about whether the view is okay to instantiate at some point\n    Calendar.prototype.isValidViewType = function (viewType) {\n        return Boolean(this.viewSpecs[viewType]);\n    };\n    Calendar.prototype.changeView = function (viewType, dateOrRange) {\n        var dateMarker = null;\n        if (dateOrRange) {\n            if (dateOrRange.start && dateOrRange.end) { // a range\n                this.optionsManager.mutate({ visibleRange: dateOrRange }, []); // will not rerender\n                this.handleOptions(this.optionsManager.computed); // ...but yuck\n            }\n            else { // a date\n                dateMarker = this.dateEnv.createMarker(dateOrRange); // just like gotoDate\n            }\n        }\n        this.unselect();\n        this.dispatch({\n            type: 'SET_VIEW_TYPE',\n            viewType: viewType,\n            dateMarker: dateMarker\n        });\n    };\n    // Forces navigation to a view for the given date.\n    // `viewType` can be a specific view name or a generic one like \"week\" or \"day\".\n    // needs to change\n    Calendar.prototype.zoomTo = function (dateMarker, viewType) {\n        var spec;\n        viewType = viewType || 'day'; // day is default zoom\n        spec = this.viewSpecs[viewType] ||\n            this.getUnitViewSpec(viewType);\n        this.unselect();\n        if (spec) {\n            this.dispatch({\n                type: 'SET_VIEW_TYPE',\n                viewType: spec.type,\n                dateMarker: dateMarker\n            });\n        }\n        else {\n            this.dispatch({\n                type: 'SET_DATE',\n                dateMarker: dateMarker\n            });\n        }\n    };\n    // Given a duration singular unit, like \"week\" or \"day\", finds a matching view spec.\n    // Preference is given to views that have corresponding buttons.\n    Calendar.prototype.getUnitViewSpec = function (unit) {\n        var component = this.component;\n        var viewTypes = [];\n        var i;\n        var spec;\n        // put views that have buttons first. there will be duplicates, but oh\n        if (component.header) {\n            viewTypes.push.apply(viewTypes, component.header.viewsWithButtons);\n        }\n        if (component.footer) {\n            viewTypes.push.apply(viewTypes, component.footer.viewsWithButtons);\n        }\n        for (var viewType in this.viewSpecs) {\n            viewTypes.push(viewType);\n        }\n        for (i = 0; i < viewTypes.length; i++) {\n            spec = this.viewSpecs[viewTypes[i]];\n            if (spec) {\n                if (spec.singleUnit === unit) {\n                    return spec;\n                }\n            }\n        }\n    };\n    // Current Date\n    // -----------------------------------------------------------------------------------------------------------------\n    Calendar.prototype.getInitialDate = function () {\n        var defaultDateInput = this.opt('defaultDate');\n        // compute the initial ambig-timezone date\n        if (defaultDateInput != null) {\n            return this.dateEnv.createMarker(defaultDateInput);\n        }\n        else {\n            return this.getNow(); // getNow already returns unzoned\n        }\n    };\n    Calendar.prototype.prev = function () {\n        this.unselect();\n        this.dispatch({ type: 'PREV' });\n    };\n    Calendar.prototype.next = function () {\n        this.unselect();\n        this.dispatch({ type: 'NEXT' });\n    };\n    Calendar.prototype.prevYear = function () {\n        this.unselect();\n        this.dispatch({\n            type: 'SET_DATE',\n            dateMarker: this.dateEnv.addYears(this.state.currentDate, -1)\n        });\n    };\n    Calendar.prototype.nextYear = function () {\n        this.unselect();\n        this.dispatch({\n            type: 'SET_DATE',\n            dateMarker: this.dateEnv.addYears(this.state.currentDate, 1)\n        });\n    };\n    Calendar.prototype.today = function () {\n        this.unselect();\n        this.dispatch({\n            type: 'SET_DATE',\n            dateMarker: this.getNow()\n        });\n    };\n    Calendar.prototype.gotoDate = function (zonedDateInput) {\n        this.unselect();\n        this.dispatch({\n            type: 'SET_DATE',\n            dateMarker: this.dateEnv.createMarker(zonedDateInput)\n        });\n    };\n    Calendar.prototype.incrementDate = function (deltaInput) {\n        var delta = createDuration(deltaInput);\n        if (delta) { // else, warn about invalid input?\n            this.unselect();\n            this.dispatch({\n                type: 'SET_DATE',\n                dateMarker: this.dateEnv.add(this.state.currentDate, delta)\n            });\n        }\n    };\n    // for external API\n    Calendar.prototype.getDate = function () {\n        return this.dateEnv.toDate(this.state.currentDate);\n    };\n    // Date Formatting Utils\n    // -----------------------------------------------------------------------------------------------------------------\n    Calendar.prototype.formatDate = function (d, formatter) {\n        var dateEnv = this.dateEnv;\n        return dateEnv.format(dateEnv.createMarker(d), createFormatter(formatter));\n    };\n    // `settings` is for formatter AND isEndExclusive\n    Calendar.prototype.formatRange = function (d0, d1, settings) {\n        var dateEnv = this.dateEnv;\n        return dateEnv.formatRange(dateEnv.createMarker(d0), dateEnv.createMarker(d1), createFormatter(settings, this.opt('defaultRangeSeparator')), settings);\n    };\n    Calendar.prototype.formatIso = function (d, omitTime) {\n        var dateEnv = this.dateEnv;\n        return dateEnv.formatIso(dateEnv.createMarker(d), { omitTime: omitTime });\n    };\n    // Sizing\n    // -----------------------------------------------------------------------------------------------------------------\n    Calendar.prototype.windowResize = function (ev) {\n        if (!this.isHandlingWindowResize &&\n            this.component && // why?\n            ev.target === window // not a jqui resize event\n        ) {\n            this.isHandlingWindowResize = true;\n            this.updateSize();\n            this.publiclyTrigger('windowResize', [this.view]);\n            this.isHandlingWindowResize = false;\n        }\n    };\n    Calendar.prototype.updateSize = function () {\n        if (this.component) { // when?\n            this.component.updateSize(true);\n        }\n    };\n    // Component Registration\n    // -----------------------------------------------------------------------------------------------------------------\n    Calendar.prototype.registerInteractiveComponent = function (component, settingsInput) {\n        var settings = parseInteractionSettings(component, settingsInput);\n        var DEFAULT_INTERACTIONS = [\n            EventClicking,\n            EventHovering\n        ];\n        var interactionClasses = DEFAULT_INTERACTIONS.concat(this.pluginSystem.hooks.componentInteractions);\n        var interactions = interactionClasses.map(function (interactionClass) {\n            return new interactionClass(settings);\n        });\n        this.interactionsStore[component.uid] = interactions;\n        interactionSettingsStore[component.uid] = settings;\n    };\n    Calendar.prototype.unregisterInteractiveComponent = function (component) {\n        for (var _i = 0, _a = this.interactionsStore[component.uid]; _i < _a.length; _i++) {\n            var listener = _a[_i];\n            listener.destroy();\n        }\n        delete this.interactionsStore[component.uid];\n        delete interactionSettingsStore[component.uid];\n    };\n    // Date Selection / Event Selection / DayClick\n    // -----------------------------------------------------------------------------------------------------------------\n    // this public method receives start/end dates in any format, with any timezone\n    // NOTE: args were changed from v3\n    Calendar.prototype.select = function (dateOrObj, endDate) {\n        var selectionInput;\n        if (endDate == null) {\n            if (dateOrObj.start != null) {\n                selectionInput = dateOrObj;\n            }\n            else {\n                selectionInput = {\n                    start: dateOrObj,\n                    end: null\n                };\n            }\n        }\n        else {\n            selectionInput = {\n                start: dateOrObj,\n                end: endDate\n            };\n        }\n        var selection = parseDateSpan(selectionInput, this.dateEnv, createDuration({ days: 1 }) // TODO: cache this?\n        );\n        if (selection) { // throw parse error otherwise?\n            this.dispatch({ type: 'SELECT_DATES', selection: selection });\n            this.triggerDateSelect(selection);\n        }\n    };\n    // public method\n    Calendar.prototype.unselect = function (pev) {\n        if (this.state.dateSelection) {\n            this.dispatch({ type: 'UNSELECT_DATES' });\n            this.triggerDateUnselect(pev);\n        }\n    };\n    Calendar.prototype.triggerDateSelect = function (selection, pev) {\n        var arg = __assign({}, this.buildDateSpanApi(selection), { jsEvent: pev ? pev.origEvent : null, view: this.view });\n        this.publiclyTrigger('select', [arg]);\n    };\n    Calendar.prototype.triggerDateUnselect = function (pev) {\n        this.publiclyTrigger('unselect', [\n            {\n                jsEvent: pev ? pev.origEvent : null,\n                view: this.view\n            }\n        ]);\n    };\n    // TODO: receive pev?\n    Calendar.prototype.triggerDateClick = function (dateSpan, dayEl, view, ev) {\n        var arg = __assign({}, this.buildDatePointApi(dateSpan), { dayEl: dayEl, jsEvent: ev, // Is this always a mouse event? See #4655\n            view: view });\n        this.publiclyTrigger('dateClick', [arg]);\n    };\n    Calendar.prototype.buildDatePointApi = function (dateSpan) {\n        var props = {};\n        for (var _i = 0, _a = this.pluginSystem.hooks.datePointTransforms; _i < _a.length; _i++) {\n            var transform = _a[_i];\n            __assign(props, transform(dateSpan, this));\n        }\n        __assign(props, buildDatePointApi(dateSpan, this.dateEnv));\n        return props;\n    };\n    Calendar.prototype.buildDateSpanApi = function (dateSpan) {\n        var props = {};\n        for (var _i = 0, _a = this.pluginSystem.hooks.dateSpanTransforms; _i < _a.length; _i++) {\n            var transform = _a[_i];\n            __assign(props, transform(dateSpan, this));\n        }\n        __assign(props, buildDateSpanApi(dateSpan, this.dateEnv));\n        return props;\n    };\n    // Date Utils\n    // -----------------------------------------------------------------------------------------------------------------\n    // Returns a DateMarker for the current date, as defined by the client's computer or from the `now` option\n    Calendar.prototype.getNow = function () {\n        var now = this.opt('now');\n        if (typeof now === 'function') {\n            now = now();\n        }\n        if (now == null) {\n            return this.dateEnv.createNowMarker();\n        }\n        return this.dateEnv.createMarker(now);\n    };\n    // Event-Date Utilities\n    // -----------------------------------------------------------------------------------------------------------------\n    // Given an event's allDay status and start date, return what its fallback end date should be.\n    // TODO: rename to computeDefaultEventEnd\n    Calendar.prototype.getDefaultEventEnd = function (allDay, marker) {\n        var end = marker;\n        if (allDay) {\n            end = startOfDay(end);\n            end = this.dateEnv.add(end, this.defaultAllDayEventDuration);\n        }\n        else {\n            end = this.dateEnv.add(end, this.defaultTimedEventDuration);\n        }\n        return end;\n    };\n    // Public Events API\n    // -----------------------------------------------------------------------------------------------------------------\n    Calendar.prototype.addEvent = function (eventInput, sourceInput) {\n        if (eventInput instanceof EventApi) {\n            var def = eventInput._def;\n            var instance = eventInput._instance;\n            // not already present? don't want to add an old snapshot\n            if (!this.state.eventStore.defs[def.defId]) {\n                this.dispatch({\n                    type: 'ADD_EVENTS',\n                    eventStore: eventTupleToStore({ def: def, instance: instance }) // TODO: better util for two args?\n                });\n            }\n            return eventInput;\n        }\n        var sourceId;\n        if (sourceInput instanceof EventSourceApi) {\n            sourceId = sourceInput.internalEventSource.sourceId;\n        }\n        else if (sourceInput != null) {\n            var sourceApi = this.getEventSourceById(sourceInput); // TODO: use an internal function\n            if (!sourceApi) {\n                console.warn('Could not find an event source with ID \"' + sourceInput + '\"'); // TODO: test\n                return null;\n            }\n            else {\n                sourceId = sourceApi.internalEventSource.sourceId;\n            }\n        }\n        var tuple = parseEvent(eventInput, sourceId, this);\n        if (tuple) {\n            this.dispatch({\n                type: 'ADD_EVENTS',\n                eventStore: eventTupleToStore(tuple)\n            });\n            return new EventApi(this, tuple.def, tuple.def.recurringDef ? null : tuple.instance);\n        }\n        return null;\n    };\n    // TODO: optimize\n    Calendar.prototype.getEventById = function (id) {\n        var _a = this.state.eventStore, defs = _a.defs, instances = _a.instances;\n        id = String(id);\n        for (var defId in defs) {\n            var def = defs[defId];\n            if (def.publicId === id) {\n                if (def.recurringDef) {\n                    return new EventApi(this, def, null);\n                }\n                else {\n                    for (var instanceId in instances) {\n                        var instance = instances[instanceId];\n                        if (instance.defId === def.defId) {\n                            return new EventApi(this, def, instance);\n                        }\n                    }\n                }\n            }\n        }\n        return null;\n    };\n    Calendar.prototype.getEvents = function () {\n        var _a = this.state.eventStore, defs = _a.defs, instances = _a.instances;\n        var eventApis = [];\n        for (var id in instances) {\n            var instance = instances[id];\n            var def = defs[instance.defId];\n            eventApis.push(new EventApi(this, def, instance));\n        }\n        return eventApis;\n    };\n    Calendar.prototype.removeAllEvents = function () {\n        this.dispatch({ type: 'REMOVE_ALL_EVENTS' });\n    };\n    Calendar.prototype.rerenderEvents = function () {\n        this.dispatch({ type: 'RESET_EVENTS' });\n    };\n    // Public Event Sources API\n    // -----------------------------------------------------------------------------------------------------------------\n    Calendar.prototype.getEventSources = function () {\n        var sourceHash = this.state.eventSources;\n        var sourceApis = [];\n        for (var internalId in sourceHash) {\n            sourceApis.push(new EventSourceApi(this, sourceHash[internalId]));\n        }\n        return sourceApis;\n    };\n    Calendar.prototype.getEventSourceById = function (id) {\n        var sourceHash = this.state.eventSources;\n        id = String(id);\n        for (var sourceId in sourceHash) {\n            if (sourceHash[sourceId].publicId === id) {\n                return new EventSourceApi(this, sourceHash[sourceId]);\n            }\n        }\n        return null;\n    };\n    Calendar.prototype.addEventSource = function (sourceInput) {\n        if (sourceInput instanceof EventSourceApi) {\n            // not already present? don't want to add an old snapshot\n            if (!this.state.eventSources[sourceInput.internalEventSource.sourceId]) {\n                this.dispatch({\n                    type: 'ADD_EVENT_SOURCES',\n                    sources: [sourceInput.internalEventSource]\n                });\n            }\n            return sourceInput;\n        }\n        var eventSource = parseEventSource(sourceInput, this);\n        if (eventSource) { // TODO: error otherwise?\n            this.dispatch({ type: 'ADD_EVENT_SOURCES', sources: [eventSource] });\n            return new EventSourceApi(this, eventSource);\n        }\n        return null;\n    };\n    Calendar.prototype.removeAllEventSources = function () {\n        this.dispatch({ type: 'REMOVE_ALL_EVENT_SOURCES' });\n    };\n    Calendar.prototype.refetchEvents = function () {\n        this.dispatch({ type: 'FETCH_EVENT_SOURCES' });\n    };\n    // Scroll\n    // -----------------------------------------------------------------------------------------------------------------\n    Calendar.prototype.scrollToTime = function (timeInput) {\n        var duration = createDuration(timeInput);\n        if (duration) {\n            this.component.view.scrollToDuration(duration);\n        }\n    };\n    return Calendar;\n}());\nEmitterMixin.mixInto(Calendar);\n// for memoizers\n// -----------------------------------------------------------------------------------------------------------------\nfunction buildComponentContext$1(theme, dateEnv, options) {\n    return new ComponentContext(this, theme, dateEnv, options, null);\n}\nfunction buildDateEnv(locale, timeZone, namedTimeZoneImpl, firstDay, weekNumberCalculation, weekLabel, cmdFormatter) {\n    return new DateEnv({\n        calendarSystem: 'gregory',\n        timeZone: timeZone,\n        namedTimeZoneImpl: namedTimeZoneImpl,\n        locale: locale,\n        weekNumberCalculation: weekNumberCalculation,\n        firstDay: firstDay,\n        weekLabel: weekLabel,\n        cmdFormatter: cmdFormatter\n    });\n}\nfunction buildTheme(calendarOptions) {\n    var themeClass = this.pluginSystem.hooks.themeClasses[calendarOptions.themeSystem] || StandardTheme;\n    return new themeClass(calendarOptions);\n}\nfunction buildDelayedRerender(wait) {\n    var func = this.tryRerender.bind(this);\n    if (wait != null) {\n        func = debounce(func, wait);\n    }\n    return func;\n}\nfunction buildEventUiBySource(eventSources) {\n    return mapHash(eventSources, function (eventSource) {\n        return eventSource.ui;\n    });\n}\nfunction buildEventUiBases(eventDefs, eventUiSingleBase, eventUiBySource) {\n    var eventUiBases = { '': eventUiSingleBase };\n    for (var defId in eventDefs) {\n        var def = eventDefs[defId];\n        if (def.sourceId && eventUiBySource[def.sourceId]) {\n            eventUiBases[defId] = eventUiBySource[def.sourceId];\n        }\n    }\n    return eventUiBases;\n}\n\nvar View = /** @class */ (function (_super) {\n    __extends(View, _super);\n    function View(viewSpec, parentEl) {\n        var _this = _super.call(this, createElement('div', { className: 'fc-view fc-' + viewSpec.type + '-view' })) || this;\n        _this.renderDatesMem = memoizeRendering(_this.renderDatesWrap, _this.unrenderDatesWrap);\n        _this.renderBusinessHoursMem = memoizeRendering(_this.renderBusinessHours, _this.unrenderBusinessHours, [_this.renderDatesMem]);\n        _this.renderDateSelectionMem = memoizeRendering(_this.renderDateSelectionWrap, _this.unrenderDateSelectionWrap, [_this.renderDatesMem]);\n        _this.renderEventsMem = memoizeRendering(_this.renderEvents, _this.unrenderEvents, [_this.renderDatesMem]);\n        _this.renderEventSelectionMem = memoizeRendering(_this.renderEventSelectionWrap, _this.unrenderEventSelectionWrap, [_this.renderEventsMem]);\n        _this.renderEventDragMem = memoizeRendering(_this.renderEventDragWrap, _this.unrenderEventDragWrap, [_this.renderDatesMem]);\n        _this.renderEventResizeMem = memoizeRendering(_this.renderEventResizeWrap, _this.unrenderEventResizeWrap, [_this.renderDatesMem]);\n        _this.viewSpec = viewSpec;\n        _this.type = viewSpec.type;\n        parentEl.appendChild(_this.el);\n        _this.initialize();\n        return _this;\n    }\n    View.prototype.initialize = function () {\n    };\n    Object.defineProperty(View.prototype, \"activeStart\", {\n        // Date Setting/Unsetting\n        // -----------------------------------------------------------------------------------------------------------------\n        get: function () {\n            return this.context.dateEnv.toDate(this.props.dateProfile.activeRange.start);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(View.prototype, \"activeEnd\", {\n        get: function () {\n            return this.context.dateEnv.toDate(this.props.dateProfile.activeRange.end);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(View.prototype, \"currentStart\", {\n        get: function () {\n            return this.context.dateEnv.toDate(this.props.dateProfile.currentRange.start);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(View.prototype, \"currentEnd\", {\n        get: function () {\n            return this.context.dateEnv.toDate(this.props.dateProfile.currentRange.end);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // General Rendering\n    // -----------------------------------------------------------------------------------------------------------------\n    View.prototype.render = function (props, context) {\n        this.renderDatesMem(props.dateProfile);\n        this.renderBusinessHoursMem(props.businessHours);\n        this.renderDateSelectionMem(props.dateSelection);\n        this.renderEventsMem(props.eventStore);\n        this.renderEventSelectionMem(props.eventSelection);\n        this.renderEventDragMem(props.eventDrag);\n        this.renderEventResizeMem(props.eventResize);\n    };\n    View.prototype.beforeUpdate = function () {\n        this.addScroll(this.queryScroll());\n    };\n    View.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.renderDatesMem.unrender(); // should unrender everything else\n    };\n    // Sizing\n    // -----------------------------------------------------------------------------------------------------------------\n    View.prototype.updateSize = function (isResize, viewHeight, isAuto) {\n        var calendar = this.context.calendar;\n        if (isResize) {\n            this.addScroll(this.queryScroll()); // NOTE: same code as in beforeUpdate\n        }\n        if (isResize || // HACKS...\n            calendar.isViewUpdated ||\n            calendar.isDatesUpdated ||\n            calendar.isEventsUpdated) {\n            // sort of the catch-all sizing\n            // anything that might cause dimension changes\n            this.updateBaseSize(isResize, viewHeight, isAuto);\n        }\n        // NOTE: popScroll is called by CalendarComponent\n    };\n    View.prototype.updateBaseSize = function (isResize, viewHeight, isAuto) {\n    };\n    // Date Rendering\n    // -----------------------------------------------------------------------------------------------------------------\n    View.prototype.renderDatesWrap = function (dateProfile) {\n        this.renderDates(dateProfile);\n        this.addScroll({\n            duration: createDuration(this.context.options.scrollTime)\n        });\n    };\n    View.prototype.unrenderDatesWrap = function () {\n        this.stopNowIndicator();\n        this.unrenderDates();\n    };\n    View.prototype.renderDates = function (dateProfile) { };\n    View.prototype.unrenderDates = function () { };\n    // Business Hours\n    // -----------------------------------------------------------------------------------------------------------------\n    View.prototype.renderBusinessHours = function (businessHours) { };\n    View.prototype.unrenderBusinessHours = function () { };\n    // Date Selection\n    // -----------------------------------------------------------------------------------------------------------------\n    View.prototype.renderDateSelectionWrap = function (selection) {\n        if (selection) {\n            this.renderDateSelection(selection);\n        }\n    };\n    View.prototype.unrenderDateSelectionWrap = function (selection) {\n        if (selection) {\n            this.unrenderDateSelection(selection);\n        }\n    };\n    View.prototype.renderDateSelection = function (selection) { };\n    View.prototype.unrenderDateSelection = function (selection) { };\n    // Event Rendering\n    // -----------------------------------------------------------------------------------------------------------------\n    View.prototype.renderEvents = function (eventStore) { };\n    View.prototype.unrenderEvents = function () { };\n    // util for subclasses\n    View.prototype.sliceEvents = function (eventStore, allDay) {\n        var props = this.props;\n        return sliceEventStore(eventStore, props.eventUiBases, props.dateProfile.activeRange, allDay ? this.context.nextDayThreshold : null).fg;\n    };\n    // Event Selection\n    // -----------------------------------------------------------------------------------------------------------------\n    View.prototype.renderEventSelectionWrap = function (instanceId) {\n        if (instanceId) {\n            this.renderEventSelection(instanceId);\n        }\n    };\n    View.prototype.unrenderEventSelectionWrap = function (instanceId) {\n        if (instanceId) {\n            this.unrenderEventSelection(instanceId);\n        }\n    };\n    View.prototype.renderEventSelection = function (instanceId) { };\n    View.prototype.unrenderEventSelection = function (instanceId) { };\n    // Event Drag\n    // -----------------------------------------------------------------------------------------------------------------\n    View.prototype.renderEventDragWrap = function (state) {\n        if (state) {\n            this.renderEventDrag(state);\n        }\n    };\n    View.prototype.unrenderEventDragWrap = function (state) {\n        if (state) {\n            this.unrenderEventDrag(state);\n        }\n    };\n    View.prototype.renderEventDrag = function (state) { };\n    View.prototype.unrenderEventDrag = function (state) { };\n    // Event Resize\n    // -----------------------------------------------------------------------------------------------------------------\n    View.prototype.renderEventResizeWrap = function (state) {\n        if (state) {\n            this.renderEventResize(state);\n        }\n    };\n    View.prototype.unrenderEventResizeWrap = function (state) {\n        if (state) {\n            this.unrenderEventResize(state);\n        }\n    };\n    View.prototype.renderEventResize = function (state) { };\n    View.prototype.unrenderEventResize = function (state) { };\n    /* Now Indicator\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Immediately render the current time indicator and begins re-rendering it at an interval,\n    // which is defined by this.getNowIndicatorUnit().\n    // TODO: somehow do this for the current whole day's background too\n    // USAGE: must be called manually from subclasses' render methods! don't need to call stopNowIndicator tho\n    View.prototype.startNowIndicator = function (dateProfile, dateProfileGenerator) {\n        var _this = this;\n        var _a = this.context, calendar = _a.calendar, dateEnv = _a.dateEnv, options = _a.options;\n        var unit;\n        var update;\n        var delay; // ms wait value\n        if (options.nowIndicator && !this.initialNowDate) {\n            unit = this.getNowIndicatorUnit(dateProfile, dateProfileGenerator);\n            if (unit) {\n                update = this.updateNowIndicator.bind(this);\n                this.initialNowDate = calendar.getNow();\n                this.initialNowQueriedMs = new Date().valueOf();\n                // wait until the beginning of the next interval\n                delay = dateEnv.add(dateEnv.startOf(this.initialNowDate, unit), createDuration(1, unit)).valueOf() - this.initialNowDate.valueOf();\n                // TODO: maybe always use setTimeout, waiting until start of next unit\n                this.nowIndicatorTimeoutID = setTimeout(function () {\n                    _this.nowIndicatorTimeoutID = null;\n                    update();\n                    if (unit === 'second') {\n                        delay = 1000; // every second\n                    }\n                    else {\n                        delay = 1000 * 60; // otherwise, every minute\n                    }\n                    _this.nowIndicatorIntervalID = setInterval(update, delay); // update every interval\n                }, delay);\n            }\n            // rendering will be initiated in updateSize\n        }\n    };\n    // rerenders the now indicator, computing the new current time from the amount of time that has passed\n    // since the initial getNow call.\n    View.prototype.updateNowIndicator = function () {\n        if (this.props.dateProfile && // a way to determine if dates were rendered yet\n            this.initialNowDate // activated before?\n        ) {\n            this.unrenderNowIndicator(); // won't unrender if unnecessary\n            this.renderNowIndicator(addMs(this.initialNowDate, new Date().valueOf() - this.initialNowQueriedMs));\n            this.isNowIndicatorRendered = true;\n        }\n    };\n    // Immediately unrenders the view's current time indicator and stops any re-rendering timers.\n    // Won't cause side effects if indicator isn't rendered.\n    View.prototype.stopNowIndicator = function () {\n        if (this.nowIndicatorTimeoutID) {\n            clearTimeout(this.nowIndicatorTimeoutID);\n            this.nowIndicatorTimeoutID = null;\n        }\n        if (this.nowIndicatorIntervalID) {\n            clearInterval(this.nowIndicatorIntervalID);\n            this.nowIndicatorIntervalID = null;\n        }\n        if (this.isNowIndicatorRendered) {\n            this.unrenderNowIndicator();\n            this.isNowIndicatorRendered = false;\n        }\n    };\n    View.prototype.getNowIndicatorUnit = function (dateProfile, dateProfileGenerator) {\n        // subclasses should implement\n    };\n    // Renders a current time indicator at the given datetime\n    View.prototype.renderNowIndicator = function (date) {\n        // SUBCLASSES MUST PASS TO CHILDREN!\n    };\n    // Undoes the rendering actions from renderNowIndicator\n    View.prototype.unrenderNowIndicator = function () {\n        // SUBCLASSES MUST PASS TO CHILDREN!\n    };\n    /* Scroller\n    ------------------------------------------------------------------------------------------------------------------*/\n    View.prototype.addScroll = function (scroll, isForced) {\n        if (isForced) {\n            scroll.isForced = isForced;\n        }\n        __assign(this.queuedScroll || (this.queuedScroll = {}), scroll);\n    };\n    View.prototype.popScroll = function (isResize) {\n        this.applyQueuedScroll(isResize);\n        this.queuedScroll = null;\n    };\n    View.prototype.applyQueuedScroll = function (isResize) {\n        if (this.queuedScroll) {\n            this.applyScroll(this.queuedScroll, isResize);\n        }\n    };\n    View.prototype.queryScroll = function () {\n        var scroll = {};\n        if (this.props.dateProfile) { // dates rendered yet?\n            __assign(scroll, this.queryDateScroll());\n        }\n        return scroll;\n    };\n    View.prototype.applyScroll = function (scroll, isResize) {\n        var duration = scroll.duration, isForced = scroll.isForced;\n        if (duration != null && !isForced) {\n            delete scroll.duration;\n            if (this.props.dateProfile) { // dates rendered yet?\n                __assign(scroll, this.computeDateScroll(duration));\n            }\n        }\n        if (this.props.dateProfile) { // dates rendered yet?\n            this.applyDateScroll(scroll);\n        }\n    };\n    View.prototype.computeDateScroll = function (duration) {\n        return {}; // subclasses must implement\n    };\n    View.prototype.queryDateScroll = function () {\n        return {}; // subclasses must implement\n    };\n    View.prototype.applyDateScroll = function (scroll) {\n        // subclasses must implement\n    };\n    // for API\n    View.prototype.scrollToDuration = function (duration) {\n        this.applyScroll({ duration: duration }, false);\n    };\n    return View;\n}(DateComponent));\nEmitterMixin.mixInto(View);\nView.prototype.usesMinMaxTime = false;\nView.prototype.dateProfileGeneratorClass = DateProfileGenerator;\n\nvar FgEventRenderer = /** @class */ (function () {\n    function FgEventRenderer() {\n        this.segs = [];\n        this.isSizeDirty = false;\n    }\n    FgEventRenderer.prototype.renderSegs = function (context, segs, mirrorInfo) {\n        this.context = context;\n        this.rangeUpdated(); // called too frequently :(\n        // render an `.el` on each seg\n        // returns a subset of the segs. segs that were actually rendered\n        segs = this.renderSegEls(segs, mirrorInfo);\n        this.segs = segs;\n        this.attachSegs(segs, mirrorInfo);\n        this.isSizeDirty = true;\n        triggerRenderedSegs(this.context, this.segs, Boolean(mirrorInfo));\n    };\n    FgEventRenderer.prototype.unrender = function (context, _segs, mirrorInfo) {\n        triggerWillRemoveSegs(this.context, this.segs, Boolean(mirrorInfo));\n        this.detachSegs(this.segs);\n        this.segs = [];\n    };\n    // Updates values that rely on options and also relate to range\n    FgEventRenderer.prototype.rangeUpdated = function () {\n        var options = this.context.options;\n        var displayEventTime;\n        var displayEventEnd;\n        this.eventTimeFormat = createFormatter(options.eventTimeFormat || this.computeEventTimeFormat(), options.defaultRangeSeparator);\n        displayEventTime = options.displayEventTime;\n        if (displayEventTime == null) {\n            displayEventTime = this.computeDisplayEventTime(); // might be based off of range\n        }\n        displayEventEnd = options.displayEventEnd;\n        if (displayEventEnd == null) {\n            displayEventEnd = this.computeDisplayEventEnd(); // might be based off of range\n        }\n        this.displayEventTime = displayEventTime;\n        this.displayEventEnd = displayEventEnd;\n    };\n    // Renders and assigns an `el` property for each foreground event segment.\n    // Only returns segments that successfully rendered.\n    FgEventRenderer.prototype.renderSegEls = function (segs, mirrorInfo) {\n        var html = '';\n        var i;\n        if (segs.length) { // don't build an empty html string\n            // build a large concatenation of event segment HTML\n            for (i = 0; i < segs.length; i++) {\n                html += this.renderSegHtml(segs[i], mirrorInfo);\n            }\n            // Grab individual elements from the combined HTML string. Use each as the default rendering.\n            // Then, compute the 'el' for each segment. An el might be null if the eventRender callback returned false.\n            htmlToElements(html).forEach(function (el, i) {\n                var seg = segs[i];\n                if (el) {\n                    seg.el = el;\n                }\n            });\n            segs = filterSegsViaEls(this.context, segs, Boolean(mirrorInfo));\n        }\n        return segs;\n    };\n    // Generic utility for generating the HTML classNames for an event segment's element\n    FgEventRenderer.prototype.getSegClasses = function (seg, isDraggable, isResizable, mirrorInfo) {\n        var classes = [\n            'fc-event',\n            seg.isStart ? 'fc-start' : 'fc-not-start',\n            seg.isEnd ? 'fc-end' : 'fc-not-end'\n        ].concat(seg.eventRange.ui.classNames);\n        if (isDraggable) {\n            classes.push('fc-draggable');\n        }\n        if (isResizable) {\n            classes.push('fc-resizable');\n        }\n        if (mirrorInfo) {\n            classes.push('fc-mirror');\n            if (mirrorInfo.isDragging) {\n                classes.push('fc-dragging');\n            }\n            if (mirrorInfo.isResizing) {\n                classes.push('fc-resizing');\n            }\n        }\n        return classes;\n    };\n    // Compute the text that should be displayed on an event's element.\n    // `range` can be the Event object itself, or something range-like, with at least a `start`.\n    // If event times are disabled, or the event has no time, will return a blank string.\n    // If not specified, formatter will default to the eventTimeFormat setting,\n    // and displayEnd will default to the displayEventEnd setting.\n    FgEventRenderer.prototype.getTimeText = function (eventRange, formatter, displayEnd) {\n        var def = eventRange.def, instance = eventRange.instance;\n        return this._getTimeText(instance.range.start, def.hasEnd ? instance.range.end : null, def.allDay, formatter, displayEnd, instance.forcedStartTzo, instance.forcedEndTzo);\n    };\n    FgEventRenderer.prototype._getTimeText = function (start, end, allDay, formatter, displayEnd, forcedStartTzo, forcedEndTzo) {\n        var dateEnv = this.context.dateEnv;\n        if (formatter == null) {\n            formatter = this.eventTimeFormat;\n        }\n        if (displayEnd == null) {\n            displayEnd = this.displayEventEnd;\n        }\n        if (this.displayEventTime && !allDay) {\n            if (displayEnd && end) {\n                return dateEnv.formatRange(start, end, formatter, {\n                    forcedStartTzo: forcedStartTzo,\n                    forcedEndTzo: forcedEndTzo\n                });\n            }\n            else {\n                return dateEnv.format(start, formatter, {\n                    forcedTzo: forcedStartTzo\n                });\n            }\n        }\n        return '';\n    };\n    FgEventRenderer.prototype.computeEventTimeFormat = function () {\n        return {\n            hour: 'numeric',\n            minute: '2-digit',\n            omitZeroMinute: true\n        };\n    };\n    FgEventRenderer.prototype.computeDisplayEventTime = function () {\n        return true;\n    };\n    FgEventRenderer.prototype.computeDisplayEventEnd = function () {\n        return true;\n    };\n    // Utility for generating event skin-related CSS properties\n    FgEventRenderer.prototype.getSkinCss = function (ui) {\n        return {\n            'background-color': ui.backgroundColor,\n            'border-color': ui.borderColor,\n            color: ui.textColor\n        };\n    };\n    FgEventRenderer.prototype.sortEventSegs = function (segs) {\n        var specs = this.context.eventOrderSpecs;\n        var objs = segs.map(buildSegCompareObj);\n        objs.sort(function (obj0, obj1) {\n            return compareByFieldSpecs(obj0, obj1, specs);\n        });\n        return objs.map(function (c) {\n            return c._seg;\n        });\n    };\n    FgEventRenderer.prototype.computeSizes = function (force) {\n        if (force || this.isSizeDirty) {\n            this.computeSegSizes(this.segs);\n        }\n    };\n    FgEventRenderer.prototype.assignSizes = function (force) {\n        if (force || this.isSizeDirty) {\n            this.assignSegSizes(this.segs);\n            this.isSizeDirty = false;\n        }\n    };\n    FgEventRenderer.prototype.computeSegSizes = function (segs) {\n    };\n    FgEventRenderer.prototype.assignSegSizes = function (segs) {\n    };\n    // Manipulation on rendered segs\n    FgEventRenderer.prototype.hideByHash = function (hash) {\n        if (hash) {\n            for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {\n                var seg = _a[_i];\n                if (hash[seg.eventRange.instance.instanceId]) {\n                    seg.el.style.visibility = 'hidden';\n                }\n            }\n        }\n    };\n    FgEventRenderer.prototype.showByHash = function (hash) {\n        if (hash) {\n            for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {\n                var seg = _a[_i];\n                if (hash[seg.eventRange.instance.instanceId]) {\n                    seg.el.style.visibility = '';\n                }\n            }\n        }\n    };\n    FgEventRenderer.prototype.selectByInstanceId = function (instanceId) {\n        if (instanceId) {\n            for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {\n                var seg = _a[_i];\n                var eventInstance = seg.eventRange.instance;\n                if (eventInstance && eventInstance.instanceId === instanceId &&\n                    seg.el // necessary?\n                ) {\n                    seg.el.classList.add('fc-selected');\n                }\n            }\n        }\n    };\n    FgEventRenderer.prototype.unselectByInstanceId = function (instanceId) {\n        if (instanceId) {\n            for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {\n                var seg = _a[_i];\n                if (seg.el) { // necessary?\n                    seg.el.classList.remove('fc-selected');\n                }\n            }\n        }\n    };\n    return FgEventRenderer;\n}());\n// returns a object with all primitive props that can be compared\nfunction buildSegCompareObj(seg) {\n    var eventDef = seg.eventRange.def;\n    var range = seg.eventRange.instance.range;\n    var start = range.start ? range.start.valueOf() : 0; // TODO: better support for open-range events\n    var end = range.end ? range.end.valueOf() : 0; // \"\n    return __assign({}, eventDef.extendedProps, eventDef, { id: eventDef.publicId, start: start,\n        end: end, duration: end - start, allDay: Number(eventDef.allDay), _seg: seg // for later retrieval\n     });\n}\n\n/*\nTODO: when refactoring this class, make a new FillRenderer instance for each `type`\n*/\nvar FillRenderer = /** @class */ (function () {\n    function FillRenderer() {\n        this.fillSegTag = 'div';\n        this.dirtySizeFlags = {};\n        this.containerElsByType = {};\n        this.segsByType = {};\n    }\n    FillRenderer.prototype.getSegsByType = function (type) {\n        return this.segsByType[type] || [];\n    };\n    FillRenderer.prototype.renderSegs = function (type, context, segs) {\n        var _a;\n        this.context = context;\n        var renderedSegs = this.renderSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs\n        var containerEls = this.attachSegs(type, renderedSegs);\n        if (containerEls) {\n            (_a = (this.containerElsByType[type] || (this.containerElsByType[type] = []))).push.apply(_a, containerEls);\n        }\n        this.segsByType[type] = renderedSegs;\n        if (type === 'bgEvent') {\n            triggerRenderedSegs(context, renderedSegs, false); // isMirror=false\n        }\n        this.dirtySizeFlags[type] = true;\n    };\n    // Unrenders a specific type of fill that is currently rendered on the grid\n    FillRenderer.prototype.unrender = function (type, context) {\n        var segs = this.segsByType[type];\n        if (segs) {\n            if (type === 'bgEvent') {\n                triggerWillRemoveSegs(context, segs, false); // isMirror=false\n            }\n            this.detachSegs(type, segs);\n        }\n    };\n    // Renders and assigns an `el` property for each fill segment. Generic enough to work with different types.\n    // Only returns segments that successfully rendered.\n    FillRenderer.prototype.renderSegEls = function (type, segs) {\n        var _this = this;\n        var html = '';\n        var i;\n        if (segs.length) {\n            // build a large concatenation of segment HTML\n            for (i = 0; i < segs.length; i++) {\n                html += this.renderSegHtml(type, segs[i]);\n            }\n            // Grab individual elements from the combined HTML string. Use each as the default rendering.\n            // Then, compute the 'el' for each segment.\n            htmlToElements(html).forEach(function (el, i) {\n                var seg = segs[i];\n                if (el) {\n                    seg.el = el;\n                }\n            });\n            if (type === 'bgEvent') {\n                segs = filterSegsViaEls(this.context, segs, false // isMirror. background events can never be mirror elements\n                );\n            }\n            // correct element type? (would be bad if a non-TD were inserted into a table for example)\n            segs = segs.filter(function (seg) {\n                return elementMatches(seg.el, _this.fillSegTag);\n            });\n        }\n        return segs;\n    };\n    // Builds the HTML needed for one fill segment. Generic enough to work with different types.\n    FillRenderer.prototype.renderSegHtml = function (type, seg) {\n        var css = null;\n        var classNames = [];\n        if (type !== 'highlight' && type !== 'businessHours') {\n            css = {\n                'background-color': seg.eventRange.ui.backgroundColor\n            };\n        }\n        if (type !== 'highlight') {\n            classNames = classNames.concat(seg.eventRange.ui.classNames);\n        }\n        if (type === 'businessHours') {\n            classNames.push('fc-bgevent');\n        }\n        else {\n            classNames.push('fc-' + type.toLowerCase());\n        }\n        return '<' + this.fillSegTag +\n            (classNames.length ? ' class=\"' + classNames.join(' ') + '\"' : '') +\n            (css ? ' style=\"' + cssToStr(css) + '\"' : '') +\n            '></' + this.fillSegTag + '>';\n    };\n    FillRenderer.prototype.detachSegs = function (type, segs) {\n        var containerEls = this.containerElsByType[type];\n        if (containerEls) {\n            containerEls.forEach(removeElement);\n            delete this.containerElsByType[type];\n        }\n    };\n    FillRenderer.prototype.computeSizes = function (force) {\n        for (var type in this.segsByType) {\n            if (force || this.dirtySizeFlags[type]) {\n                this.computeSegSizes(this.segsByType[type]);\n            }\n        }\n    };\n    FillRenderer.prototype.assignSizes = function (force) {\n        for (var type in this.segsByType) {\n            if (force || this.dirtySizeFlags[type]) {\n                this.assignSegSizes(this.segsByType[type]);\n            }\n        }\n        this.dirtySizeFlags = {};\n    };\n    FillRenderer.prototype.computeSegSizes = function (segs) {\n    };\n    FillRenderer.prototype.assignSegSizes = function (segs) {\n    };\n    return FillRenderer;\n}());\n\nvar NamedTimeZoneImpl = /** @class */ (function () {\n    function NamedTimeZoneImpl(timeZoneName) {\n        this.timeZoneName = timeZoneName;\n    }\n    return NamedTimeZoneImpl;\n}());\n\n/*\nAn abstraction for a dragging interaction originating on an event.\nDoes higher-level things than PointerDragger, such as possibly:\n- a \"mirror\" that moves with the pointer\n- a minimum number of pixels or other criteria for a true drag to begin\n\nsubclasses must emit:\n- pointerdown\n- dragstart\n- dragmove\n- pointerup\n- dragend\n*/\nvar ElementDragging = /** @class */ (function () {\n    function ElementDragging(el) {\n        this.emitter = new EmitterMixin();\n    }\n    ElementDragging.prototype.destroy = function () {\n    };\n    ElementDragging.prototype.setMirrorIsVisible = function (bool) {\n        // optional if subclass doesn't want to support a mirror\n    };\n    ElementDragging.prototype.setMirrorNeedsRevert = function (bool) {\n        // optional if subclass doesn't want to support a mirror\n    };\n    ElementDragging.prototype.setAutoScrollEnabled = function (bool) {\n        // optional\n    };\n    return ElementDragging;\n}());\n\nfunction formatDate(dateInput, settings) {\n    if (settings === void 0) { settings = {}; }\n    var dateEnv = buildDateEnv$1(settings);\n    var formatter = createFormatter(settings);\n    var dateMeta = dateEnv.createMarkerMeta(dateInput);\n    if (!dateMeta) { // TODO: warning?\n        return '';\n    }\n    return dateEnv.format(dateMeta.marker, formatter, {\n        forcedTzo: dateMeta.forcedTzo\n    });\n}\nfunction formatRange(startInput, endInput, settings // mixture of env and formatter settings\n) {\n    var dateEnv = buildDateEnv$1(typeof settings === 'object' && settings ? settings : {}); // pass in if non-null object\n    var formatter = createFormatter(settings, globalDefaults.defaultRangeSeparator);\n    var startMeta = dateEnv.createMarkerMeta(startInput);\n    var endMeta = dateEnv.createMarkerMeta(endInput);\n    if (!startMeta || !endMeta) { // TODO: warning?\n        return '';\n    }\n    return dateEnv.formatRange(startMeta.marker, endMeta.marker, formatter, {\n        forcedStartTzo: startMeta.forcedTzo,\n        forcedEndTzo: endMeta.forcedTzo,\n        isEndExclusive: settings.isEndExclusive\n    });\n}\n// TODO: more DRY and optimized\nfunction buildDateEnv$1(settings) {\n    var locale = buildLocale(settings.locale || 'en', parseRawLocales([]).map); // TODO: don't hardcode 'en' everywhere\n    // ensure required settings\n    settings = __assign({ timeZone: globalDefaults.timeZone, calendarSystem: 'gregory' }, settings, { locale: locale });\n    return new DateEnv(settings);\n}\n\nvar DRAG_META_PROPS = {\n    startTime: createDuration,\n    duration: createDuration,\n    create: Boolean,\n    sourceId: String\n};\nvar DRAG_META_DEFAULTS = {\n    create: true\n};\nfunction parseDragMeta(raw) {\n    var leftoverProps = {};\n    var refined = refineProps(raw, DRAG_META_PROPS, DRAG_META_DEFAULTS, leftoverProps);\n    refined.leftoverProps = leftoverProps;\n    return refined;\n}\n\n// Computes a default column header formatting string if `colFormat` is not explicitly defined\nfunction computeFallbackHeaderFormat(datesRepDistinctDays, dayCnt) {\n    // if more than one week row, or if there are a lot of columns with not much space,\n    // put just the day numbers will be in each cell\n    if (!datesRepDistinctDays || dayCnt > 10) {\n        return { weekday: 'short' }; // \"Sat\"\n    }\n    else if (dayCnt > 1) {\n        return { weekday: 'short', month: 'numeric', day: 'numeric', omitCommas: true }; // \"Sat 11/12\"\n    }\n    else {\n        return { weekday: 'long' }; // \"Saturday\"\n    }\n}\nfunction renderDateCell(dateMarker, dateProfile, datesRepDistinctDays, colCnt, colHeadFormat, context, colspan, otherAttrs) {\n    var dateEnv = context.dateEnv, theme = context.theme, options = context.options;\n    var isDateValid = rangeContainsMarker(dateProfile.activeRange, dateMarker); // TODO: called too frequently. cache somehow.\n    var classNames = [\n        'fc-day-header',\n        theme.getClass('widgetHeader')\n    ];\n    var innerHtml;\n    if (typeof options.columnHeaderHtml === 'function') {\n        innerHtml = options.columnHeaderHtml(dateEnv.toDate(dateMarker));\n    }\n    else if (typeof options.columnHeaderText === 'function') {\n        innerHtml = htmlEscape(options.columnHeaderText(dateEnv.toDate(dateMarker)));\n    }\n    else {\n        innerHtml = htmlEscape(dateEnv.format(dateMarker, colHeadFormat));\n    }\n    // if only one row of days, the classNames on the header can represent the specific days beneath\n    if (datesRepDistinctDays) {\n        classNames = classNames.concat(\n        // includes the day-of-week class\n        // noThemeHighlight=true (don't highlight the header)\n        getDayClasses(dateMarker, dateProfile, context, true));\n    }\n    else {\n        classNames.push('fc-' + DAY_IDS[dateMarker.getUTCDay()]); // only add the day-of-week class\n    }\n    return '' +\n        '<th class=\"' + classNames.join(' ') + '\"' +\n        ((isDateValid && datesRepDistinctDays) ?\n            ' data-date=\"' + dateEnv.formatIso(dateMarker, { omitTime: true }) + '\"' :\n            '') +\n        (colspan > 1 ?\n            ' colspan=\"' + colspan + '\"' :\n            '') +\n        (otherAttrs ?\n            ' ' + otherAttrs :\n            '') +\n        '>' +\n        (isDateValid ?\n            // don't make a link if the heading could represent multiple days, or if there's only one day (forceOff)\n            buildGotoAnchorHtml(options, dateEnv, { date: dateMarker, forceOff: !datesRepDistinctDays || colCnt === 1 }, innerHtml) :\n            // if not valid, display text, but no link\n            innerHtml) +\n        '</th>';\n}\n\nvar DayHeader = /** @class */ (function (_super) {\n    __extends(DayHeader, _super);\n    function DayHeader(parentEl) {\n        var _this = _super.call(this) || this;\n        _this.renderSkeleton = memoizeRendering(_this._renderSkeleton, _this._unrenderSkeleton);\n        _this.parentEl = parentEl;\n        return _this;\n    }\n    DayHeader.prototype.render = function (props, context) {\n        var dates = props.dates, datesRepDistinctDays = props.datesRepDistinctDays;\n        var parts = [];\n        this.renderSkeleton(context);\n        if (props.renderIntroHtml) {\n            parts.push(props.renderIntroHtml());\n        }\n        var colHeadFormat = createFormatter(context.options.columnHeaderFormat ||\n            computeFallbackHeaderFormat(datesRepDistinctDays, dates.length));\n        for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {\n            var date = dates_1[_i];\n            parts.push(renderDateCell(date, props.dateProfile, datesRepDistinctDays, dates.length, colHeadFormat, context));\n        }\n        if (context.isRtl) {\n            parts.reverse();\n        }\n        this.thead.innerHTML = '<tr>' + parts.join('') + '</tr>';\n    };\n    DayHeader.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.renderSkeleton.unrender();\n    };\n    DayHeader.prototype._renderSkeleton = function (context) {\n        var theme = context.theme;\n        var parentEl = this.parentEl;\n        parentEl.innerHTML = ''; // because might be nbsp\n        parentEl.appendChild(this.el = htmlToElement('<div class=\"fc-row ' + theme.getClass('headerRow') + '\">' +\n            '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n            '<thead></thead>' +\n            '</table>' +\n            '</div>'));\n        this.thead = this.el.querySelector('thead');\n    };\n    DayHeader.prototype._unrenderSkeleton = function () {\n        removeElement(this.el);\n    };\n    return DayHeader;\n}(Component));\n\nvar DaySeries = /** @class */ (function () {\n    function DaySeries(range, dateProfileGenerator) {\n        var date = range.start;\n        var end = range.end;\n        var indices = [];\n        var dates = [];\n        var dayIndex = -1;\n        while (date < end) { // loop each day from start to end\n            if (dateProfileGenerator.isHiddenDay(date)) {\n                indices.push(dayIndex + 0.5); // mark that it's between indices\n            }\n            else {\n                dayIndex++;\n                indices.push(dayIndex);\n                dates.push(date);\n            }\n            date = addDays(date, 1);\n        }\n        this.dates = dates;\n        this.indices = indices;\n        this.cnt = dates.length;\n    }\n    DaySeries.prototype.sliceRange = function (range) {\n        var firstIndex = this.getDateDayIndex(range.start); // inclusive first index\n        var lastIndex = this.getDateDayIndex(addDays(range.end, -1)); // inclusive last index\n        var clippedFirstIndex = Math.max(0, firstIndex);\n        var clippedLastIndex = Math.min(this.cnt - 1, lastIndex);\n        // deal with in-between indices\n        clippedFirstIndex = Math.ceil(clippedFirstIndex); // in-between starts round to next cell\n        clippedLastIndex = Math.floor(clippedLastIndex); // in-between ends round to prev cell\n        if (clippedFirstIndex <= clippedLastIndex) {\n            return {\n                firstIndex: clippedFirstIndex,\n                lastIndex: clippedLastIndex,\n                isStart: firstIndex === clippedFirstIndex,\n                isEnd: lastIndex === clippedLastIndex\n            };\n        }\n        else {\n            return null;\n        }\n    };\n    // Given a date, returns its chronolocial cell-index from the first cell of the grid.\n    // If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.\n    // If before the first offset, returns a negative number.\n    // If after the last offset, returns an offset past the last cell offset.\n    // Only works for *start* dates of cells. Will not work for exclusive end dates for cells.\n    DaySeries.prototype.getDateDayIndex = function (date) {\n        var indices = this.indices;\n        var dayOffset = Math.floor(diffDays(this.dates[0], date));\n        if (dayOffset < 0) {\n            return indices[0] - 1;\n        }\n        else if (dayOffset >= indices.length) {\n            return indices[indices.length - 1] + 1;\n        }\n        else {\n            return indices[dayOffset];\n        }\n    };\n    return DaySeries;\n}());\n\nvar DayTable = /** @class */ (function () {\n    function DayTable(daySeries, breakOnWeeks) {\n        var dates = daySeries.dates;\n        var daysPerRow;\n        var firstDay;\n        var rowCnt;\n        if (breakOnWeeks) {\n            // count columns until the day-of-week repeats\n            firstDay = dates[0].getUTCDay();\n            for (daysPerRow = 1; daysPerRow < dates.length; daysPerRow++) {\n                if (dates[daysPerRow].getUTCDay() === firstDay) {\n                    break;\n                }\n            }\n            rowCnt = Math.ceil(dates.length / daysPerRow);\n        }\n        else {\n            rowCnt = 1;\n            daysPerRow = dates.length;\n        }\n        this.rowCnt = rowCnt;\n        this.colCnt = daysPerRow;\n        this.daySeries = daySeries;\n        this.cells = this.buildCells();\n        this.headerDates = this.buildHeaderDates();\n    }\n    DayTable.prototype.buildCells = function () {\n        var rows = [];\n        for (var row = 0; row < this.rowCnt; row++) {\n            var cells = [];\n            for (var col = 0; col < this.colCnt; col++) {\n                cells.push(this.buildCell(row, col));\n            }\n            rows.push(cells);\n        }\n        return rows;\n    };\n    DayTable.prototype.buildCell = function (row, col) {\n        return {\n            date: this.daySeries.dates[row * this.colCnt + col]\n        };\n    };\n    DayTable.prototype.buildHeaderDates = function () {\n        var dates = [];\n        for (var col = 0; col < this.colCnt; col++) {\n            dates.push(this.cells[0][col].date);\n        }\n        return dates;\n    };\n    DayTable.prototype.sliceRange = function (range) {\n        var colCnt = this.colCnt;\n        var seriesSeg = this.daySeries.sliceRange(range);\n        var segs = [];\n        if (seriesSeg) {\n            var firstIndex = seriesSeg.firstIndex, lastIndex = seriesSeg.lastIndex;\n            var index = firstIndex;\n            while (index <= lastIndex) {\n                var row = Math.floor(index / colCnt);\n                var nextIndex = Math.min((row + 1) * colCnt, lastIndex + 1);\n                segs.push({\n                    row: row,\n                    firstCol: index % colCnt,\n                    lastCol: (nextIndex - 1) % colCnt,\n                    isStart: seriesSeg.isStart && index === firstIndex,\n                    isEnd: seriesSeg.isEnd && (nextIndex - 1) === lastIndex\n                });\n                index = nextIndex;\n            }\n        }\n        return segs;\n    };\n    return DayTable;\n}());\n\nvar Slicer = /** @class */ (function () {\n    function Slicer() {\n        this.sliceBusinessHours = memoize(this._sliceBusinessHours);\n        this.sliceDateSelection = memoize(this._sliceDateSpan);\n        this.sliceEventStore = memoize(this._sliceEventStore);\n        this.sliceEventDrag = memoize(this._sliceInteraction);\n        this.sliceEventResize = memoize(this._sliceInteraction);\n    }\n    Slicer.prototype.sliceProps = function (props, dateProfile, nextDayThreshold, calendar, component) {\n        var extraArgs = [];\n        for (var _i = 5; _i < arguments.length; _i++) {\n            extraArgs[_i - 5] = arguments[_i];\n        }\n        var eventUiBases = props.eventUiBases;\n        var eventSegs = this.sliceEventStore.apply(this, [props.eventStore, eventUiBases, dateProfile, nextDayThreshold, component].concat(extraArgs));\n        return {\n            dateSelectionSegs: this.sliceDateSelection.apply(this, [props.dateSelection, eventUiBases, component].concat(extraArgs)),\n            businessHourSegs: this.sliceBusinessHours.apply(this, [props.businessHours, dateProfile, nextDayThreshold, calendar, component].concat(extraArgs)),\n            fgEventSegs: eventSegs.fg,\n            bgEventSegs: eventSegs.bg,\n            eventDrag: this.sliceEventDrag.apply(this, [props.eventDrag, eventUiBases, dateProfile, nextDayThreshold, component].concat(extraArgs)),\n            eventResize: this.sliceEventResize.apply(this, [props.eventResize, eventUiBases, dateProfile, nextDayThreshold, component].concat(extraArgs)),\n            eventSelection: props.eventSelection\n        }; // TODO: give interactionSegs?\n    };\n    Slicer.prototype.sliceNowDate = function (// does not memoize\n    date, component) {\n        var extraArgs = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            extraArgs[_i - 2] = arguments[_i];\n        }\n        return this._sliceDateSpan.apply(this, [{ range: { start: date, end: addMs(date, 1) }, allDay: false },\n            {},\n            component].concat(extraArgs));\n    };\n    Slicer.prototype._sliceBusinessHours = function (businessHours, dateProfile, nextDayThreshold, calendar, component) {\n        var extraArgs = [];\n        for (var _i = 5; _i < arguments.length; _i++) {\n            extraArgs[_i - 5] = arguments[_i];\n        }\n        if (!businessHours) {\n            return [];\n        }\n        return this._sliceEventStore.apply(this, [expandRecurring(businessHours, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), calendar),\n            {},\n            dateProfile,\n            nextDayThreshold,\n            component].concat(extraArgs)).bg;\n    };\n    Slicer.prototype._sliceEventStore = function (eventStore, eventUiBases, dateProfile, nextDayThreshold, component) {\n        var extraArgs = [];\n        for (var _i = 5; _i < arguments.length; _i++) {\n            extraArgs[_i - 5] = arguments[_i];\n        }\n        if (eventStore) {\n            var rangeRes = sliceEventStore(eventStore, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);\n            return {\n                bg: this.sliceEventRanges(rangeRes.bg, component, extraArgs),\n                fg: this.sliceEventRanges(rangeRes.fg, component, extraArgs)\n            };\n        }\n        else {\n            return { bg: [], fg: [] };\n        }\n    };\n    Slicer.prototype._sliceInteraction = function (interaction, eventUiBases, dateProfile, nextDayThreshold, component) {\n        var extraArgs = [];\n        for (var _i = 5; _i < arguments.length; _i++) {\n            extraArgs[_i - 5] = arguments[_i];\n        }\n        if (!interaction) {\n            return null;\n        }\n        var rangeRes = sliceEventStore(interaction.mutatedEvents, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);\n        return {\n            segs: this.sliceEventRanges(rangeRes.fg, component, extraArgs),\n            affectedInstances: interaction.affectedEvents.instances,\n            isEvent: interaction.isEvent,\n            sourceSeg: interaction.origSeg\n        };\n    };\n    Slicer.prototype._sliceDateSpan = function (dateSpan, eventUiBases, component) {\n        var extraArgs = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            extraArgs[_i - 3] = arguments[_i];\n        }\n        if (!dateSpan) {\n            return [];\n        }\n        var eventRange = fabricateEventRange(dateSpan, eventUiBases, component.context.calendar);\n        var segs = this.sliceRange.apply(this, [dateSpan.range].concat(extraArgs));\n        for (var _a = 0, segs_1 = segs; _a < segs_1.length; _a++) {\n            var seg = segs_1[_a];\n            seg.component = component;\n            seg.eventRange = eventRange;\n        }\n        return segs;\n    };\n    /*\n    \"complete\" seg means it has component and eventRange\n    */\n    Slicer.prototype.sliceEventRanges = function (eventRanges, component, // TODO: kill\n    extraArgs) {\n        var segs = [];\n        for (var _i = 0, eventRanges_1 = eventRanges; _i < eventRanges_1.length; _i++) {\n            var eventRange = eventRanges_1[_i];\n            segs.push.apply(segs, this.sliceEventRange(eventRange, component, extraArgs));\n        }\n        return segs;\n    };\n    /*\n    \"complete\" seg means it has component and eventRange\n    */\n    Slicer.prototype.sliceEventRange = function (eventRange, component, // TODO: kill\n    extraArgs) {\n        var segs = this.sliceRange.apply(this, [eventRange.range].concat(extraArgs));\n        for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {\n            var seg = segs_2[_i];\n            seg.component = component;\n            seg.eventRange = eventRange;\n            seg.isStart = eventRange.isStart && seg.isStart;\n            seg.isEnd = eventRange.isEnd && seg.isEnd;\n        }\n        return segs;\n    };\n    return Slicer;\n}());\n/*\nfor incorporating minTime/maxTime if appropriate\nTODO: should be part of DateProfile!\nTimelineDateProfile already does this btw\n*/\nfunction computeActiveRange(dateProfile, isComponentAllDay) {\n    var range = dateProfile.activeRange;\n    if (isComponentAllDay) {\n        return range;\n    }\n    return {\n        start: addMs(range.start, dateProfile.minTime.milliseconds),\n        end: addMs(range.end, dateProfile.maxTime.milliseconds - 864e5) // 864e5 = ms in a day\n    };\n}\n\n// exports\n// --------------------------------------------------------------------------------------------------\nvar version = '4.4.2';\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@fullcalendar/core/main.esm.js\n");

/***/ }),

/***/ "./node_modules/@fullcalendar/core/main.js":
/*!*************************************************!*\
  !*** ./node_modules/@fullcalendar/core/main.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("/*!\nFullCalendar Core Package v4.4.2\nDocs & License: https://fullcalendar.io/\n(c) 2019 Adam Shaw\n*/\n\n(function (global, factory) {\n     true ? factory(exports) :\n    0;\n}(this, function (exports) { 'use strict';\n\n    // Creating\n    // ----------------------------------------------------------------------------------------------------------------\n    var elementPropHash = {\n        className: true,\n        colSpan: true,\n        rowSpan: true\n    };\n    var containerTagHash = {\n        '<tr': 'tbody',\n        '<td': 'tr'\n    };\n    function createElement(tagName, attrs, content) {\n        var el = document.createElement(tagName);\n        if (attrs) {\n            for (var attrName in attrs) {\n                if (attrName === 'style') {\n                    applyStyle(el, attrs[attrName]);\n                }\n                else if (elementPropHash[attrName]) {\n                    el[attrName] = attrs[attrName];\n                }\n                else {\n                    el.setAttribute(attrName, attrs[attrName]);\n                }\n            }\n        }\n        if (typeof content === 'string') {\n            el.innerHTML = content; // shortcut. no need to process HTML in any way\n        }\n        else if (content != null) {\n            appendToElement(el, content);\n        }\n        return el;\n    }\n    function htmlToElement(html) {\n        html = html.trim();\n        var container = document.createElement(computeContainerTag(html));\n        container.innerHTML = html;\n        return container.firstChild;\n    }\n    function htmlToElements(html) {\n        return Array.prototype.slice.call(htmlToNodeList(html));\n    }\n    function htmlToNodeList(html) {\n        html = html.trim();\n        var container = document.createElement(computeContainerTag(html));\n        container.innerHTML = html;\n        return container.childNodes;\n    }\n    // assumes html already trimmed and tag names are lowercase\n    function computeContainerTag(html) {\n        return containerTagHash[html.substr(0, 3) // faster than using regex\n        ] || 'div';\n    }\n    function appendToElement(el, content) {\n        var childNodes = normalizeContent(content);\n        for (var i = 0; i < childNodes.length; i++) {\n            el.appendChild(childNodes[i]);\n        }\n    }\n    function prependToElement(parent, content) {\n        var newEls = normalizeContent(content);\n        var afterEl = parent.firstChild || null; // if no firstChild, will append to end, but that's okay, b/c there were no children\n        for (var i = 0; i < newEls.length; i++) {\n            parent.insertBefore(newEls[i], afterEl);\n        }\n    }\n    function insertAfterElement(refEl, content) {\n        var newEls = normalizeContent(content);\n        var afterEl = refEl.nextSibling || null;\n        for (var i = 0; i < newEls.length; i++) {\n            refEl.parentNode.insertBefore(newEls[i], afterEl);\n        }\n    }\n    function normalizeContent(content) {\n        var els;\n        if (typeof content === 'string') {\n            els = htmlToElements(content);\n        }\n        else if (content instanceof Node) {\n            els = [content];\n        }\n        else { // Node[] or NodeList\n            els = Array.prototype.slice.call(content);\n        }\n        return els;\n    }\n    function removeElement(el) {\n        if (el.parentNode) {\n            el.parentNode.removeChild(el);\n        }\n    }\n    // Querying\n    // ----------------------------------------------------------------------------------------------------------------\n    // from https://developer.mozilla.org/en-US/docs/Web/API/Element/closest\n    var matchesMethod = Element.prototype.matches ||\n        Element.prototype.matchesSelector ||\n        Element.prototype.msMatchesSelector;\n    var closestMethod = Element.prototype.closest || function (selector) {\n        // polyfill\n        var el = this;\n        if (!document.documentElement.contains(el)) {\n            return null;\n        }\n        do {\n            if (elementMatches(el, selector)) {\n                return el;\n            }\n            el = el.parentElement || el.parentNode;\n        } while (el !== null && el.nodeType === 1);\n        return null;\n    };\n    function elementClosest(el, selector) {\n        return closestMethod.call(el, selector);\n    }\n    function elementMatches(el, selector) {\n        return matchesMethod.call(el, selector);\n    }\n    // accepts multiple subject els\n    // returns a real array. good for methods like forEach\n    function findElements(container, selector) {\n        var containers = container instanceof HTMLElement ? [container] : container;\n        var allMatches = [];\n        for (var i = 0; i < containers.length; i++) {\n            var matches = containers[i].querySelectorAll(selector);\n            for (var j = 0; j < matches.length; j++) {\n                allMatches.push(matches[j]);\n            }\n        }\n        return allMatches;\n    }\n    // accepts multiple subject els\n    // only queries direct child elements\n    function findChildren(parent, selector) {\n        var parents = parent instanceof HTMLElement ? [parent] : parent;\n        var allMatches = [];\n        for (var i = 0; i < parents.length; i++) {\n            var childNodes = parents[i].children; // only ever elements\n            for (var j = 0; j < childNodes.length; j++) {\n                var childNode = childNodes[j];\n                if (!selector || elementMatches(childNode, selector)) {\n                    allMatches.push(childNode);\n                }\n            }\n        }\n        return allMatches;\n    }\n    // Attributes\n    // ----------------------------------------------------------------------------------------------------------------\n    function forceClassName(el, className, bool) {\n        if (bool) {\n            el.classList.add(className);\n        }\n        else {\n            el.classList.remove(className);\n        }\n    }\n    // Style\n    // ----------------------------------------------------------------------------------------------------------------\n    var PIXEL_PROP_RE = /(top|left|right|bottom|width|height)$/i;\n    function applyStyle(el, props) {\n        for (var propName in props) {\n            applyStyleProp(el, propName, props[propName]);\n        }\n    }\n    function applyStyleProp(el, name, val) {\n        if (val == null) {\n            el.style[name] = '';\n        }\n        else if (typeof val === 'number' && PIXEL_PROP_RE.test(name)) {\n            el.style[name] = val + 'px';\n        }\n        else {\n            el.style[name] = val;\n        }\n    }\n\n    function pointInsideRect(point, rect) {\n        return point.left >= rect.left &&\n            point.left < rect.right &&\n            point.top >= rect.top &&\n            point.top < rect.bottom;\n    }\n    // Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false\n    function intersectRects(rect1, rect2) {\n        var res = {\n            left: Math.max(rect1.left, rect2.left),\n            right: Math.min(rect1.right, rect2.right),\n            top: Math.max(rect1.top, rect2.top),\n            bottom: Math.min(rect1.bottom, rect2.bottom)\n        };\n        if (res.left < res.right && res.top < res.bottom) {\n            return res;\n        }\n        return false;\n    }\n    function translateRect(rect, deltaX, deltaY) {\n        return {\n            left: rect.left + deltaX,\n            right: rect.right + deltaX,\n            top: rect.top + deltaY,\n            bottom: rect.bottom + deltaY\n        };\n    }\n    // Returns a new point that will have been moved to reside within the given rectangle\n    function constrainPoint(point, rect) {\n        return {\n            left: Math.min(Math.max(point.left, rect.left), rect.right),\n            top: Math.min(Math.max(point.top, rect.top), rect.bottom)\n        };\n    }\n    // Returns a point that is the center of the given rectangle\n    function getRectCenter(rect) {\n        return {\n            left: (rect.left + rect.right) / 2,\n            top: (rect.top + rect.bottom) / 2\n        };\n    }\n    // Subtracts point2's coordinates from point1's coordinates, returning a delta\n    function diffPoints(point1, point2) {\n        return {\n            left: point1.left - point2.left,\n            top: point1.top - point2.top\n        };\n    }\n\n    // Logic for determining if, when the element is right-to-left, the scrollbar appears on the left side\n    var isRtlScrollbarOnLeft = null;\n    function getIsRtlScrollbarOnLeft() {\n        if (isRtlScrollbarOnLeft === null) {\n            isRtlScrollbarOnLeft = computeIsRtlScrollbarOnLeft();\n        }\n        return isRtlScrollbarOnLeft;\n    }\n    function computeIsRtlScrollbarOnLeft() {\n        var outerEl = createElement('div', {\n            style: {\n                position: 'absolute',\n                top: -1000,\n                left: 0,\n                border: 0,\n                padding: 0,\n                overflow: 'scroll',\n                direction: 'rtl'\n            }\n        }, '<div></div>');\n        document.body.appendChild(outerEl);\n        var innerEl = outerEl.firstChild;\n        var res = innerEl.getBoundingClientRect().left > outerEl.getBoundingClientRect().left;\n        removeElement(outerEl);\n        return res;\n    }\n    // The scrollbar width computations in computeEdges are sometimes flawed when it comes to\n    // retina displays, rounding, and IE11. Massage them into a usable value.\n    function sanitizeScrollbarWidth(width) {\n        width = Math.max(0, width); // no negatives\n        width = Math.round(width);\n        return width;\n    }\n\n    function computeEdges(el, getPadding) {\n        if (getPadding === void 0) { getPadding = false; }\n        var computedStyle = window.getComputedStyle(el);\n        var borderLeft = parseInt(computedStyle.borderLeftWidth, 10) || 0;\n        var borderRight = parseInt(computedStyle.borderRightWidth, 10) || 0;\n        var borderTop = parseInt(computedStyle.borderTopWidth, 10) || 0;\n        var borderBottom = parseInt(computedStyle.borderBottomWidth, 10) || 0;\n        // must use offset(Width|Height) because compatible with client(Width|Height)\n        var scrollbarLeftRight = sanitizeScrollbarWidth(el.offsetWidth - el.clientWidth - borderLeft - borderRight);\n        var scrollbarBottom = sanitizeScrollbarWidth(el.offsetHeight - el.clientHeight - borderTop - borderBottom);\n        var res = {\n            borderLeft: borderLeft,\n            borderRight: borderRight,\n            borderTop: borderTop,\n            borderBottom: borderBottom,\n            scrollbarBottom: scrollbarBottom,\n            scrollbarLeft: 0,\n            scrollbarRight: 0\n        };\n        if (getIsRtlScrollbarOnLeft() && computedStyle.direction === 'rtl') { // is the scrollbar on the left side?\n            res.scrollbarLeft = scrollbarLeftRight;\n        }\n        else {\n            res.scrollbarRight = scrollbarLeftRight;\n        }\n        if (getPadding) {\n            res.paddingLeft = parseInt(computedStyle.paddingLeft, 10) || 0;\n            res.paddingRight = parseInt(computedStyle.paddingRight, 10) || 0;\n            res.paddingTop = parseInt(computedStyle.paddingTop, 10) || 0;\n            res.paddingBottom = parseInt(computedStyle.paddingBottom, 10) || 0;\n        }\n        return res;\n    }\n    function computeInnerRect(el, goWithinPadding) {\n        if (goWithinPadding === void 0) { goWithinPadding = false; }\n        var outerRect = computeRect(el);\n        var edges = computeEdges(el, goWithinPadding);\n        var res = {\n            left: outerRect.left + edges.borderLeft + edges.scrollbarLeft,\n            right: outerRect.right - edges.borderRight - edges.scrollbarRight,\n            top: outerRect.top + edges.borderTop,\n            bottom: outerRect.bottom - edges.borderBottom - edges.scrollbarBottom\n        };\n        if (goWithinPadding) {\n            res.left += edges.paddingLeft;\n            res.right -= edges.paddingRight;\n            res.top += edges.paddingTop;\n            res.bottom -= edges.paddingBottom;\n        }\n        return res;\n    }\n    function computeRect(el) {\n        var rect = el.getBoundingClientRect();\n        return {\n            left: rect.left + window.pageXOffset,\n            top: rect.top + window.pageYOffset,\n            right: rect.right + window.pageXOffset,\n            bottom: rect.bottom + window.pageYOffset\n        };\n    }\n    function computeViewportRect() {\n        return {\n            left: window.pageXOffset,\n            right: window.pageXOffset + document.documentElement.clientWidth,\n            top: window.pageYOffset,\n            bottom: window.pageYOffset + document.documentElement.clientHeight\n        };\n    }\n    function computeHeightAndMargins(el) {\n        return el.getBoundingClientRect().height + computeVMargins(el);\n    }\n    function computeVMargins(el) {\n        var computed = window.getComputedStyle(el);\n        return parseInt(computed.marginTop, 10) +\n            parseInt(computed.marginBottom, 10);\n    }\n    // does not return window\n    function getClippingParents(el) {\n        var parents = [];\n        while (el instanceof HTMLElement) { // will stop when gets to document or null\n            var computedStyle = window.getComputedStyle(el);\n            if (computedStyle.position === 'fixed') {\n                break;\n            }\n            if ((/(auto|scroll)/).test(computedStyle.overflow + computedStyle.overflowY + computedStyle.overflowX)) {\n                parents.push(el);\n            }\n            el = el.parentNode;\n        }\n        return parents;\n    }\n    function computeClippingRect(el) {\n        return getClippingParents(el)\n            .map(function (el) {\n            return computeInnerRect(el);\n        })\n            .concat(computeViewportRect())\n            .reduce(function (rect0, rect1) {\n            return intersectRects(rect0, rect1) || rect1; // should always intersect\n        });\n    }\n\n    // Stops a mouse/touch event from doing it's native browser action\n    function preventDefault(ev) {\n        ev.preventDefault();\n    }\n    // Event Delegation\n    // ----------------------------------------------------------------------------------------------------------------\n    function listenBySelector(container, eventType, selector, handler) {\n        function realHandler(ev) {\n            var matchedChild = elementClosest(ev.target, selector);\n            if (matchedChild) {\n                handler.call(matchedChild, ev, matchedChild);\n            }\n        }\n        container.addEventListener(eventType, realHandler);\n        return function () {\n            container.removeEventListener(eventType, realHandler);\n        };\n    }\n    function listenToHoverBySelector(container, selector, onMouseEnter, onMouseLeave) {\n        var currentMatchedChild;\n        return listenBySelector(container, 'mouseover', selector, function (ev, matchedChild) {\n            if (matchedChild !== currentMatchedChild) {\n                currentMatchedChild = matchedChild;\n                onMouseEnter(ev, matchedChild);\n                var realOnMouseLeave_1 = function (ev) {\n                    currentMatchedChild = null;\n                    onMouseLeave(ev, matchedChild);\n                    matchedChild.removeEventListener('mouseleave', realOnMouseLeave_1);\n                };\n                // listen to the next mouseleave, and then unattach\n                matchedChild.addEventListener('mouseleave', realOnMouseLeave_1);\n            }\n        });\n    }\n    // Animation\n    // ----------------------------------------------------------------------------------------------------------------\n    var transitionEventNames = [\n        'webkitTransitionEnd',\n        'otransitionend',\n        'oTransitionEnd',\n        'msTransitionEnd',\n        'transitionend'\n    ];\n    // triggered only when the next single subsequent transition finishes\n    function whenTransitionDone(el, callback) {\n        var realCallback = function (ev) {\n            callback(ev);\n            transitionEventNames.forEach(function (eventName) {\n                el.removeEventListener(eventName, realCallback);\n            });\n        };\n        transitionEventNames.forEach(function (eventName) {\n            el.addEventListener(eventName, realCallback); // cross-browser way to determine when the transition finishes\n        });\n    }\n\n    var DAY_IDS = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\n    // Adding\n    function addWeeks(m, n) {\n        var a = dateToUtcArray(m);\n        a[2] += n * 7;\n        return arrayToUtcDate(a);\n    }\n    function addDays(m, n) {\n        var a = dateToUtcArray(m);\n        a[2] += n;\n        return arrayToUtcDate(a);\n    }\n    function addMs(m, n) {\n        var a = dateToUtcArray(m);\n        a[6] += n;\n        return arrayToUtcDate(a);\n    }\n    // Diffing (all return floats)\n    function diffWeeks(m0, m1) {\n        return diffDays(m0, m1) / 7;\n    }\n    function diffDays(m0, m1) {\n        return (m1.valueOf() - m0.valueOf()) / (1000 * 60 * 60 * 24);\n    }\n    function diffHours(m0, m1) {\n        return (m1.valueOf() - m0.valueOf()) / (1000 * 60 * 60);\n    }\n    function diffMinutes(m0, m1) {\n        return (m1.valueOf() - m0.valueOf()) / (1000 * 60);\n    }\n    function diffSeconds(m0, m1) {\n        return (m1.valueOf() - m0.valueOf()) / 1000;\n    }\n    function diffDayAndTime(m0, m1) {\n        var m0day = startOfDay(m0);\n        var m1day = startOfDay(m1);\n        return {\n            years: 0,\n            months: 0,\n            days: Math.round(diffDays(m0day, m1day)),\n            milliseconds: (m1.valueOf() - m1day.valueOf()) - (m0.valueOf() - m0day.valueOf())\n        };\n    }\n    // Diffing Whole Units\n    function diffWholeWeeks(m0, m1) {\n        var d = diffWholeDays(m0, m1);\n        if (d !== null && d % 7 === 0) {\n            return d / 7;\n        }\n        return null;\n    }\n    function diffWholeDays(m0, m1) {\n        if (timeAsMs(m0) === timeAsMs(m1)) {\n            return Math.round(diffDays(m0, m1));\n        }\n        return null;\n    }\n    // Start-Of\n    function startOfDay(m) {\n        return arrayToUtcDate([\n            m.getUTCFullYear(),\n            m.getUTCMonth(),\n            m.getUTCDate()\n        ]);\n    }\n    function startOfHour(m) {\n        return arrayToUtcDate([\n            m.getUTCFullYear(),\n            m.getUTCMonth(),\n            m.getUTCDate(),\n            m.getUTCHours()\n        ]);\n    }\n    function startOfMinute(m) {\n        return arrayToUtcDate([\n            m.getUTCFullYear(),\n            m.getUTCMonth(),\n            m.getUTCDate(),\n            m.getUTCHours(),\n            m.getUTCMinutes()\n        ]);\n    }\n    function startOfSecond(m) {\n        return arrayToUtcDate([\n            m.getUTCFullYear(),\n            m.getUTCMonth(),\n            m.getUTCDate(),\n            m.getUTCHours(),\n            m.getUTCMinutes(),\n            m.getUTCSeconds()\n        ]);\n    }\n    // Week Computation\n    function weekOfYear(marker, dow, doy) {\n        var y = marker.getUTCFullYear();\n        var w = weekOfGivenYear(marker, y, dow, doy);\n        if (w < 1) {\n            return weekOfGivenYear(marker, y - 1, dow, doy);\n        }\n        var nextW = weekOfGivenYear(marker, y + 1, dow, doy);\n        if (nextW >= 1) {\n            return Math.min(w, nextW);\n        }\n        return w;\n    }\n    function weekOfGivenYear(marker, year, dow, doy) {\n        var firstWeekStart = arrayToUtcDate([year, 0, 1 + firstWeekOffset(year, dow, doy)]);\n        var dayStart = startOfDay(marker);\n        var days = Math.round(diffDays(firstWeekStart, dayStart));\n        return Math.floor(days / 7) + 1; // zero-indexed\n    }\n    // start-of-first-week - start-of-year\n    function firstWeekOffset(year, dow, doy) {\n        // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n        var fwd = 7 + dow - doy;\n        // first-week day local weekday -- which local weekday is fwd\n        var fwdlw = (7 + arrayToUtcDate([year, 0, fwd]).getUTCDay() - dow) % 7;\n        return -fwdlw + fwd - 1;\n    }\n    // Array Conversion\n    function dateToLocalArray(date) {\n        return [\n            date.getFullYear(),\n            date.getMonth(),\n            date.getDate(),\n            date.getHours(),\n            date.getMinutes(),\n            date.getSeconds(),\n            date.getMilliseconds()\n        ];\n    }\n    function arrayToLocalDate(a) {\n        return new Date(a[0], a[1] || 0, a[2] == null ? 1 : a[2], // day of month\n        a[3] || 0, a[4] || 0, a[5] || 0);\n    }\n    function dateToUtcArray(date) {\n        return [\n            date.getUTCFullYear(),\n            date.getUTCMonth(),\n            date.getUTCDate(),\n            date.getUTCHours(),\n            date.getUTCMinutes(),\n            date.getUTCSeconds(),\n            date.getUTCMilliseconds()\n        ];\n    }\n    function arrayToUtcDate(a) {\n        // according to web standards (and Safari), a month index is required.\n        // massage if only given a year.\n        if (a.length === 1) {\n            a = a.concat([0]);\n        }\n        return new Date(Date.UTC.apply(Date, a));\n    }\n    // Other Utils\n    function isValidDate(m) {\n        return !isNaN(m.valueOf());\n    }\n    function timeAsMs(m) {\n        return m.getUTCHours() * 1000 * 60 * 60 +\n            m.getUTCMinutes() * 1000 * 60 +\n            m.getUTCSeconds() * 1000 +\n            m.getUTCMilliseconds();\n    }\n\n    var INTERNAL_UNITS = ['years', 'months', 'days', 'milliseconds'];\n    var PARSE_RE = /^(-?)(?:(\\d+)\\.)?(\\d+):(\\d\\d)(?::(\\d\\d)(?:\\.(\\d\\d\\d))?)?/;\n    // Parsing and Creation\n    function createDuration(input, unit) {\n        var _a;\n        if (typeof input === 'string') {\n            return parseString(input);\n        }\n        else if (typeof input === 'object' && input) { // non-null object\n            return normalizeObject(input);\n        }\n        else if (typeof input === 'number') {\n            return normalizeObject((_a = {}, _a[unit || 'milliseconds'] = input, _a));\n        }\n        else {\n            return null;\n        }\n    }\n    function parseString(s) {\n        var m = PARSE_RE.exec(s);\n        if (m) {\n            var sign = m[1] ? -1 : 1;\n            return {\n                years: 0,\n                months: 0,\n                days: sign * (m[2] ? parseInt(m[2], 10) : 0),\n                milliseconds: sign * ((m[3] ? parseInt(m[3], 10) : 0) * 60 * 60 * 1000 + // hours\n                    (m[4] ? parseInt(m[4], 10) : 0) * 60 * 1000 + // minutes\n                    (m[5] ? parseInt(m[5], 10) : 0) * 1000 + // seconds\n                    (m[6] ? parseInt(m[6], 10) : 0) // ms\n                )\n            };\n        }\n        return null;\n    }\n    function normalizeObject(obj) {\n        return {\n            years: obj.years || obj.year || 0,\n            months: obj.months || obj.month || 0,\n            days: (obj.days || obj.day || 0) +\n                getWeeksFromInput(obj) * 7,\n            milliseconds: (obj.hours || obj.hour || 0) * 60 * 60 * 1000 + // hours\n                (obj.minutes || obj.minute || 0) * 60 * 1000 + // minutes\n                (obj.seconds || obj.second || 0) * 1000 + // seconds\n                (obj.milliseconds || obj.millisecond || obj.ms || 0) // ms\n        };\n    }\n    function getWeeksFromInput(obj) {\n        return obj.weeks || obj.week || 0;\n    }\n    // Equality\n    function durationsEqual(d0, d1) {\n        return d0.years === d1.years &&\n            d0.months === d1.months &&\n            d0.days === d1.days &&\n            d0.milliseconds === d1.milliseconds;\n    }\n    function isSingleDay(dur) {\n        return dur.years === 0 && dur.months === 0 && dur.days === 1 && dur.milliseconds === 0;\n    }\n    // Simple Math\n    function addDurations(d0, d1) {\n        return {\n            years: d0.years + d1.years,\n            months: d0.months + d1.months,\n            days: d0.days + d1.days,\n            milliseconds: d0.milliseconds + d1.milliseconds\n        };\n    }\n    function subtractDurations(d1, d0) {\n        return {\n            years: d1.years - d0.years,\n            months: d1.months - d0.months,\n            days: d1.days - d0.days,\n            milliseconds: d1.milliseconds - d0.milliseconds\n        };\n    }\n    function multiplyDuration(d, n) {\n        return {\n            years: d.years * n,\n            months: d.months * n,\n            days: d.days * n,\n            milliseconds: d.milliseconds * n\n        };\n    }\n    // Conversions\n    // \"Rough\" because they are based on average-case Gregorian months/years\n    function asRoughYears(dur) {\n        return asRoughDays(dur) / 365;\n    }\n    function asRoughMonths(dur) {\n        return asRoughDays(dur) / 30;\n    }\n    function asRoughDays(dur) {\n        return asRoughMs(dur) / 864e5;\n    }\n    function asRoughMinutes(dur) {\n        return asRoughMs(dur) / (1000 * 60);\n    }\n    function asRoughSeconds(dur) {\n        return asRoughMs(dur) / 1000;\n    }\n    function asRoughMs(dur) {\n        return dur.years * (365 * 864e5) +\n            dur.months * (30 * 864e5) +\n            dur.days * 864e5 +\n            dur.milliseconds;\n    }\n    // Advanced Math\n    function wholeDivideDurations(numerator, denominator) {\n        var res = null;\n        for (var i = 0; i < INTERNAL_UNITS.length; i++) {\n            var unit = INTERNAL_UNITS[i];\n            if (denominator[unit]) {\n                var localRes = numerator[unit] / denominator[unit];\n                if (!isInt(localRes) || (res !== null && res !== localRes)) {\n                    return null;\n                }\n                res = localRes;\n            }\n            else if (numerator[unit]) {\n                // needs to divide by something but can't!\n                return null;\n            }\n        }\n        return res;\n    }\n    function greatestDurationDenominator(dur, dontReturnWeeks) {\n        var ms = dur.milliseconds;\n        if (ms) {\n            if (ms % 1000 !== 0) {\n                return { unit: 'millisecond', value: ms };\n            }\n            if (ms % (1000 * 60) !== 0) {\n                return { unit: 'second', value: ms / 1000 };\n            }\n            if (ms % (1000 * 60 * 60) !== 0) {\n                return { unit: 'minute', value: ms / (1000 * 60) };\n            }\n            if (ms) {\n                return { unit: 'hour', value: ms / (1000 * 60 * 60) };\n            }\n        }\n        if (dur.days) {\n            if (!dontReturnWeeks && dur.days % 7 === 0) {\n                return { unit: 'week', value: dur.days / 7 };\n            }\n            return { unit: 'day', value: dur.days };\n        }\n        if (dur.months) {\n            return { unit: 'month', value: dur.months };\n        }\n        if (dur.years) {\n            return { unit: 'year', value: dur.years };\n        }\n        return { unit: 'millisecond', value: 0 };\n    }\n\n    /* FullCalendar-specific DOM Utilities\n    ----------------------------------------------------------------------------------------------------------------------*/\n    // Given the scrollbar widths of some other container, create borders/margins on rowEls in order to match the left\n    // and right space that was offset by the scrollbars. A 1-pixel border first, then margin beyond that.\n    function compensateScroll(rowEl, scrollbarWidths) {\n        if (scrollbarWidths.left) {\n            applyStyle(rowEl, {\n                borderLeftWidth: 1,\n                marginLeft: scrollbarWidths.left - 1\n            });\n        }\n        if (scrollbarWidths.right) {\n            applyStyle(rowEl, {\n                borderRightWidth: 1,\n                marginRight: scrollbarWidths.right - 1\n            });\n        }\n    }\n    // Undoes compensateScroll and restores all borders/margins\n    function uncompensateScroll(rowEl) {\n        applyStyle(rowEl, {\n            marginLeft: '',\n            marginRight: '',\n            borderLeftWidth: '',\n            borderRightWidth: ''\n        });\n    }\n    // Make the mouse cursor express that an event is not allowed in the current area\n    function disableCursor() {\n        document.body.classList.add('fc-not-allowed');\n    }\n    // Returns the mouse cursor to its original look\n    function enableCursor() {\n        document.body.classList.remove('fc-not-allowed');\n    }\n    // Given a total available height to fill, have `els` (essentially child rows) expand to accomodate.\n    // By default, all elements that are shorter than the recommended height are expanded uniformly, not considering\n    // any other els that are already too tall. if `shouldRedistribute` is on, it considers these tall rows and\n    // reduces the available height.\n    function distributeHeight(els, availableHeight, shouldRedistribute) {\n        // *FLOORING NOTE*: we floor in certain places because zoom can give inaccurate floating-point dimensions,\n        // and it is better to be shorter than taller, to avoid creating unnecessary scrollbars.\n        var minOffset1 = Math.floor(availableHeight / els.length); // for non-last element\n        var minOffset2 = Math.floor(availableHeight - minOffset1 * (els.length - 1)); // for last element *FLOORING NOTE*\n        var flexEls = []; // elements that are allowed to expand. array of DOM nodes\n        var flexOffsets = []; // amount of vertical space it takes up\n        var flexHeights = []; // actual css height\n        var usedHeight = 0;\n        undistributeHeight(els); // give all elements their natural height\n        // find elements that are below the recommended height (expandable).\n        // important to query for heights in a single first pass (to avoid reflow oscillation).\n        els.forEach(function (el, i) {\n            var minOffset = i === els.length - 1 ? minOffset2 : minOffset1;\n            var naturalHeight = el.getBoundingClientRect().height;\n            var naturalOffset = naturalHeight + computeVMargins(el);\n            if (naturalOffset < minOffset) {\n                flexEls.push(el);\n                flexOffsets.push(naturalOffset);\n                flexHeights.push(naturalHeight);\n            }\n            else {\n                // this element stretches past recommended height (non-expandable). mark the space as occupied.\n                usedHeight += naturalOffset;\n            }\n        });\n        // readjust the recommended height to only consider the height available to non-maxed-out rows.\n        if (shouldRedistribute) {\n            availableHeight -= usedHeight;\n            minOffset1 = Math.floor(availableHeight / flexEls.length);\n            minOffset2 = Math.floor(availableHeight - minOffset1 * (flexEls.length - 1)); // *FLOORING NOTE*\n        }\n        // assign heights to all expandable elements\n        flexEls.forEach(function (el, i) {\n            var minOffset = i === flexEls.length - 1 ? minOffset2 : minOffset1;\n            var naturalOffset = flexOffsets[i];\n            var naturalHeight = flexHeights[i];\n            var newHeight = minOffset - (naturalOffset - naturalHeight); // subtract the margin/padding\n            if (naturalOffset < minOffset) { // we check this again because redistribution might have changed things\n                el.style.height = newHeight + 'px';\n            }\n        });\n    }\n    // Undoes distrubuteHeight, restoring all els to their natural height\n    function undistributeHeight(els) {\n        els.forEach(function (el) {\n            el.style.height = '';\n        });\n    }\n    // Given `els`, a set of <td> cells, find the cell with the largest natural width and set the widths of all the\n    // cells to be that width.\n    // PREREQUISITE: if you want a cell to take up width, it needs to have a single inner element w/ display:inline\n    function matchCellWidths(els) {\n        var maxInnerWidth = 0;\n        els.forEach(function (el) {\n            var innerEl = el.firstChild; // hopefully an element\n            if (innerEl instanceof HTMLElement) {\n                var innerWidth_1 = innerEl.getBoundingClientRect().width;\n                if (innerWidth_1 > maxInnerWidth) {\n                    maxInnerWidth = innerWidth_1;\n                }\n            }\n        });\n        maxInnerWidth++; // sometimes not accurate of width the text needs to stay on one line. insurance\n        els.forEach(function (el) {\n            el.style.width = maxInnerWidth + 'px';\n        });\n        return maxInnerWidth;\n    }\n    // Given one element that resides inside another,\n    // Subtracts the height of the inner element from the outer element.\n    function subtractInnerElHeight(outerEl, innerEl) {\n        // effin' IE8/9/10/11 sometimes returns 0 for dimensions. this weird hack was the only thing that worked\n        var reflowStyleProps = {\n            position: 'relative',\n            left: -1 // ensure reflow in case the el was already relative. negative is less likely to cause new scroll\n        };\n        applyStyle(outerEl, reflowStyleProps);\n        applyStyle(innerEl, reflowStyleProps);\n        var diff = // grab the dimensions\n         outerEl.getBoundingClientRect().height -\n            innerEl.getBoundingClientRect().height;\n        // undo hack\n        var resetStyleProps = { position: '', left: '' };\n        applyStyle(outerEl, resetStyleProps);\n        applyStyle(innerEl, resetStyleProps);\n        return diff;\n    }\n    /* Selection\n    ----------------------------------------------------------------------------------------------------------------------*/\n    function preventSelection(el) {\n        el.classList.add('fc-unselectable');\n        el.addEventListener('selectstart', preventDefault);\n    }\n    function allowSelection(el) {\n        el.classList.remove('fc-unselectable');\n        el.removeEventListener('selectstart', preventDefault);\n    }\n    /* Context Menu\n    ----------------------------------------------------------------------------------------------------------------------*/\n    function preventContextMenu(el) {\n        el.addEventListener('contextmenu', preventDefault);\n    }\n    function allowContextMenu(el) {\n        el.removeEventListener('contextmenu', preventDefault);\n    }\n    /* Object Ordering by Field\n    ----------------------------------------------------------------------------------------------------------------------*/\n    function parseFieldSpecs(input) {\n        var specs = [];\n        var tokens = [];\n        var i;\n        var token;\n        if (typeof input === 'string') {\n            tokens = input.split(/\\s*,\\s*/);\n        }\n        else if (typeof input === 'function') {\n            tokens = [input];\n        }\n        else if (Array.isArray(input)) {\n            tokens = input;\n        }\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            if (typeof token === 'string') {\n                specs.push(token.charAt(0) === '-' ?\n                    { field: token.substring(1), order: -1 } :\n                    { field: token, order: 1 });\n            }\n            else if (typeof token === 'function') {\n                specs.push({ func: token });\n            }\n        }\n        return specs;\n    }\n    function compareByFieldSpecs(obj0, obj1, fieldSpecs) {\n        var i;\n        var cmp;\n        for (i = 0; i < fieldSpecs.length; i++) {\n            cmp = compareByFieldSpec(obj0, obj1, fieldSpecs[i]);\n            if (cmp) {\n                return cmp;\n            }\n        }\n        return 0;\n    }\n    function compareByFieldSpec(obj0, obj1, fieldSpec) {\n        if (fieldSpec.func) {\n            return fieldSpec.func(obj0, obj1);\n        }\n        return flexibleCompare(obj0[fieldSpec.field], obj1[fieldSpec.field])\n            * (fieldSpec.order || 1);\n    }\n    function flexibleCompare(a, b) {\n        if (!a && !b) {\n            return 0;\n        }\n        if (b == null) {\n            return -1;\n        }\n        if (a == null) {\n            return 1;\n        }\n        if (typeof a === 'string' || typeof b === 'string') {\n            return String(a).localeCompare(String(b));\n        }\n        return a - b;\n    }\n    /* String Utilities\n    ----------------------------------------------------------------------------------------------------------------------*/\n    function capitaliseFirstLetter(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n    function padStart(val, len) {\n        var s = String(val);\n        return '000'.substr(0, len - s.length) + s;\n    }\n    /* Number Utilities\n    ----------------------------------------------------------------------------------------------------------------------*/\n    function compareNumbers(a, b) {\n        return a - b;\n    }\n    function isInt(n) {\n        return n % 1 === 0;\n    }\n    /* Weird Utilities\n    ----------------------------------------------------------------------------------------------------------------------*/\n    function applyAll(functions, thisObj, args) {\n        if (typeof functions === 'function') { // supplied a single function\n            functions = [functions];\n        }\n        if (functions) {\n            var i = void 0;\n            var ret = void 0;\n            for (i = 0; i < functions.length; i++) {\n                ret = functions[i].apply(thisObj, args) || ret;\n            }\n            return ret;\n        }\n    }\n    function firstDefined() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        for (var i = 0; i < args.length; i++) {\n            if (args[i] !== undefined) {\n                return args[i];\n            }\n        }\n    }\n    // Returns a function, that, as long as it continues to be invoked, will not\n    // be triggered. The function will be called after it stops being called for\n    // N milliseconds. If `immediate` is passed, trigger the function on the\n    // leading edge, instead of the trailing.\n    // https://github.com/jashkenas/underscore/blob/1.6.0/underscore.js#L714\n    function debounce(func, wait) {\n        var timeout;\n        var args;\n        var context;\n        var timestamp;\n        var result;\n        var later = function () {\n            var last = new Date().valueOf() - timestamp;\n            if (last < wait) {\n                timeout = setTimeout(later, wait - last);\n            }\n            else {\n                timeout = null;\n                result = func.apply(context, args);\n                context = args = null;\n            }\n        };\n        return function () {\n            context = this;\n            args = arguments;\n            timestamp = new Date().valueOf();\n            if (!timeout) {\n                timeout = setTimeout(later, wait);\n            }\n            return result;\n        };\n    }\n    // Number and Boolean are only types that defaults or not computed for\n    // TODO: write more comments\n    function refineProps(rawProps, processors, defaults, leftoverProps) {\n        if (defaults === void 0) { defaults = {}; }\n        var refined = {};\n        for (var key in processors) {\n            var processor = processors[key];\n            if (rawProps[key] !== undefined) {\n                // found\n                if (processor === Function) {\n                    refined[key] = typeof rawProps[key] === 'function' ? rawProps[key] : null;\n                }\n                else if (processor) { // a refining function?\n                    refined[key] = processor(rawProps[key]);\n                }\n                else {\n                    refined[key] = rawProps[key];\n                }\n            }\n            else if (defaults[key] !== undefined) {\n                // there's an explicit default\n                refined[key] = defaults[key];\n            }\n            else {\n                // must compute a default\n                if (processor === String) {\n                    refined[key] = ''; // empty string is default for String\n                }\n                else if (!processor || processor === Number || processor === Boolean || processor === Function) {\n                    refined[key] = null; // assign null for other non-custom processor funcs\n                }\n                else {\n                    refined[key] = processor(null); // run the custom processor func\n                }\n            }\n        }\n        if (leftoverProps) {\n            for (var key in rawProps) {\n                if (processors[key] === undefined) {\n                    leftoverProps[key] = rawProps[key];\n                }\n            }\n        }\n        return refined;\n    }\n    /* Date stuff that doesn't belong in datelib core\n    ----------------------------------------------------------------------------------------------------------------------*/\n    // given a timed range, computes an all-day range that has the same exact duration,\n    // but whose start time is aligned with the start of the day.\n    function computeAlignedDayRange(timedRange) {\n        var dayCnt = Math.floor(diffDays(timedRange.start, timedRange.end)) || 1;\n        var start = startOfDay(timedRange.start);\n        var end = addDays(start, dayCnt);\n        return { start: start, end: end };\n    }\n    // given a timed range, computes an all-day range based on how for the end date bleeds into the next day\n    // TODO: give nextDayThreshold a default arg\n    function computeVisibleDayRange(timedRange, nextDayThreshold) {\n        if (nextDayThreshold === void 0) { nextDayThreshold = createDuration(0); }\n        var startDay = null;\n        var endDay = null;\n        if (timedRange.end) {\n            endDay = startOfDay(timedRange.end);\n            var endTimeMS = timedRange.end.valueOf() - endDay.valueOf(); // # of milliseconds into `endDay`\n            // If the end time is actually inclusively part of the next day and is equal to or\n            // beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.\n            // Otherwise, leaving it as inclusive will cause it to exclude `endDay`.\n            if (endTimeMS && endTimeMS >= asRoughMs(nextDayThreshold)) {\n                endDay = addDays(endDay, 1);\n            }\n        }\n        if (timedRange.start) {\n            startDay = startOfDay(timedRange.start); // the beginning of the day the range starts\n            // If end is within `startDay` but not past nextDayThreshold, assign the default duration of one day.\n            if (endDay && endDay <= startDay) {\n                endDay = addDays(startDay, 1);\n            }\n        }\n        return { start: startDay, end: endDay };\n    }\n    // spans from one day into another?\n    function isMultiDayRange(range) {\n        var visibleRange = computeVisibleDayRange(range);\n        return diffDays(visibleRange.start, visibleRange.end) > 1;\n    }\n    function diffDates(date0, date1, dateEnv, largeUnit) {\n        if (largeUnit === 'year') {\n            return createDuration(dateEnv.diffWholeYears(date0, date1), 'year');\n        }\n        else if (largeUnit === 'month') {\n            return createDuration(dateEnv.diffWholeMonths(date0, date1), 'month');\n        }\n        else {\n            return diffDayAndTime(date0, date1); // returns a duration\n        }\n    }\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation.\r\n\r\n    Permission to use, copy, modify, and/or distribute this software for any\r\n    purpose with or without fee is hereby granted.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n    PERFORMANCE OF THIS SOFTWARE.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\n\n    function parseRecurring(eventInput, allDayDefault, dateEnv, recurringTypes, leftovers) {\n        for (var i = 0; i < recurringTypes.length; i++) {\n            var localLeftovers = {};\n            var parsed = recurringTypes[i].parse(eventInput, localLeftovers, dateEnv);\n            if (parsed) {\n                var allDay = localLeftovers.allDay;\n                delete localLeftovers.allDay; // remove from leftovers\n                if (allDay == null) {\n                    allDay = allDayDefault;\n                    if (allDay == null) {\n                        allDay = parsed.allDayGuess;\n                        if (allDay == null) {\n                            allDay = false;\n                        }\n                    }\n                }\n                __assign(leftovers, localLeftovers);\n                return {\n                    allDay: allDay,\n                    duration: parsed.duration,\n                    typeData: parsed.typeData,\n                    typeId: i\n                };\n            }\n        }\n        return null;\n    }\n    /*\n    Event MUST have a recurringDef\n    */\n    function expandRecurringRanges(eventDef, duration, framingRange, dateEnv, recurringTypes) {\n        var typeDef = recurringTypes[eventDef.recurringDef.typeId];\n        var markers = typeDef.expand(eventDef.recurringDef.typeData, {\n            start: dateEnv.subtract(framingRange.start, duration),\n            end: framingRange.end\n        }, dateEnv);\n        // the recurrence plugins don't guarantee that all-day events are start-of-day, so we have to\n        if (eventDef.allDay) {\n            markers = markers.map(startOfDay);\n        }\n        return markers;\n    }\n\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    // Merges an array of objects into a single object.\n    // The second argument allows for an array of property names who's object values will be merged together.\n    function mergeProps(propObjs, complexProps) {\n        var dest = {};\n        var i;\n        var name;\n        var complexObjs;\n        var j;\n        var val;\n        var props;\n        if (complexProps) {\n            for (i = 0; i < complexProps.length; i++) {\n                name = complexProps[i];\n                complexObjs = [];\n                // collect the trailing object values, stopping when a non-object is discovered\n                for (j = propObjs.length - 1; j >= 0; j--) {\n                    val = propObjs[j][name];\n                    if (typeof val === 'object' && val) { // non-null object\n                        complexObjs.unshift(val);\n                    }\n                    else if (val !== undefined) {\n                        dest[name] = val; // if there were no objects, this value will be used\n                        break;\n                    }\n                }\n                // if the trailing values were objects, use the merged value\n                if (complexObjs.length) {\n                    dest[name] = mergeProps(complexObjs);\n                }\n            }\n        }\n        // copy values into the destination, going from last to first\n        for (i = propObjs.length - 1; i >= 0; i--) {\n            props = propObjs[i];\n            for (name in props) {\n                if (!(name in dest)) { // if already assigned by previous props or complex props, don't reassign\n                    dest[name] = props[name];\n                }\n            }\n        }\n        return dest;\n    }\n    function filterHash(hash, func) {\n        var filtered = {};\n        for (var key in hash) {\n            if (func(hash[key], key)) {\n                filtered[key] = hash[key];\n            }\n        }\n        return filtered;\n    }\n    function mapHash(hash, func) {\n        var newHash = {};\n        for (var key in hash) {\n            newHash[key] = func(hash[key], key);\n        }\n        return newHash;\n    }\n    function arrayToHash(a) {\n        var hash = {};\n        for (var _i = 0, a_1 = a; _i < a_1.length; _i++) {\n            var item = a_1[_i];\n            hash[item] = true;\n        }\n        return hash;\n    }\n    function hashValuesToArray(obj) {\n        var a = [];\n        for (var key in obj) {\n            a.push(obj[key]);\n        }\n        return a;\n    }\n    function isPropsEqual(obj0, obj1) {\n        for (var key in obj0) {\n            if (hasOwnProperty.call(obj0, key)) {\n                if (!(key in obj1)) {\n                    return false;\n                }\n            }\n        }\n        for (var key in obj1) {\n            if (hasOwnProperty.call(obj1, key)) {\n                if (obj0[key] !== obj1[key]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    function parseEvents(rawEvents, sourceId, calendar, allowOpenRange) {\n        var eventStore = createEmptyEventStore();\n        for (var _i = 0, rawEvents_1 = rawEvents; _i < rawEvents_1.length; _i++) {\n            var rawEvent = rawEvents_1[_i];\n            var tuple = parseEvent(rawEvent, sourceId, calendar, allowOpenRange);\n            if (tuple) {\n                eventTupleToStore(tuple, eventStore);\n            }\n        }\n        return eventStore;\n    }\n    function eventTupleToStore(tuple, eventStore) {\n        if (eventStore === void 0) { eventStore = createEmptyEventStore(); }\n        eventStore.defs[tuple.def.defId] = tuple.def;\n        if (tuple.instance) {\n            eventStore.instances[tuple.instance.instanceId] = tuple.instance;\n        }\n        return eventStore;\n    }\n    function expandRecurring(eventStore, framingRange, calendar) {\n        var dateEnv = calendar.dateEnv;\n        var defs = eventStore.defs, instances = eventStore.instances;\n        // remove existing recurring instances\n        instances = filterHash(instances, function (instance) {\n            return !defs[instance.defId].recurringDef;\n        });\n        for (var defId in defs) {\n            var def = defs[defId];\n            if (def.recurringDef) {\n                var duration = def.recurringDef.duration;\n                if (!duration) {\n                    duration = def.allDay ?\n                        calendar.defaultAllDayEventDuration :\n                        calendar.defaultTimedEventDuration;\n                }\n                var starts = expandRecurringRanges(def, duration, framingRange, calendar.dateEnv, calendar.pluginSystem.hooks.recurringTypes);\n                for (var _i = 0, starts_1 = starts; _i < starts_1.length; _i++) {\n                    var start = starts_1[_i];\n                    var instance = createEventInstance(defId, {\n                        start: start,\n                        end: dateEnv.add(start, duration)\n                    });\n                    instances[instance.instanceId] = instance;\n                }\n            }\n        }\n        return { defs: defs, instances: instances };\n    }\n    // retrieves events that have the same groupId as the instance specified by `instanceId`\n    // or they are the same as the instance.\n    // why might instanceId not be in the store? an event from another calendar?\n    function getRelevantEvents(eventStore, instanceId) {\n        var instance = eventStore.instances[instanceId];\n        if (instance) {\n            var def_1 = eventStore.defs[instance.defId];\n            // get events/instances with same group\n            var newStore = filterEventStoreDefs(eventStore, function (lookDef) {\n                return isEventDefsGrouped(def_1, lookDef);\n            });\n            // add the original\n            // TODO: wish we could use eventTupleToStore or something like it\n            newStore.defs[def_1.defId] = def_1;\n            newStore.instances[instance.instanceId] = instance;\n            return newStore;\n        }\n        return createEmptyEventStore();\n    }\n    function isEventDefsGrouped(def0, def1) {\n        return Boolean(def0.groupId && def0.groupId === def1.groupId);\n    }\n    function transformRawEvents(rawEvents, eventSource, calendar) {\n        var calEachTransform = calendar.opt('eventDataTransform');\n        var sourceEachTransform = eventSource ? eventSource.eventDataTransform : null;\n        if (sourceEachTransform) {\n            rawEvents = transformEachRawEvent(rawEvents, sourceEachTransform);\n        }\n        if (calEachTransform) {\n            rawEvents = transformEachRawEvent(rawEvents, calEachTransform);\n        }\n        return rawEvents;\n    }\n    function transformEachRawEvent(rawEvents, func) {\n        var refinedEvents;\n        if (!func) {\n            refinedEvents = rawEvents;\n        }\n        else {\n            refinedEvents = [];\n            for (var _i = 0, rawEvents_2 = rawEvents; _i < rawEvents_2.length; _i++) {\n                var rawEvent = rawEvents_2[_i];\n                var refinedEvent = func(rawEvent);\n                if (refinedEvent) {\n                    refinedEvents.push(refinedEvent);\n                }\n                else if (refinedEvent == null) {\n                    refinedEvents.push(rawEvent);\n                } // if a different falsy value, do nothing\n            }\n        }\n        return refinedEvents;\n    }\n    function createEmptyEventStore() {\n        return { defs: {}, instances: {} };\n    }\n    function mergeEventStores(store0, store1) {\n        return {\n            defs: __assign({}, store0.defs, store1.defs),\n            instances: __assign({}, store0.instances, store1.instances)\n        };\n    }\n    function filterEventStoreDefs(eventStore, filterFunc) {\n        var defs = filterHash(eventStore.defs, filterFunc);\n        var instances = filterHash(eventStore.instances, function (instance) {\n            return defs[instance.defId]; // still exists?\n        });\n        return { defs: defs, instances: instances };\n    }\n\n    function parseRange(input, dateEnv) {\n        var start = null;\n        var end = null;\n        if (input.start) {\n            start = dateEnv.createMarker(input.start);\n        }\n        if (input.end) {\n            end = dateEnv.createMarker(input.end);\n        }\n        if (!start && !end) {\n            return null;\n        }\n        if (start && end && end < start) {\n            return null;\n        }\n        return { start: start, end: end };\n    }\n    // SIDE-EFFECT: will mutate ranges.\n    // Will return a new array result.\n    function invertRanges(ranges, constraintRange) {\n        var invertedRanges = [];\n        var start = constraintRange.start; // the end of the previous range. the start of the new range\n        var i;\n        var dateRange;\n        // ranges need to be in order. required for our date-walking algorithm\n        ranges.sort(compareRanges);\n        for (i = 0; i < ranges.length; i++) {\n            dateRange = ranges[i];\n            // add the span of time before the event (if there is any)\n            if (dateRange.start > start) { // compare millisecond time (skip any ambig logic)\n                invertedRanges.push({ start: start, end: dateRange.start });\n            }\n            if (dateRange.end > start) {\n                start = dateRange.end;\n            }\n        }\n        // add the span of time after the last event (if there is any)\n        if (start < constraintRange.end) { // compare millisecond time (skip any ambig logic)\n            invertedRanges.push({ start: start, end: constraintRange.end });\n        }\n        return invertedRanges;\n    }\n    function compareRanges(range0, range1) {\n        return range0.start.valueOf() - range1.start.valueOf(); // earlier ranges go first\n    }\n    function intersectRanges(range0, range1) {\n        var start = range0.start;\n        var end = range0.end;\n        var newRange = null;\n        if (range1.start !== null) {\n            if (start === null) {\n                start = range1.start;\n            }\n            else {\n                start = new Date(Math.max(start.valueOf(), range1.start.valueOf()));\n            }\n        }\n        if (range1.end != null) {\n            if (end === null) {\n                end = range1.end;\n            }\n            else {\n                end = new Date(Math.min(end.valueOf(), range1.end.valueOf()));\n            }\n        }\n        if (start === null || end === null || start < end) {\n            newRange = { start: start, end: end };\n        }\n        return newRange;\n    }\n    function rangesEqual(range0, range1) {\n        return (range0.start === null ? null : range0.start.valueOf()) === (range1.start === null ? null : range1.start.valueOf()) &&\n            (range0.end === null ? null : range0.end.valueOf()) === (range1.end === null ? null : range1.end.valueOf());\n    }\n    function rangesIntersect(range0, range1) {\n        return (range0.end === null || range1.start === null || range0.end > range1.start) &&\n            (range0.start === null || range1.end === null || range0.start < range1.end);\n    }\n    function rangeContainsRange(outerRange, innerRange) {\n        return (outerRange.start === null || (innerRange.start !== null && innerRange.start >= outerRange.start)) &&\n            (outerRange.end === null || (innerRange.end !== null && innerRange.end <= outerRange.end));\n    }\n    function rangeContainsMarker(range, date) {\n        return (range.start === null || date >= range.start) &&\n            (range.end === null || date < range.end);\n    }\n    // If the given date is not within the given range, move it inside.\n    // (If it's past the end, make it one millisecond before the end).\n    function constrainMarkerToRange(date, range) {\n        if (range.start != null && date < range.start) {\n            return range.start;\n        }\n        if (range.end != null && date >= range.end) {\n            return new Date(range.end.valueOf() - 1);\n        }\n        return date;\n    }\n\n    function removeExact(array, exactVal) {\n        var removeCnt = 0;\n        var i = 0;\n        while (i < array.length) {\n            if (array[i] === exactVal) {\n                array.splice(i, 1);\n                removeCnt++;\n            }\n            else {\n                i++;\n            }\n        }\n        return removeCnt;\n    }\n    function isArraysEqual(a0, a1) {\n        var len = a0.length;\n        var i;\n        if (len !== a1.length) { // not array? or not same length?\n            return false;\n        }\n        for (i = 0; i < len; i++) {\n            if (a0[i] !== a1[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function memoize(workerFunc) {\n        var args;\n        var res;\n        return function () {\n            if (!args || !isArraysEqual(args, arguments)) {\n                args = arguments;\n                res = workerFunc.apply(this, arguments);\n            }\n            return res;\n        };\n    }\n    /*\n    always executes the workerFunc, but if the result is equal to the previous result,\n    return the previous result instead.\n    */\n    function memoizeOutput(workerFunc, equalityFunc) {\n        var cachedRes = null;\n        return function () {\n            var newRes = workerFunc.apply(this, arguments);\n            if (cachedRes === null || !(cachedRes === newRes || equalityFunc(cachedRes, newRes))) {\n                cachedRes = newRes;\n            }\n            return cachedRes;\n        };\n    }\n\n    var EXTENDED_SETTINGS_AND_SEVERITIES = {\n        week: 3,\n        separator: 0,\n        omitZeroMinute: 0,\n        meridiem: 0,\n        omitCommas: 0\n    };\n    var STANDARD_DATE_PROP_SEVERITIES = {\n        timeZoneName: 7,\n        era: 6,\n        year: 5,\n        month: 4,\n        day: 2,\n        weekday: 2,\n        hour: 1,\n        minute: 1,\n        second: 1\n    };\n    var MERIDIEM_RE = /\\s*([ap])\\.?m\\.?/i; // eats up leading spaces too\n    var COMMA_RE = /,/g; // we need re for globalness\n    var MULTI_SPACE_RE = /\\s+/g;\n    var LTR_RE = /\\u200e/g; // control character\n    var UTC_RE = /UTC|GMT/;\n    var NativeFormatter = /** @class */ (function () {\n        function NativeFormatter(formatSettings) {\n            var standardDateProps = {};\n            var extendedSettings = {};\n            var severity = 0;\n            for (var name_1 in formatSettings) {\n                if (name_1 in EXTENDED_SETTINGS_AND_SEVERITIES) {\n                    extendedSettings[name_1] = formatSettings[name_1];\n                    severity = Math.max(EXTENDED_SETTINGS_AND_SEVERITIES[name_1], severity);\n                }\n                else {\n                    standardDateProps[name_1] = formatSettings[name_1];\n                    if (name_1 in STANDARD_DATE_PROP_SEVERITIES) {\n                        severity = Math.max(STANDARD_DATE_PROP_SEVERITIES[name_1], severity);\n                    }\n                }\n            }\n            this.standardDateProps = standardDateProps;\n            this.extendedSettings = extendedSettings;\n            this.severity = severity;\n            this.buildFormattingFunc = memoize(buildFormattingFunc);\n        }\n        NativeFormatter.prototype.format = function (date, context) {\n            return this.buildFormattingFunc(this.standardDateProps, this.extendedSettings, context)(date);\n        };\n        NativeFormatter.prototype.formatRange = function (start, end, context) {\n            var _a = this, standardDateProps = _a.standardDateProps, extendedSettings = _a.extendedSettings;\n            var diffSeverity = computeMarkerDiffSeverity(start.marker, end.marker, context.calendarSystem);\n            if (!diffSeverity) {\n                return this.format(start, context);\n            }\n            var biggestUnitForPartial = diffSeverity;\n            if (biggestUnitForPartial > 1 && // the two dates are different in a way that's larger scale than time\n                (standardDateProps.year === 'numeric' || standardDateProps.year === '2-digit') &&\n                (standardDateProps.month === 'numeric' || standardDateProps.month === '2-digit') &&\n                (standardDateProps.day === 'numeric' || standardDateProps.day === '2-digit')) {\n                biggestUnitForPartial = 1; // make it look like the dates are only different in terms of time\n            }\n            var full0 = this.format(start, context);\n            var full1 = this.format(end, context);\n            if (full0 === full1) {\n                return full0;\n            }\n            var partialDateProps = computePartialFormattingOptions(standardDateProps, biggestUnitForPartial);\n            var partialFormattingFunc = buildFormattingFunc(partialDateProps, extendedSettings, context);\n            var partial0 = partialFormattingFunc(start);\n            var partial1 = partialFormattingFunc(end);\n            var insertion = findCommonInsertion(full0, partial0, full1, partial1);\n            var separator = extendedSettings.separator || '';\n            if (insertion) {\n                return insertion.before + partial0 + separator + partial1 + insertion.after;\n            }\n            return full0 + separator + full1;\n        };\n        NativeFormatter.prototype.getLargestUnit = function () {\n            switch (this.severity) {\n                case 7:\n                case 6:\n                case 5:\n                    return 'year';\n                case 4:\n                    return 'month';\n                case 3:\n                    return 'week';\n                default:\n                    return 'day';\n            }\n        };\n        return NativeFormatter;\n    }());\n    function buildFormattingFunc(standardDateProps, extendedSettings, context) {\n        var standardDatePropCnt = Object.keys(standardDateProps).length;\n        if (standardDatePropCnt === 1 && standardDateProps.timeZoneName === 'short') {\n            return function (date) {\n                return formatTimeZoneOffset(date.timeZoneOffset);\n            };\n        }\n        if (standardDatePropCnt === 0 && extendedSettings.week) {\n            return function (date) {\n                return formatWeekNumber(context.computeWeekNumber(date.marker), context.weekLabel, context.locale, extendedSettings.week);\n            };\n        }\n        return buildNativeFormattingFunc(standardDateProps, extendedSettings, context);\n    }\n    function buildNativeFormattingFunc(standardDateProps, extendedSettings, context) {\n        standardDateProps = __assign({}, standardDateProps); // copy\n        extendedSettings = __assign({}, extendedSettings); // copy\n        sanitizeSettings(standardDateProps, extendedSettings);\n        standardDateProps.timeZone = 'UTC'; // we leverage the only guaranteed timeZone for our UTC markers\n        var normalFormat = new Intl.DateTimeFormat(context.locale.codes, standardDateProps);\n        var zeroFormat; // needed?\n        if (extendedSettings.omitZeroMinute) {\n            var zeroProps = __assign({}, standardDateProps);\n            delete zeroProps.minute; // seconds and ms were already considered in sanitizeSettings\n            zeroFormat = new Intl.DateTimeFormat(context.locale.codes, zeroProps);\n        }\n        return function (date) {\n            var marker = date.marker;\n            var format;\n            if (zeroFormat && !marker.getUTCMinutes()) {\n                format = zeroFormat;\n            }\n            else {\n                format = normalFormat;\n            }\n            var s = format.format(marker);\n            return postProcess(s, date, standardDateProps, extendedSettings, context);\n        };\n    }\n    function sanitizeSettings(standardDateProps, extendedSettings) {\n        // deal with a browser inconsistency where formatting the timezone\n        // requires that the hour/minute be present.\n        if (standardDateProps.timeZoneName) {\n            if (!standardDateProps.hour) {\n                standardDateProps.hour = '2-digit';\n            }\n            if (!standardDateProps.minute) {\n                standardDateProps.minute = '2-digit';\n            }\n        }\n        // only support short timezone names\n        if (standardDateProps.timeZoneName === 'long') {\n            standardDateProps.timeZoneName = 'short';\n        }\n        // if requesting to display seconds, MUST display minutes\n        if (extendedSettings.omitZeroMinute && (standardDateProps.second || standardDateProps.millisecond)) {\n            delete extendedSettings.omitZeroMinute;\n        }\n    }\n    function postProcess(s, date, standardDateProps, extendedSettings, context) {\n        s = s.replace(LTR_RE, ''); // remove left-to-right control chars. do first. good for other regexes\n        if (standardDateProps.timeZoneName === 'short') {\n            s = injectTzoStr(s, (context.timeZone === 'UTC' || date.timeZoneOffset == null) ?\n                'UTC' : // important to normalize for IE, which does \"GMT\"\n                formatTimeZoneOffset(date.timeZoneOffset));\n        }\n        if (extendedSettings.omitCommas) {\n            s = s.replace(COMMA_RE, '').trim();\n        }\n        if (extendedSettings.omitZeroMinute) {\n            s = s.replace(':00', ''); // zeroFormat doesn't always achieve this\n        }\n        // ^ do anything that might create adjacent spaces before this point,\n        // because MERIDIEM_RE likes to eat up loading spaces\n        if (extendedSettings.meridiem === false) {\n            s = s.replace(MERIDIEM_RE, '').trim();\n        }\n        else if (extendedSettings.meridiem === 'narrow') { // a/p\n            s = s.replace(MERIDIEM_RE, function (m0, m1) {\n                return m1.toLocaleLowerCase();\n            });\n        }\n        else if (extendedSettings.meridiem === 'short') { // am/pm\n            s = s.replace(MERIDIEM_RE, function (m0, m1) {\n                return m1.toLocaleLowerCase() + 'm';\n            });\n        }\n        else if (extendedSettings.meridiem === 'lowercase') { // other meridiem transformers already converted to lowercase\n            s = s.replace(MERIDIEM_RE, function (m0) {\n                return m0.toLocaleLowerCase();\n            });\n        }\n        s = s.replace(MULTI_SPACE_RE, ' ');\n        s = s.trim();\n        return s;\n    }\n    function injectTzoStr(s, tzoStr) {\n        var replaced = false;\n        s = s.replace(UTC_RE, function () {\n            replaced = true;\n            return tzoStr;\n        });\n        // IE11 doesn't include UTC/GMT in the original string, so append to end\n        if (!replaced) {\n            s += ' ' + tzoStr;\n        }\n        return s;\n    }\n    function formatWeekNumber(num, weekLabel, locale, display) {\n        var parts = [];\n        if (display === 'narrow') {\n            parts.push(weekLabel);\n        }\n        else if (display === 'short') {\n            parts.push(weekLabel, ' ');\n        }\n        // otherwise, considered 'numeric'\n        parts.push(locale.simpleNumberFormat.format(num));\n        if (locale.options.isRtl) { // TODO: use control characters instead?\n            parts.reverse();\n        }\n        return parts.join('');\n    }\n    // Range Formatting Utils\n    // 0 = exactly the same\n    // 1 = different by time\n    // and bigger\n    function computeMarkerDiffSeverity(d0, d1, ca) {\n        if (ca.getMarkerYear(d0) !== ca.getMarkerYear(d1)) {\n            return 5;\n        }\n        if (ca.getMarkerMonth(d0) !== ca.getMarkerMonth(d1)) {\n            return 4;\n        }\n        if (ca.getMarkerDay(d0) !== ca.getMarkerDay(d1)) {\n            return 2;\n        }\n        if (timeAsMs(d0) !== timeAsMs(d1)) {\n            return 1;\n        }\n        return 0;\n    }\n    function computePartialFormattingOptions(options, biggestUnit) {\n        var partialOptions = {};\n        for (var name_2 in options) {\n            if (!(name_2 in STANDARD_DATE_PROP_SEVERITIES) || // not a date part prop (like timeZone)\n                STANDARD_DATE_PROP_SEVERITIES[name_2] <= biggestUnit) {\n                partialOptions[name_2] = options[name_2];\n            }\n        }\n        return partialOptions;\n    }\n    function findCommonInsertion(full0, partial0, full1, partial1) {\n        var i0 = 0;\n        while (i0 < full0.length) {\n            var found0 = full0.indexOf(partial0, i0);\n            if (found0 === -1) {\n                break;\n            }\n            var before0 = full0.substr(0, found0);\n            i0 = found0 + partial0.length;\n            var after0 = full0.substr(i0);\n            var i1 = 0;\n            while (i1 < full1.length) {\n                var found1 = full1.indexOf(partial1, i1);\n                if (found1 === -1) {\n                    break;\n                }\n                var before1 = full1.substr(0, found1);\n                i1 = found1 + partial1.length;\n                var after1 = full1.substr(i1);\n                if (before0 === before1 && after0 === after1) {\n                    return {\n                        before: before0,\n                        after: after0\n                    };\n                }\n            }\n        }\n        return null;\n    }\n\n    /*\n    TODO: fix the terminology of \"formatter\" vs \"formatting func\"\n    */\n    /*\n    At the time of instantiation, this object does not know which cmd-formatting system it will use.\n    It receives this at the time of formatting, as a setting.\n    */\n    var CmdFormatter = /** @class */ (function () {\n        function CmdFormatter(cmdStr, separator) {\n            this.cmdStr = cmdStr;\n            this.separator = separator;\n        }\n        CmdFormatter.prototype.format = function (date, context) {\n            return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(date, null, context, this.separator));\n        };\n        CmdFormatter.prototype.formatRange = function (start, end, context) {\n            return context.cmdFormatter(this.cmdStr, createVerboseFormattingArg(start, end, context, this.separator));\n        };\n        return CmdFormatter;\n    }());\n\n    var FuncFormatter = /** @class */ (function () {\n        function FuncFormatter(func) {\n            this.func = func;\n        }\n        FuncFormatter.prototype.format = function (date, context) {\n            return this.func(createVerboseFormattingArg(date, null, context));\n        };\n        FuncFormatter.prototype.formatRange = function (start, end, context) {\n            return this.func(createVerboseFormattingArg(start, end, context));\n        };\n        return FuncFormatter;\n    }());\n\n    // Formatter Object Creation\n    function createFormatter(input, defaultSeparator) {\n        if (typeof input === 'object' && input) { // non-null object\n            if (typeof defaultSeparator === 'string') {\n                input = __assign({ separator: defaultSeparator }, input);\n            }\n            return new NativeFormatter(input);\n        }\n        else if (typeof input === 'string') {\n            return new CmdFormatter(input, defaultSeparator);\n        }\n        else if (typeof input === 'function') {\n            return new FuncFormatter(input);\n        }\n    }\n    // String Utils\n    // timeZoneOffset is in minutes\n    function buildIsoString(marker, timeZoneOffset, stripZeroTime) {\n        if (stripZeroTime === void 0) { stripZeroTime = false; }\n        var s = marker.toISOString();\n        s = s.replace('.000', '');\n        if (stripZeroTime) {\n            s = s.replace('T00:00:00Z', '');\n        }\n        if (s.length > 10) { // time part wasn't stripped, can add timezone info\n            if (timeZoneOffset == null) {\n                s = s.replace('Z', '');\n            }\n            else if (timeZoneOffset !== 0) {\n                s = s.replace('Z', formatTimeZoneOffset(timeZoneOffset, true));\n            }\n            // otherwise, its UTC-0 and we want to keep the Z\n        }\n        return s;\n    }\n    function formatIsoTimeString(marker) {\n        return padStart(marker.getUTCHours(), 2) + ':' +\n            padStart(marker.getUTCMinutes(), 2) + ':' +\n            padStart(marker.getUTCSeconds(), 2);\n    }\n    function formatTimeZoneOffset(minutes, doIso) {\n        if (doIso === void 0) { doIso = false; }\n        var sign = minutes < 0 ? '-' : '+';\n        var abs = Math.abs(minutes);\n        var hours = Math.floor(abs / 60);\n        var mins = Math.round(abs % 60);\n        if (doIso) {\n            return sign + padStart(hours, 2) + ':' + padStart(mins, 2);\n        }\n        else {\n            return 'GMT' + sign + hours + (mins ? ':' + padStart(mins, 2) : '');\n        }\n    }\n    // Arg Utils\n    function createVerboseFormattingArg(start, end, context, separator) {\n        var startInfo = expandZonedMarker(start, context.calendarSystem);\n        var endInfo = end ? expandZonedMarker(end, context.calendarSystem) : null;\n        return {\n            date: startInfo,\n            start: startInfo,\n            end: endInfo,\n            timeZone: context.timeZone,\n            localeCodes: context.locale.codes,\n            separator: separator\n        };\n    }\n    function expandZonedMarker(dateInfo, calendarSystem) {\n        var a = calendarSystem.markerToArray(dateInfo.marker);\n        return {\n            marker: dateInfo.marker,\n            timeZoneOffset: dateInfo.timeZoneOffset,\n            array: a,\n            year: a[0],\n            month: a[1],\n            day: a[2],\n            hour: a[3],\n            minute: a[4],\n            second: a[5],\n            millisecond: a[6]\n        };\n    }\n\n    var EventSourceApi = /** @class */ (function () {\n        function EventSourceApi(calendar, internalEventSource) {\n            this.calendar = calendar;\n            this.internalEventSource = internalEventSource;\n        }\n        EventSourceApi.prototype.remove = function () {\n            this.calendar.dispatch({\n                type: 'REMOVE_EVENT_SOURCE',\n                sourceId: this.internalEventSource.sourceId\n            });\n        };\n        EventSourceApi.prototype.refetch = function () {\n            this.calendar.dispatch({\n                type: 'FETCH_EVENT_SOURCES',\n                sourceIds: [this.internalEventSource.sourceId]\n            });\n        };\n        Object.defineProperty(EventSourceApi.prototype, \"id\", {\n            get: function () {\n                return this.internalEventSource.publicId;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EventSourceApi.prototype, \"url\", {\n            // only relevant to json-feed event sources\n            get: function () {\n                return this.internalEventSource.meta.url;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return EventSourceApi;\n    }());\n\n    var EventApi = /** @class */ (function () {\n        function EventApi(calendar, def, instance) {\n            this._calendar = calendar;\n            this._def = def;\n            this._instance = instance || null;\n        }\n        /*\n        TODO: make event struct more responsible for this\n        */\n        EventApi.prototype.setProp = function (name, val) {\n            var _a, _b;\n            if (name in DATE_PROPS) ;\n            else if (name in NON_DATE_PROPS) {\n                if (typeof NON_DATE_PROPS[name] === 'function') {\n                    val = NON_DATE_PROPS[name](val);\n                }\n                this.mutate({\n                    standardProps: (_a = {}, _a[name] = val, _a)\n                });\n            }\n            else if (name in UNSCOPED_EVENT_UI_PROPS) {\n                var ui = void 0;\n                if (typeof UNSCOPED_EVENT_UI_PROPS[name] === 'function') {\n                    val = UNSCOPED_EVENT_UI_PROPS[name](val);\n                }\n                if (name === 'color') {\n                    ui = { backgroundColor: val, borderColor: val };\n                }\n                else if (name === 'editable') {\n                    ui = { startEditable: val, durationEditable: val };\n                }\n                else {\n                    ui = (_b = {}, _b[name] = val, _b);\n                }\n                this.mutate({\n                    standardProps: { ui: ui }\n                });\n            }\n        };\n        EventApi.prototype.setExtendedProp = function (name, val) {\n            var _a;\n            this.mutate({\n                extendedProps: (_a = {}, _a[name] = val, _a)\n            });\n        };\n        EventApi.prototype.setStart = function (startInput, options) {\n            if (options === void 0) { options = {}; }\n            var dateEnv = this._calendar.dateEnv;\n            var start = dateEnv.createMarker(startInput);\n            if (start && this._instance) { // TODO: warning if parsed bad\n                var instanceRange = this._instance.range;\n                var startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity); // what if parsed bad!?\n                if (options.maintainDuration) {\n                    this.mutate({ datesDelta: startDelta });\n                }\n                else {\n                    this.mutate({ startDelta: startDelta });\n                }\n            }\n        };\n        EventApi.prototype.setEnd = function (endInput, options) {\n            if (options === void 0) { options = {}; }\n            var dateEnv = this._calendar.dateEnv;\n            var end;\n            if (endInput != null) {\n                end = dateEnv.createMarker(endInput);\n                if (!end) {\n                    return; // TODO: warning if parsed bad\n                }\n            }\n            if (this._instance) {\n                if (end) {\n                    var endDelta = diffDates(this._instance.range.end, end, dateEnv, options.granularity);\n                    this.mutate({ endDelta: endDelta });\n                }\n                else {\n                    this.mutate({ standardProps: { hasEnd: false } });\n                }\n            }\n        };\n        EventApi.prototype.setDates = function (startInput, endInput, options) {\n            if (options === void 0) { options = {}; }\n            var dateEnv = this._calendar.dateEnv;\n            var standardProps = { allDay: options.allDay };\n            var start = dateEnv.createMarker(startInput);\n            var end;\n            if (!start) {\n                return; // TODO: warning if parsed bad\n            }\n            if (endInput != null) {\n                end = dateEnv.createMarker(endInput);\n                if (!end) { // TODO: warning if parsed bad\n                    return;\n                }\n            }\n            if (this._instance) {\n                var instanceRange = this._instance.range;\n                // when computing the diff for an event being converted to all-day,\n                // compute diff off of the all-day values the way event-mutation does.\n                if (options.allDay === true) {\n                    instanceRange = computeAlignedDayRange(instanceRange);\n                }\n                var startDelta = diffDates(instanceRange.start, start, dateEnv, options.granularity);\n                if (end) {\n                    var endDelta = diffDates(instanceRange.end, end, dateEnv, options.granularity);\n                    if (durationsEqual(startDelta, endDelta)) {\n                        this.mutate({ datesDelta: startDelta, standardProps: standardProps });\n                    }\n                    else {\n                        this.mutate({ startDelta: startDelta, endDelta: endDelta, standardProps: standardProps });\n                    }\n                }\n                else { // means \"clear the end\"\n                    standardProps.hasEnd = false;\n                    this.mutate({ datesDelta: startDelta, standardProps: standardProps });\n                }\n            }\n        };\n        EventApi.prototype.moveStart = function (deltaInput) {\n            var delta = createDuration(deltaInput);\n            if (delta) { // TODO: warning if parsed bad\n                this.mutate({ startDelta: delta });\n            }\n        };\n        EventApi.prototype.moveEnd = function (deltaInput) {\n            var delta = createDuration(deltaInput);\n            if (delta) { // TODO: warning if parsed bad\n                this.mutate({ endDelta: delta });\n            }\n        };\n        EventApi.prototype.moveDates = function (deltaInput) {\n            var delta = createDuration(deltaInput);\n            if (delta) { // TODO: warning if parsed bad\n                this.mutate({ datesDelta: delta });\n            }\n        };\n        EventApi.prototype.setAllDay = function (allDay, options) {\n            if (options === void 0) { options = {}; }\n            var standardProps = { allDay: allDay };\n            var maintainDuration = options.maintainDuration;\n            if (maintainDuration == null) {\n                maintainDuration = this._calendar.opt('allDayMaintainDuration');\n            }\n            if (this._def.allDay !== allDay) {\n                standardProps.hasEnd = maintainDuration;\n            }\n            this.mutate({ standardProps: standardProps });\n        };\n        EventApi.prototype.formatRange = function (formatInput) {\n            var dateEnv = this._calendar.dateEnv;\n            var instance = this._instance;\n            var formatter = createFormatter(formatInput, this._calendar.opt('defaultRangeSeparator'));\n            if (this._def.hasEnd) {\n                return dateEnv.formatRange(instance.range.start, instance.range.end, formatter, {\n                    forcedStartTzo: instance.forcedStartTzo,\n                    forcedEndTzo: instance.forcedEndTzo\n                });\n            }\n            else {\n                return dateEnv.format(instance.range.start, formatter, {\n                    forcedTzo: instance.forcedStartTzo\n                });\n            }\n        };\n        EventApi.prototype.mutate = function (mutation) {\n            var def = this._def;\n            var instance = this._instance;\n            if (instance) {\n                this._calendar.dispatch({\n                    type: 'MUTATE_EVENTS',\n                    instanceId: instance.instanceId,\n                    mutation: mutation,\n                    fromApi: true\n                });\n                var eventStore = this._calendar.state.eventStore;\n                this._def = eventStore.defs[def.defId];\n                this._instance = eventStore.instances[instance.instanceId];\n            }\n        };\n        EventApi.prototype.remove = function () {\n            this._calendar.dispatch({\n                type: 'REMOVE_EVENT_DEF',\n                defId: this._def.defId\n            });\n        };\n        Object.defineProperty(EventApi.prototype, \"source\", {\n            get: function () {\n                var sourceId = this._def.sourceId;\n                if (sourceId) {\n                    return new EventSourceApi(this._calendar, this._calendar.state.eventSources[sourceId]);\n                }\n                return null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EventApi.prototype, \"start\", {\n            get: function () {\n                return this._instance ?\n                    this._calendar.dateEnv.toDate(this._instance.range.start) :\n                    null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EventApi.prototype, \"end\", {\n            get: function () {\n                return (this._instance && this._def.hasEnd) ?\n                    this._calendar.dateEnv.toDate(this._instance.range.end) :\n                    null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EventApi.prototype, \"id\", {\n            // computable props that all access the def\n            // TODO: find a TypeScript-compatible way to do this at scale\n            get: function () { return this._def.publicId; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EventApi.prototype, \"groupId\", {\n            get: function () { return this._def.groupId; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EventApi.prototype, \"allDay\", {\n            get: function () { return this._def.allDay; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EventApi.prototype, \"title\", {\n            get: function () { return this._def.title; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EventApi.prototype, \"url\", {\n            get: function () { return this._def.url; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EventApi.prototype, \"rendering\", {\n            get: function () { return this._def.rendering; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EventApi.prototype, \"startEditable\", {\n            get: function () { return this._def.ui.startEditable; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EventApi.prototype, \"durationEditable\", {\n            get: function () { return this._def.ui.durationEditable; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EventApi.prototype, \"constraint\", {\n            get: function () { return this._def.ui.constraints[0] || null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EventApi.prototype, \"overlap\", {\n            get: function () { return this._def.ui.overlap; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EventApi.prototype, \"allow\", {\n            get: function () { return this._def.ui.allows[0] || null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EventApi.prototype, \"backgroundColor\", {\n            get: function () { return this._def.ui.backgroundColor; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EventApi.prototype, \"borderColor\", {\n            get: function () { return this._def.ui.borderColor; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EventApi.prototype, \"textColor\", {\n            get: function () { return this._def.ui.textColor; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EventApi.prototype, \"classNames\", {\n            // NOTE: user can't modify these because Object.freeze was called in event-def parsing\n            get: function () { return this._def.ui.classNames; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EventApi.prototype, \"extendedProps\", {\n            get: function () { return this._def.extendedProps; },\n            enumerable: true,\n            configurable: true\n        });\n        return EventApi;\n    }());\n\n    /*\n    Specifying nextDayThreshold signals that all-day ranges should be sliced.\n    */\n    function sliceEventStore(eventStore, eventUiBases, framingRange, nextDayThreshold) {\n        var inverseBgByGroupId = {};\n        var inverseBgByDefId = {};\n        var defByGroupId = {};\n        var bgRanges = [];\n        var fgRanges = [];\n        var eventUis = compileEventUis(eventStore.defs, eventUiBases);\n        for (var defId in eventStore.defs) {\n            var def = eventStore.defs[defId];\n            if (def.rendering === 'inverse-background') {\n                if (def.groupId) {\n                    inverseBgByGroupId[def.groupId] = [];\n                    if (!defByGroupId[def.groupId]) {\n                        defByGroupId[def.groupId] = def;\n                    }\n                }\n                else {\n                    inverseBgByDefId[defId] = [];\n                }\n            }\n        }\n        for (var instanceId in eventStore.instances) {\n            var instance = eventStore.instances[instanceId];\n            var def = eventStore.defs[instance.defId];\n            var ui = eventUis[def.defId];\n            var origRange = instance.range;\n            var normalRange = (!def.allDay && nextDayThreshold) ?\n                computeVisibleDayRange(origRange, nextDayThreshold) :\n                origRange;\n            var slicedRange = intersectRanges(normalRange, framingRange);\n            if (slicedRange) {\n                if (def.rendering === 'inverse-background') {\n                    if (def.groupId) {\n                        inverseBgByGroupId[def.groupId].push(slicedRange);\n                    }\n                    else {\n                        inverseBgByDefId[instance.defId].push(slicedRange);\n                    }\n                }\n                else {\n                    (def.rendering === 'background' ? bgRanges : fgRanges).push({\n                        def: def,\n                        ui: ui,\n                        instance: instance,\n                        range: slicedRange,\n                        isStart: normalRange.start && normalRange.start.valueOf() === slicedRange.start.valueOf(),\n                        isEnd: normalRange.end && normalRange.end.valueOf() === slicedRange.end.valueOf()\n                    });\n                }\n            }\n        }\n        for (var groupId in inverseBgByGroupId) { // BY GROUP\n            var ranges = inverseBgByGroupId[groupId];\n            var invertedRanges = invertRanges(ranges, framingRange);\n            for (var _i = 0, invertedRanges_1 = invertedRanges; _i < invertedRanges_1.length; _i++) {\n                var invertedRange = invertedRanges_1[_i];\n                var def = defByGroupId[groupId];\n                var ui = eventUis[def.defId];\n                bgRanges.push({\n                    def: def,\n                    ui: ui,\n                    instance: null,\n                    range: invertedRange,\n                    isStart: false,\n                    isEnd: false\n                });\n            }\n        }\n        for (var defId in inverseBgByDefId) {\n            var ranges = inverseBgByDefId[defId];\n            var invertedRanges = invertRanges(ranges, framingRange);\n            for (var _a = 0, invertedRanges_2 = invertedRanges; _a < invertedRanges_2.length; _a++) {\n                var invertedRange = invertedRanges_2[_a];\n                bgRanges.push({\n                    def: eventStore.defs[defId],\n                    ui: eventUis[defId],\n                    instance: null,\n                    range: invertedRange,\n                    isStart: false,\n                    isEnd: false\n                });\n            }\n        }\n        return { bg: bgRanges, fg: fgRanges };\n    }\n    function hasBgRendering(def) {\n        return def.rendering === 'background' || def.rendering === 'inverse-background';\n    }\n    function filterSegsViaEls(context, segs, isMirror) {\n        var calendar = context.calendar, view = context.view;\n        if (calendar.hasPublicHandlers('eventRender')) {\n            segs = segs.filter(function (seg) {\n                var custom = calendar.publiclyTrigger('eventRender', [\n                    {\n                        event: new EventApi(calendar, seg.eventRange.def, seg.eventRange.instance),\n                        isMirror: isMirror,\n                        isStart: seg.isStart,\n                        isEnd: seg.isEnd,\n                        // TODO: include seg.range once all components consistently generate it\n                        el: seg.el,\n                        view: view\n                    }\n                ]);\n                if (custom === false) { // means don't render at all\n                    return false;\n                }\n                else if (custom && custom !== true) {\n                    seg.el = custom;\n                }\n                return true;\n            });\n        }\n        for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n            var seg = segs_1[_i];\n            setElSeg(seg.el, seg);\n        }\n        return segs;\n    }\n    function setElSeg(el, seg) {\n        el.fcSeg = seg;\n    }\n    function getElSeg(el) {\n        return el.fcSeg || null;\n    }\n    // event ui computation\n    function compileEventUis(eventDefs, eventUiBases) {\n        return mapHash(eventDefs, function (eventDef) {\n            return compileEventUi(eventDef, eventUiBases);\n        });\n    }\n    function compileEventUi(eventDef, eventUiBases) {\n        var uis = [];\n        if (eventUiBases['']) {\n            uis.push(eventUiBases['']);\n        }\n        if (eventUiBases[eventDef.defId]) {\n            uis.push(eventUiBases[eventDef.defId]);\n        }\n        uis.push(eventDef.ui);\n        return combineEventUis(uis);\n    }\n    // triggers\n    function triggerRenderedSegs(context, segs, isMirrors) {\n        var calendar = context.calendar, view = context.view;\n        if (calendar.hasPublicHandlers('eventPositioned')) {\n            for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {\n                var seg = segs_2[_i];\n                calendar.publiclyTriggerAfterSizing('eventPositioned', [\n                    {\n                        event: new EventApi(calendar, seg.eventRange.def, seg.eventRange.instance),\n                        isMirror: isMirrors,\n                        isStart: seg.isStart,\n                        isEnd: seg.isEnd,\n                        el: seg.el,\n                        view: view\n                    }\n                ]);\n            }\n        }\n        if (!calendar.state.eventSourceLoadingLevel) { // avoid initial empty state while pending\n            calendar.afterSizingTriggers._eventsPositioned = [null]; // fire once\n        }\n    }\n    function triggerWillRemoveSegs(context, segs, isMirrors) {\n        var calendar = context.calendar, view = context.view;\n        for (var _i = 0, segs_3 = segs; _i < segs_3.length; _i++) {\n            var seg = segs_3[_i];\n            calendar.trigger('eventElRemove', seg.el);\n        }\n        if (calendar.hasPublicHandlers('eventDestroy')) {\n            for (var _a = 0, segs_4 = segs; _a < segs_4.length; _a++) {\n                var seg = segs_4[_a];\n                calendar.publiclyTrigger('eventDestroy', [\n                    {\n                        event: new EventApi(calendar, seg.eventRange.def, seg.eventRange.instance),\n                        isMirror: isMirrors,\n                        el: seg.el,\n                        view: view\n                    }\n                ]);\n            }\n        }\n    }\n    // is-interactable\n    function computeEventDraggable(context, eventDef, eventUi) {\n        var calendar = context.calendar, view = context.view;\n        var transformers = calendar.pluginSystem.hooks.isDraggableTransformers;\n        var val = eventUi.startEditable;\n        for (var _i = 0, transformers_1 = transformers; _i < transformers_1.length; _i++) {\n            var transformer = transformers_1[_i];\n            val = transformer(val, eventDef, eventUi, view);\n        }\n        return val;\n    }\n    function computeEventStartResizable(context, eventDef, eventUi) {\n        return eventUi.durationEditable && context.options.eventResizableFromStart;\n    }\n    function computeEventEndResizable(context, eventDef, eventUi) {\n        return eventUi.durationEditable;\n    }\n\n    // applies the mutation to ALL defs/instances within the event store\n    function applyMutationToEventStore(eventStore, eventConfigBase, mutation, calendar) {\n        var eventConfigs = compileEventUis(eventStore.defs, eventConfigBase);\n        var dest = createEmptyEventStore();\n        for (var defId in eventStore.defs) {\n            var def = eventStore.defs[defId];\n            dest.defs[defId] = applyMutationToEventDef(def, eventConfigs[defId], mutation, calendar.pluginSystem.hooks.eventDefMutationAppliers, calendar);\n        }\n        for (var instanceId in eventStore.instances) {\n            var instance = eventStore.instances[instanceId];\n            var def = dest.defs[instance.defId]; // important to grab the newly modified def\n            dest.instances[instanceId] = applyMutationToEventInstance(instance, def, eventConfigs[instance.defId], mutation, calendar);\n        }\n        return dest;\n    }\n    function applyMutationToEventDef(eventDef, eventConfig, mutation, appliers, calendar) {\n        var standardProps = mutation.standardProps || {};\n        // if hasEnd has not been specified, guess a good value based on deltas.\n        // if duration will change, there's no way the default duration will persist,\n        // and thus, we need to mark the event as having a real end\n        if (standardProps.hasEnd == null &&\n            eventConfig.durationEditable &&\n            (mutation.startDelta || mutation.endDelta)) {\n            standardProps.hasEnd = true; // TODO: is this mutation okay?\n        }\n        var copy = __assign({}, eventDef, standardProps, { ui: __assign({}, eventDef.ui, standardProps.ui) });\n        if (mutation.extendedProps) {\n            copy.extendedProps = __assign({}, copy.extendedProps, mutation.extendedProps);\n        }\n        for (var _i = 0, appliers_1 = appliers; _i < appliers_1.length; _i++) {\n            var applier = appliers_1[_i];\n            applier(copy, mutation, calendar);\n        }\n        if (!copy.hasEnd && calendar.opt('forceEventDuration')) {\n            copy.hasEnd = true;\n        }\n        return copy;\n    }\n    function applyMutationToEventInstance(eventInstance, eventDef, // must first be modified by applyMutationToEventDef\n    eventConfig, mutation, calendar) {\n        var dateEnv = calendar.dateEnv;\n        var forceAllDay = mutation.standardProps && mutation.standardProps.allDay === true;\n        var clearEnd = mutation.standardProps && mutation.standardProps.hasEnd === false;\n        var copy = __assign({}, eventInstance);\n        if (forceAllDay) {\n            copy.range = computeAlignedDayRange(copy.range);\n        }\n        if (mutation.datesDelta && eventConfig.startEditable) {\n            copy.range = {\n                start: dateEnv.add(copy.range.start, mutation.datesDelta),\n                end: dateEnv.add(copy.range.end, mutation.datesDelta)\n            };\n        }\n        if (mutation.startDelta && eventConfig.durationEditable) {\n            copy.range = {\n                start: dateEnv.add(copy.range.start, mutation.startDelta),\n                end: copy.range.end\n            };\n        }\n        if (mutation.endDelta && eventConfig.durationEditable) {\n            copy.range = {\n                start: copy.range.start,\n                end: dateEnv.add(copy.range.end, mutation.endDelta)\n            };\n        }\n        if (clearEnd) {\n            copy.range = {\n                start: copy.range.start,\n                end: calendar.getDefaultEventEnd(eventDef.allDay, copy.range.start)\n            };\n        }\n        // in case event was all-day but the supplied deltas were not\n        // better util for this?\n        if (eventDef.allDay) {\n            copy.range = {\n                start: startOfDay(copy.range.start),\n                end: startOfDay(copy.range.end)\n            };\n        }\n        // handle invalid durations\n        if (copy.range.end < copy.range.start) {\n            copy.range.end = calendar.getDefaultEventEnd(eventDef.allDay, copy.range.start);\n        }\n        return copy;\n    }\n\n    function reduceEventStore (eventStore, action, eventSources, dateProfile, calendar) {\n        switch (action.type) {\n            case 'RECEIVE_EVENTS': // raw\n                return receiveRawEvents(eventStore, eventSources[action.sourceId], action.fetchId, action.fetchRange, action.rawEvents, calendar);\n            case 'ADD_EVENTS': // already parsed, but not expanded\n                return addEvent(eventStore, action.eventStore, // new ones\n                dateProfile ? dateProfile.activeRange : null, calendar);\n            case 'MERGE_EVENTS': // already parsed and expanded\n                return mergeEventStores(eventStore, action.eventStore);\n            case 'PREV': // TODO: how do we track all actions that affect dateProfile :(\n            case 'NEXT':\n            case 'SET_DATE':\n            case 'SET_VIEW_TYPE':\n                if (dateProfile) {\n                    return expandRecurring(eventStore, dateProfile.activeRange, calendar);\n                }\n                else {\n                    return eventStore;\n                }\n            case 'CHANGE_TIMEZONE':\n                return rezoneDates(eventStore, action.oldDateEnv, calendar.dateEnv);\n            case 'MUTATE_EVENTS':\n                return applyMutationToRelated(eventStore, action.instanceId, action.mutation, action.fromApi, calendar);\n            case 'REMOVE_EVENT_INSTANCES':\n                return excludeInstances(eventStore, action.instances);\n            case 'REMOVE_EVENT_DEF':\n                return filterEventStoreDefs(eventStore, function (eventDef) {\n                    return eventDef.defId !== action.defId;\n                });\n            case 'REMOVE_EVENT_SOURCE':\n                return excludeEventsBySourceId(eventStore, action.sourceId);\n            case 'REMOVE_ALL_EVENT_SOURCES':\n                return filterEventStoreDefs(eventStore, function (eventDef) {\n                    return !eventDef.sourceId; // only keep events with no source id\n                });\n            case 'REMOVE_ALL_EVENTS':\n                return createEmptyEventStore();\n            case 'RESET_EVENTS':\n                return {\n                    defs: eventStore.defs,\n                    instances: eventStore.instances\n                };\n            default:\n                return eventStore;\n        }\n    }\n    function receiveRawEvents(eventStore, eventSource, fetchId, fetchRange, rawEvents, calendar) {\n        if (eventSource && // not already removed\n            fetchId === eventSource.latestFetchId // TODO: wish this logic was always in event-sources\n        ) {\n            var subset = parseEvents(transformRawEvents(rawEvents, eventSource, calendar), eventSource.sourceId, calendar);\n            if (fetchRange) {\n                subset = expandRecurring(subset, fetchRange, calendar);\n            }\n            return mergeEventStores(excludeEventsBySourceId(eventStore, eventSource.sourceId), subset);\n        }\n        return eventStore;\n    }\n    function addEvent(eventStore, subset, expandRange, calendar) {\n        if (expandRange) {\n            subset = expandRecurring(subset, expandRange, calendar);\n        }\n        return mergeEventStores(eventStore, subset);\n    }\n    function rezoneDates(eventStore, oldDateEnv, newDateEnv) {\n        var defs = eventStore.defs;\n        var instances = mapHash(eventStore.instances, function (instance) {\n            var def = defs[instance.defId];\n            if (def.allDay || def.recurringDef) {\n                return instance; // isn't dependent on timezone\n            }\n            else {\n                return __assign({}, instance, { range: {\n                        start: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.start, instance.forcedStartTzo)),\n                        end: newDateEnv.createMarker(oldDateEnv.toDate(instance.range.end, instance.forcedEndTzo))\n                    }, forcedStartTzo: newDateEnv.canComputeOffset ? null : instance.forcedStartTzo, forcedEndTzo: newDateEnv.canComputeOffset ? null : instance.forcedEndTzo });\n            }\n        });\n        return { defs: defs, instances: instances };\n    }\n    function applyMutationToRelated(eventStore, instanceId, mutation, fromApi, calendar) {\n        var relevant = getRelevantEvents(eventStore, instanceId);\n        var eventConfigBase = fromApi ?\n            { '': {\n                    startEditable: true,\n                    durationEditable: true,\n                    constraints: [],\n                    overlap: null,\n                    allows: [],\n                    backgroundColor: '',\n                    borderColor: '',\n                    textColor: '',\n                    classNames: []\n                } } :\n            calendar.eventUiBases;\n        relevant = applyMutationToEventStore(relevant, eventConfigBase, mutation, calendar);\n        return mergeEventStores(eventStore, relevant);\n    }\n    function excludeEventsBySourceId(eventStore, sourceId) {\n        return filterEventStoreDefs(eventStore, function (eventDef) {\n            return eventDef.sourceId !== sourceId;\n        });\n    }\n    // QUESTION: why not just return instances? do a general object-property-exclusion util\n    function excludeInstances(eventStore, removals) {\n        return {\n            defs: eventStore.defs,\n            instances: filterHash(eventStore.instances, function (instance) {\n                return !removals[instance.instanceId];\n            })\n        };\n    }\n\n    // high-level segmenting-aware tester functions\n    // ------------------------------------------------------------------------------------------------------------------------\n    function isInteractionValid(interaction, calendar) {\n        return isNewPropsValid({ eventDrag: interaction }, calendar); // HACK: the eventDrag props is used for ALL interactions\n    }\n    function isDateSelectionValid(dateSelection, calendar) {\n        return isNewPropsValid({ dateSelection: dateSelection }, calendar);\n    }\n    function isNewPropsValid(newProps, calendar) {\n        var view = calendar.view;\n        var props = __assign({ businessHours: view ? view.props.businessHours : createEmptyEventStore(), dateSelection: '', eventStore: calendar.state.eventStore, eventUiBases: calendar.eventUiBases, eventSelection: '', eventDrag: null, eventResize: null }, newProps);\n        return (calendar.pluginSystem.hooks.isPropsValid || isPropsValid)(props, calendar);\n    }\n    function isPropsValid(state, calendar, dateSpanMeta, filterConfig) {\n        if (dateSpanMeta === void 0) { dateSpanMeta = {}; }\n        if (state.eventDrag && !isInteractionPropsValid(state, calendar, dateSpanMeta, filterConfig)) {\n            return false;\n        }\n        if (state.dateSelection && !isDateSelectionPropsValid(state, calendar, dateSpanMeta, filterConfig)) {\n            return false;\n        }\n        return true;\n    }\n    // Moving Event Validation\n    // ------------------------------------------------------------------------------------------------------------------------\n    function isInteractionPropsValid(state, calendar, dateSpanMeta, filterConfig) {\n        var interaction = state.eventDrag; // HACK: the eventDrag props is used for ALL interactions\n        var subjectEventStore = interaction.mutatedEvents;\n        var subjectDefs = subjectEventStore.defs;\n        var subjectInstances = subjectEventStore.instances;\n        var subjectConfigs = compileEventUis(subjectDefs, interaction.isEvent ?\n            state.eventUiBases :\n            { '': calendar.selectionConfig } // if not a real event, validate as a selection\n        );\n        if (filterConfig) {\n            subjectConfigs = mapHash(subjectConfigs, filterConfig);\n        }\n        var otherEventStore = excludeInstances(state.eventStore, interaction.affectedEvents.instances); // exclude the subject events. TODO: exclude defs too?\n        var otherDefs = otherEventStore.defs;\n        var otherInstances = otherEventStore.instances;\n        var otherConfigs = compileEventUis(otherDefs, state.eventUiBases);\n        for (var subjectInstanceId in subjectInstances) {\n            var subjectInstance = subjectInstances[subjectInstanceId];\n            var subjectRange = subjectInstance.range;\n            var subjectConfig = subjectConfigs[subjectInstance.defId];\n            var subjectDef = subjectDefs[subjectInstance.defId];\n            // constraint\n            if (!allConstraintsPass(subjectConfig.constraints, subjectRange, otherEventStore, state.businessHours, calendar)) {\n                return false;\n            }\n            // overlap\n            var overlapFunc = calendar.opt('eventOverlap');\n            if (typeof overlapFunc !== 'function') {\n                overlapFunc = null;\n            }\n            for (var otherInstanceId in otherInstances) {\n                var otherInstance = otherInstances[otherInstanceId];\n                // intersect! evaluate\n                if (rangesIntersect(subjectRange, otherInstance.range)) {\n                    var otherOverlap = otherConfigs[otherInstance.defId].overlap;\n                    // consider the other event's overlap. only do this if the subject event is a \"real\" event\n                    if (otherOverlap === false && interaction.isEvent) {\n                        return false;\n                    }\n                    if (subjectConfig.overlap === false) {\n                        return false;\n                    }\n                    if (overlapFunc && !overlapFunc(new EventApi(calendar, otherDefs[otherInstance.defId], otherInstance), // still event\n                    new EventApi(calendar, subjectDef, subjectInstance) // moving event\n                    )) {\n                        return false;\n                    }\n                }\n            }\n            // allow (a function)\n            var calendarEventStore = calendar.state.eventStore; // need global-to-calendar, not local to component (splittable)state\n            for (var _i = 0, _a = subjectConfig.allows; _i < _a.length; _i++) {\n                var subjectAllow = _a[_i];\n                var subjectDateSpan = __assign({}, dateSpanMeta, { range: subjectInstance.range, allDay: subjectDef.allDay });\n                var origDef = calendarEventStore.defs[subjectDef.defId];\n                var origInstance = calendarEventStore.instances[subjectInstanceId];\n                var eventApi = void 0;\n                if (origDef) { // was previously in the calendar\n                    eventApi = new EventApi(calendar, origDef, origInstance);\n                }\n                else { // was an external event\n                    eventApi = new EventApi(calendar, subjectDef); // no instance, because had no dates\n                }\n                if (!subjectAllow(calendar.buildDateSpanApi(subjectDateSpan), eventApi)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    // Date Selection Validation\n    // ------------------------------------------------------------------------------------------------------------------------\n    function isDateSelectionPropsValid(state, calendar, dateSpanMeta, filterConfig) {\n        var relevantEventStore = state.eventStore;\n        var relevantDefs = relevantEventStore.defs;\n        var relevantInstances = relevantEventStore.instances;\n        var selection = state.dateSelection;\n        var selectionRange = selection.range;\n        var selectionConfig = calendar.selectionConfig;\n        if (filterConfig) {\n            selectionConfig = filterConfig(selectionConfig);\n        }\n        // constraint\n        if (!allConstraintsPass(selectionConfig.constraints, selectionRange, relevantEventStore, state.businessHours, calendar)) {\n            return false;\n        }\n        // overlap\n        var overlapFunc = calendar.opt('selectOverlap');\n        if (typeof overlapFunc !== 'function') {\n            overlapFunc = null;\n        }\n        for (var relevantInstanceId in relevantInstances) {\n            var relevantInstance = relevantInstances[relevantInstanceId];\n            // intersect! evaluate\n            if (rangesIntersect(selectionRange, relevantInstance.range)) {\n                if (selectionConfig.overlap === false) {\n                    return false;\n                }\n                if (overlapFunc && !overlapFunc(new EventApi(calendar, relevantDefs[relevantInstance.defId], relevantInstance))) {\n                    return false;\n                }\n            }\n        }\n        // allow (a function)\n        for (var _i = 0, _a = selectionConfig.allows; _i < _a.length; _i++) {\n            var selectionAllow = _a[_i];\n            var fullDateSpan = __assign({}, dateSpanMeta, selection);\n            if (!selectionAllow(calendar.buildDateSpanApi(fullDateSpan), null)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    // Constraint Utils\n    // ------------------------------------------------------------------------------------------------------------------------\n    function allConstraintsPass(constraints, subjectRange, otherEventStore, businessHoursUnexpanded, calendar) {\n        for (var _i = 0, constraints_1 = constraints; _i < constraints_1.length; _i++) {\n            var constraint = constraints_1[_i];\n            if (!anyRangesContainRange(constraintToRanges(constraint, subjectRange, otherEventStore, businessHoursUnexpanded, calendar), subjectRange)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function constraintToRanges(constraint, subjectRange, // for expanding a recurring constraint, or expanding business hours\n    otherEventStore, // for if constraint is an even group ID\n    businessHoursUnexpanded, // for if constraint is 'businessHours'\n    calendar // for expanding businesshours\n    ) {\n        if (constraint === 'businessHours') {\n            return eventStoreToRanges(expandRecurring(businessHoursUnexpanded, subjectRange, calendar));\n        }\n        else if (typeof constraint === 'string') { // an group ID\n            return eventStoreToRanges(filterEventStoreDefs(otherEventStore, function (eventDef) {\n                return eventDef.groupId === constraint;\n            }));\n        }\n        else if (typeof constraint === 'object' && constraint) { // non-null object\n            return eventStoreToRanges(expandRecurring(constraint, subjectRange, calendar));\n        }\n        return []; // if it's false\n    }\n    // TODO: move to event-store file?\n    function eventStoreToRanges(eventStore) {\n        var instances = eventStore.instances;\n        var ranges = [];\n        for (var instanceId in instances) {\n            ranges.push(instances[instanceId].range);\n        }\n        return ranges;\n    }\n    // TODO: move to geom file?\n    function anyRangesContainRange(outerRanges, innerRange) {\n        for (var _i = 0, outerRanges_1 = outerRanges; _i < outerRanges_1.length; _i++) {\n            var outerRange = outerRanges_1[_i];\n            if (rangeContainsRange(outerRange, innerRange)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    // Parsing\n    // ------------------------------------------------------------------------------------------------------------------------\n    function normalizeConstraint(input, calendar) {\n        if (Array.isArray(input)) {\n            return parseEvents(input, '', calendar, true); // allowOpenRange=true\n        }\n        else if (typeof input === 'object' && input) { // non-null object\n            return parseEvents([input], '', calendar, true); // allowOpenRange=true\n        }\n        else if (input != null) {\n            return String(input);\n        }\n        else {\n            return null;\n        }\n    }\n\n    function htmlEscape(s) {\n        return (s + '').replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n            .replace(/'/g, '&#039;')\n            .replace(/\"/g, '&quot;')\n            .replace(/\\n/g, '<br />');\n    }\n    // Given a hash of CSS properties, returns a string of CSS.\n    // Uses property names as-is (no camel-case conversion). Will not make statements for null/undefined values.\n    function cssToStr(cssProps) {\n        var statements = [];\n        for (var name_1 in cssProps) {\n            var val = cssProps[name_1];\n            if (val != null && val !== '') {\n                statements.push(name_1 + ':' + val);\n            }\n        }\n        return statements.join(';');\n    }\n    // Given an object hash of HTML attribute names to values,\n    // generates a string that can be injected between < > in HTML\n    function attrsToStr(attrs) {\n        var parts = [];\n        for (var name_2 in attrs) {\n            var val = attrs[name_2];\n            if (val != null) {\n                parts.push(name_2 + '=\"' + htmlEscape(val) + '\"');\n            }\n        }\n        return parts.join(' ');\n    }\n    function parseClassName(raw) {\n        if (Array.isArray(raw)) {\n            return raw;\n        }\n        else if (typeof raw === 'string') {\n            return raw.split(/\\s+/);\n        }\n        else {\n            return [];\n        }\n    }\n\n    var UNSCOPED_EVENT_UI_PROPS = {\n        editable: Boolean,\n        startEditable: Boolean,\n        durationEditable: Boolean,\n        constraint: null,\n        overlap: null,\n        allow: null,\n        className: parseClassName,\n        classNames: parseClassName,\n        color: String,\n        backgroundColor: String,\n        borderColor: String,\n        textColor: String\n    };\n    function processUnscopedUiProps(rawProps, calendar, leftovers) {\n        var props = refineProps(rawProps, UNSCOPED_EVENT_UI_PROPS, {}, leftovers);\n        var constraint = normalizeConstraint(props.constraint, calendar);\n        return {\n            startEditable: props.startEditable != null ? props.startEditable : props.editable,\n            durationEditable: props.durationEditable != null ? props.durationEditable : props.editable,\n            constraints: constraint != null ? [constraint] : [],\n            overlap: props.overlap,\n            allows: props.allow != null ? [props.allow] : [],\n            backgroundColor: props.backgroundColor || props.color,\n            borderColor: props.borderColor || props.color,\n            textColor: props.textColor,\n            classNames: props.classNames.concat(props.className)\n        };\n    }\n    function processScopedUiProps(prefix, rawScoped, calendar, leftovers) {\n        var rawUnscoped = {};\n        var wasFound = {};\n        for (var key in UNSCOPED_EVENT_UI_PROPS) {\n            var scopedKey = prefix + capitaliseFirstLetter(key);\n            rawUnscoped[key] = rawScoped[scopedKey];\n            wasFound[scopedKey] = true;\n        }\n        if (prefix === 'event') {\n            rawUnscoped.editable = rawScoped.editable; // special case. there is no 'eventEditable', just 'editable'\n        }\n        if (leftovers) {\n            for (var key in rawScoped) {\n                if (!wasFound[key]) {\n                    leftovers[key] = rawScoped[key];\n                }\n            }\n        }\n        return processUnscopedUiProps(rawUnscoped, calendar);\n    }\n    var EMPTY_EVENT_UI = {\n        startEditable: null,\n        durationEditable: null,\n        constraints: [],\n        overlap: null,\n        allows: [],\n        backgroundColor: '',\n        borderColor: '',\n        textColor: '',\n        classNames: []\n    };\n    // prevent against problems with <2 args!\n    function combineEventUis(uis) {\n        return uis.reduce(combineTwoEventUis, EMPTY_EVENT_UI);\n    }\n    function combineTwoEventUis(item0, item1) {\n        return {\n            startEditable: item1.startEditable != null ? item1.startEditable : item0.startEditable,\n            durationEditable: item1.durationEditable != null ? item1.durationEditable : item0.durationEditable,\n            constraints: item0.constraints.concat(item1.constraints),\n            overlap: typeof item1.overlap === 'boolean' ? item1.overlap : item0.overlap,\n            allows: item0.allows.concat(item1.allows),\n            backgroundColor: item1.backgroundColor || item0.backgroundColor,\n            borderColor: item1.borderColor || item0.borderColor,\n            textColor: item1.textColor || item0.textColor,\n            classNames: item0.classNames.concat(item1.classNames)\n        };\n    }\n\n    var NON_DATE_PROPS = {\n        id: String,\n        groupId: String,\n        title: String,\n        url: String,\n        rendering: String,\n        extendedProps: null\n    };\n    var DATE_PROPS = {\n        start: null,\n        date: null,\n        end: null,\n        allDay: null\n    };\n    var uid = 0;\n    function parseEvent(raw, sourceId, calendar, allowOpenRange) {\n        var allDayDefault = computeIsAllDayDefault(sourceId, calendar);\n        var leftovers0 = {};\n        var recurringRes = parseRecurring(raw, // raw, but with single-event stuff stripped out\n        allDayDefault, calendar.dateEnv, calendar.pluginSystem.hooks.recurringTypes, leftovers0 // will populate with non-recurring props\n        );\n        if (recurringRes) {\n            var def = parseEventDef(leftovers0, sourceId, recurringRes.allDay, Boolean(recurringRes.duration), calendar);\n            def.recurringDef = {\n                typeId: recurringRes.typeId,\n                typeData: recurringRes.typeData,\n                duration: recurringRes.duration\n            };\n            return { def: def, instance: null };\n        }\n        else {\n            var leftovers1 = {};\n            var singleRes = parseSingle(raw, allDayDefault, calendar, leftovers1, allowOpenRange);\n            if (singleRes) {\n                var def = parseEventDef(leftovers1, sourceId, singleRes.allDay, singleRes.hasEnd, calendar);\n                var instance = createEventInstance(def.defId, singleRes.range, singleRes.forcedStartTzo, singleRes.forcedEndTzo);\n                return { def: def, instance: instance };\n            }\n        }\n        return null;\n    }\n    /*\n    Will NOT populate extendedProps with the leftover properties.\n    Will NOT populate date-related props.\n    The EventNonDateInput has been normalized (id => publicId, etc).\n    */\n    function parseEventDef(raw, sourceId, allDay, hasEnd, calendar) {\n        var leftovers = {};\n        var def = pluckNonDateProps(raw, calendar, leftovers);\n        def.defId = String(uid++);\n        def.sourceId = sourceId;\n        def.allDay = allDay;\n        def.hasEnd = hasEnd;\n        for (var _i = 0, _a = calendar.pluginSystem.hooks.eventDefParsers; _i < _a.length; _i++) {\n            var eventDefParser = _a[_i];\n            var newLeftovers = {};\n            eventDefParser(def, leftovers, newLeftovers);\n            leftovers = newLeftovers;\n        }\n        def.extendedProps = __assign(leftovers, def.extendedProps || {});\n        // help out EventApi from having user modify props\n        Object.freeze(def.ui.classNames);\n        Object.freeze(def.extendedProps);\n        return def;\n    }\n    function createEventInstance(defId, range, forcedStartTzo, forcedEndTzo) {\n        return {\n            instanceId: String(uid++),\n            defId: defId,\n            range: range,\n            forcedStartTzo: forcedStartTzo == null ? null : forcedStartTzo,\n            forcedEndTzo: forcedEndTzo == null ? null : forcedEndTzo\n        };\n    }\n    function parseSingle(raw, allDayDefault, calendar, leftovers, allowOpenRange) {\n        var props = pluckDateProps(raw, leftovers);\n        var allDay = props.allDay;\n        var startMeta;\n        var startMarker = null;\n        var hasEnd = false;\n        var endMeta;\n        var endMarker = null;\n        startMeta = calendar.dateEnv.createMarkerMeta(props.start);\n        if (startMeta) {\n            startMarker = startMeta.marker;\n        }\n        else if (!allowOpenRange) {\n            return null;\n        }\n        if (props.end != null) {\n            endMeta = calendar.dateEnv.createMarkerMeta(props.end);\n        }\n        if (allDay == null) {\n            if (allDayDefault != null) {\n                allDay = allDayDefault;\n            }\n            else {\n                // fall back to the date props LAST\n                allDay = (!startMeta || startMeta.isTimeUnspecified) &&\n                    (!endMeta || endMeta.isTimeUnspecified);\n            }\n        }\n        if (allDay && startMarker) {\n            startMarker = startOfDay(startMarker);\n        }\n        if (endMeta) {\n            endMarker = endMeta.marker;\n            if (allDay) {\n                endMarker = startOfDay(endMarker);\n            }\n            if (startMarker && endMarker <= startMarker) {\n                endMarker = null;\n            }\n        }\n        if (endMarker) {\n            hasEnd = true;\n        }\n        else if (!allowOpenRange) {\n            hasEnd = calendar.opt('forceEventDuration') || false;\n            endMarker = calendar.dateEnv.add(startMarker, allDay ?\n                calendar.defaultAllDayEventDuration :\n                calendar.defaultTimedEventDuration);\n        }\n        return {\n            allDay: allDay,\n            hasEnd: hasEnd,\n            range: { start: startMarker, end: endMarker },\n            forcedStartTzo: startMeta ? startMeta.forcedTzo : null,\n            forcedEndTzo: endMeta ? endMeta.forcedTzo : null\n        };\n    }\n    function pluckDateProps(raw, leftovers) {\n        var props = refineProps(raw, DATE_PROPS, {}, leftovers);\n        props.start = (props.start !== null) ? props.start : props.date;\n        delete props.date;\n        return props;\n    }\n    function pluckNonDateProps(raw, calendar, leftovers) {\n        var preLeftovers = {};\n        var props = refineProps(raw, NON_DATE_PROPS, {}, preLeftovers);\n        var ui = processUnscopedUiProps(preLeftovers, calendar, leftovers);\n        props.publicId = props.id;\n        delete props.id;\n        props.ui = ui;\n        return props;\n    }\n    function computeIsAllDayDefault(sourceId, calendar) {\n        var res = null;\n        if (sourceId) {\n            var source = calendar.state.eventSources[sourceId];\n            res = source.allDayDefault;\n        }\n        if (res == null) {\n            res = calendar.opt('allDayDefault');\n        }\n        return res;\n    }\n\n    var DEF_DEFAULTS = {\n        startTime: '09:00',\n        endTime: '17:00',\n        daysOfWeek: [1, 2, 3, 4, 5],\n        rendering: 'inverse-background',\n        classNames: 'fc-nonbusiness',\n        groupId: '_businessHours' // so multiple defs get grouped\n    };\n    /*\n    TODO: pass around as EventDefHash!!!\n    */\n    function parseBusinessHours(input, calendar) {\n        return parseEvents(refineInputs(input), '', calendar);\n    }\n    function refineInputs(input) {\n        var rawDefs;\n        if (input === true) {\n            rawDefs = [{}]; // will get DEF_DEFAULTS verbatim\n        }\n        else if (Array.isArray(input)) {\n            // if specifying an array, every sub-definition NEEDS a day-of-week\n            rawDefs = input.filter(function (rawDef) {\n                return rawDef.daysOfWeek;\n            });\n        }\n        else if (typeof input === 'object' && input) { // non-null object\n            rawDefs = [input];\n        }\n        else { // is probably false\n            rawDefs = [];\n        }\n        rawDefs = rawDefs.map(function (rawDef) {\n            return __assign({}, DEF_DEFAULTS, rawDef);\n        });\n        return rawDefs;\n    }\n\n    function memoizeRendering(renderFunc, unrenderFunc, dependencies) {\n        if (dependencies === void 0) { dependencies = []; }\n        var dependents = [];\n        var thisContext;\n        var prevArgs;\n        function unrender() {\n            if (prevArgs) {\n                for (var _i = 0, dependents_1 = dependents; _i < dependents_1.length; _i++) {\n                    var dependent = dependents_1[_i];\n                    dependent.unrender();\n                }\n                if (unrenderFunc) {\n                    unrenderFunc.apply(thisContext, prevArgs);\n                }\n                prevArgs = null;\n            }\n        }\n        function res() {\n            if (!prevArgs || !isArraysEqual(prevArgs, arguments)) {\n                unrender();\n                thisContext = this;\n                prevArgs = arguments;\n                renderFunc.apply(this, arguments);\n            }\n        }\n        res.dependents = dependents;\n        res.unrender = unrender;\n        for (var _i = 0, dependencies_1 = dependencies; _i < dependencies_1.length; _i++) {\n            var dependency = dependencies_1[_i];\n            dependency.dependents.push(res);\n        }\n        return res;\n    }\n\n    var EMPTY_EVENT_STORE = createEmptyEventStore(); // for purecomponents. TODO: keep elsewhere\n    var Splitter = /** @class */ (function () {\n        function Splitter() {\n            this.getKeysForEventDefs = memoize(this._getKeysForEventDefs);\n            this.splitDateSelection = memoize(this._splitDateSpan);\n            this.splitEventStore = memoize(this._splitEventStore);\n            this.splitIndividualUi = memoize(this._splitIndividualUi);\n            this.splitEventDrag = memoize(this._splitInteraction);\n            this.splitEventResize = memoize(this._splitInteraction);\n            this.eventUiBuilders = {}; // TODO: typescript protection\n        }\n        Splitter.prototype.splitProps = function (props) {\n            var _this = this;\n            var keyInfos = this.getKeyInfo(props);\n            var defKeys = this.getKeysForEventDefs(props.eventStore);\n            var dateSelections = this.splitDateSelection(props.dateSelection);\n            var individualUi = this.splitIndividualUi(props.eventUiBases, defKeys); // the individual *bases*\n            var eventStores = this.splitEventStore(props.eventStore, defKeys);\n            var eventDrags = this.splitEventDrag(props.eventDrag);\n            var eventResizes = this.splitEventResize(props.eventResize);\n            var splitProps = {};\n            this.eventUiBuilders = mapHash(keyInfos, function (info, key) {\n                return _this.eventUiBuilders[key] || memoize(buildEventUiForKey);\n            });\n            for (var key in keyInfos) {\n                var keyInfo = keyInfos[key];\n                var eventStore = eventStores[key] || EMPTY_EVENT_STORE;\n                var buildEventUi = this.eventUiBuilders[key];\n                splitProps[key] = {\n                    businessHours: keyInfo.businessHours || props.businessHours,\n                    dateSelection: dateSelections[key] || null,\n                    eventStore: eventStore,\n                    eventUiBases: buildEventUi(props.eventUiBases[''], keyInfo.ui, individualUi[key]),\n                    eventSelection: eventStore.instances[props.eventSelection] ? props.eventSelection : '',\n                    eventDrag: eventDrags[key] || null,\n                    eventResize: eventResizes[key] || null\n                };\n            }\n            return splitProps;\n        };\n        Splitter.prototype._splitDateSpan = function (dateSpan) {\n            var dateSpans = {};\n            if (dateSpan) {\n                var keys = this.getKeysForDateSpan(dateSpan);\n                for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n                    var key = keys_1[_i];\n                    dateSpans[key] = dateSpan;\n                }\n            }\n            return dateSpans;\n        };\n        Splitter.prototype._getKeysForEventDefs = function (eventStore) {\n            var _this = this;\n            return mapHash(eventStore.defs, function (eventDef) {\n                return _this.getKeysForEventDef(eventDef);\n            });\n        };\n        Splitter.prototype._splitEventStore = function (eventStore, defKeys) {\n            var defs = eventStore.defs, instances = eventStore.instances;\n            var splitStores = {};\n            for (var defId in defs) {\n                for (var _i = 0, _a = defKeys[defId]; _i < _a.length; _i++) {\n                    var key = _a[_i];\n                    if (!splitStores[key]) {\n                        splitStores[key] = createEmptyEventStore();\n                    }\n                    splitStores[key].defs[defId] = defs[defId];\n                }\n            }\n            for (var instanceId in instances) {\n                var instance = instances[instanceId];\n                for (var _b = 0, _c = defKeys[instance.defId]; _b < _c.length; _b++) {\n                    var key = _c[_b];\n                    if (splitStores[key]) { // must have already been created\n                        splitStores[key].instances[instanceId] = instance;\n                    }\n                }\n            }\n            return splitStores;\n        };\n        Splitter.prototype._splitIndividualUi = function (eventUiBases, defKeys) {\n            var splitHashes = {};\n            for (var defId in eventUiBases) {\n                if (defId) { // not the '' key\n                    for (var _i = 0, _a = defKeys[defId]; _i < _a.length; _i++) {\n                        var key = _a[_i];\n                        if (!splitHashes[key]) {\n                            splitHashes[key] = {};\n                        }\n                        splitHashes[key][defId] = eventUiBases[defId];\n                    }\n                }\n            }\n            return splitHashes;\n        };\n        Splitter.prototype._splitInteraction = function (interaction) {\n            var splitStates = {};\n            if (interaction) {\n                var affectedStores_1 = this._splitEventStore(interaction.affectedEvents, this._getKeysForEventDefs(interaction.affectedEvents) // can't use cached. might be events from other calendar\n                );\n                // can't rely on defKeys because event data is mutated\n                var mutatedKeysByDefId = this._getKeysForEventDefs(interaction.mutatedEvents);\n                var mutatedStores_1 = this._splitEventStore(interaction.mutatedEvents, mutatedKeysByDefId);\n                var populate = function (key) {\n                    if (!splitStates[key]) {\n                        splitStates[key] = {\n                            affectedEvents: affectedStores_1[key] || EMPTY_EVENT_STORE,\n                            mutatedEvents: mutatedStores_1[key] || EMPTY_EVENT_STORE,\n                            isEvent: interaction.isEvent,\n                            origSeg: interaction.origSeg\n                        };\n                    }\n                };\n                for (var key in affectedStores_1) {\n                    populate(key);\n                }\n                for (var key in mutatedStores_1) {\n                    populate(key);\n                }\n            }\n            return splitStates;\n        };\n        return Splitter;\n    }());\n    function buildEventUiForKey(allUi, eventUiForKey, individualUi) {\n        var baseParts = [];\n        if (allUi) {\n            baseParts.push(allUi);\n        }\n        if (eventUiForKey) {\n            baseParts.push(eventUiForKey);\n        }\n        var stuff = {\n            '': combineEventUis(baseParts)\n        };\n        if (individualUi) {\n            __assign(stuff, individualUi);\n        }\n        return stuff;\n    }\n\n    // Generates HTML for an anchor to another view into the calendar.\n    // Will either generate an <a> tag or a non-clickable <span> tag, depending on enabled settings.\n    // `gotoOptions` can either be a DateMarker, or an object with the form:\n    // { date, type, forceOff }\n    // `type` is a view-type like \"day\" or \"week\". default value is \"day\".\n    // `attrs` and `innerHtml` are use to generate the rest of the HTML tag.\n    function buildGotoAnchorHtml(allOptions, dateEnv, gotoOptions, attrs, innerHtml) {\n        var date;\n        var type;\n        var forceOff;\n        var finalOptions;\n        if (gotoOptions instanceof Date) {\n            date = gotoOptions; // a single date-like input\n        }\n        else {\n            date = gotoOptions.date;\n            type = gotoOptions.type;\n            forceOff = gotoOptions.forceOff;\n        }\n        finalOptions = {\n            date: dateEnv.formatIso(date, { omitTime: true }),\n            type: type || 'day'\n        };\n        if (typeof attrs === 'string') {\n            innerHtml = attrs;\n            attrs = null;\n        }\n        attrs = attrs ? ' ' + attrsToStr(attrs) : ''; // will have a leading space\n        innerHtml = innerHtml || '';\n        if (!forceOff && allOptions.navLinks) {\n            return '<a' + attrs +\n                ' data-goto=\"' + htmlEscape(JSON.stringify(finalOptions)) + '\">' +\n                innerHtml +\n                '</a>';\n        }\n        else {\n            return '<span' + attrs + '>' +\n                innerHtml +\n                '</span>';\n        }\n    }\n    function getAllDayHtml(allOptions) {\n        return allOptions.allDayHtml || htmlEscape(allOptions.allDayText);\n    }\n    // Computes HTML classNames for a single-day element\n    function getDayClasses(date, dateProfile, context, noThemeHighlight) {\n        var calendar = context.calendar, options = context.options, theme = context.theme, dateEnv = context.dateEnv;\n        var classes = [];\n        var todayStart;\n        var todayEnd;\n        if (!rangeContainsMarker(dateProfile.activeRange, date)) {\n            classes.push('fc-disabled-day');\n        }\n        else {\n            classes.push('fc-' + DAY_IDS[date.getUTCDay()]);\n            if (options.monthMode &&\n                dateEnv.getMonth(date) !== dateEnv.getMonth(dateProfile.currentRange.start)) {\n                classes.push('fc-other-month');\n            }\n            todayStart = startOfDay(calendar.getNow());\n            todayEnd = addDays(todayStart, 1);\n            if (date < todayStart) {\n                classes.push('fc-past');\n            }\n            else if (date >= todayEnd) {\n                classes.push('fc-future');\n            }\n            else {\n                classes.push('fc-today');\n                if (noThemeHighlight !== true) {\n                    classes.push(theme.getClass('today'));\n                }\n            }\n        }\n        return classes;\n    }\n\n    // given a function that resolves a result asynchronously.\n    // the function can either call passed-in success and failure callbacks,\n    // or it can return a promise.\n    // if you need to pass additional params to func, bind them first.\n    function unpromisify(func, success, failure) {\n        // guard against success/failure callbacks being called more than once\n        // and guard against a promise AND callback being used together.\n        var isResolved = false;\n        var wrappedSuccess = function () {\n            if (!isResolved) {\n                isResolved = true;\n                success.apply(this, arguments);\n            }\n        };\n        var wrappedFailure = function () {\n            if (!isResolved) {\n                isResolved = true;\n                if (failure) {\n                    failure.apply(this, arguments);\n                }\n            }\n        };\n        var res = func(wrappedSuccess, wrappedFailure);\n        if (res && typeof res.then === 'function') {\n            res.then(wrappedSuccess, wrappedFailure);\n        }\n    }\n\n    var Mixin = /** @class */ (function () {\n        function Mixin() {\n        }\n        // mix into a CLASS\n        Mixin.mixInto = function (destClass) {\n            this.mixIntoObj(destClass.prototype);\n        };\n        // mix into ANY object\n        Mixin.mixIntoObj = function (destObj) {\n            var _this = this;\n            Object.getOwnPropertyNames(this.prototype).forEach(function (name) {\n                if (!destObj[name]) { // if destination doesn't already define it\n                    destObj[name] = _this.prototype[name];\n                }\n            });\n        };\n        /*\n        will override existing methods\n        TODO: remove! not used anymore\n        */\n        Mixin.mixOver = function (destClass) {\n            var _this = this;\n            Object.getOwnPropertyNames(this.prototype).forEach(function (name) {\n                destClass.prototype[name] = _this.prototype[name];\n            });\n        };\n        return Mixin;\n    }());\n\n    /*\n    USAGE:\n      import { default as EmitterMixin, EmitterInterface } from './EmitterMixin'\n    in class:\n      on: EmitterInterface['on']\n      one: EmitterInterface['one']\n      off: EmitterInterface['off']\n      trigger: EmitterInterface['trigger']\n      triggerWith: EmitterInterface['triggerWith']\n      hasHandlers: EmitterInterface['hasHandlers']\n    after class:\n      EmitterMixin.mixInto(TheClass)\n    */\n    var EmitterMixin = /** @class */ (function (_super) {\n        __extends(EmitterMixin, _super);\n        function EmitterMixin() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        EmitterMixin.prototype.on = function (type, handler) {\n            addToHash(this._handlers || (this._handlers = {}), type, handler);\n            return this; // for chaining\n        };\n        // todo: add comments\n        EmitterMixin.prototype.one = function (type, handler) {\n            addToHash(this._oneHandlers || (this._oneHandlers = {}), type, handler);\n            return this; // for chaining\n        };\n        EmitterMixin.prototype.off = function (type, handler) {\n            if (this._handlers) {\n                removeFromHash(this._handlers, type, handler);\n            }\n            if (this._oneHandlers) {\n                removeFromHash(this._oneHandlers, type, handler);\n            }\n            return this; // for chaining\n        };\n        EmitterMixin.prototype.trigger = function (type) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            this.triggerWith(type, this, args);\n            return this; // for chaining\n        };\n        EmitterMixin.prototype.triggerWith = function (type, context, args) {\n            if (this._handlers) {\n                applyAll(this._handlers[type], context, args);\n            }\n            if (this._oneHandlers) {\n                applyAll(this._oneHandlers[type], context, args);\n                delete this._oneHandlers[type]; // will never fire again\n            }\n            return this; // for chaining\n        };\n        EmitterMixin.prototype.hasHandlers = function (type) {\n            return (this._handlers && this._handlers[type] && this._handlers[type].length) ||\n                (this._oneHandlers && this._oneHandlers[type] && this._oneHandlers[type].length);\n        };\n        return EmitterMixin;\n    }(Mixin));\n    function addToHash(hash, type, handler) {\n        (hash[type] || (hash[type] = []))\n            .push(handler);\n    }\n    function removeFromHash(hash, type, handler) {\n        if (handler) {\n            if (hash[type]) {\n                hash[type] = hash[type].filter(function (func) {\n                    return func !== handler;\n                });\n            }\n        }\n        else {\n            delete hash[type]; // remove all handler funcs for this type\n        }\n    }\n\n    /*\n    Records offset information for a set of elements, relative to an origin element.\n    Can record the left/right OR the top/bottom OR both.\n    Provides methods for querying the cache by position.\n    */\n    var PositionCache = /** @class */ (function () {\n        function PositionCache(originEl, els, isHorizontal, isVertical) {\n            this.originEl = originEl;\n            this.els = els;\n            this.isHorizontal = isHorizontal;\n            this.isVertical = isVertical;\n        }\n        // Queries the els for coordinates and stores them.\n        // Call this method before using and of the get* methods below.\n        PositionCache.prototype.build = function () {\n            var originEl = this.originEl;\n            var originClientRect = this.originClientRect =\n                originEl.getBoundingClientRect(); // relative to viewport top-left\n            if (this.isHorizontal) {\n                this.buildElHorizontals(originClientRect.left);\n            }\n            if (this.isVertical) {\n                this.buildElVerticals(originClientRect.top);\n            }\n        };\n        // Populates the left/right internal coordinate arrays\n        PositionCache.prototype.buildElHorizontals = function (originClientLeft) {\n            var lefts = [];\n            var rights = [];\n            for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\n                var el = _a[_i];\n                var rect = el.getBoundingClientRect();\n                lefts.push(rect.left - originClientLeft);\n                rights.push(rect.right - originClientLeft);\n            }\n            this.lefts = lefts;\n            this.rights = rights;\n        };\n        // Populates the top/bottom internal coordinate arrays\n        PositionCache.prototype.buildElVerticals = function (originClientTop) {\n            var tops = [];\n            var bottoms = [];\n            for (var _i = 0, _a = this.els; _i < _a.length; _i++) {\n                var el = _a[_i];\n                var rect = el.getBoundingClientRect();\n                tops.push(rect.top - originClientTop);\n                bottoms.push(rect.bottom - originClientTop);\n            }\n            this.tops = tops;\n            this.bottoms = bottoms;\n        };\n        // Given a left offset (from document left), returns the index of the el that it horizontally intersects.\n        // If no intersection is made, returns undefined.\n        PositionCache.prototype.leftToIndex = function (leftPosition) {\n            var lefts = this.lefts;\n            var rights = this.rights;\n            var len = lefts.length;\n            var i;\n            for (i = 0; i < len; i++) {\n                if (leftPosition >= lefts[i] && leftPosition < rights[i]) {\n                    return i;\n                }\n            }\n        };\n        // Given a top offset (from document top), returns the index of the el that it vertically intersects.\n        // If no intersection is made, returns undefined.\n        PositionCache.prototype.topToIndex = function (topPosition) {\n            var tops = this.tops;\n            var bottoms = this.bottoms;\n            var len = tops.length;\n            var i;\n            for (i = 0; i < len; i++) {\n                if (topPosition >= tops[i] && topPosition < bottoms[i]) {\n                    return i;\n                }\n            }\n        };\n        // Gets the width of the element at the given index\n        PositionCache.prototype.getWidth = function (leftIndex) {\n            return this.rights[leftIndex] - this.lefts[leftIndex];\n        };\n        // Gets the height of the element at the given index\n        PositionCache.prototype.getHeight = function (topIndex) {\n            return this.bottoms[topIndex] - this.tops[topIndex];\n        };\n        return PositionCache;\n    }());\n\n    /*\n    An object for getting/setting scroll-related information for an element.\n    Internally, this is done very differently for window versus DOM element,\n    so this object serves as a common interface.\n    */\n    var ScrollController = /** @class */ (function () {\n        function ScrollController() {\n        }\n        ScrollController.prototype.getMaxScrollTop = function () {\n            return this.getScrollHeight() - this.getClientHeight();\n        };\n        ScrollController.prototype.getMaxScrollLeft = function () {\n            return this.getScrollWidth() - this.getClientWidth();\n        };\n        ScrollController.prototype.canScrollVertically = function () {\n            return this.getMaxScrollTop() > 0;\n        };\n        ScrollController.prototype.canScrollHorizontally = function () {\n            return this.getMaxScrollLeft() > 0;\n        };\n        ScrollController.prototype.canScrollUp = function () {\n            return this.getScrollTop() > 0;\n        };\n        ScrollController.prototype.canScrollDown = function () {\n            return this.getScrollTop() < this.getMaxScrollTop();\n        };\n        ScrollController.prototype.canScrollLeft = function () {\n            return this.getScrollLeft() > 0;\n        };\n        ScrollController.prototype.canScrollRight = function () {\n            return this.getScrollLeft() < this.getMaxScrollLeft();\n        };\n        return ScrollController;\n    }());\n    var ElementScrollController = /** @class */ (function (_super) {\n        __extends(ElementScrollController, _super);\n        function ElementScrollController(el) {\n            var _this = _super.call(this) || this;\n            _this.el = el;\n            return _this;\n        }\n        ElementScrollController.prototype.getScrollTop = function () {\n            return this.el.scrollTop;\n        };\n        ElementScrollController.prototype.getScrollLeft = function () {\n            return this.el.scrollLeft;\n        };\n        ElementScrollController.prototype.setScrollTop = function (top) {\n            this.el.scrollTop = top;\n        };\n        ElementScrollController.prototype.setScrollLeft = function (left) {\n            this.el.scrollLeft = left;\n        };\n        ElementScrollController.prototype.getScrollWidth = function () {\n            return this.el.scrollWidth;\n        };\n        ElementScrollController.prototype.getScrollHeight = function () {\n            return this.el.scrollHeight;\n        };\n        ElementScrollController.prototype.getClientHeight = function () {\n            return this.el.clientHeight;\n        };\n        ElementScrollController.prototype.getClientWidth = function () {\n            return this.el.clientWidth;\n        };\n        return ElementScrollController;\n    }(ScrollController));\n    var WindowScrollController = /** @class */ (function (_super) {\n        __extends(WindowScrollController, _super);\n        function WindowScrollController() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        WindowScrollController.prototype.getScrollTop = function () {\n            return window.pageYOffset;\n        };\n        WindowScrollController.prototype.getScrollLeft = function () {\n            return window.pageXOffset;\n        };\n        WindowScrollController.prototype.setScrollTop = function (n) {\n            window.scroll(window.pageXOffset, n);\n        };\n        WindowScrollController.prototype.setScrollLeft = function (n) {\n            window.scroll(n, window.pageYOffset);\n        };\n        WindowScrollController.prototype.getScrollWidth = function () {\n            return document.documentElement.scrollWidth;\n        };\n        WindowScrollController.prototype.getScrollHeight = function () {\n            return document.documentElement.scrollHeight;\n        };\n        WindowScrollController.prototype.getClientHeight = function () {\n            return document.documentElement.clientHeight;\n        };\n        WindowScrollController.prototype.getClientWidth = function () {\n            return document.documentElement.clientWidth;\n        };\n        return WindowScrollController;\n    }(ScrollController));\n\n    /*\n    Embodies a div that has potential scrollbars\n    */\n    var ScrollComponent = /** @class */ (function (_super) {\n        __extends(ScrollComponent, _super);\n        function ScrollComponent(overflowX, overflowY) {\n            var _this = _super.call(this, createElement('div', {\n                className: 'fc-scroller'\n            })) || this;\n            _this.overflowX = overflowX;\n            _this.overflowY = overflowY;\n            _this.applyOverflow();\n            return _this;\n        }\n        // sets to natural height, unlocks overflow\n        ScrollComponent.prototype.clear = function () {\n            this.setHeight('auto');\n            this.applyOverflow();\n        };\n        ScrollComponent.prototype.destroy = function () {\n            removeElement(this.el);\n        };\n        // Overflow\n        // -----------------------------------------------------------------------------------------------------------------\n        ScrollComponent.prototype.applyOverflow = function () {\n            applyStyle(this.el, {\n                overflowX: this.overflowX,\n                overflowY: this.overflowY\n            });\n        };\n        // Causes any 'auto' overflow values to resolves to 'scroll' or 'hidden'.\n        // Useful for preserving scrollbar widths regardless of future resizes.\n        // Can pass in scrollbarWidths for optimization.\n        ScrollComponent.prototype.lockOverflow = function (scrollbarWidths) {\n            var overflowX = this.overflowX;\n            var overflowY = this.overflowY;\n            scrollbarWidths = scrollbarWidths || this.getScrollbarWidths();\n            if (overflowX === 'auto') {\n                overflowX = (scrollbarWidths.bottom || // horizontal scrollbars?\n                    this.canScrollHorizontally() // OR scrolling pane with massless scrollbars?\n                ) ? 'scroll' : 'hidden';\n            }\n            if (overflowY === 'auto') {\n                overflowY = (scrollbarWidths.left || scrollbarWidths.right || // horizontal scrollbars?\n                    this.canScrollVertically() // OR scrolling pane with massless scrollbars?\n                ) ? 'scroll' : 'hidden';\n            }\n            applyStyle(this.el, { overflowX: overflowX, overflowY: overflowY });\n        };\n        ScrollComponent.prototype.setHeight = function (height) {\n            applyStyleProp(this.el, 'height', height);\n        };\n        ScrollComponent.prototype.getScrollbarWidths = function () {\n            var edges = computeEdges(this.el);\n            return {\n                left: edges.scrollbarLeft,\n                right: edges.scrollbarRight,\n                bottom: edges.scrollbarBottom\n            };\n        };\n        return ScrollComponent;\n    }(ElementScrollController));\n\n    var Theme = /** @class */ (function () {\n        function Theme(calendarOptions) {\n            this.calendarOptions = calendarOptions;\n            this.processIconOverride();\n        }\n        Theme.prototype.processIconOverride = function () {\n            if (this.iconOverrideOption) {\n                this.setIconOverride(this.calendarOptions[this.iconOverrideOption]);\n            }\n        };\n        Theme.prototype.setIconOverride = function (iconOverrideHash) {\n            var iconClassesCopy;\n            var buttonName;\n            if (typeof iconOverrideHash === 'object' && iconOverrideHash) { // non-null object\n                iconClassesCopy = __assign({}, this.iconClasses);\n                for (buttonName in iconOverrideHash) {\n                    iconClassesCopy[buttonName] = this.applyIconOverridePrefix(iconOverrideHash[buttonName]);\n                }\n                this.iconClasses = iconClassesCopy;\n            }\n            else if (iconOverrideHash === false) {\n                this.iconClasses = {};\n            }\n        };\n        Theme.prototype.applyIconOverridePrefix = function (className) {\n            var prefix = this.iconOverridePrefix;\n            if (prefix && className.indexOf(prefix) !== 0) { // if not already present\n                className = prefix + className;\n            }\n            return className;\n        };\n        Theme.prototype.getClass = function (key) {\n            return this.classes[key] || '';\n        };\n        Theme.prototype.getIconClass = function (buttonName) {\n            var className = this.iconClasses[buttonName];\n            if (className) {\n                return this.baseIconClass + ' ' + className;\n            }\n            return '';\n        };\n        Theme.prototype.getCustomButtonIconClass = function (customButtonProps) {\n            var className;\n            if (this.iconOverrideCustomButtonOption) {\n                className = customButtonProps[this.iconOverrideCustomButtonOption];\n                if (className) {\n                    return this.baseIconClass + ' ' + this.applyIconOverridePrefix(className);\n                }\n            }\n            return '';\n        };\n        return Theme;\n    }());\n    Theme.prototype.classes = {};\n    Theme.prototype.iconClasses = {};\n    Theme.prototype.baseIconClass = '';\n    Theme.prototype.iconOverridePrefix = '';\n\n    var guid = 0;\n    var ComponentContext = /** @class */ (function () {\n        function ComponentContext(calendar, theme, dateEnv, options, view) {\n            this.calendar = calendar;\n            this.theme = theme;\n            this.dateEnv = dateEnv;\n            this.options = options;\n            this.view = view;\n            this.isRtl = options.dir === 'rtl';\n            this.eventOrderSpecs = parseFieldSpecs(options.eventOrder);\n            this.nextDayThreshold = createDuration(options.nextDayThreshold);\n        }\n        ComponentContext.prototype.extend = function (options, view) {\n            return new ComponentContext(this.calendar, this.theme, this.dateEnv, options || this.options, view || this.view);\n        };\n        return ComponentContext;\n    }());\n    var Component = /** @class */ (function () {\n        function Component() {\n            this.everRendered = false;\n            this.uid = String(guid++);\n        }\n        Component.addEqualityFuncs = function (newFuncs) {\n            this.prototype.equalityFuncs = __assign({}, this.prototype.equalityFuncs, newFuncs);\n        };\n        Component.prototype.receiveProps = function (props, context) {\n            this.receiveContext(context);\n            var _a = recycleProps(this.props || {}, props, this.equalityFuncs), anyChanges = _a.anyChanges, comboProps = _a.comboProps;\n            this.props = comboProps;\n            if (anyChanges) {\n                if (this.everRendered) {\n                    this.beforeUpdate();\n                }\n                this.render(comboProps, context);\n                if (this.everRendered) {\n                    this.afterUpdate();\n                }\n            }\n            this.everRendered = true;\n        };\n        Component.prototype.receiveContext = function (context) {\n            var oldContext = this.context;\n            this.context = context;\n            if (!oldContext) {\n                this.firstContext(context);\n            }\n        };\n        Component.prototype.render = function (props, context) {\n        };\n        Component.prototype.firstContext = function (context) {\n        };\n        Component.prototype.beforeUpdate = function () {\n        };\n        Component.prototype.afterUpdate = function () {\n        };\n        // after destroy is called, this component won't ever be used again\n        Component.prototype.destroy = function () {\n        };\n        return Component;\n    }());\n    Component.prototype.equalityFuncs = {};\n    /*\n    Reuses old values when equal. If anything is unequal, returns newProps as-is.\n    Great for PureComponent, but won't be feasible with React, so just eliminate and use React's DOM diffing.\n    */\n    function recycleProps(oldProps, newProps, equalityFuncs) {\n        var comboProps = {}; // some old, some new\n        var anyChanges = false;\n        for (var key in newProps) {\n            if (key in oldProps && (oldProps[key] === newProps[key] ||\n                (equalityFuncs[key] && equalityFuncs[key](oldProps[key], newProps[key])))) {\n                // equal to old? use old prop\n                comboProps[key] = oldProps[key];\n            }\n            else {\n                comboProps[key] = newProps[key];\n                anyChanges = true;\n            }\n        }\n        for (var key in oldProps) {\n            if (!(key in newProps)) {\n                anyChanges = true;\n                break;\n            }\n        }\n        return { anyChanges: anyChanges, comboProps: comboProps };\n    }\n\n    /*\n    PURPOSES:\n    - hook up to fg, fill, and mirror renderers\n    - interface for dragging and hits\n    */\n    var DateComponent = /** @class */ (function (_super) {\n        __extends(DateComponent, _super);\n        function DateComponent(el) {\n            var _this = _super.call(this) || this;\n            _this.el = el;\n            return _this;\n        }\n        DateComponent.prototype.destroy = function () {\n            _super.prototype.destroy.call(this);\n            removeElement(this.el);\n        };\n        // Hit System\n        // -----------------------------------------------------------------------------------------------------------------\n        DateComponent.prototype.buildPositionCaches = function () {\n        };\n        DateComponent.prototype.queryHit = function (positionLeft, positionTop, elWidth, elHeight) {\n            return null; // this should be abstract\n        };\n        // Validation\n        // -----------------------------------------------------------------------------------------------------------------\n        DateComponent.prototype.isInteractionValid = function (interaction) {\n            var calendar = this.context.calendar;\n            var dateProfile = this.props.dateProfile; // HACK\n            var instances = interaction.mutatedEvents.instances;\n            if (dateProfile) { // HACK for DayTile\n                for (var instanceId in instances) {\n                    if (!rangeContainsRange(dateProfile.validRange, instances[instanceId].range)) {\n                        return false;\n                    }\n                }\n            }\n            return isInteractionValid(interaction, calendar);\n        };\n        DateComponent.prototype.isDateSelectionValid = function (selection) {\n            var calendar = this.context.calendar;\n            var dateProfile = this.props.dateProfile; // HACK\n            if (dateProfile && // HACK for DayTile\n                !rangeContainsRange(dateProfile.validRange, selection.range)) {\n                return false;\n            }\n            return isDateSelectionValid(selection, calendar);\n        };\n        // Pointer Interaction Utils\n        // -----------------------------------------------------------------------------------------------------------------\n        DateComponent.prototype.isValidSegDownEl = function (el) {\n            return !this.props.eventDrag && // HACK\n                !this.props.eventResize && // HACK\n                !elementClosest(el, '.fc-mirror') &&\n                (this.isPopover() || !this.isInPopover(el));\n            // ^above line ensures we don't detect a seg interaction within a nested component.\n            // it's a HACK because it only supports a popover as the nested component.\n        };\n        DateComponent.prototype.isValidDateDownEl = function (el) {\n            var segEl = elementClosest(el, this.fgSegSelector);\n            return (!segEl || segEl.classList.contains('fc-mirror')) &&\n                !elementClosest(el, '.fc-more') && // a \"more..\" link\n                !elementClosest(el, 'a[data-goto]') && // a clickable nav link\n                !this.isInPopover(el);\n        };\n        DateComponent.prototype.isPopover = function () {\n            return this.el.classList.contains('fc-popover');\n        };\n        DateComponent.prototype.isInPopover = function (el) {\n            return Boolean(elementClosest(el, '.fc-popover'));\n        };\n        return DateComponent;\n    }(Component));\n    DateComponent.prototype.fgSegSelector = '.fc-event-container > *';\n    DateComponent.prototype.bgSegSelector = '.fc-bgevent:not(.fc-nonbusiness)';\n\n    var uid$1 = 0;\n    function createPlugin(input) {\n        return {\n            id: String(uid$1++),\n            deps: input.deps || [],\n            reducers: input.reducers || [],\n            eventDefParsers: input.eventDefParsers || [],\n            isDraggableTransformers: input.isDraggableTransformers || [],\n            eventDragMutationMassagers: input.eventDragMutationMassagers || [],\n            eventDefMutationAppliers: input.eventDefMutationAppliers || [],\n            dateSelectionTransformers: input.dateSelectionTransformers || [],\n            datePointTransforms: input.datePointTransforms || [],\n            dateSpanTransforms: input.dateSpanTransforms || [],\n            views: input.views || {},\n            viewPropsTransformers: input.viewPropsTransformers || [],\n            isPropsValid: input.isPropsValid || null,\n            externalDefTransforms: input.externalDefTransforms || [],\n            eventResizeJoinTransforms: input.eventResizeJoinTransforms || [],\n            viewContainerModifiers: input.viewContainerModifiers || [],\n            eventDropTransformers: input.eventDropTransformers || [],\n            componentInteractions: input.componentInteractions || [],\n            calendarInteractions: input.calendarInteractions || [],\n            themeClasses: input.themeClasses || {},\n            eventSourceDefs: input.eventSourceDefs || [],\n            cmdFormatter: input.cmdFormatter,\n            recurringTypes: input.recurringTypes || [],\n            namedTimeZonedImpl: input.namedTimeZonedImpl,\n            defaultView: input.defaultView || '',\n            elementDraggingImpl: input.elementDraggingImpl,\n            optionChangeHandlers: input.optionChangeHandlers || {}\n        };\n    }\n    var PluginSystem = /** @class */ (function () {\n        function PluginSystem() {\n            this.hooks = {\n                reducers: [],\n                eventDefParsers: [],\n                isDraggableTransformers: [],\n                eventDragMutationMassagers: [],\n                eventDefMutationAppliers: [],\n                dateSelectionTransformers: [],\n                datePointTransforms: [],\n                dateSpanTransforms: [],\n                views: {},\n                viewPropsTransformers: [],\n                isPropsValid: null,\n                externalDefTransforms: [],\n                eventResizeJoinTransforms: [],\n                viewContainerModifiers: [],\n                eventDropTransformers: [],\n                componentInteractions: [],\n                calendarInteractions: [],\n                themeClasses: {},\n                eventSourceDefs: [],\n                cmdFormatter: null,\n                recurringTypes: [],\n                namedTimeZonedImpl: null,\n                defaultView: '',\n                elementDraggingImpl: null,\n                optionChangeHandlers: {}\n            };\n            this.addedHash = {};\n        }\n        PluginSystem.prototype.add = function (plugin) {\n            if (!this.addedHash[plugin.id]) {\n                this.addedHash[plugin.id] = true;\n                for (var _i = 0, _a = plugin.deps; _i < _a.length; _i++) {\n                    var dep = _a[_i];\n                    this.add(dep);\n                }\n                this.hooks = combineHooks(this.hooks, plugin);\n            }\n        };\n        return PluginSystem;\n    }());\n    function combineHooks(hooks0, hooks1) {\n        return {\n            reducers: hooks0.reducers.concat(hooks1.reducers),\n            eventDefParsers: hooks0.eventDefParsers.concat(hooks1.eventDefParsers),\n            isDraggableTransformers: hooks0.isDraggableTransformers.concat(hooks1.isDraggableTransformers),\n            eventDragMutationMassagers: hooks0.eventDragMutationMassagers.concat(hooks1.eventDragMutationMassagers),\n            eventDefMutationAppliers: hooks0.eventDefMutationAppliers.concat(hooks1.eventDefMutationAppliers),\n            dateSelectionTransformers: hooks0.dateSelectionTransformers.concat(hooks1.dateSelectionTransformers),\n            datePointTransforms: hooks0.datePointTransforms.concat(hooks1.datePointTransforms),\n            dateSpanTransforms: hooks0.dateSpanTransforms.concat(hooks1.dateSpanTransforms),\n            views: __assign({}, hooks0.views, hooks1.views),\n            viewPropsTransformers: hooks0.viewPropsTransformers.concat(hooks1.viewPropsTransformers),\n            isPropsValid: hooks1.isPropsValid || hooks0.isPropsValid,\n            externalDefTransforms: hooks0.externalDefTransforms.concat(hooks1.externalDefTransforms),\n            eventResizeJoinTransforms: hooks0.eventResizeJoinTransforms.concat(hooks1.eventResizeJoinTransforms),\n            viewContainerModifiers: hooks0.viewContainerModifiers.concat(hooks1.viewContainerModifiers),\n            eventDropTransformers: hooks0.eventDropTransformers.concat(hooks1.eventDropTransformers),\n            calendarInteractions: hooks0.calendarInteractions.concat(hooks1.calendarInteractions),\n            componentInteractions: hooks0.componentInteractions.concat(hooks1.componentInteractions),\n            themeClasses: __assign({}, hooks0.themeClasses, hooks1.themeClasses),\n            eventSourceDefs: hooks0.eventSourceDefs.concat(hooks1.eventSourceDefs),\n            cmdFormatter: hooks1.cmdFormatter || hooks0.cmdFormatter,\n            recurringTypes: hooks0.recurringTypes.concat(hooks1.recurringTypes),\n            namedTimeZonedImpl: hooks1.namedTimeZonedImpl || hooks0.namedTimeZonedImpl,\n            defaultView: hooks0.defaultView || hooks1.defaultView,\n            elementDraggingImpl: hooks0.elementDraggingImpl || hooks1.elementDraggingImpl,\n            optionChangeHandlers: __assign({}, hooks0.optionChangeHandlers, hooks1.optionChangeHandlers)\n        };\n    }\n\n    var eventSourceDef = {\n        ignoreRange: true,\n        parseMeta: function (raw) {\n            if (Array.isArray(raw)) { // short form\n                return raw;\n            }\n            else if (Array.isArray(raw.events)) {\n                return raw.events;\n            }\n            return null;\n        },\n        fetch: function (arg, success) {\n            success({\n                rawEvents: arg.eventSource.meta\n            });\n        }\n    };\n    var ArrayEventSourcePlugin = createPlugin({\n        eventSourceDefs: [eventSourceDef]\n    });\n\n    var eventSourceDef$1 = {\n        parseMeta: function (raw) {\n            if (typeof raw === 'function') { // short form\n                return raw;\n            }\n            else if (typeof raw.events === 'function') {\n                return raw.events;\n            }\n            return null;\n        },\n        fetch: function (arg, success, failure) {\n            var dateEnv = arg.calendar.dateEnv;\n            var func = arg.eventSource.meta;\n            unpromisify(func.bind(null, {\n                start: dateEnv.toDate(arg.range.start),\n                end: dateEnv.toDate(arg.range.end),\n                startStr: dateEnv.formatIso(arg.range.start),\n                endStr: dateEnv.formatIso(arg.range.end),\n                timeZone: dateEnv.timeZone\n            }), function (rawEvents) {\n                success({ rawEvents: rawEvents }); // needs an object response\n            }, failure // send errorObj directly to failure callback\n            );\n        }\n    };\n    var FuncEventSourcePlugin = createPlugin({\n        eventSourceDefs: [eventSourceDef$1]\n    });\n\n    function requestJson(method, url, params, successCallback, failureCallback) {\n        method = method.toUpperCase();\n        var body = null;\n        if (method === 'GET') {\n            url = injectQueryStringParams(url, params);\n        }\n        else {\n            body = encodeParams(params);\n        }\n        var xhr = new XMLHttpRequest();\n        xhr.open(method, url, true);\n        if (method !== 'GET') {\n            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n        }\n        xhr.onload = function () {\n            if (xhr.status >= 200 && xhr.status < 400) {\n                try {\n                    var res = JSON.parse(xhr.responseText);\n                    successCallback(res, xhr);\n                }\n                catch (err) {\n                    failureCallback('Failure parsing JSON', xhr);\n                }\n            }\n            else {\n                failureCallback('Request failed', xhr);\n            }\n        };\n        xhr.onerror = function () {\n            failureCallback('Request failed', xhr);\n        };\n        xhr.send(body);\n    }\n    function injectQueryStringParams(url, params) {\n        return url +\n            (url.indexOf('?') === -1 ? '?' : '&') +\n            encodeParams(params);\n    }\n    function encodeParams(params) {\n        var parts = [];\n        for (var key in params) {\n            parts.push(encodeURIComponent(key) + '=' + encodeURIComponent(params[key]));\n        }\n        return parts.join('&');\n    }\n\n    var eventSourceDef$2 = {\n        parseMeta: function (raw) {\n            if (typeof raw === 'string') { // short form\n                raw = { url: raw };\n            }\n            else if (!raw || typeof raw !== 'object' || !raw.url) {\n                return null;\n            }\n            return {\n                url: raw.url,\n                method: (raw.method || 'GET').toUpperCase(),\n                extraParams: raw.extraParams,\n                startParam: raw.startParam,\n                endParam: raw.endParam,\n                timeZoneParam: raw.timeZoneParam\n            };\n        },\n        fetch: function (arg, success, failure) {\n            var meta = arg.eventSource.meta;\n            var requestParams = buildRequestParams(meta, arg.range, arg.calendar);\n            requestJson(meta.method, meta.url, requestParams, function (rawEvents, xhr) {\n                success({ rawEvents: rawEvents, xhr: xhr });\n            }, function (errorMessage, xhr) {\n                failure({ message: errorMessage, xhr: xhr });\n            });\n        }\n    };\n    var JsonFeedEventSourcePlugin = createPlugin({\n        eventSourceDefs: [eventSourceDef$2]\n    });\n    function buildRequestParams(meta, range, calendar) {\n        var dateEnv = calendar.dateEnv;\n        var startParam;\n        var endParam;\n        var timeZoneParam;\n        var customRequestParams;\n        var params = {};\n        startParam = meta.startParam;\n        if (startParam == null) {\n            startParam = calendar.opt('startParam');\n        }\n        endParam = meta.endParam;\n        if (endParam == null) {\n            endParam = calendar.opt('endParam');\n        }\n        timeZoneParam = meta.timeZoneParam;\n        if (timeZoneParam == null) {\n            timeZoneParam = calendar.opt('timeZoneParam');\n        }\n        // retrieve any outbound GET/POST data from the options\n        if (typeof meta.extraParams === 'function') {\n            // supplied as a function that returns a key/value object\n            customRequestParams = meta.extraParams();\n        }\n        else {\n            // probably supplied as a straight key/value object\n            customRequestParams = meta.extraParams || {};\n        }\n        __assign(params, customRequestParams);\n        params[startParam] = dateEnv.formatIso(range.start);\n        params[endParam] = dateEnv.formatIso(range.end);\n        if (dateEnv.timeZone !== 'local') {\n            params[timeZoneParam] = dateEnv.timeZone;\n        }\n        return params;\n    }\n\n    var recurring = {\n        parse: function (rawEvent, leftoverProps, dateEnv) {\n            var createMarker = dateEnv.createMarker.bind(dateEnv);\n            var processors = {\n                daysOfWeek: null,\n                startTime: createDuration,\n                endTime: createDuration,\n                startRecur: createMarker,\n                endRecur: createMarker\n            };\n            var props = refineProps(rawEvent, processors, {}, leftoverProps);\n            var anyValid = false;\n            for (var propName in props) {\n                if (props[propName] != null) {\n                    anyValid = true;\n                    break;\n                }\n            }\n            if (anyValid) {\n                var duration = null;\n                if ('duration' in leftoverProps) {\n                    duration = createDuration(leftoverProps.duration);\n                    delete leftoverProps.duration;\n                }\n                if (!duration && props.startTime && props.endTime) {\n                    duration = subtractDurations(props.endTime, props.startTime);\n                }\n                return {\n                    allDayGuess: Boolean(!props.startTime && !props.endTime),\n                    duration: duration,\n                    typeData: props // doesn't need endTime anymore but oh well\n                };\n            }\n            return null;\n        },\n        expand: function (typeData, framingRange, dateEnv) {\n            var clippedFramingRange = intersectRanges(framingRange, { start: typeData.startRecur, end: typeData.endRecur });\n            if (clippedFramingRange) {\n                return expandRanges(typeData.daysOfWeek, typeData.startTime, clippedFramingRange, dateEnv);\n            }\n            else {\n                return [];\n            }\n        }\n    };\n    var SimpleRecurrencePlugin = createPlugin({\n        recurringTypes: [recurring]\n    });\n    function expandRanges(daysOfWeek, startTime, framingRange, dateEnv) {\n        var dowHash = daysOfWeek ? arrayToHash(daysOfWeek) : null;\n        var dayMarker = startOfDay(framingRange.start);\n        var endMarker = framingRange.end;\n        var instanceStarts = [];\n        while (dayMarker < endMarker) {\n            var instanceStart \n            // if everyday, or this particular day-of-week\n            = void 0;\n            // if everyday, or this particular day-of-week\n            if (!dowHash || dowHash[dayMarker.getUTCDay()]) {\n                if (startTime) {\n                    instanceStart = dateEnv.add(dayMarker, startTime);\n                }\n                else {\n                    instanceStart = dayMarker;\n                }\n                instanceStarts.push(instanceStart);\n            }\n            dayMarker = addDays(dayMarker, 1);\n        }\n        return instanceStarts;\n    }\n\n    var DefaultOptionChangeHandlers = createPlugin({\n        optionChangeHandlers: {\n            events: function (events, calendar, deepEqual) {\n                handleEventSources([events], calendar, deepEqual);\n            },\n            eventSources: handleEventSources,\n            plugins: handlePlugins\n        }\n    });\n    function handleEventSources(inputs, calendar, deepEqual) {\n        var unfoundSources = hashValuesToArray(calendar.state.eventSources);\n        var newInputs = [];\n        for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {\n            var input = inputs_1[_i];\n            var inputFound = false;\n            for (var i = 0; i < unfoundSources.length; i++) {\n                if (deepEqual(unfoundSources[i]._raw, input)) {\n                    unfoundSources.splice(i, 1); // delete\n                    inputFound = true;\n                    break;\n                }\n            }\n            if (!inputFound) {\n                newInputs.push(input);\n            }\n        }\n        for (var _a = 0, unfoundSources_1 = unfoundSources; _a < unfoundSources_1.length; _a++) {\n            var unfoundSource = unfoundSources_1[_a];\n            calendar.dispatch({\n                type: 'REMOVE_EVENT_SOURCE',\n                sourceId: unfoundSource.sourceId\n            });\n        }\n        for (var _b = 0, newInputs_1 = newInputs; _b < newInputs_1.length; _b++) {\n            var newInput = newInputs_1[_b];\n            calendar.addEventSource(newInput);\n        }\n    }\n    // shortcoming: won't remove plugins\n    function handlePlugins(inputs, calendar) {\n        calendar.addPluginInputs(inputs); // will gracefully handle duplicates\n    }\n\n    var config = {}; // TODO: make these options\n    var globalDefaults = {\n        defaultRangeSeparator: ' - ',\n        titleRangeSeparator: ' \\u2013 ',\n        defaultTimedEventDuration: '01:00:00',\n        defaultAllDayEventDuration: { day: 1 },\n        forceEventDuration: false,\n        nextDayThreshold: '00:00:00',\n        // display\n        columnHeader: true,\n        defaultView: '',\n        aspectRatio: 1.35,\n        header: {\n            left: 'title',\n            center: '',\n            right: 'today prev,next'\n        },\n        weekends: true,\n        weekNumbers: false,\n        weekNumberCalculation: 'local',\n        editable: false,\n        // nowIndicator: false,\n        scrollTime: '06:00:00',\n        minTime: '00:00:00',\n        maxTime: '24:00:00',\n        showNonCurrentDates: true,\n        // event ajax\n        lazyFetching: true,\n        startParam: 'start',\n        endParam: 'end',\n        timeZoneParam: 'timeZone',\n        timeZone: 'local',\n        // allDayDefault: undefined,\n        // locale\n        locales: [],\n        locale: '',\n        // dir: will get this from the default locale\n        // buttonIcons: null,\n        // allows setting a min-height to the event segment to prevent short events overlapping each other\n        timeGridEventMinHeight: 0,\n        themeSystem: 'standard',\n        // eventResizableFromStart: false,\n        dragRevertDuration: 500,\n        dragScroll: true,\n        allDayMaintainDuration: false,\n        // selectable: false,\n        unselectAuto: true,\n        // selectMinDistance: 0,\n        dropAccept: '*',\n        eventOrder: 'start,-duration,allDay,title',\n        // ^ if start tie, longer events go before shorter. final tie-breaker is title text\n        // rerenderDelay: null,\n        eventLimit: false,\n        eventLimitClick: 'popover',\n        dayPopoverFormat: { month: 'long', day: 'numeric', year: 'numeric' },\n        handleWindowResize: true,\n        windowResizeDelay: 100,\n        longPressDelay: 1000,\n        eventDragMinDistance: 5 // only applies to mouse\n    };\n    var rtlDefaults = {\n        header: {\n            left: 'next,prev today',\n            center: '',\n            right: 'title'\n        },\n        buttonIcons: {\n            // TODO: make RTL support the responibility of the theme\n            prev: 'fc-icon-chevron-right',\n            next: 'fc-icon-chevron-left',\n            prevYear: 'fc-icon-chevrons-right',\n            nextYear: 'fc-icon-chevrons-left'\n        }\n    };\n    var complexOptions = [\n        'header',\n        'footer',\n        'buttonText',\n        'buttonIcons'\n    ];\n    // Merges an array of option objects into a single object\n    function mergeOptions(optionObjs) {\n        return mergeProps(optionObjs, complexOptions);\n    }\n    // TODO: move this stuff to a \"plugin\"-related file...\n    var INTERNAL_PLUGINS = [\n        ArrayEventSourcePlugin,\n        FuncEventSourcePlugin,\n        JsonFeedEventSourcePlugin,\n        SimpleRecurrencePlugin,\n        DefaultOptionChangeHandlers\n    ];\n    function refinePluginDefs(pluginInputs) {\n        var plugins = [];\n        for (var _i = 0, pluginInputs_1 = pluginInputs; _i < pluginInputs_1.length; _i++) {\n            var pluginInput = pluginInputs_1[_i];\n            if (typeof pluginInput === 'string') {\n                var globalName = 'FullCalendar' + capitaliseFirstLetter(pluginInput);\n                if (!window[globalName]) {\n                    console.warn('Plugin file not loaded for ' + pluginInput);\n                }\n                else {\n                    plugins.push(window[globalName].default); // is an ES6 module\n                }\n            }\n            else {\n                plugins.push(pluginInput);\n            }\n        }\n        return INTERNAL_PLUGINS.concat(plugins);\n    }\n\n    var RAW_EN_LOCALE = {\n        code: 'en',\n        week: {\n            dow: 0,\n            doy: 4 // 4 days need to be within the year to be considered the first week\n        },\n        dir: 'ltr',\n        buttonText: {\n            prev: 'prev',\n            next: 'next',\n            prevYear: 'prev year',\n            nextYear: 'next year',\n            year: 'year',\n            today: 'today',\n            month: 'month',\n            week: 'week',\n            day: 'day',\n            list: 'list'\n        },\n        weekLabel: 'W',\n        allDayText: 'all-day',\n        eventLimitText: 'more',\n        noEventsMessage: 'No events to display'\n    };\n    function parseRawLocales(explicitRawLocales) {\n        var defaultCode = explicitRawLocales.length > 0 ? explicitRawLocales[0].code : 'en';\n        var globalArray = window['FullCalendarLocalesAll'] || []; // from locales-all.js\n        var globalObject = window['FullCalendarLocales'] || {}; // from locales/*.js. keys are meaningless\n        var allRawLocales = globalArray.concat(// globalArray is low prio\n        hashValuesToArray(globalObject), // medium prio\n        explicitRawLocales // highest prio\n        );\n        var rawLocaleMap = {\n            en: RAW_EN_LOCALE // necessary?\n        };\n        for (var _i = 0, allRawLocales_1 = allRawLocales; _i < allRawLocales_1.length; _i++) {\n            var rawLocale = allRawLocales_1[_i];\n            rawLocaleMap[rawLocale.code] = rawLocale;\n        }\n        return {\n            map: rawLocaleMap,\n            defaultCode: defaultCode\n        };\n    }\n    function buildLocale(inputSingular, available) {\n        if (typeof inputSingular === 'object' && !Array.isArray(inputSingular)) {\n            return parseLocale(inputSingular.code, [inputSingular.code], inputSingular);\n        }\n        else {\n            return queryLocale(inputSingular, available);\n        }\n    }\n    function queryLocale(codeArg, available) {\n        var codes = [].concat(codeArg || []); // will convert to array\n        var raw = queryRawLocale(codes, available) || RAW_EN_LOCALE;\n        return parseLocale(codeArg, codes, raw);\n    }\n    function queryRawLocale(codes, available) {\n        for (var i = 0; i < codes.length; i++) {\n            var parts = codes[i].toLocaleLowerCase().split('-');\n            for (var j = parts.length; j > 0; j--) {\n                var simpleId = parts.slice(0, j).join('-');\n                if (available[simpleId]) {\n                    return available[simpleId];\n                }\n            }\n        }\n        return null;\n    }\n    function parseLocale(codeArg, codes, raw) {\n        var merged = mergeProps([RAW_EN_LOCALE, raw], ['buttonText']);\n        delete merged.code; // don't want this part of the options\n        var week = merged.week;\n        delete merged.week;\n        return {\n            codeArg: codeArg,\n            codes: codes,\n            week: week,\n            simpleNumberFormat: new Intl.NumberFormat(codeArg),\n            options: merged\n        };\n    }\n\n    var OptionsManager = /** @class */ (function () {\n        function OptionsManager(overrides) {\n            this.overrides = __assign({}, overrides); // make a copy\n            this.dynamicOverrides = {};\n            this.compute();\n        }\n        OptionsManager.prototype.mutate = function (updates, removals, isDynamic) {\n            if (!Object.keys(updates).length && !removals.length) {\n                return;\n            }\n            var overrideHash = isDynamic ? this.dynamicOverrides : this.overrides;\n            __assign(overrideHash, updates);\n            for (var _i = 0, removals_1 = removals; _i < removals_1.length; _i++) {\n                var propName = removals_1[_i];\n                delete overrideHash[propName];\n            }\n            this.compute();\n        };\n        // Computes the flattened options hash for the calendar and assigns to `this.options`.\n        // Assumes this.overrides and this.dynamicOverrides have already been initialized.\n        OptionsManager.prototype.compute = function () {\n            // TODO: not a very efficient system\n            var locales = firstDefined(// explicit locale option given?\n            this.dynamicOverrides.locales, this.overrides.locales, globalDefaults.locales);\n            var locale = firstDefined(// explicit locales option given?\n            this.dynamicOverrides.locale, this.overrides.locale, globalDefaults.locale);\n            var available = parseRawLocales(locales);\n            var localeDefaults = buildLocale(locale || available.defaultCode, available.map).options;\n            var dir = firstDefined(// based on options computed so far, is direction RTL?\n            this.dynamicOverrides.dir, this.overrides.dir, localeDefaults.dir);\n            var dirDefaults = dir === 'rtl' ? rtlDefaults : {};\n            this.dirDefaults = dirDefaults;\n            this.localeDefaults = localeDefaults;\n            this.computed = mergeOptions([\n                globalDefaults,\n                dirDefaults,\n                localeDefaults,\n                this.overrides,\n                this.dynamicOverrides\n            ]);\n        };\n        return OptionsManager;\n    }());\n\n    var calendarSystemClassMap = {};\n    function registerCalendarSystem(name, theClass) {\n        calendarSystemClassMap[name] = theClass;\n    }\n    function createCalendarSystem(name) {\n        return new calendarSystemClassMap[name]();\n    }\n    var GregorianCalendarSystem = /** @class */ (function () {\n        function GregorianCalendarSystem() {\n        }\n        GregorianCalendarSystem.prototype.getMarkerYear = function (d) {\n            return d.getUTCFullYear();\n        };\n        GregorianCalendarSystem.prototype.getMarkerMonth = function (d) {\n            return d.getUTCMonth();\n        };\n        GregorianCalendarSystem.prototype.getMarkerDay = function (d) {\n            return d.getUTCDate();\n        };\n        GregorianCalendarSystem.prototype.arrayToMarker = function (arr) {\n            return arrayToUtcDate(arr);\n        };\n        GregorianCalendarSystem.prototype.markerToArray = function (marker) {\n            return dateToUtcArray(marker);\n        };\n        return GregorianCalendarSystem;\n    }());\n    registerCalendarSystem('gregory', GregorianCalendarSystem);\n\n    var ISO_RE = /^\\s*(\\d{4})(-(\\d{2})(-(\\d{2})([T ](\\d{2}):(\\d{2})(:(\\d{2})(\\.(\\d+))?)?(Z|(([-+])(\\d{2})(:?(\\d{2}))?))?)?)?)?$/;\n    function parse(str) {\n        var m = ISO_RE.exec(str);\n        if (m) {\n            var marker = new Date(Date.UTC(Number(m[1]), m[3] ? Number(m[3]) - 1 : 0, Number(m[5] || 1), Number(m[7] || 0), Number(m[8] || 0), Number(m[10] || 0), m[12] ? Number('0.' + m[12]) * 1000 : 0));\n            if (isValidDate(marker)) {\n                var timeZoneOffset = null;\n                if (m[13]) {\n                    timeZoneOffset = (m[15] === '-' ? -1 : 1) * (Number(m[16] || 0) * 60 +\n                        Number(m[18] || 0));\n                }\n                return {\n                    marker: marker,\n                    isTimeUnspecified: !m[6],\n                    timeZoneOffset: timeZoneOffset\n                };\n            }\n        }\n        return null;\n    }\n\n    var DateEnv = /** @class */ (function () {\n        function DateEnv(settings) {\n            var timeZone = this.timeZone = settings.timeZone;\n            var isNamedTimeZone = timeZone !== 'local' && timeZone !== 'UTC';\n            if (settings.namedTimeZoneImpl && isNamedTimeZone) {\n                this.namedTimeZoneImpl = new settings.namedTimeZoneImpl(timeZone);\n            }\n            this.canComputeOffset = Boolean(!isNamedTimeZone || this.namedTimeZoneImpl);\n            this.calendarSystem = createCalendarSystem(settings.calendarSystem);\n            this.locale = settings.locale;\n            this.weekDow = settings.locale.week.dow;\n            this.weekDoy = settings.locale.week.doy;\n            if (settings.weekNumberCalculation === 'ISO') {\n                this.weekDow = 1;\n                this.weekDoy = 4;\n            }\n            if (typeof settings.firstDay === 'number') {\n                this.weekDow = settings.firstDay;\n            }\n            if (typeof settings.weekNumberCalculation === 'function') {\n                this.weekNumberFunc = settings.weekNumberCalculation;\n            }\n            this.weekLabel = settings.weekLabel != null ? settings.weekLabel : settings.locale.options.weekLabel;\n            this.cmdFormatter = settings.cmdFormatter;\n        }\n        // Creating / Parsing\n        DateEnv.prototype.createMarker = function (input) {\n            var meta = this.createMarkerMeta(input);\n            if (meta === null) {\n                return null;\n            }\n            return meta.marker;\n        };\n        DateEnv.prototype.createNowMarker = function () {\n            if (this.canComputeOffset) {\n                return this.timestampToMarker(new Date().valueOf());\n            }\n            else {\n                // if we can't compute the current date val for a timezone,\n                // better to give the current local date vals than UTC\n                return arrayToUtcDate(dateToLocalArray(new Date()));\n            }\n        };\n        DateEnv.prototype.createMarkerMeta = function (input) {\n            if (typeof input === 'string') {\n                return this.parse(input);\n            }\n            var marker = null;\n            if (typeof input === 'number') {\n                marker = this.timestampToMarker(input);\n            }\n            else if (input instanceof Date) {\n                input = input.valueOf();\n                if (!isNaN(input)) {\n                    marker = this.timestampToMarker(input);\n                }\n            }\n            else if (Array.isArray(input)) {\n                marker = arrayToUtcDate(input);\n            }\n            if (marker === null || !isValidDate(marker)) {\n                return null;\n            }\n            return { marker: marker, isTimeUnspecified: false, forcedTzo: null };\n        };\n        DateEnv.prototype.parse = function (s) {\n            var parts = parse(s);\n            if (parts === null) {\n                return null;\n            }\n            var marker = parts.marker;\n            var forcedTzo = null;\n            if (parts.timeZoneOffset !== null) {\n                if (this.canComputeOffset) {\n                    marker = this.timestampToMarker(marker.valueOf() - parts.timeZoneOffset * 60 * 1000);\n                }\n                else {\n                    forcedTzo = parts.timeZoneOffset;\n                }\n            }\n            return { marker: marker, isTimeUnspecified: parts.isTimeUnspecified, forcedTzo: forcedTzo };\n        };\n        // Accessors\n        DateEnv.prototype.getYear = function (marker) {\n            return this.calendarSystem.getMarkerYear(marker);\n        };\n        DateEnv.prototype.getMonth = function (marker) {\n            return this.calendarSystem.getMarkerMonth(marker);\n        };\n        // Adding / Subtracting\n        DateEnv.prototype.add = function (marker, dur) {\n            var a = this.calendarSystem.markerToArray(marker);\n            a[0] += dur.years;\n            a[1] += dur.months;\n            a[2] += dur.days;\n            a[6] += dur.milliseconds;\n            return this.calendarSystem.arrayToMarker(a);\n        };\n        DateEnv.prototype.subtract = function (marker, dur) {\n            var a = this.calendarSystem.markerToArray(marker);\n            a[0] -= dur.years;\n            a[1] -= dur.months;\n            a[2] -= dur.days;\n            a[6] -= dur.milliseconds;\n            return this.calendarSystem.arrayToMarker(a);\n        };\n        DateEnv.prototype.addYears = function (marker, n) {\n            var a = this.calendarSystem.markerToArray(marker);\n            a[0] += n;\n            return this.calendarSystem.arrayToMarker(a);\n        };\n        DateEnv.prototype.addMonths = function (marker, n) {\n            var a = this.calendarSystem.markerToArray(marker);\n            a[1] += n;\n            return this.calendarSystem.arrayToMarker(a);\n        };\n        // Diffing Whole Units\n        DateEnv.prototype.diffWholeYears = function (m0, m1) {\n            var calendarSystem = this.calendarSystem;\n            if (timeAsMs(m0) === timeAsMs(m1) &&\n                calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1) &&\n                calendarSystem.getMarkerMonth(m0) === calendarSystem.getMarkerMonth(m1)) {\n                return calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0);\n            }\n            return null;\n        };\n        DateEnv.prototype.diffWholeMonths = function (m0, m1) {\n            var calendarSystem = this.calendarSystem;\n            if (timeAsMs(m0) === timeAsMs(m1) &&\n                calendarSystem.getMarkerDay(m0) === calendarSystem.getMarkerDay(m1)) {\n                return (calendarSystem.getMarkerMonth(m1) - calendarSystem.getMarkerMonth(m0)) +\n                    (calendarSystem.getMarkerYear(m1) - calendarSystem.getMarkerYear(m0)) * 12;\n            }\n            return null;\n        };\n        // Range / Duration\n        DateEnv.prototype.greatestWholeUnit = function (m0, m1) {\n            var n = this.diffWholeYears(m0, m1);\n            if (n !== null) {\n                return { unit: 'year', value: n };\n            }\n            n = this.diffWholeMonths(m0, m1);\n            if (n !== null) {\n                return { unit: 'month', value: n };\n            }\n            n = diffWholeWeeks(m0, m1);\n            if (n !== null) {\n                return { unit: 'week', value: n };\n            }\n            n = diffWholeDays(m0, m1);\n            if (n !== null) {\n                return { unit: 'day', value: n };\n            }\n            n = diffHours(m0, m1);\n            if (isInt(n)) {\n                return { unit: 'hour', value: n };\n            }\n            n = diffMinutes(m0, m1);\n            if (isInt(n)) {\n                return { unit: 'minute', value: n };\n            }\n            n = diffSeconds(m0, m1);\n            if (isInt(n)) {\n                return { unit: 'second', value: n };\n            }\n            return { unit: 'millisecond', value: m1.valueOf() - m0.valueOf() };\n        };\n        DateEnv.prototype.countDurationsBetween = function (m0, m1, d) {\n            // TODO: can use greatestWholeUnit\n            var diff;\n            if (d.years) {\n                diff = this.diffWholeYears(m0, m1);\n                if (diff !== null) {\n                    return diff / asRoughYears(d);\n                }\n            }\n            if (d.months) {\n                diff = this.diffWholeMonths(m0, m1);\n                if (diff !== null) {\n                    return diff / asRoughMonths(d);\n                }\n            }\n            if (d.days) {\n                diff = diffWholeDays(m0, m1);\n                if (diff !== null) {\n                    return diff / asRoughDays(d);\n                }\n            }\n            return (m1.valueOf() - m0.valueOf()) / asRoughMs(d);\n        };\n        // Start-Of\n        DateEnv.prototype.startOf = function (m, unit) {\n            if (unit === 'year') {\n                return this.startOfYear(m);\n            }\n            else if (unit === 'month') {\n                return this.startOfMonth(m);\n            }\n            else if (unit === 'week') {\n                return this.startOfWeek(m);\n            }\n            else if (unit === 'day') {\n                return startOfDay(m);\n            }\n            else if (unit === 'hour') {\n                return startOfHour(m);\n            }\n            else if (unit === 'minute') {\n                return startOfMinute(m);\n            }\n            else if (unit === 'second') {\n                return startOfSecond(m);\n            }\n        };\n        DateEnv.prototype.startOfYear = function (m) {\n            return this.calendarSystem.arrayToMarker([\n                this.calendarSystem.getMarkerYear(m)\n            ]);\n        };\n        DateEnv.prototype.startOfMonth = function (m) {\n            return this.calendarSystem.arrayToMarker([\n                this.calendarSystem.getMarkerYear(m),\n                this.calendarSystem.getMarkerMonth(m)\n            ]);\n        };\n        DateEnv.prototype.startOfWeek = function (m) {\n            return this.calendarSystem.arrayToMarker([\n                this.calendarSystem.getMarkerYear(m),\n                this.calendarSystem.getMarkerMonth(m),\n                m.getUTCDate() - ((m.getUTCDay() - this.weekDow + 7) % 7)\n            ]);\n        };\n        // Week Number\n        DateEnv.prototype.computeWeekNumber = function (marker) {\n            if (this.weekNumberFunc) {\n                return this.weekNumberFunc(this.toDate(marker));\n            }\n            else {\n                return weekOfYear(marker, this.weekDow, this.weekDoy);\n            }\n        };\n        // TODO: choke on timeZoneName: long\n        DateEnv.prototype.format = function (marker, formatter, dateOptions) {\n            if (dateOptions === void 0) { dateOptions = {}; }\n            return formatter.format({\n                marker: marker,\n                timeZoneOffset: dateOptions.forcedTzo != null ?\n                    dateOptions.forcedTzo :\n                    this.offsetForMarker(marker)\n            }, this);\n        };\n        DateEnv.prototype.formatRange = function (start, end, formatter, dateOptions) {\n            if (dateOptions === void 0) { dateOptions = {}; }\n            if (dateOptions.isEndExclusive) {\n                end = addMs(end, -1);\n            }\n            return formatter.formatRange({\n                marker: start,\n                timeZoneOffset: dateOptions.forcedStartTzo != null ?\n                    dateOptions.forcedStartTzo :\n                    this.offsetForMarker(start)\n            }, {\n                marker: end,\n                timeZoneOffset: dateOptions.forcedEndTzo != null ?\n                    dateOptions.forcedEndTzo :\n                    this.offsetForMarker(end)\n            }, this);\n        };\n        DateEnv.prototype.formatIso = function (marker, extraOptions) {\n            if (extraOptions === void 0) { extraOptions = {}; }\n            var timeZoneOffset = null;\n            if (!extraOptions.omitTimeZoneOffset) {\n                if (extraOptions.forcedTzo != null) {\n                    timeZoneOffset = extraOptions.forcedTzo;\n                }\n                else {\n                    timeZoneOffset = this.offsetForMarker(marker);\n                }\n            }\n            return buildIsoString(marker, timeZoneOffset, extraOptions.omitTime);\n        };\n        // TimeZone\n        DateEnv.prototype.timestampToMarker = function (ms) {\n            if (this.timeZone === 'local') {\n                return arrayToUtcDate(dateToLocalArray(new Date(ms)));\n            }\n            else if (this.timeZone === 'UTC' || !this.namedTimeZoneImpl) {\n                return new Date(ms);\n            }\n            else {\n                return arrayToUtcDate(this.namedTimeZoneImpl.timestampToArray(ms));\n            }\n        };\n        DateEnv.prototype.offsetForMarker = function (m) {\n            if (this.timeZone === 'local') {\n                return -arrayToLocalDate(dateToUtcArray(m)).getTimezoneOffset(); // convert \"inverse\" offset to \"normal\" offset\n            }\n            else if (this.timeZone === 'UTC') {\n                return 0;\n            }\n            else if (this.namedTimeZoneImpl) {\n                return this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m));\n            }\n            return null;\n        };\n        // Conversion\n        DateEnv.prototype.toDate = function (m, forcedTzo) {\n            if (this.timeZone === 'local') {\n                return arrayToLocalDate(dateToUtcArray(m));\n            }\n            else if (this.timeZone === 'UTC') {\n                return new Date(m.valueOf()); // make sure it's a copy\n            }\n            else if (!this.namedTimeZoneImpl) {\n                return new Date(m.valueOf() - (forcedTzo || 0));\n            }\n            else {\n                return new Date(m.valueOf() -\n                    this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m)) * 1000 * 60 // convert minutes -> ms\n                );\n            }\n        };\n        return DateEnv;\n    }());\n\n    var SIMPLE_SOURCE_PROPS = {\n        id: String,\n        allDayDefault: Boolean,\n        eventDataTransform: Function,\n        success: Function,\n        failure: Function\n    };\n    var uid$2 = 0;\n    function doesSourceNeedRange(eventSource, calendar) {\n        var defs = calendar.pluginSystem.hooks.eventSourceDefs;\n        return !defs[eventSource.sourceDefId].ignoreRange;\n    }\n    function parseEventSource(raw, calendar) {\n        var defs = calendar.pluginSystem.hooks.eventSourceDefs;\n        for (var i = defs.length - 1; i >= 0; i--) { // later-added plugins take precedence\n            var def = defs[i];\n            var meta = def.parseMeta(raw);\n            if (meta) {\n                var res = parseEventSourceProps(typeof raw === 'object' ? raw : {}, meta, i, calendar);\n                res._raw = raw;\n                return res;\n            }\n        }\n        return null;\n    }\n    function parseEventSourceProps(raw, meta, sourceDefId, calendar) {\n        var leftovers0 = {};\n        var props = refineProps(raw, SIMPLE_SOURCE_PROPS, {}, leftovers0);\n        var leftovers1 = {};\n        var ui = processUnscopedUiProps(leftovers0, calendar, leftovers1);\n        props.isFetching = false;\n        props.latestFetchId = '';\n        props.fetchRange = null;\n        props.publicId = String(raw.id || '');\n        props.sourceId = String(uid$2++);\n        props.sourceDefId = sourceDefId;\n        props.meta = meta;\n        props.ui = ui;\n        props.extendedProps = leftovers1;\n        return props;\n    }\n\n    function reduceEventSources (eventSources, action, dateProfile, calendar) {\n        switch (action.type) {\n            case 'ADD_EVENT_SOURCES': // already parsed\n                return addSources(eventSources, action.sources, dateProfile ? dateProfile.activeRange : null, calendar);\n            case 'REMOVE_EVENT_SOURCE':\n                return removeSource(eventSources, action.sourceId);\n            case 'PREV': // TODO: how do we track all actions that affect dateProfile :(\n            case 'NEXT':\n            case 'SET_DATE':\n            case 'SET_VIEW_TYPE':\n                if (dateProfile) {\n                    return fetchDirtySources(eventSources, dateProfile.activeRange, calendar);\n                }\n                else {\n                    return eventSources;\n                }\n            case 'FETCH_EVENT_SOURCES':\n            case 'CHANGE_TIMEZONE':\n                return fetchSourcesByIds(eventSources, action.sourceIds ?\n                    arrayToHash(action.sourceIds) :\n                    excludeStaticSources(eventSources, calendar), dateProfile ? dateProfile.activeRange : null, calendar);\n            case 'RECEIVE_EVENTS':\n            case 'RECEIVE_EVENT_ERROR':\n                return receiveResponse(eventSources, action.sourceId, action.fetchId, action.fetchRange);\n            case 'REMOVE_ALL_EVENT_SOURCES':\n                return {};\n            default:\n                return eventSources;\n        }\n    }\n    var uid$3 = 0;\n    function addSources(eventSourceHash, sources, fetchRange, calendar) {\n        var hash = {};\n        for (var _i = 0, sources_1 = sources; _i < sources_1.length; _i++) {\n            var source = sources_1[_i];\n            hash[source.sourceId] = source;\n        }\n        if (fetchRange) {\n            hash = fetchDirtySources(hash, fetchRange, calendar);\n        }\n        return __assign({}, eventSourceHash, hash);\n    }\n    function removeSource(eventSourceHash, sourceId) {\n        return filterHash(eventSourceHash, function (eventSource) {\n            return eventSource.sourceId !== sourceId;\n        });\n    }\n    function fetchDirtySources(sourceHash, fetchRange, calendar) {\n        return fetchSourcesByIds(sourceHash, filterHash(sourceHash, function (eventSource) {\n            return isSourceDirty(eventSource, fetchRange, calendar);\n        }), fetchRange, calendar);\n    }\n    function isSourceDirty(eventSource, fetchRange, calendar) {\n        if (!doesSourceNeedRange(eventSource, calendar)) {\n            return !eventSource.latestFetchId;\n        }\n        else {\n            return !calendar.opt('lazyFetching') ||\n                !eventSource.fetchRange ||\n                eventSource.isFetching || // always cancel outdated in-progress fetches\n                fetchRange.start < eventSource.fetchRange.start ||\n                fetchRange.end > eventSource.fetchRange.end;\n        }\n    }\n    function fetchSourcesByIds(prevSources, sourceIdHash, fetchRange, calendar) {\n        var nextSources = {};\n        for (var sourceId in prevSources) {\n            var source = prevSources[sourceId];\n            if (sourceIdHash[sourceId]) {\n                nextSources[sourceId] = fetchSource(source, fetchRange, calendar);\n            }\n            else {\n                nextSources[sourceId] = source;\n            }\n        }\n        return nextSources;\n    }\n    function fetchSource(eventSource, fetchRange, calendar) {\n        var sourceDef = calendar.pluginSystem.hooks.eventSourceDefs[eventSource.sourceDefId];\n        var fetchId = String(uid$3++);\n        sourceDef.fetch({\n            eventSource: eventSource,\n            calendar: calendar,\n            range: fetchRange\n        }, function (res) {\n            var rawEvents = res.rawEvents;\n            var calSuccess = calendar.opt('eventSourceSuccess');\n            var calSuccessRes;\n            var sourceSuccessRes;\n            if (eventSource.success) {\n                sourceSuccessRes = eventSource.success(rawEvents, res.xhr);\n            }\n            if (calSuccess) {\n                calSuccessRes = calSuccess(rawEvents, res.xhr);\n            }\n            rawEvents = sourceSuccessRes || calSuccessRes || rawEvents;\n            calendar.dispatch({\n                type: 'RECEIVE_EVENTS',\n                sourceId: eventSource.sourceId,\n                fetchId: fetchId,\n                fetchRange: fetchRange,\n                rawEvents: rawEvents\n            });\n        }, function (error) {\n            var callFailure = calendar.opt('eventSourceFailure');\n            console.warn(error.message, error);\n            if (eventSource.failure) {\n                eventSource.failure(error);\n            }\n            if (callFailure) {\n                callFailure(error);\n            }\n            calendar.dispatch({\n                type: 'RECEIVE_EVENT_ERROR',\n                sourceId: eventSource.sourceId,\n                fetchId: fetchId,\n                fetchRange: fetchRange,\n                error: error\n            });\n        });\n        return __assign({}, eventSource, { isFetching: true, latestFetchId: fetchId });\n    }\n    function receiveResponse(sourceHash, sourceId, fetchId, fetchRange) {\n        var _a;\n        var eventSource = sourceHash[sourceId];\n        if (eventSource && // not already removed\n            fetchId === eventSource.latestFetchId) {\n            return __assign({}, sourceHash, (_a = {}, _a[sourceId] = __assign({}, eventSource, { isFetching: false, fetchRange: fetchRange // also serves as a marker that at least one fetch has completed\n             }), _a));\n        }\n        return sourceHash;\n    }\n    function excludeStaticSources(eventSources, calendar) {\n        return filterHash(eventSources, function (eventSource) {\n            return doesSourceNeedRange(eventSource, calendar);\n        });\n    }\n\n    var DateProfileGenerator = /** @class */ (function () {\n        function DateProfileGenerator(viewSpec, calendar) {\n            this.viewSpec = viewSpec;\n            this.options = viewSpec.options;\n            this.dateEnv = calendar.dateEnv;\n            this.calendar = calendar;\n            this.initHiddenDays();\n        }\n        /* Date Range Computation\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Builds a structure with info about what the dates/ranges will be for the \"prev\" view.\n        DateProfileGenerator.prototype.buildPrev = function (currentDateProfile, currentDate) {\n            var dateEnv = this.dateEnv;\n            var prevDate = dateEnv.subtract(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit), // important for start-of-month\n            currentDateProfile.dateIncrement);\n            return this.build(prevDate, -1);\n        };\n        // Builds a structure with info about what the dates/ranges will be for the \"next\" view.\n        DateProfileGenerator.prototype.buildNext = function (currentDateProfile, currentDate) {\n            var dateEnv = this.dateEnv;\n            var nextDate = dateEnv.add(dateEnv.startOf(currentDate, currentDateProfile.currentRangeUnit), // important for start-of-month\n            currentDateProfile.dateIncrement);\n            return this.build(nextDate, 1);\n        };\n        // Builds a structure holding dates/ranges for rendering around the given date.\n        // Optional direction param indicates whether the date is being incremented/decremented\n        // from its previous value. decremented = -1, incremented = 1 (default).\n        DateProfileGenerator.prototype.build = function (currentDate, direction, forceToValid) {\n            if (forceToValid === void 0) { forceToValid = false; }\n            var validRange;\n            var minTime = null;\n            var maxTime = null;\n            var currentInfo;\n            var isRangeAllDay;\n            var renderRange;\n            var activeRange;\n            var isValid;\n            validRange = this.buildValidRange();\n            validRange = this.trimHiddenDays(validRange);\n            if (forceToValid) {\n                currentDate = constrainMarkerToRange(currentDate, validRange);\n            }\n            currentInfo = this.buildCurrentRangeInfo(currentDate, direction);\n            isRangeAllDay = /^(year|month|week|day)$/.test(currentInfo.unit);\n            renderRange = this.buildRenderRange(this.trimHiddenDays(currentInfo.range), currentInfo.unit, isRangeAllDay);\n            renderRange = this.trimHiddenDays(renderRange);\n            activeRange = renderRange;\n            if (!this.options.showNonCurrentDates) {\n                activeRange = intersectRanges(activeRange, currentInfo.range);\n            }\n            minTime = createDuration(this.options.minTime);\n            maxTime = createDuration(this.options.maxTime);\n            activeRange = this.adjustActiveRange(activeRange, minTime, maxTime);\n            activeRange = intersectRanges(activeRange, validRange); // might return null\n            // it's invalid if the originally requested date is not contained,\n            // or if the range is completely outside of the valid range.\n            isValid = rangesIntersect(currentInfo.range, validRange);\n            return {\n                // constraint for where prev/next operations can go and where events can be dragged/resized to.\n                // an object with optional start and end properties.\n                validRange: validRange,\n                // range the view is formally responsible for.\n                // for example, a month view might have 1st-31st, excluding padded dates\n                currentRange: currentInfo.range,\n                // name of largest unit being displayed, like \"month\" or \"week\"\n                currentRangeUnit: currentInfo.unit,\n                isRangeAllDay: isRangeAllDay,\n                // dates that display events and accept drag-n-drop\n                // will be `null` if no dates accept events\n                activeRange: activeRange,\n                // date range with a rendered skeleton\n                // includes not-active days that need some sort of DOM\n                renderRange: renderRange,\n                // Duration object that denotes the first visible time of any given day\n                minTime: minTime,\n                // Duration object that denotes the exclusive visible end time of any given day\n                maxTime: maxTime,\n                isValid: isValid,\n                // how far the current date will move for a prev/next operation\n                dateIncrement: this.buildDateIncrement(currentInfo.duration)\n                // pass a fallback (might be null) ^\n            };\n        };\n        // Builds an object with optional start/end properties.\n        // Indicates the minimum/maximum dates to display.\n        // not responsible for trimming hidden days.\n        DateProfileGenerator.prototype.buildValidRange = function () {\n            return this.getRangeOption('validRange', this.calendar.getNow()) ||\n                { start: null, end: null }; // completely open-ended\n        };\n        // Builds a structure with info about the \"current\" range, the range that is\n        // highlighted as being the current month for example.\n        // See build() for a description of `direction`.\n        // Guaranteed to have `range` and `unit` properties. `duration` is optional.\n        DateProfileGenerator.prototype.buildCurrentRangeInfo = function (date, direction) {\n            var _a = this, viewSpec = _a.viewSpec, dateEnv = _a.dateEnv;\n            var duration = null;\n            var unit = null;\n            var range = null;\n            var dayCount;\n            if (viewSpec.duration) {\n                duration = viewSpec.duration;\n                unit = viewSpec.durationUnit;\n                range = this.buildRangeFromDuration(date, direction, duration, unit);\n            }\n            else if ((dayCount = this.options.dayCount)) {\n                unit = 'day';\n                range = this.buildRangeFromDayCount(date, direction, dayCount);\n            }\n            else if ((range = this.buildCustomVisibleRange(date))) {\n                unit = dateEnv.greatestWholeUnit(range.start, range.end).unit;\n            }\n            else {\n                duration = this.getFallbackDuration();\n                unit = greatestDurationDenominator(duration).unit;\n                range = this.buildRangeFromDuration(date, direction, duration, unit);\n            }\n            return { duration: duration, unit: unit, range: range };\n        };\n        DateProfileGenerator.prototype.getFallbackDuration = function () {\n            return createDuration({ day: 1 });\n        };\n        // Returns a new activeRange to have time values (un-ambiguate)\n        // minTime or maxTime causes the range to expand.\n        DateProfileGenerator.prototype.adjustActiveRange = function (range, minTime, maxTime) {\n            var dateEnv = this.dateEnv;\n            var start = range.start;\n            var end = range.end;\n            if (this.viewSpec.class.prototype.usesMinMaxTime) {\n                // expand active range if minTime is negative (why not when positive?)\n                if (asRoughDays(minTime) < 0) {\n                    start = startOfDay(start); // necessary?\n                    start = dateEnv.add(start, minTime);\n                }\n                // expand active range if maxTime is beyond one day (why not when positive?)\n                if (asRoughDays(maxTime) > 1) {\n                    end = startOfDay(end); // necessary?\n                    end = addDays(end, -1);\n                    end = dateEnv.add(end, maxTime);\n                }\n            }\n            return { start: start, end: end };\n        };\n        // Builds the \"current\" range when it is specified as an explicit duration.\n        // `unit` is the already-computed greatestDurationDenominator unit of duration.\n        DateProfileGenerator.prototype.buildRangeFromDuration = function (date, direction, duration, unit) {\n            var dateEnv = this.dateEnv;\n            var alignment = this.options.dateAlignment;\n            var dateIncrementInput;\n            var dateIncrementDuration;\n            var start;\n            var end;\n            var res;\n            // compute what the alignment should be\n            if (!alignment) {\n                dateIncrementInput = this.options.dateIncrement;\n                if (dateIncrementInput) {\n                    dateIncrementDuration = createDuration(dateIncrementInput);\n                    // use the smaller of the two units\n                    if (asRoughMs(dateIncrementDuration) < asRoughMs(duration)) {\n                        alignment = greatestDurationDenominator(dateIncrementDuration, !getWeeksFromInput(dateIncrementInput)).unit;\n                    }\n                    else {\n                        alignment = unit;\n                    }\n                }\n                else {\n                    alignment = unit;\n                }\n            }\n            // if the view displays a single day or smaller\n            if (asRoughDays(duration) <= 1) {\n                if (this.isHiddenDay(start)) {\n                    start = this.skipHiddenDays(start, direction);\n                    start = startOfDay(start);\n                }\n            }\n            function computeRes() {\n                start = dateEnv.startOf(date, alignment);\n                end = dateEnv.add(start, duration);\n                res = { start: start, end: end };\n            }\n            computeRes();\n            // if range is completely enveloped by hidden days, go past the hidden days\n            if (!this.trimHiddenDays(res)) {\n                date = this.skipHiddenDays(date, direction);\n                computeRes();\n            }\n            return res;\n        };\n        // Builds the \"current\" range when a dayCount is specified.\n        DateProfileGenerator.prototype.buildRangeFromDayCount = function (date, direction, dayCount) {\n            var dateEnv = this.dateEnv;\n            var customAlignment = this.options.dateAlignment;\n            var runningCount = 0;\n            var start = date;\n            var end;\n            if (customAlignment) {\n                start = dateEnv.startOf(start, customAlignment);\n            }\n            start = startOfDay(start);\n            start = this.skipHiddenDays(start, direction);\n            end = start;\n            do {\n                end = addDays(end, 1);\n                if (!this.isHiddenDay(end)) {\n                    runningCount++;\n                }\n            } while (runningCount < dayCount);\n            return { start: start, end: end };\n        };\n        // Builds a normalized range object for the \"visible\" range,\n        // which is a way to define the currentRange and activeRange at the same time.\n        DateProfileGenerator.prototype.buildCustomVisibleRange = function (date) {\n            var dateEnv = this.dateEnv;\n            var visibleRange = this.getRangeOption('visibleRange', dateEnv.toDate(date));\n            if (visibleRange && (visibleRange.start == null || visibleRange.end == null)) {\n                return null;\n            }\n            return visibleRange;\n        };\n        // Computes the range that will represent the element/cells for *rendering*,\n        // but which may have voided days/times.\n        // not responsible for trimming hidden days.\n        DateProfileGenerator.prototype.buildRenderRange = function (currentRange, currentRangeUnit, isRangeAllDay) {\n            return currentRange;\n        };\n        // Compute the duration value that should be added/substracted to the current date\n        // when a prev/next operation happens.\n        DateProfileGenerator.prototype.buildDateIncrement = function (fallback) {\n            var dateIncrementInput = this.options.dateIncrement;\n            var customAlignment;\n            if (dateIncrementInput) {\n                return createDuration(dateIncrementInput);\n            }\n            else if ((customAlignment = this.options.dateAlignment)) {\n                return createDuration(1, customAlignment);\n            }\n            else if (fallback) {\n                return fallback;\n            }\n            else {\n                return createDuration({ days: 1 });\n            }\n        };\n        // Arguments after name will be forwarded to a hypothetical function value\n        // WARNING: passed-in arguments will be given to generator functions as-is and can cause side-effects.\n        // Always clone your objects if you fear mutation.\n        DateProfileGenerator.prototype.getRangeOption = function (name) {\n            var otherArgs = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                otherArgs[_i - 1] = arguments[_i];\n            }\n            var val = this.options[name];\n            if (typeof val === 'function') {\n                val = val.apply(null, otherArgs);\n            }\n            if (val) {\n                val = parseRange(val, this.dateEnv);\n            }\n            if (val) {\n                val = computeVisibleDayRange(val);\n            }\n            return val;\n        };\n        /* Hidden Days\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Initializes internal variables related to calculating hidden days-of-week\n        DateProfileGenerator.prototype.initHiddenDays = function () {\n            var hiddenDays = this.options.hiddenDays || []; // array of day-of-week indices that are hidden\n            var isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)\n            var dayCnt = 0;\n            var i;\n            if (this.options.weekends === false) {\n                hiddenDays.push(0, 6); // 0=sunday, 6=saturday\n            }\n            for (i = 0; i < 7; i++) {\n                if (!(isHiddenDayHash[i] = hiddenDays.indexOf(i) !== -1)) {\n                    dayCnt++;\n                }\n            }\n            if (!dayCnt) {\n                throw new Error('invalid hiddenDays'); // all days were hidden? bad.\n            }\n            this.isHiddenDayHash = isHiddenDayHash;\n        };\n        // Remove days from the beginning and end of the range that are computed as hidden.\n        // If the whole range is trimmed off, returns null\n        DateProfileGenerator.prototype.trimHiddenDays = function (range) {\n            var start = range.start;\n            var end = range.end;\n            if (start) {\n                start = this.skipHiddenDays(start);\n            }\n            if (end) {\n                end = this.skipHiddenDays(end, -1, true);\n            }\n            if (start == null || end == null || start < end) {\n                return { start: start, end: end };\n            }\n            return null;\n        };\n        // Is the current day hidden?\n        // `day` is a day-of-week index (0-6), or a Date (used for UTC)\n        DateProfileGenerator.prototype.isHiddenDay = function (day) {\n            if (day instanceof Date) {\n                day = day.getUTCDay();\n            }\n            return this.isHiddenDayHash[day];\n        };\n        // Incrementing the current day until it is no longer a hidden day, returning a copy.\n        // DOES NOT CONSIDER validRange!\n        // If the initial value of `date` is not a hidden day, don't do anything.\n        // Pass `isExclusive` as `true` if you are dealing with an end date.\n        // `inc` defaults to `1` (increment one day forward each time)\n        DateProfileGenerator.prototype.skipHiddenDays = function (date, inc, isExclusive) {\n            if (inc === void 0) { inc = 1; }\n            if (isExclusive === void 0) { isExclusive = false; }\n            while (this.isHiddenDayHash[(date.getUTCDay() + (isExclusive ? inc : 0) + 7) % 7]) {\n                date = addDays(date, inc);\n            }\n            return date;\n        };\n        return DateProfileGenerator;\n    }());\n    // TODO: find a way to avoid comparing DateProfiles. it's tedious\n    function isDateProfilesEqual(p0, p1) {\n        return rangesEqual(p0.validRange, p1.validRange) &&\n            rangesEqual(p0.activeRange, p1.activeRange) &&\n            rangesEqual(p0.renderRange, p1.renderRange) &&\n            durationsEqual(p0.minTime, p1.minTime) &&\n            durationsEqual(p0.maxTime, p1.maxTime);\n        /*\n        TODO: compare more?\n          currentRange: DateRange\n          currentRangeUnit: string\n          isRangeAllDay: boolean\n          isValid: boolean\n          dateIncrement: Duration\n        */\n    }\n\n    function reduce (state, action, calendar) {\n        var viewType = reduceViewType(state.viewType, action);\n        var dateProfile = reduceDateProfile(state.dateProfile, action, state.currentDate, viewType, calendar);\n        var eventSources = reduceEventSources(state.eventSources, action, dateProfile, calendar);\n        var nextState = __assign({}, state, { viewType: viewType,\n            dateProfile: dateProfile, currentDate: reduceCurrentDate(state.currentDate, action, dateProfile), eventSources: eventSources, eventStore: reduceEventStore(state.eventStore, action, eventSources, dateProfile, calendar), dateSelection: reduceDateSelection(state.dateSelection, action, calendar), eventSelection: reduceSelectedEvent(state.eventSelection, action), eventDrag: reduceEventDrag(state.eventDrag, action, eventSources, calendar), eventResize: reduceEventResize(state.eventResize, action, eventSources, calendar), eventSourceLoadingLevel: computeLoadingLevel(eventSources), loadingLevel: computeLoadingLevel(eventSources) });\n        for (var _i = 0, _a = calendar.pluginSystem.hooks.reducers; _i < _a.length; _i++) {\n            var reducerFunc = _a[_i];\n            nextState = reducerFunc(nextState, action, calendar);\n        }\n        // console.log(action.type, nextState)\n        return nextState;\n    }\n    function reduceViewType(currentViewType, action) {\n        switch (action.type) {\n            case 'SET_VIEW_TYPE':\n                return action.viewType;\n            default:\n                return currentViewType;\n        }\n    }\n    function reduceDateProfile(currentDateProfile, action, currentDate, viewType, calendar) {\n        var newDateProfile;\n        switch (action.type) {\n            case 'PREV':\n                newDateProfile = calendar.dateProfileGenerators[viewType].buildPrev(currentDateProfile, currentDate);\n                break;\n            case 'NEXT':\n                newDateProfile = calendar.dateProfileGenerators[viewType].buildNext(currentDateProfile, currentDate);\n                break;\n            case 'SET_DATE':\n                if (!currentDateProfile.activeRange ||\n                    !rangeContainsMarker(currentDateProfile.currentRange, action.dateMarker)) {\n                    newDateProfile = calendar.dateProfileGenerators[viewType].build(action.dateMarker, undefined, true // forceToValid\n                    );\n                }\n                break;\n            case 'SET_VIEW_TYPE':\n                var generator = calendar.dateProfileGenerators[viewType];\n                if (!generator) {\n                    throw new Error(viewType ?\n                        'The FullCalendar view \"' + viewType + '\" does not exist. Make sure your plugins are loaded correctly.' :\n                        'No available FullCalendar view plugins.');\n                }\n                newDateProfile = generator.build(action.dateMarker || currentDate, undefined, true // forceToValid\n                );\n                break;\n        }\n        if (newDateProfile &&\n            newDateProfile.isValid &&\n            !(currentDateProfile && isDateProfilesEqual(currentDateProfile, newDateProfile))) {\n            return newDateProfile;\n        }\n        else {\n            return currentDateProfile;\n        }\n    }\n    function reduceCurrentDate(currentDate, action, dateProfile) {\n        switch (action.type) {\n            case 'PREV':\n            case 'NEXT':\n                if (!rangeContainsMarker(dateProfile.currentRange, currentDate)) {\n                    return dateProfile.currentRange.start;\n                }\n                else {\n                    return currentDate;\n                }\n            case 'SET_DATE':\n            case 'SET_VIEW_TYPE':\n                var newDate = action.dateMarker || currentDate;\n                if (dateProfile.activeRange && !rangeContainsMarker(dateProfile.activeRange, newDate)) {\n                    return dateProfile.currentRange.start;\n                }\n                else {\n                    return newDate;\n                }\n            default:\n                return currentDate;\n        }\n    }\n    function reduceDateSelection(currentSelection, action, calendar) {\n        switch (action.type) {\n            case 'SELECT_DATES':\n                return action.selection;\n            case 'UNSELECT_DATES':\n                return null;\n            default:\n                return currentSelection;\n        }\n    }\n    function reduceSelectedEvent(currentInstanceId, action) {\n        switch (action.type) {\n            case 'SELECT_EVENT':\n                return action.eventInstanceId;\n            case 'UNSELECT_EVENT':\n                return '';\n            default:\n                return currentInstanceId;\n        }\n    }\n    function reduceEventDrag(currentDrag, action, sources, calendar) {\n        switch (action.type) {\n            case 'SET_EVENT_DRAG':\n                var newDrag = action.state;\n                return {\n                    affectedEvents: newDrag.affectedEvents,\n                    mutatedEvents: newDrag.mutatedEvents,\n                    isEvent: newDrag.isEvent,\n                    origSeg: newDrag.origSeg\n                };\n            case 'UNSET_EVENT_DRAG':\n                return null;\n            default:\n                return currentDrag;\n        }\n    }\n    function reduceEventResize(currentResize, action, sources, calendar) {\n        switch (action.type) {\n            case 'SET_EVENT_RESIZE':\n                var newResize = action.state;\n                return {\n                    affectedEvents: newResize.affectedEvents,\n                    mutatedEvents: newResize.mutatedEvents,\n                    isEvent: newResize.isEvent,\n                    origSeg: newResize.origSeg\n                };\n            case 'UNSET_EVENT_RESIZE':\n                return null;\n            default:\n                return currentResize;\n        }\n    }\n    function computeLoadingLevel(eventSources) {\n        var cnt = 0;\n        for (var sourceId in eventSources) {\n            if (eventSources[sourceId].isFetching) {\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n\n    var STANDARD_PROPS = {\n        start: null,\n        end: null,\n        allDay: Boolean\n    };\n    function parseDateSpan(raw, dateEnv, defaultDuration) {\n        var span = parseOpenDateSpan(raw, dateEnv);\n        var range = span.range;\n        if (!range.start) {\n            return null;\n        }\n        if (!range.end) {\n            if (defaultDuration == null) {\n                return null;\n            }\n            else {\n                range.end = dateEnv.add(range.start, defaultDuration);\n            }\n        }\n        return span;\n    }\n    /*\n    TODO: somehow combine with parseRange?\n    Will return null if the start/end props were present but parsed invalidly.\n    */\n    function parseOpenDateSpan(raw, dateEnv) {\n        var leftovers = {};\n        var standardProps = refineProps(raw, STANDARD_PROPS, {}, leftovers);\n        var startMeta = standardProps.start ? dateEnv.createMarkerMeta(standardProps.start) : null;\n        var endMeta = standardProps.end ? dateEnv.createMarkerMeta(standardProps.end) : null;\n        var allDay = standardProps.allDay;\n        if (allDay == null) {\n            allDay = (startMeta && startMeta.isTimeUnspecified) &&\n                (!endMeta || endMeta.isTimeUnspecified);\n        }\n        // use this leftover object as the selection object\n        leftovers.range = {\n            start: startMeta ? startMeta.marker : null,\n            end: endMeta ? endMeta.marker : null\n        };\n        leftovers.allDay = allDay;\n        return leftovers;\n    }\n    function isDateSpansEqual(span0, span1) {\n        return rangesEqual(span0.range, span1.range) &&\n            span0.allDay === span1.allDay &&\n            isSpanPropsEqual(span0, span1);\n    }\n    // the NON-DATE-RELATED props\n    function isSpanPropsEqual(span0, span1) {\n        for (var propName in span1) {\n            if (propName !== 'range' && propName !== 'allDay') {\n                if (span0[propName] !== span1[propName]) {\n                    return false;\n                }\n            }\n        }\n        // are there any props that span0 has that span1 DOESN'T have?\n        // both have range/allDay, so no need to special-case.\n        for (var propName in span0) {\n            if (!(propName in span1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function buildDateSpanApi(span, dateEnv) {\n        return {\n            start: dateEnv.toDate(span.range.start),\n            end: dateEnv.toDate(span.range.end),\n            startStr: dateEnv.formatIso(span.range.start, { omitTime: span.allDay }),\n            endStr: dateEnv.formatIso(span.range.end, { omitTime: span.allDay }),\n            allDay: span.allDay\n        };\n    }\n    function buildDatePointApi(span, dateEnv) {\n        return {\n            date: dateEnv.toDate(span.range.start),\n            dateStr: dateEnv.formatIso(span.range.start, { omitTime: span.allDay }),\n            allDay: span.allDay\n        };\n    }\n    function fabricateEventRange(dateSpan, eventUiBases, calendar) {\n        var def = parseEventDef({ editable: false }, '', // sourceId\n        dateSpan.allDay, true, // hasEnd\n        calendar);\n        return {\n            def: def,\n            ui: compileEventUi(def, eventUiBases),\n            instance: createEventInstance(def.defId, dateSpan.range),\n            range: dateSpan.range,\n            isStart: true,\n            isEnd: true\n        };\n    }\n\n    function compileViewDefs(defaultConfigs, overrideConfigs) {\n        var hash = {};\n        var viewType;\n        for (viewType in defaultConfigs) {\n            ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);\n        }\n        for (viewType in overrideConfigs) {\n            ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs);\n        }\n        return hash;\n    }\n    function ensureViewDef(viewType, hash, defaultConfigs, overrideConfigs) {\n        if (hash[viewType]) {\n            return hash[viewType];\n        }\n        var viewDef = buildViewDef(viewType, hash, defaultConfigs, overrideConfigs);\n        if (viewDef) {\n            hash[viewType] = viewDef;\n        }\n        return viewDef;\n    }\n    function buildViewDef(viewType, hash, defaultConfigs, overrideConfigs) {\n        var defaultConfig = defaultConfigs[viewType];\n        var overrideConfig = overrideConfigs[viewType];\n        var queryProp = function (name) {\n            return (defaultConfig && defaultConfig[name] !== null) ? defaultConfig[name] :\n                ((overrideConfig && overrideConfig[name] !== null) ? overrideConfig[name] : null);\n        };\n        var theClass = queryProp('class');\n        var superType = queryProp('superType');\n        if (!superType && theClass) {\n            superType =\n                findViewNameBySubclass(theClass, overrideConfigs) ||\n                    findViewNameBySubclass(theClass, defaultConfigs);\n        }\n        var superDef = null;\n        if (superType) {\n            if (superType === viewType) {\n                throw new Error('Can\\'t have a custom view type that references itself');\n            }\n            superDef = ensureViewDef(superType, hash, defaultConfigs, overrideConfigs);\n        }\n        if (!theClass && superDef) {\n            theClass = superDef.class;\n        }\n        if (!theClass) {\n            return null; // don't throw a warning, might be settings for a single-unit view\n        }\n        return {\n            type: viewType,\n            class: theClass,\n            defaults: __assign({}, (superDef ? superDef.defaults : {}), (defaultConfig ? defaultConfig.options : {})),\n            overrides: __assign({}, (superDef ? superDef.overrides : {}), (overrideConfig ? overrideConfig.options : {}))\n        };\n    }\n    function findViewNameBySubclass(viewSubclass, configs) {\n        var superProto = Object.getPrototypeOf(viewSubclass.prototype);\n        for (var viewType in configs) {\n            var parsed = configs[viewType];\n            // need DIRECT subclass, so instanceof won't do it\n            if (parsed.class && parsed.class.prototype === superProto) {\n                return viewType;\n            }\n        }\n        return '';\n    }\n\n    function parseViewConfigs(inputs) {\n        return mapHash(inputs, parseViewConfig);\n    }\n    var VIEW_DEF_PROPS = {\n        type: String,\n        class: null\n    };\n    function parseViewConfig(input) {\n        if (typeof input === 'function') {\n            input = { class: input };\n        }\n        var options = {};\n        var props = refineProps(input, VIEW_DEF_PROPS, {}, options);\n        return {\n            superType: props.type,\n            class: props.class,\n            options: options\n        };\n    }\n\n    function buildViewSpecs(defaultInputs, optionsManager) {\n        var defaultConfigs = parseViewConfigs(defaultInputs);\n        var overrideConfigs = parseViewConfigs(optionsManager.overrides.views);\n        var viewDefs = compileViewDefs(defaultConfigs, overrideConfigs);\n        return mapHash(viewDefs, function (viewDef) {\n            return buildViewSpec(viewDef, overrideConfigs, optionsManager);\n        });\n    }\n    function buildViewSpec(viewDef, overrideConfigs, optionsManager) {\n        var durationInput = viewDef.overrides.duration ||\n            viewDef.defaults.duration ||\n            optionsManager.dynamicOverrides.duration ||\n            optionsManager.overrides.duration;\n        var duration = null;\n        var durationUnit = '';\n        var singleUnit = '';\n        var singleUnitOverrides = {};\n        if (durationInput) {\n            duration = createDuration(durationInput);\n            if (duration) { // valid?\n                var denom = greatestDurationDenominator(duration, !getWeeksFromInput(durationInput));\n                durationUnit = denom.unit;\n                if (denom.value === 1) {\n                    singleUnit = durationUnit;\n                    singleUnitOverrides = overrideConfigs[durationUnit] ? overrideConfigs[durationUnit].options : {};\n                }\n            }\n        }\n        var queryButtonText = function (options) {\n            var buttonTextMap = options.buttonText || {};\n            var buttonTextKey = viewDef.defaults.buttonTextKey;\n            if (buttonTextKey != null && buttonTextMap[buttonTextKey] != null) {\n                return buttonTextMap[buttonTextKey];\n            }\n            if (buttonTextMap[viewDef.type] != null) {\n                return buttonTextMap[viewDef.type];\n            }\n            if (buttonTextMap[singleUnit] != null) {\n                return buttonTextMap[singleUnit];\n            }\n        };\n        return {\n            type: viewDef.type,\n            class: viewDef.class,\n            duration: duration,\n            durationUnit: durationUnit,\n            singleUnit: singleUnit,\n            options: __assign({}, globalDefaults, viewDef.defaults, optionsManager.dirDefaults, optionsManager.localeDefaults, optionsManager.overrides, singleUnitOverrides, viewDef.overrides, optionsManager.dynamicOverrides),\n            buttonTextOverride: queryButtonText(optionsManager.dynamicOverrides) ||\n                queryButtonText(optionsManager.overrides) || // constructor-specified buttonText lookup hash takes precedence\n                viewDef.overrides.buttonText,\n            buttonTextDefault: queryButtonText(optionsManager.localeDefaults) ||\n                queryButtonText(optionsManager.dirDefaults) ||\n                viewDef.defaults.buttonText ||\n                queryButtonText(globalDefaults) ||\n                viewDef.type // fall back to given view name\n        };\n    }\n\n    var Toolbar = /** @class */ (function (_super) {\n        __extends(Toolbar, _super);\n        function Toolbar(extraClassName) {\n            var _this = _super.call(this) || this;\n            _this._renderLayout = memoizeRendering(_this.renderLayout, _this.unrenderLayout);\n            _this._updateTitle = memoizeRendering(_this.updateTitle, null, [_this._renderLayout]);\n            _this._updateActiveButton = memoizeRendering(_this.updateActiveButton, null, [_this._renderLayout]);\n            _this._updateToday = memoizeRendering(_this.updateToday, null, [_this._renderLayout]);\n            _this._updatePrev = memoizeRendering(_this.updatePrev, null, [_this._renderLayout]);\n            _this._updateNext = memoizeRendering(_this.updateNext, null, [_this._renderLayout]);\n            _this.el = createElement('div', { className: 'fc-toolbar ' + extraClassName });\n            return _this;\n        }\n        Toolbar.prototype.destroy = function () {\n            _super.prototype.destroy.call(this);\n            this._renderLayout.unrender(); // should unrender everything else\n            removeElement(this.el);\n        };\n        Toolbar.prototype.render = function (props) {\n            this._renderLayout(props.layout);\n            this._updateTitle(props.title);\n            this._updateActiveButton(props.activeButton);\n            this._updateToday(props.isTodayEnabled);\n            this._updatePrev(props.isPrevEnabled);\n            this._updateNext(props.isNextEnabled);\n        };\n        Toolbar.prototype.renderLayout = function (layout) {\n            var el = this.el;\n            this.viewsWithButtons = [];\n            appendToElement(el, this.renderSection('left', layout.left));\n            appendToElement(el, this.renderSection('center', layout.center));\n            appendToElement(el, this.renderSection('right', layout.right));\n        };\n        Toolbar.prototype.unrenderLayout = function () {\n            this.el.innerHTML = '';\n        };\n        Toolbar.prototype.renderSection = function (position, buttonStr) {\n            var _this = this;\n            var _a = this.context, theme = _a.theme, calendar = _a.calendar;\n            var optionsManager = calendar.optionsManager;\n            var viewSpecs = calendar.viewSpecs;\n            var sectionEl = createElement('div', { className: 'fc-' + position });\n            var calendarCustomButtons = optionsManager.computed.customButtons || {};\n            var calendarButtonTextOverrides = optionsManager.overrides.buttonText || {};\n            var calendarButtonText = optionsManager.computed.buttonText || {};\n            if (buttonStr) {\n                buttonStr.split(' ').forEach(function (buttonGroupStr, i) {\n                    var groupChildren = [];\n                    var isOnlyButtons = true;\n                    var groupEl;\n                    buttonGroupStr.split(',').forEach(function (buttonName, j) {\n                        var customButtonProps;\n                        var viewSpec;\n                        var buttonClick;\n                        var buttonIcon; // only one of these will be set\n                        var buttonText; // \"\n                        var buttonInnerHtml;\n                        var buttonClasses;\n                        var buttonEl;\n                        var buttonAriaAttr;\n                        if (buttonName === 'title') {\n                            groupChildren.push(htmlToElement('<h2>&nbsp;</h2>')); // we always want it to take up height\n                            isOnlyButtons = false;\n                        }\n                        else {\n                            if ((customButtonProps = calendarCustomButtons[buttonName])) {\n                                buttonClick = function (ev) {\n                                    if (customButtonProps.click) {\n                                        customButtonProps.click.call(buttonEl, ev);\n                                    }\n                                };\n                                (buttonIcon = theme.getCustomButtonIconClass(customButtonProps)) ||\n                                    (buttonIcon = theme.getIconClass(buttonName)) ||\n                                    (buttonText = customButtonProps.text);\n                            }\n                            else if ((viewSpec = viewSpecs[buttonName])) {\n                                _this.viewsWithButtons.push(buttonName);\n                                buttonClick = function () {\n                                    calendar.changeView(buttonName);\n                                };\n                                (buttonText = viewSpec.buttonTextOverride) ||\n                                    (buttonIcon = theme.getIconClass(buttonName)) ||\n                                    (buttonText = viewSpec.buttonTextDefault);\n                            }\n                            else if (calendar[buttonName]) { // a calendar method\n                                buttonClick = function () {\n                                    calendar[buttonName]();\n                                };\n                                (buttonText = calendarButtonTextOverrides[buttonName]) ||\n                                    (buttonIcon = theme.getIconClass(buttonName)) ||\n                                    (buttonText = calendarButtonText[buttonName]);\n                                //            ^ everything else is considered default\n                            }\n                            if (buttonClick) {\n                                buttonClasses = [\n                                    'fc-' + buttonName + '-button',\n                                    theme.getClass('button')\n                                ];\n                                if (buttonText) {\n                                    buttonInnerHtml = htmlEscape(buttonText);\n                                    buttonAriaAttr = '';\n                                }\n                                else if (buttonIcon) {\n                                    buttonInnerHtml = \"<span class='\" + buttonIcon + \"'></span>\";\n                                    buttonAriaAttr = ' aria-label=\"' + buttonName + '\"';\n                                }\n                                buttonEl = htmlToElement(// type=\"button\" so that it doesn't submit a form\n                                '<button type=\"button\" class=\"' + buttonClasses.join(' ') + '\"' +\n                                    buttonAriaAttr +\n                                    '>' + buttonInnerHtml + '</button>');\n                                buttonEl.addEventListener('click', buttonClick);\n                                groupChildren.push(buttonEl);\n                            }\n                        }\n                    });\n                    if (groupChildren.length > 1) {\n                        groupEl = document.createElement('div');\n                        var buttonGroupClassName = theme.getClass('buttonGroup');\n                        if (isOnlyButtons && buttonGroupClassName) {\n                            groupEl.classList.add(buttonGroupClassName);\n                        }\n                        appendToElement(groupEl, groupChildren);\n                        sectionEl.appendChild(groupEl);\n                    }\n                    else {\n                        appendToElement(sectionEl, groupChildren); // 1 or 0 children\n                    }\n                });\n            }\n            return sectionEl;\n        };\n        Toolbar.prototype.updateToday = function (isTodayEnabled) {\n            this.toggleButtonEnabled('today', isTodayEnabled);\n        };\n        Toolbar.prototype.updatePrev = function (isPrevEnabled) {\n            this.toggleButtonEnabled('prev', isPrevEnabled);\n        };\n        Toolbar.prototype.updateNext = function (isNextEnabled) {\n            this.toggleButtonEnabled('next', isNextEnabled);\n        };\n        Toolbar.prototype.updateTitle = function (text) {\n            findElements(this.el, 'h2').forEach(function (titleEl) {\n                titleEl.innerText = text;\n            });\n        };\n        Toolbar.prototype.updateActiveButton = function (buttonName) {\n            var theme = this.context.theme;\n            var className = theme.getClass('buttonActive');\n            findElements(this.el, 'button').forEach(function (buttonEl) {\n                if (buttonName && buttonEl.classList.contains('fc-' + buttonName + '-button')) {\n                    buttonEl.classList.add(className);\n                }\n                else {\n                    buttonEl.classList.remove(className);\n                }\n            });\n        };\n        Toolbar.prototype.toggleButtonEnabled = function (buttonName, bool) {\n            findElements(this.el, '.fc-' + buttonName + '-button').forEach(function (buttonEl) {\n                buttonEl.disabled = !bool;\n            });\n        };\n        return Toolbar;\n    }(Component));\n\n    var CalendarComponent = /** @class */ (function (_super) {\n        __extends(CalendarComponent, _super);\n        function CalendarComponent(el) {\n            var _this = _super.call(this) || this;\n            _this.elClassNames = [];\n            _this.renderSkeleton = memoizeRendering(_this._renderSkeleton, _this._unrenderSkeleton);\n            _this.renderToolbars = memoizeRendering(_this._renderToolbars, _this._unrenderToolbars, [_this.renderSkeleton]);\n            _this.buildComponentContext = memoize(buildComponentContext);\n            _this.buildViewPropTransformers = memoize(buildViewPropTransformers);\n            _this.el = el;\n            _this.computeTitle = memoize(computeTitle);\n            _this.parseBusinessHours = memoize(function (input) {\n                return parseBusinessHours(input, _this.context.calendar);\n            });\n            return _this;\n        }\n        CalendarComponent.prototype.render = function (props, context) {\n            this.freezeHeight();\n            var title = this.computeTitle(props.dateProfile, props.viewSpec.options);\n            this.renderSkeleton(context);\n            this.renderToolbars(props.viewSpec, props.dateProfile, props.currentDate, title);\n            this.renderView(props, title);\n            this.updateSize();\n            this.thawHeight();\n        };\n        CalendarComponent.prototype.destroy = function () {\n            if (this.header) {\n                this.header.destroy();\n            }\n            if (this.footer) {\n                this.footer.destroy();\n            }\n            this.renderSkeleton.unrender(); // will call destroyView\n            _super.prototype.destroy.call(this);\n        };\n        CalendarComponent.prototype._renderSkeleton = function (context) {\n            this.updateElClassNames(context);\n            prependToElement(this.el, this.contentEl = createElement('div', { className: 'fc-view-container' }));\n            var calendar = context.calendar;\n            for (var _i = 0, _a = calendar.pluginSystem.hooks.viewContainerModifiers; _i < _a.length; _i++) {\n                var modifyViewContainer = _a[_i];\n                modifyViewContainer(this.contentEl, calendar);\n            }\n        };\n        CalendarComponent.prototype._unrenderSkeleton = function () {\n            // weird to have this here\n            if (this.view) {\n                this.savedScroll = this.view.queryScroll();\n                this.view.destroy();\n                this.view = null;\n            }\n            removeElement(this.contentEl);\n            this.removeElClassNames();\n        };\n        CalendarComponent.prototype.removeElClassNames = function () {\n            var classList = this.el.classList;\n            for (var _i = 0, _a = this.elClassNames; _i < _a.length; _i++) {\n                var className = _a[_i];\n                classList.remove(className);\n            }\n            this.elClassNames = [];\n        };\n        CalendarComponent.prototype.updateElClassNames = function (context) {\n            this.removeElClassNames();\n            var theme = context.theme, options = context.options;\n            this.elClassNames = [\n                'fc',\n                'fc-' + options.dir,\n                theme.getClass('widget')\n            ];\n            var classList = this.el.classList;\n            for (var _i = 0, _a = this.elClassNames; _i < _a.length; _i++) {\n                var className = _a[_i];\n                classList.add(className);\n            }\n        };\n        CalendarComponent.prototype._renderToolbars = function (viewSpec, dateProfile, currentDate, title) {\n            var _a = this, context = _a.context, header = _a.header, footer = _a.footer;\n            var options = context.options, calendar = context.calendar;\n            var headerLayout = options.header;\n            var footerLayout = options.footer;\n            var dateProfileGenerator = this.props.dateProfileGenerator;\n            var now = calendar.getNow();\n            var todayInfo = dateProfileGenerator.build(now);\n            var prevInfo = dateProfileGenerator.buildPrev(dateProfile, currentDate);\n            var nextInfo = dateProfileGenerator.buildNext(dateProfile, currentDate);\n            var toolbarProps = {\n                title: title,\n                activeButton: viewSpec.type,\n                isTodayEnabled: todayInfo.isValid && !rangeContainsMarker(dateProfile.currentRange, now),\n                isPrevEnabled: prevInfo.isValid,\n                isNextEnabled: nextInfo.isValid\n            };\n            if (headerLayout) {\n                if (!header) {\n                    header = this.header = new Toolbar('fc-header-toolbar');\n                    prependToElement(this.el, header.el);\n                }\n                header.receiveProps(__assign({ layout: headerLayout }, toolbarProps), context);\n            }\n            else if (header) {\n                header.destroy();\n                header = this.header = null;\n            }\n            if (footerLayout) {\n                if (!footer) {\n                    footer = this.footer = new Toolbar('fc-footer-toolbar');\n                    appendToElement(this.el, footer.el);\n                }\n                footer.receiveProps(__assign({ layout: footerLayout }, toolbarProps), context);\n            }\n            else if (footer) {\n                footer.destroy();\n                footer = this.footer = null;\n            }\n        };\n        CalendarComponent.prototype._unrenderToolbars = function () {\n            if (this.header) {\n                this.header.destroy();\n                this.header = null;\n            }\n            if (this.footer) {\n                this.footer.destroy();\n                this.footer = null;\n            }\n        };\n        CalendarComponent.prototype.renderView = function (props, title) {\n            var view = this.view;\n            var _a = this.context, calendar = _a.calendar, options = _a.options;\n            var viewSpec = props.viewSpec, dateProfileGenerator = props.dateProfileGenerator;\n            if (!view || view.viewSpec !== viewSpec) {\n                if (view) {\n                    view.destroy();\n                }\n                view = this.view = new viewSpec['class'](viewSpec, this.contentEl);\n                if (this.savedScroll) {\n                    view.addScroll(this.savedScroll, true);\n                    this.savedScroll = null;\n                }\n            }\n            view.title = title; // for the API\n            var viewProps = {\n                dateProfileGenerator: dateProfileGenerator,\n                dateProfile: props.dateProfile,\n                businessHours: this.parseBusinessHours(viewSpec.options.businessHours),\n                eventStore: props.eventStore,\n                eventUiBases: props.eventUiBases,\n                dateSelection: props.dateSelection,\n                eventSelection: props.eventSelection,\n                eventDrag: props.eventDrag,\n                eventResize: props.eventResize\n            };\n            var transformers = this.buildViewPropTransformers(calendar.pluginSystem.hooks.viewPropsTransformers);\n            for (var _i = 0, transformers_1 = transformers; _i < transformers_1.length; _i++) {\n                var transformer = transformers_1[_i];\n                __assign(viewProps, transformer.transform(viewProps, viewSpec, props, options));\n            }\n            view.receiveProps(viewProps, this.buildComponentContext(this.context, viewSpec, view));\n        };\n        // Sizing\n        // -----------------------------------------------------------------------------------------------------------------\n        CalendarComponent.prototype.updateSize = function (isResize) {\n            if (isResize === void 0) { isResize = false; }\n            var view = this.view;\n            if (!view) {\n                return; // why?\n            }\n            if (isResize || this.isHeightAuto == null) {\n                this.computeHeightVars();\n            }\n            view.updateSize(isResize, this.viewHeight, this.isHeightAuto);\n            view.updateNowIndicator(); // we need to guarantee this will run after updateSize\n            view.popScroll(isResize);\n        };\n        CalendarComponent.prototype.computeHeightVars = function () {\n            var calendar = this.context.calendar; // yuck. need to handle dynamic options\n            var heightInput = calendar.opt('height');\n            var contentHeightInput = calendar.opt('contentHeight');\n            this.isHeightAuto = heightInput === 'auto' || contentHeightInput === 'auto';\n            if (typeof contentHeightInput === 'number') { // exists and not 'auto'\n                this.viewHeight = contentHeightInput;\n            }\n            else if (typeof contentHeightInput === 'function') { // exists and is a function\n                this.viewHeight = contentHeightInput();\n            }\n            else if (typeof heightInput === 'number') { // exists and not 'auto'\n                this.viewHeight = heightInput - this.queryToolbarsHeight();\n            }\n            else if (typeof heightInput === 'function') { // exists and is a function\n                this.viewHeight = heightInput() - this.queryToolbarsHeight();\n            }\n            else if (heightInput === 'parent') { // set to height of parent element\n                var parentEl = this.el.parentNode;\n                this.viewHeight = parentEl.getBoundingClientRect().height - this.queryToolbarsHeight();\n            }\n            else {\n                this.viewHeight = Math.round(this.contentEl.getBoundingClientRect().width /\n                    Math.max(calendar.opt('aspectRatio'), .5));\n            }\n        };\n        CalendarComponent.prototype.queryToolbarsHeight = function () {\n            var height = 0;\n            if (this.header) {\n                height += computeHeightAndMargins(this.header.el);\n            }\n            if (this.footer) {\n                height += computeHeightAndMargins(this.footer.el);\n            }\n            return height;\n        };\n        // Height \"Freezing\"\n        // -----------------------------------------------------------------------------------------------------------------\n        CalendarComponent.prototype.freezeHeight = function () {\n            applyStyle(this.el, {\n                height: this.el.getBoundingClientRect().height,\n                overflow: 'hidden'\n            });\n        };\n        CalendarComponent.prototype.thawHeight = function () {\n            applyStyle(this.el, {\n                height: '',\n                overflow: ''\n            });\n        };\n        return CalendarComponent;\n    }(Component));\n    // Title and Date Formatting\n    // -----------------------------------------------------------------------------------------------------------------\n    // Computes what the title at the top of the calendar should be for this view\n    function computeTitle(dateProfile, viewOptions) {\n        var range;\n        // for views that span a large unit of time, show the proper interval, ignoring stray days before and after\n        if (/^(year|month)$/.test(dateProfile.currentRangeUnit)) {\n            range = dateProfile.currentRange;\n        }\n        else { // for day units or smaller, use the actual day range\n            range = dateProfile.activeRange;\n        }\n        return this.context.dateEnv.formatRange(range.start, range.end, createFormatter(viewOptions.titleFormat || computeTitleFormat(dateProfile), viewOptions.titleRangeSeparator), { isEndExclusive: dateProfile.isRangeAllDay });\n    }\n    // Generates the format string that should be used to generate the title for the current date range.\n    // Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.\n    function computeTitleFormat(dateProfile) {\n        var currentRangeUnit = dateProfile.currentRangeUnit;\n        if (currentRangeUnit === 'year') {\n            return { year: 'numeric' };\n        }\n        else if (currentRangeUnit === 'month') {\n            return { year: 'numeric', month: 'long' }; // like \"September 2014\"\n        }\n        else {\n            var days = diffWholeDays(dateProfile.currentRange.start, dateProfile.currentRange.end);\n            if (days !== null && days > 1) {\n                // multi-day range. shorter, like \"Sep 9 - 10 2014\"\n                return { year: 'numeric', month: 'short', day: 'numeric' };\n            }\n            else {\n                // one day. longer, like \"September 9 2014\"\n                return { year: 'numeric', month: 'long', day: 'numeric' };\n            }\n        }\n    }\n    // build a context scoped to the view\n    function buildComponentContext(context, viewSpec, view) {\n        return context.extend(viewSpec.options, view);\n    }\n    // Plugin\n    // -----------------------------------------------------------------------------------------------------------------\n    function buildViewPropTransformers(theClasses) {\n        return theClasses.map(function (theClass) {\n            return new theClass();\n        });\n    }\n\n    var Interaction = /** @class */ (function () {\n        function Interaction(settings) {\n            this.component = settings.component;\n        }\n        Interaction.prototype.destroy = function () {\n        };\n        return Interaction;\n    }());\n    function parseInteractionSettings(component, input) {\n        return {\n            component: component,\n            el: input.el,\n            useEventCenter: input.useEventCenter != null ? input.useEventCenter : true\n        };\n    }\n    function interactionSettingsToStore(settings) {\n        var _a;\n        return _a = {},\n            _a[settings.component.uid] = settings,\n            _a;\n    }\n    // global state\n    var interactionSettingsStore = {};\n\n    /*\n    Detects when the user clicks on an event within a DateComponent\n    */\n    var EventClicking = /** @class */ (function (_super) {\n        __extends(EventClicking, _super);\n        function EventClicking(settings) {\n            var _this = _super.call(this, settings) || this;\n            _this.handleSegClick = function (ev, segEl) {\n                var component = _this.component;\n                var _a = component.context, calendar = _a.calendar, view = _a.view;\n                var seg = getElSeg(segEl);\n                if (seg && // might be the <div> surrounding the more link\n                    component.isValidSegDownEl(ev.target)) {\n                    // our way to simulate a link click for elements that can't be <a> tags\n                    // grab before trigger fired in case trigger trashes DOM thru rerendering\n                    var hasUrlContainer = elementClosest(ev.target, '.fc-has-url');\n                    var url = hasUrlContainer ? hasUrlContainer.querySelector('a[href]').href : '';\n                    calendar.publiclyTrigger('eventClick', [\n                        {\n                            el: segEl,\n                            event: new EventApi(component.context.calendar, seg.eventRange.def, seg.eventRange.instance),\n                            jsEvent: ev,\n                            view: view\n                        }\n                    ]);\n                    if (url && !ev.defaultPrevented) {\n                        window.location.href = url;\n                    }\n                }\n            };\n            var component = settings.component;\n            _this.destroy = listenBySelector(component.el, 'click', component.fgSegSelector + ',' + component.bgSegSelector, _this.handleSegClick);\n            return _this;\n        }\n        return EventClicking;\n    }(Interaction));\n\n    /*\n    Triggers events and adds/removes core classNames when the user's pointer\n    enters/leaves event-elements of a component.\n    */\n    var EventHovering = /** @class */ (function (_super) {\n        __extends(EventHovering, _super);\n        function EventHovering(settings) {\n            var _this = _super.call(this, settings) || this;\n            // for simulating an eventMouseLeave when the event el is destroyed while mouse is over it\n            _this.handleEventElRemove = function (el) {\n                if (el === _this.currentSegEl) {\n                    _this.handleSegLeave(null, _this.currentSegEl);\n                }\n            };\n            _this.handleSegEnter = function (ev, segEl) {\n                if (getElSeg(segEl)) { // TODO: better way to make sure not hovering over more+ link or its wrapper\n                    segEl.classList.add('fc-allow-mouse-resize');\n                    _this.currentSegEl = segEl;\n                    _this.triggerEvent('eventMouseEnter', ev, segEl);\n                }\n            };\n            _this.handleSegLeave = function (ev, segEl) {\n                if (_this.currentSegEl) {\n                    segEl.classList.remove('fc-allow-mouse-resize');\n                    _this.currentSegEl = null;\n                    _this.triggerEvent('eventMouseLeave', ev, segEl);\n                }\n            };\n            var component = settings.component;\n            _this.removeHoverListeners = listenToHoverBySelector(component.el, component.fgSegSelector + ',' + component.bgSegSelector, _this.handleSegEnter, _this.handleSegLeave);\n            // how to make sure component already has context?\n            component.context.calendar.on('eventElRemove', _this.handleEventElRemove);\n            return _this;\n        }\n        EventHovering.prototype.destroy = function () {\n            this.removeHoverListeners();\n            this.component.context.calendar.off('eventElRemove', this.handleEventElRemove);\n        };\n        EventHovering.prototype.triggerEvent = function (publicEvName, ev, segEl) {\n            var component = this.component;\n            var _a = component.context, calendar = _a.calendar, view = _a.view;\n            var seg = getElSeg(segEl);\n            if (!ev || component.isValidSegDownEl(ev.target)) {\n                calendar.publiclyTrigger(publicEvName, [\n                    {\n                        el: segEl,\n                        event: new EventApi(calendar, seg.eventRange.def, seg.eventRange.instance),\n                        jsEvent: ev,\n                        view: view\n                    }\n                ]);\n            }\n        };\n        return EventHovering;\n    }(Interaction));\n\n    var StandardTheme = /** @class */ (function (_super) {\n        __extends(StandardTheme, _super);\n        function StandardTheme() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        return StandardTheme;\n    }(Theme));\n    StandardTheme.prototype.classes = {\n        widget: 'fc-unthemed',\n        widgetHeader: 'fc-widget-header',\n        widgetContent: 'fc-widget-content',\n        buttonGroup: 'fc-button-group',\n        button: 'fc-button fc-button-primary',\n        buttonActive: 'fc-button-active',\n        popoverHeader: 'fc-widget-header',\n        popoverContent: 'fc-widget-content',\n        // day grid\n        headerRow: 'fc-widget-header',\n        dayRow: 'fc-widget-content',\n        // list view\n        listView: 'fc-widget-content'\n    };\n    StandardTheme.prototype.baseIconClass = 'fc-icon';\n    StandardTheme.prototype.iconClasses = {\n        close: 'fc-icon-x',\n        prev: 'fc-icon-chevron-left',\n        next: 'fc-icon-chevron-right',\n        prevYear: 'fc-icon-chevrons-left',\n        nextYear: 'fc-icon-chevrons-right'\n    };\n    StandardTheme.prototype.iconOverrideOption = 'buttonIcons';\n    StandardTheme.prototype.iconOverrideCustomButtonOption = 'icon';\n    StandardTheme.prototype.iconOverridePrefix = 'fc-icon-';\n\n    var Calendar = /** @class */ (function () {\n        function Calendar(el, overrides) {\n            var _this = this;\n            this.buildComponentContext = memoize(buildComponentContext$1);\n            this.parseRawLocales = memoize(parseRawLocales);\n            this.buildLocale = memoize(buildLocale);\n            this.buildDateEnv = memoize(buildDateEnv);\n            this.buildTheme = memoize(buildTheme);\n            this.buildEventUiSingleBase = memoize(this._buildEventUiSingleBase);\n            this.buildSelectionConfig = memoize(this._buildSelectionConfig);\n            this.buildEventUiBySource = memoizeOutput(buildEventUiBySource, isPropsEqual);\n            this.buildEventUiBases = memoize(buildEventUiBases);\n            this.interactionsStore = {};\n            this.actionQueue = [];\n            this.isReducing = false;\n            // isDisplaying: boolean = false // installed in DOM? accepting renders?\n            this.needsRerender = false; // needs a render?\n            this.isRendering = false; // currently in the executeRender function?\n            this.renderingPauseDepth = 0;\n            this.buildDelayedRerender = memoize(buildDelayedRerender);\n            this.afterSizingTriggers = {};\n            this.isViewUpdated = false;\n            this.isDatesUpdated = false;\n            this.isEventsUpdated = false;\n            this.el = el;\n            this.optionsManager = new OptionsManager(overrides || {});\n            this.pluginSystem = new PluginSystem();\n            // only do once. don't do in handleOptions. because can't remove plugins\n            this.addPluginInputs(this.optionsManager.computed.plugins || []);\n            this.handleOptions(this.optionsManager.computed);\n            this.publiclyTrigger('_init'); // for tests\n            this.hydrate();\n            this.calendarInteractions = this.pluginSystem.hooks.calendarInteractions\n                .map(function (calendarInteractionClass) {\n                return new calendarInteractionClass(_this);\n            });\n        }\n        Calendar.prototype.addPluginInputs = function (pluginInputs) {\n            var pluginDefs = refinePluginDefs(pluginInputs);\n            for (var _i = 0, pluginDefs_1 = pluginDefs; _i < pluginDefs_1.length; _i++) {\n                var pluginDef = pluginDefs_1[_i];\n                this.pluginSystem.add(pluginDef);\n            }\n        };\n        Object.defineProperty(Calendar.prototype, \"view\", {\n            // public API\n            get: function () {\n                return this.component ? this.component.view : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        // Public API for rendering\n        // -----------------------------------------------------------------------------------------------------------------\n        Calendar.prototype.render = function () {\n            if (!this.component) {\n                this.component = new CalendarComponent(this.el);\n                this.renderableEventStore = createEmptyEventStore();\n                this.bindHandlers();\n                this.executeRender();\n            }\n            else {\n                this.requestRerender();\n            }\n        };\n        Calendar.prototype.destroy = function () {\n            if (this.component) {\n                this.unbindHandlers();\n                this.component.destroy(); // don't null-out. in case API needs access\n                this.component = null; // umm ???\n                for (var _i = 0, _a = this.calendarInteractions; _i < _a.length; _i++) {\n                    var interaction = _a[_i];\n                    interaction.destroy();\n                }\n                this.publiclyTrigger('_destroyed');\n            }\n        };\n        // Handlers\n        // -----------------------------------------------------------------------------------------------------------------\n        Calendar.prototype.bindHandlers = function () {\n            var _this = this;\n            // event delegation for nav links\n            this.removeNavLinkListener = listenBySelector(this.el, 'click', 'a[data-goto]', function (ev, anchorEl) {\n                var gotoOptions = anchorEl.getAttribute('data-goto');\n                gotoOptions = gotoOptions ? JSON.parse(gotoOptions) : {};\n                var dateEnv = _this.dateEnv;\n                var dateMarker = dateEnv.createMarker(gotoOptions.date);\n                var viewType = gotoOptions.type;\n                // property like \"navLinkDayClick\". might be a string or a function\n                var customAction = _this.viewOpt('navLink' + capitaliseFirstLetter(viewType) + 'Click');\n                if (typeof customAction === 'function') {\n                    customAction(dateEnv.toDate(dateMarker), ev);\n                }\n                else {\n                    if (typeof customAction === 'string') {\n                        viewType = customAction;\n                    }\n                    _this.zoomTo(dateMarker, viewType);\n                }\n            });\n            if (this.opt('handleWindowResize')) {\n                window.addEventListener('resize', this.windowResizeProxy = debounce(// prevents rapid calls\n                this.windowResize.bind(this), this.opt('windowResizeDelay')));\n            }\n        };\n        Calendar.prototype.unbindHandlers = function () {\n            this.removeNavLinkListener();\n            if (this.windowResizeProxy) {\n                window.removeEventListener('resize', this.windowResizeProxy);\n                this.windowResizeProxy = null;\n            }\n        };\n        // Dispatcher\n        // -----------------------------------------------------------------------------------------------------------------\n        Calendar.prototype.hydrate = function () {\n            var _this = this;\n            this.state = this.buildInitialState();\n            var rawSources = this.opt('eventSources') || [];\n            var singleRawSource = this.opt('events');\n            var sources = []; // parsed\n            if (singleRawSource) {\n                rawSources.unshift(singleRawSource);\n            }\n            for (var _i = 0, rawSources_1 = rawSources; _i < rawSources_1.length; _i++) {\n                var rawSource = rawSources_1[_i];\n                var source = parseEventSource(rawSource, this);\n                if (source) {\n                    sources.push(source);\n                }\n            }\n            this.batchRendering(function () {\n                _this.dispatch({ type: 'INIT' }); // pass in sources here?\n                _this.dispatch({ type: 'ADD_EVENT_SOURCES', sources: sources });\n                _this.dispatch({\n                    type: 'SET_VIEW_TYPE',\n                    viewType: _this.opt('defaultView') || _this.pluginSystem.hooks.defaultView\n                });\n            });\n        };\n        Calendar.prototype.buildInitialState = function () {\n            return {\n                viewType: null,\n                loadingLevel: 0,\n                eventSourceLoadingLevel: 0,\n                currentDate: this.getInitialDate(),\n                dateProfile: null,\n                eventSources: {},\n                eventStore: createEmptyEventStore(),\n                dateSelection: null,\n                eventSelection: '',\n                eventDrag: null,\n                eventResize: null\n            };\n        };\n        Calendar.prototype.dispatch = function (action) {\n            this.actionQueue.push(action);\n            if (!this.isReducing) {\n                this.isReducing = true;\n                var oldState = this.state;\n                while (this.actionQueue.length) {\n                    this.state = this.reduce(this.state, this.actionQueue.shift(), this);\n                }\n                var newState = this.state;\n                this.isReducing = false;\n                if (!oldState.loadingLevel && newState.loadingLevel) {\n                    this.publiclyTrigger('loading', [true]);\n                }\n                else if (oldState.loadingLevel && !newState.loadingLevel) {\n                    this.publiclyTrigger('loading', [false]);\n                }\n                var view = this.component && this.component.view;\n                if (oldState.eventStore !== newState.eventStore) {\n                    if (oldState.eventStore) {\n                        this.isEventsUpdated = true;\n                    }\n                }\n                if (oldState.dateProfile !== newState.dateProfile) {\n                    if (oldState.dateProfile && view) { // why would view be null!?\n                        this.publiclyTrigger('datesDestroy', [\n                            {\n                                view: view,\n                                el: view.el\n                            }\n                        ]);\n                    }\n                    this.isDatesUpdated = true;\n                }\n                if (oldState.viewType !== newState.viewType) {\n                    if (oldState.viewType && view) { // why would view be null!?\n                        this.publiclyTrigger('viewSkeletonDestroy', [\n                            {\n                                view: view,\n                                el: view.el\n                            }\n                        ]);\n                    }\n                    this.isViewUpdated = true;\n                }\n                this.requestRerender();\n            }\n        };\n        Calendar.prototype.reduce = function (state, action, calendar) {\n            return reduce(state, action, calendar);\n        };\n        // Render Queue\n        // -----------------------------------------------------------------------------------------------------------------\n        Calendar.prototype.requestRerender = function () {\n            this.needsRerender = true;\n            this.delayedRerender(); // will call a debounced-version of tryRerender\n        };\n        Calendar.prototype.tryRerender = function () {\n            if (this.component && // must be accepting renders\n                this.needsRerender && // indicates that a rerender was requested\n                !this.renderingPauseDepth && // not paused\n                !this.isRendering // not currently in the render loop\n            ) {\n                this.executeRender();\n            }\n        };\n        Calendar.prototype.batchRendering = function (func) {\n            this.renderingPauseDepth++;\n            func();\n            this.renderingPauseDepth--;\n            if (this.needsRerender) {\n                this.requestRerender();\n            }\n        };\n        // Rendering\n        // -----------------------------------------------------------------------------------------------------------------\n        Calendar.prototype.executeRender = function () {\n            // clear these BEFORE the render so that new values will accumulate during render\n            this.needsRerender = false;\n            this.isRendering = true;\n            this.renderComponent();\n            this.isRendering = false;\n            // received a rerender request while rendering\n            if (this.needsRerender) {\n                this.delayedRerender();\n            }\n        };\n        /*\n        don't call this directly. use executeRender instead\n        */\n        Calendar.prototype.renderComponent = function () {\n            var _a = this, state = _a.state, component = _a.component;\n            var viewType = state.viewType;\n            var viewSpec = this.viewSpecs[viewType];\n            if (!viewSpec) {\n                throw new Error(\"View type \\\"\" + viewType + \"\\\" is not valid\");\n            }\n            // if event sources are still loading and progressive rendering hasn't been enabled,\n            // keep rendering the last fully loaded set of events\n            var renderableEventStore = this.renderableEventStore =\n                (state.eventSourceLoadingLevel && !this.opt('progressiveEventRendering')) ?\n                    this.renderableEventStore :\n                    state.eventStore;\n            var eventUiSingleBase = this.buildEventUiSingleBase(viewSpec.options);\n            var eventUiBySource = this.buildEventUiBySource(state.eventSources);\n            var eventUiBases = this.eventUiBases = this.buildEventUiBases(renderableEventStore.defs, eventUiSingleBase, eventUiBySource);\n            component.receiveProps(__assign({}, state, { viewSpec: viewSpec, dateProfileGenerator: this.dateProfileGenerators[viewType], dateProfile: state.dateProfile, eventStore: renderableEventStore, eventUiBases: eventUiBases, dateSelection: state.dateSelection, eventSelection: state.eventSelection, eventDrag: state.eventDrag, eventResize: state.eventResize }), this.buildComponentContext(this.theme, this.dateEnv, this.optionsManager.computed));\n            if (this.isViewUpdated) {\n                this.isViewUpdated = false;\n                this.publiclyTrigger('viewSkeletonRender', [\n                    {\n                        view: component.view,\n                        el: component.view.el\n                    }\n                ]);\n            }\n            if (this.isDatesUpdated) {\n                this.isDatesUpdated = false;\n                this.publiclyTrigger('datesRender', [\n                    {\n                        view: component.view,\n                        el: component.view.el\n                    }\n                ]);\n            }\n            if (this.isEventsUpdated) {\n                this.isEventsUpdated = false;\n            }\n            this.releaseAfterSizingTriggers();\n        };\n        // Options\n        // -----------------------------------------------------------------------------------------------------------------\n        Calendar.prototype.setOption = function (name, val) {\n            var _a;\n            this.mutateOptions((_a = {}, _a[name] = val, _a), [], true);\n        };\n        Calendar.prototype.getOption = function (name) {\n            return this.optionsManager.computed[name];\n        };\n        Calendar.prototype.opt = function (name) {\n            return this.optionsManager.computed[name];\n        };\n        Calendar.prototype.viewOpt = function (name) {\n            return this.viewOpts()[name];\n        };\n        Calendar.prototype.viewOpts = function () {\n            return this.viewSpecs[this.state.viewType].options;\n        };\n        /*\n        handles option changes (like a diff)\n        */\n        Calendar.prototype.mutateOptions = function (updates, removals, isDynamic, deepEqual) {\n            var _this = this;\n            var changeHandlers = this.pluginSystem.hooks.optionChangeHandlers;\n            var normalUpdates = {};\n            var specialUpdates = {};\n            var oldDateEnv = this.dateEnv; // do this before handleOptions\n            var isTimeZoneDirty = false;\n            var isSizeDirty = false;\n            var anyDifficultOptions = Boolean(removals.length);\n            for (var name_1 in updates) {\n                if (changeHandlers[name_1]) {\n                    specialUpdates[name_1] = updates[name_1];\n                }\n                else {\n                    normalUpdates[name_1] = updates[name_1];\n                }\n            }\n            for (var name_2 in normalUpdates) {\n                if (/^(height|contentHeight|aspectRatio)$/.test(name_2)) {\n                    isSizeDirty = true;\n                }\n                else if (/^(defaultDate|defaultView)$/.test(name_2)) ;\n                else {\n                    anyDifficultOptions = true;\n                    if (name_2 === 'timeZone') {\n                        isTimeZoneDirty = true;\n                    }\n                }\n            }\n            this.optionsManager.mutate(normalUpdates, removals, isDynamic);\n            if (anyDifficultOptions) {\n                this.handleOptions(this.optionsManager.computed);\n            }\n            this.batchRendering(function () {\n                if (anyDifficultOptions) {\n                    if (isTimeZoneDirty) {\n                        _this.dispatch({\n                            type: 'CHANGE_TIMEZONE',\n                            oldDateEnv: oldDateEnv\n                        });\n                    }\n                    /* HACK\n                    has the same effect as calling this.requestRerender()\n                    but recomputes the state's dateProfile\n                    */\n                    _this.dispatch({\n                        type: 'SET_VIEW_TYPE',\n                        viewType: _this.state.viewType\n                    });\n                }\n                else if (isSizeDirty) {\n                    _this.updateSize();\n                }\n                // special updates\n                if (deepEqual) {\n                    for (var name_3 in specialUpdates) {\n                        changeHandlers[name_3](specialUpdates[name_3], _this, deepEqual);\n                    }\n                }\n            });\n        };\n        /*\n        rebuilds things based off of a complete set of refined options\n        */\n        Calendar.prototype.handleOptions = function (options) {\n            var _this = this;\n            var pluginHooks = this.pluginSystem.hooks;\n            this.defaultAllDayEventDuration = createDuration(options.defaultAllDayEventDuration);\n            this.defaultTimedEventDuration = createDuration(options.defaultTimedEventDuration);\n            this.delayedRerender = this.buildDelayedRerender(options.rerenderDelay);\n            this.theme = this.buildTheme(options);\n            var available = this.parseRawLocales(options.locales);\n            this.availableRawLocales = available.map;\n            var locale = this.buildLocale(options.locale || available.defaultCode, available.map);\n            this.dateEnv = this.buildDateEnv(locale, options.timeZone, pluginHooks.namedTimeZonedImpl, options.firstDay, options.weekNumberCalculation, options.weekLabel, pluginHooks.cmdFormatter);\n            this.selectionConfig = this.buildSelectionConfig(options); // needs dateEnv. do after :(\n            // ineffecient to do every time?\n            this.viewSpecs = buildViewSpecs(pluginHooks.views, this.optionsManager);\n            // ineffecient to do every time?\n            this.dateProfileGenerators = mapHash(this.viewSpecs, function (viewSpec) {\n                return new viewSpec.class.prototype.dateProfileGeneratorClass(viewSpec, _this);\n            });\n        };\n        Calendar.prototype.getAvailableLocaleCodes = function () {\n            return Object.keys(this.availableRawLocales);\n        };\n        Calendar.prototype._buildSelectionConfig = function (rawOpts) {\n            return processScopedUiProps('select', rawOpts, this);\n        };\n        Calendar.prototype._buildEventUiSingleBase = function (rawOpts) {\n            if (rawOpts.editable) { // so 'editable' affected events\n                rawOpts = __assign({}, rawOpts, { eventEditable: true });\n            }\n            return processScopedUiProps('event', rawOpts, this);\n        };\n        // Trigger\n        // -----------------------------------------------------------------------------------------------------------------\n        Calendar.prototype.hasPublicHandlers = function (name) {\n            return this.hasHandlers(name) ||\n                this.opt(name); // handler specified in options\n        };\n        Calendar.prototype.publiclyTrigger = function (name, args) {\n            var optHandler = this.opt(name);\n            this.triggerWith(name, this, args);\n            if (optHandler) {\n                return optHandler.apply(this, args);\n            }\n        };\n        Calendar.prototype.publiclyTriggerAfterSizing = function (name, args) {\n            var afterSizingTriggers = this.afterSizingTriggers;\n            (afterSizingTriggers[name] || (afterSizingTriggers[name] = [])).push(args);\n        };\n        Calendar.prototype.releaseAfterSizingTriggers = function () {\n            var afterSizingTriggers = this.afterSizingTriggers;\n            for (var name_4 in afterSizingTriggers) {\n                for (var _i = 0, _a = afterSizingTriggers[name_4]; _i < _a.length; _i++) {\n                    var args = _a[_i];\n                    this.publiclyTrigger(name_4, args);\n                }\n            }\n            this.afterSizingTriggers = {};\n        };\n        // View\n        // -----------------------------------------------------------------------------------------------------------------\n        // Returns a boolean about whether the view is okay to instantiate at some point\n        Calendar.prototype.isValidViewType = function (viewType) {\n            return Boolean(this.viewSpecs[viewType]);\n        };\n        Calendar.prototype.changeView = function (viewType, dateOrRange) {\n            var dateMarker = null;\n            if (dateOrRange) {\n                if (dateOrRange.start && dateOrRange.end) { // a range\n                    this.optionsManager.mutate({ visibleRange: dateOrRange }, []); // will not rerender\n                    this.handleOptions(this.optionsManager.computed); // ...but yuck\n                }\n                else { // a date\n                    dateMarker = this.dateEnv.createMarker(dateOrRange); // just like gotoDate\n                }\n            }\n            this.unselect();\n            this.dispatch({\n                type: 'SET_VIEW_TYPE',\n                viewType: viewType,\n                dateMarker: dateMarker\n            });\n        };\n        // Forces navigation to a view for the given date.\n        // `viewType` can be a specific view name or a generic one like \"week\" or \"day\".\n        // needs to change\n        Calendar.prototype.zoomTo = function (dateMarker, viewType) {\n            var spec;\n            viewType = viewType || 'day'; // day is default zoom\n            spec = this.viewSpecs[viewType] ||\n                this.getUnitViewSpec(viewType);\n            this.unselect();\n            if (spec) {\n                this.dispatch({\n                    type: 'SET_VIEW_TYPE',\n                    viewType: spec.type,\n                    dateMarker: dateMarker\n                });\n            }\n            else {\n                this.dispatch({\n                    type: 'SET_DATE',\n                    dateMarker: dateMarker\n                });\n            }\n        };\n        // Given a duration singular unit, like \"week\" or \"day\", finds a matching view spec.\n        // Preference is given to views that have corresponding buttons.\n        Calendar.prototype.getUnitViewSpec = function (unit) {\n            var component = this.component;\n            var viewTypes = [];\n            var i;\n            var spec;\n            // put views that have buttons first. there will be duplicates, but oh\n            if (component.header) {\n                viewTypes.push.apply(viewTypes, component.header.viewsWithButtons);\n            }\n            if (component.footer) {\n                viewTypes.push.apply(viewTypes, component.footer.viewsWithButtons);\n            }\n            for (var viewType in this.viewSpecs) {\n                viewTypes.push(viewType);\n            }\n            for (i = 0; i < viewTypes.length; i++) {\n                spec = this.viewSpecs[viewTypes[i]];\n                if (spec) {\n                    if (spec.singleUnit === unit) {\n                        return spec;\n                    }\n                }\n            }\n        };\n        // Current Date\n        // -----------------------------------------------------------------------------------------------------------------\n        Calendar.prototype.getInitialDate = function () {\n            var defaultDateInput = this.opt('defaultDate');\n            // compute the initial ambig-timezone date\n            if (defaultDateInput != null) {\n                return this.dateEnv.createMarker(defaultDateInput);\n            }\n            else {\n                return this.getNow(); // getNow already returns unzoned\n            }\n        };\n        Calendar.prototype.prev = function () {\n            this.unselect();\n            this.dispatch({ type: 'PREV' });\n        };\n        Calendar.prototype.next = function () {\n            this.unselect();\n            this.dispatch({ type: 'NEXT' });\n        };\n        Calendar.prototype.prevYear = function () {\n            this.unselect();\n            this.dispatch({\n                type: 'SET_DATE',\n                dateMarker: this.dateEnv.addYears(this.state.currentDate, -1)\n            });\n        };\n        Calendar.prototype.nextYear = function () {\n            this.unselect();\n            this.dispatch({\n                type: 'SET_DATE',\n                dateMarker: this.dateEnv.addYears(this.state.currentDate, 1)\n            });\n        };\n        Calendar.prototype.today = function () {\n            this.unselect();\n            this.dispatch({\n                type: 'SET_DATE',\n                dateMarker: this.getNow()\n            });\n        };\n        Calendar.prototype.gotoDate = function (zonedDateInput) {\n            this.unselect();\n            this.dispatch({\n                type: 'SET_DATE',\n                dateMarker: this.dateEnv.createMarker(zonedDateInput)\n            });\n        };\n        Calendar.prototype.incrementDate = function (deltaInput) {\n            var delta = createDuration(deltaInput);\n            if (delta) { // else, warn about invalid input?\n                this.unselect();\n                this.dispatch({\n                    type: 'SET_DATE',\n                    dateMarker: this.dateEnv.add(this.state.currentDate, delta)\n                });\n            }\n        };\n        // for external API\n        Calendar.prototype.getDate = function () {\n            return this.dateEnv.toDate(this.state.currentDate);\n        };\n        // Date Formatting Utils\n        // -----------------------------------------------------------------------------------------------------------------\n        Calendar.prototype.formatDate = function (d, formatter) {\n            var dateEnv = this.dateEnv;\n            return dateEnv.format(dateEnv.createMarker(d), createFormatter(formatter));\n        };\n        // `settings` is for formatter AND isEndExclusive\n        Calendar.prototype.formatRange = function (d0, d1, settings) {\n            var dateEnv = this.dateEnv;\n            return dateEnv.formatRange(dateEnv.createMarker(d0), dateEnv.createMarker(d1), createFormatter(settings, this.opt('defaultRangeSeparator')), settings);\n        };\n        Calendar.prototype.formatIso = function (d, omitTime) {\n            var dateEnv = this.dateEnv;\n            return dateEnv.formatIso(dateEnv.createMarker(d), { omitTime: omitTime });\n        };\n        // Sizing\n        // -----------------------------------------------------------------------------------------------------------------\n        Calendar.prototype.windowResize = function (ev) {\n            if (!this.isHandlingWindowResize &&\n                this.component && // why?\n                ev.target === window // not a jqui resize event\n            ) {\n                this.isHandlingWindowResize = true;\n                this.updateSize();\n                this.publiclyTrigger('windowResize', [this.view]);\n                this.isHandlingWindowResize = false;\n            }\n        };\n        Calendar.prototype.updateSize = function () {\n            if (this.component) { // when?\n                this.component.updateSize(true);\n            }\n        };\n        // Component Registration\n        // -----------------------------------------------------------------------------------------------------------------\n        Calendar.prototype.registerInteractiveComponent = function (component, settingsInput) {\n            var settings = parseInteractionSettings(component, settingsInput);\n            var DEFAULT_INTERACTIONS = [\n                EventClicking,\n                EventHovering\n            ];\n            var interactionClasses = DEFAULT_INTERACTIONS.concat(this.pluginSystem.hooks.componentInteractions);\n            var interactions = interactionClasses.map(function (interactionClass) {\n                return new interactionClass(settings);\n            });\n            this.interactionsStore[component.uid] = interactions;\n            interactionSettingsStore[component.uid] = settings;\n        };\n        Calendar.prototype.unregisterInteractiveComponent = function (component) {\n            for (var _i = 0, _a = this.interactionsStore[component.uid]; _i < _a.length; _i++) {\n                var listener = _a[_i];\n                listener.destroy();\n            }\n            delete this.interactionsStore[component.uid];\n            delete interactionSettingsStore[component.uid];\n        };\n        // Date Selection / Event Selection / DayClick\n        // -----------------------------------------------------------------------------------------------------------------\n        // this public method receives start/end dates in any format, with any timezone\n        // NOTE: args were changed from v3\n        Calendar.prototype.select = function (dateOrObj, endDate) {\n            var selectionInput;\n            if (endDate == null) {\n                if (dateOrObj.start != null) {\n                    selectionInput = dateOrObj;\n                }\n                else {\n                    selectionInput = {\n                        start: dateOrObj,\n                        end: null\n                    };\n                }\n            }\n            else {\n                selectionInput = {\n                    start: dateOrObj,\n                    end: endDate\n                };\n            }\n            var selection = parseDateSpan(selectionInput, this.dateEnv, createDuration({ days: 1 }) // TODO: cache this?\n            );\n            if (selection) { // throw parse error otherwise?\n                this.dispatch({ type: 'SELECT_DATES', selection: selection });\n                this.triggerDateSelect(selection);\n            }\n        };\n        // public method\n        Calendar.prototype.unselect = function (pev) {\n            if (this.state.dateSelection) {\n                this.dispatch({ type: 'UNSELECT_DATES' });\n                this.triggerDateUnselect(pev);\n            }\n        };\n        Calendar.prototype.triggerDateSelect = function (selection, pev) {\n            var arg = __assign({}, this.buildDateSpanApi(selection), { jsEvent: pev ? pev.origEvent : null, view: this.view });\n            this.publiclyTrigger('select', [arg]);\n        };\n        Calendar.prototype.triggerDateUnselect = function (pev) {\n            this.publiclyTrigger('unselect', [\n                {\n                    jsEvent: pev ? pev.origEvent : null,\n                    view: this.view\n                }\n            ]);\n        };\n        // TODO: receive pev?\n        Calendar.prototype.triggerDateClick = function (dateSpan, dayEl, view, ev) {\n            var arg = __assign({}, this.buildDatePointApi(dateSpan), { dayEl: dayEl, jsEvent: ev, // Is this always a mouse event? See #4655\n                view: view });\n            this.publiclyTrigger('dateClick', [arg]);\n        };\n        Calendar.prototype.buildDatePointApi = function (dateSpan) {\n            var props = {};\n            for (var _i = 0, _a = this.pluginSystem.hooks.datePointTransforms; _i < _a.length; _i++) {\n                var transform = _a[_i];\n                __assign(props, transform(dateSpan, this));\n            }\n            __assign(props, buildDatePointApi(dateSpan, this.dateEnv));\n            return props;\n        };\n        Calendar.prototype.buildDateSpanApi = function (dateSpan) {\n            var props = {};\n            for (var _i = 0, _a = this.pluginSystem.hooks.dateSpanTransforms; _i < _a.length; _i++) {\n                var transform = _a[_i];\n                __assign(props, transform(dateSpan, this));\n            }\n            __assign(props, buildDateSpanApi(dateSpan, this.dateEnv));\n            return props;\n        };\n        // Date Utils\n        // -----------------------------------------------------------------------------------------------------------------\n        // Returns a DateMarker for the current date, as defined by the client's computer or from the `now` option\n        Calendar.prototype.getNow = function () {\n            var now = this.opt('now');\n            if (typeof now === 'function') {\n                now = now();\n            }\n            if (now == null) {\n                return this.dateEnv.createNowMarker();\n            }\n            return this.dateEnv.createMarker(now);\n        };\n        // Event-Date Utilities\n        // -----------------------------------------------------------------------------------------------------------------\n        // Given an event's allDay status and start date, return what its fallback end date should be.\n        // TODO: rename to computeDefaultEventEnd\n        Calendar.prototype.getDefaultEventEnd = function (allDay, marker) {\n            var end = marker;\n            if (allDay) {\n                end = startOfDay(end);\n                end = this.dateEnv.add(end, this.defaultAllDayEventDuration);\n            }\n            else {\n                end = this.dateEnv.add(end, this.defaultTimedEventDuration);\n            }\n            return end;\n        };\n        // Public Events API\n        // -----------------------------------------------------------------------------------------------------------------\n        Calendar.prototype.addEvent = function (eventInput, sourceInput) {\n            if (eventInput instanceof EventApi) {\n                var def = eventInput._def;\n                var instance = eventInput._instance;\n                // not already present? don't want to add an old snapshot\n                if (!this.state.eventStore.defs[def.defId]) {\n                    this.dispatch({\n                        type: 'ADD_EVENTS',\n                        eventStore: eventTupleToStore({ def: def, instance: instance }) // TODO: better util for two args?\n                    });\n                }\n                return eventInput;\n            }\n            var sourceId;\n            if (sourceInput instanceof EventSourceApi) {\n                sourceId = sourceInput.internalEventSource.sourceId;\n            }\n            else if (sourceInput != null) {\n                var sourceApi = this.getEventSourceById(sourceInput); // TODO: use an internal function\n                if (!sourceApi) {\n                    console.warn('Could not find an event source with ID \"' + sourceInput + '\"'); // TODO: test\n                    return null;\n                }\n                else {\n                    sourceId = sourceApi.internalEventSource.sourceId;\n                }\n            }\n            var tuple = parseEvent(eventInput, sourceId, this);\n            if (tuple) {\n                this.dispatch({\n                    type: 'ADD_EVENTS',\n                    eventStore: eventTupleToStore(tuple)\n                });\n                return new EventApi(this, tuple.def, tuple.def.recurringDef ? null : tuple.instance);\n            }\n            return null;\n        };\n        // TODO: optimize\n        Calendar.prototype.getEventById = function (id) {\n            var _a = this.state.eventStore, defs = _a.defs, instances = _a.instances;\n            id = String(id);\n            for (var defId in defs) {\n                var def = defs[defId];\n                if (def.publicId === id) {\n                    if (def.recurringDef) {\n                        return new EventApi(this, def, null);\n                    }\n                    else {\n                        for (var instanceId in instances) {\n                            var instance = instances[instanceId];\n                            if (instance.defId === def.defId) {\n                                return new EventApi(this, def, instance);\n                            }\n                        }\n                    }\n                }\n            }\n            return null;\n        };\n        Calendar.prototype.getEvents = function () {\n            var _a = this.state.eventStore, defs = _a.defs, instances = _a.instances;\n            var eventApis = [];\n            for (var id in instances) {\n                var instance = instances[id];\n                var def = defs[instance.defId];\n                eventApis.push(new EventApi(this, def, instance));\n            }\n            return eventApis;\n        };\n        Calendar.prototype.removeAllEvents = function () {\n            this.dispatch({ type: 'REMOVE_ALL_EVENTS' });\n        };\n        Calendar.prototype.rerenderEvents = function () {\n            this.dispatch({ type: 'RESET_EVENTS' });\n        };\n        // Public Event Sources API\n        // -----------------------------------------------------------------------------------------------------------------\n        Calendar.prototype.getEventSources = function () {\n            var sourceHash = this.state.eventSources;\n            var sourceApis = [];\n            for (var internalId in sourceHash) {\n                sourceApis.push(new EventSourceApi(this, sourceHash[internalId]));\n            }\n            return sourceApis;\n        };\n        Calendar.prototype.getEventSourceById = function (id) {\n            var sourceHash = this.state.eventSources;\n            id = String(id);\n            for (var sourceId in sourceHash) {\n                if (sourceHash[sourceId].publicId === id) {\n                    return new EventSourceApi(this, sourceHash[sourceId]);\n                }\n            }\n            return null;\n        };\n        Calendar.prototype.addEventSource = function (sourceInput) {\n            if (sourceInput instanceof EventSourceApi) {\n                // not already present? don't want to add an old snapshot\n                if (!this.state.eventSources[sourceInput.internalEventSource.sourceId]) {\n                    this.dispatch({\n                        type: 'ADD_EVENT_SOURCES',\n                        sources: [sourceInput.internalEventSource]\n                    });\n                }\n                return sourceInput;\n            }\n            var eventSource = parseEventSource(sourceInput, this);\n            if (eventSource) { // TODO: error otherwise?\n                this.dispatch({ type: 'ADD_EVENT_SOURCES', sources: [eventSource] });\n                return new EventSourceApi(this, eventSource);\n            }\n            return null;\n        };\n        Calendar.prototype.removeAllEventSources = function () {\n            this.dispatch({ type: 'REMOVE_ALL_EVENT_SOURCES' });\n        };\n        Calendar.prototype.refetchEvents = function () {\n            this.dispatch({ type: 'FETCH_EVENT_SOURCES' });\n        };\n        // Scroll\n        // -----------------------------------------------------------------------------------------------------------------\n        Calendar.prototype.scrollToTime = function (timeInput) {\n            var duration = createDuration(timeInput);\n            if (duration) {\n                this.component.view.scrollToDuration(duration);\n            }\n        };\n        return Calendar;\n    }());\n    EmitterMixin.mixInto(Calendar);\n    // for memoizers\n    // -----------------------------------------------------------------------------------------------------------------\n    function buildComponentContext$1(theme, dateEnv, options) {\n        return new ComponentContext(this, theme, dateEnv, options, null);\n    }\n    function buildDateEnv(locale, timeZone, namedTimeZoneImpl, firstDay, weekNumberCalculation, weekLabel, cmdFormatter) {\n        return new DateEnv({\n            calendarSystem: 'gregory',\n            timeZone: timeZone,\n            namedTimeZoneImpl: namedTimeZoneImpl,\n            locale: locale,\n            weekNumberCalculation: weekNumberCalculation,\n            firstDay: firstDay,\n            weekLabel: weekLabel,\n            cmdFormatter: cmdFormatter\n        });\n    }\n    function buildTheme(calendarOptions) {\n        var themeClass = this.pluginSystem.hooks.themeClasses[calendarOptions.themeSystem] || StandardTheme;\n        return new themeClass(calendarOptions);\n    }\n    function buildDelayedRerender(wait) {\n        var func = this.tryRerender.bind(this);\n        if (wait != null) {\n            func = debounce(func, wait);\n        }\n        return func;\n    }\n    function buildEventUiBySource(eventSources) {\n        return mapHash(eventSources, function (eventSource) {\n            return eventSource.ui;\n        });\n    }\n    function buildEventUiBases(eventDefs, eventUiSingleBase, eventUiBySource) {\n        var eventUiBases = { '': eventUiSingleBase };\n        for (var defId in eventDefs) {\n            var def = eventDefs[defId];\n            if (def.sourceId && eventUiBySource[def.sourceId]) {\n                eventUiBases[defId] = eventUiBySource[def.sourceId];\n            }\n        }\n        return eventUiBases;\n    }\n\n    var View = /** @class */ (function (_super) {\n        __extends(View, _super);\n        function View(viewSpec, parentEl) {\n            var _this = _super.call(this, createElement('div', { className: 'fc-view fc-' + viewSpec.type + '-view' })) || this;\n            _this.renderDatesMem = memoizeRendering(_this.renderDatesWrap, _this.unrenderDatesWrap);\n            _this.renderBusinessHoursMem = memoizeRendering(_this.renderBusinessHours, _this.unrenderBusinessHours, [_this.renderDatesMem]);\n            _this.renderDateSelectionMem = memoizeRendering(_this.renderDateSelectionWrap, _this.unrenderDateSelectionWrap, [_this.renderDatesMem]);\n            _this.renderEventsMem = memoizeRendering(_this.renderEvents, _this.unrenderEvents, [_this.renderDatesMem]);\n            _this.renderEventSelectionMem = memoizeRendering(_this.renderEventSelectionWrap, _this.unrenderEventSelectionWrap, [_this.renderEventsMem]);\n            _this.renderEventDragMem = memoizeRendering(_this.renderEventDragWrap, _this.unrenderEventDragWrap, [_this.renderDatesMem]);\n            _this.renderEventResizeMem = memoizeRendering(_this.renderEventResizeWrap, _this.unrenderEventResizeWrap, [_this.renderDatesMem]);\n            _this.viewSpec = viewSpec;\n            _this.type = viewSpec.type;\n            parentEl.appendChild(_this.el);\n            _this.initialize();\n            return _this;\n        }\n        View.prototype.initialize = function () {\n        };\n        Object.defineProperty(View.prototype, \"activeStart\", {\n            // Date Setting/Unsetting\n            // -----------------------------------------------------------------------------------------------------------------\n            get: function () {\n                return this.context.dateEnv.toDate(this.props.dateProfile.activeRange.start);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(View.prototype, \"activeEnd\", {\n            get: function () {\n                return this.context.dateEnv.toDate(this.props.dateProfile.activeRange.end);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(View.prototype, \"currentStart\", {\n            get: function () {\n                return this.context.dateEnv.toDate(this.props.dateProfile.currentRange.start);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(View.prototype, \"currentEnd\", {\n            get: function () {\n                return this.context.dateEnv.toDate(this.props.dateProfile.currentRange.end);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        // General Rendering\n        // -----------------------------------------------------------------------------------------------------------------\n        View.prototype.render = function (props, context) {\n            this.renderDatesMem(props.dateProfile);\n            this.renderBusinessHoursMem(props.businessHours);\n            this.renderDateSelectionMem(props.dateSelection);\n            this.renderEventsMem(props.eventStore);\n            this.renderEventSelectionMem(props.eventSelection);\n            this.renderEventDragMem(props.eventDrag);\n            this.renderEventResizeMem(props.eventResize);\n        };\n        View.prototype.beforeUpdate = function () {\n            this.addScroll(this.queryScroll());\n        };\n        View.prototype.destroy = function () {\n            _super.prototype.destroy.call(this);\n            this.renderDatesMem.unrender(); // should unrender everything else\n        };\n        // Sizing\n        // -----------------------------------------------------------------------------------------------------------------\n        View.prototype.updateSize = function (isResize, viewHeight, isAuto) {\n            var calendar = this.context.calendar;\n            if (isResize) {\n                this.addScroll(this.queryScroll()); // NOTE: same code as in beforeUpdate\n            }\n            if (isResize || // HACKS...\n                calendar.isViewUpdated ||\n                calendar.isDatesUpdated ||\n                calendar.isEventsUpdated) {\n                // sort of the catch-all sizing\n                // anything that might cause dimension changes\n                this.updateBaseSize(isResize, viewHeight, isAuto);\n            }\n            // NOTE: popScroll is called by CalendarComponent\n        };\n        View.prototype.updateBaseSize = function (isResize, viewHeight, isAuto) {\n        };\n        // Date Rendering\n        // -----------------------------------------------------------------------------------------------------------------\n        View.prototype.renderDatesWrap = function (dateProfile) {\n            this.renderDates(dateProfile);\n            this.addScroll({\n                duration: createDuration(this.context.options.scrollTime)\n            });\n        };\n        View.prototype.unrenderDatesWrap = function () {\n            this.stopNowIndicator();\n            this.unrenderDates();\n        };\n        View.prototype.renderDates = function (dateProfile) { };\n        View.prototype.unrenderDates = function () { };\n        // Business Hours\n        // -----------------------------------------------------------------------------------------------------------------\n        View.prototype.renderBusinessHours = function (businessHours) { };\n        View.prototype.unrenderBusinessHours = function () { };\n        // Date Selection\n        // -----------------------------------------------------------------------------------------------------------------\n        View.prototype.renderDateSelectionWrap = function (selection) {\n            if (selection) {\n                this.renderDateSelection(selection);\n            }\n        };\n        View.prototype.unrenderDateSelectionWrap = function (selection) {\n            if (selection) {\n                this.unrenderDateSelection(selection);\n            }\n        };\n        View.prototype.renderDateSelection = function (selection) { };\n        View.prototype.unrenderDateSelection = function (selection) { };\n        // Event Rendering\n        // -----------------------------------------------------------------------------------------------------------------\n        View.prototype.renderEvents = function (eventStore) { };\n        View.prototype.unrenderEvents = function () { };\n        // util for subclasses\n        View.prototype.sliceEvents = function (eventStore, allDay) {\n            var props = this.props;\n            return sliceEventStore(eventStore, props.eventUiBases, props.dateProfile.activeRange, allDay ? this.context.nextDayThreshold : null).fg;\n        };\n        // Event Selection\n        // -----------------------------------------------------------------------------------------------------------------\n        View.prototype.renderEventSelectionWrap = function (instanceId) {\n            if (instanceId) {\n                this.renderEventSelection(instanceId);\n            }\n        };\n        View.prototype.unrenderEventSelectionWrap = function (instanceId) {\n            if (instanceId) {\n                this.unrenderEventSelection(instanceId);\n            }\n        };\n        View.prototype.renderEventSelection = function (instanceId) { };\n        View.prototype.unrenderEventSelection = function (instanceId) { };\n        // Event Drag\n        // -----------------------------------------------------------------------------------------------------------------\n        View.prototype.renderEventDragWrap = function (state) {\n            if (state) {\n                this.renderEventDrag(state);\n            }\n        };\n        View.prototype.unrenderEventDragWrap = function (state) {\n            if (state) {\n                this.unrenderEventDrag(state);\n            }\n        };\n        View.prototype.renderEventDrag = function (state) { };\n        View.prototype.unrenderEventDrag = function (state) { };\n        // Event Resize\n        // -----------------------------------------------------------------------------------------------------------------\n        View.prototype.renderEventResizeWrap = function (state) {\n            if (state) {\n                this.renderEventResize(state);\n            }\n        };\n        View.prototype.unrenderEventResizeWrap = function (state) {\n            if (state) {\n                this.unrenderEventResize(state);\n            }\n        };\n        View.prototype.renderEventResize = function (state) { };\n        View.prototype.unrenderEventResize = function (state) { };\n        /* Now Indicator\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Immediately render the current time indicator and begins re-rendering it at an interval,\n        // which is defined by this.getNowIndicatorUnit().\n        // TODO: somehow do this for the current whole day's background too\n        // USAGE: must be called manually from subclasses' render methods! don't need to call stopNowIndicator tho\n        View.prototype.startNowIndicator = function (dateProfile, dateProfileGenerator) {\n            var _this = this;\n            var _a = this.context, calendar = _a.calendar, dateEnv = _a.dateEnv, options = _a.options;\n            var unit;\n            var update;\n            var delay; // ms wait value\n            if (options.nowIndicator && !this.initialNowDate) {\n                unit = this.getNowIndicatorUnit(dateProfile, dateProfileGenerator);\n                if (unit) {\n                    update = this.updateNowIndicator.bind(this);\n                    this.initialNowDate = calendar.getNow();\n                    this.initialNowQueriedMs = new Date().valueOf();\n                    // wait until the beginning of the next interval\n                    delay = dateEnv.add(dateEnv.startOf(this.initialNowDate, unit), createDuration(1, unit)).valueOf() - this.initialNowDate.valueOf();\n                    // TODO: maybe always use setTimeout, waiting until start of next unit\n                    this.nowIndicatorTimeoutID = setTimeout(function () {\n                        _this.nowIndicatorTimeoutID = null;\n                        update();\n                        if (unit === 'second') {\n                            delay = 1000; // every second\n                        }\n                        else {\n                            delay = 1000 * 60; // otherwise, every minute\n                        }\n                        _this.nowIndicatorIntervalID = setInterval(update, delay); // update every interval\n                    }, delay);\n                }\n                // rendering will be initiated in updateSize\n            }\n        };\n        // rerenders the now indicator, computing the new current time from the amount of time that has passed\n        // since the initial getNow call.\n        View.prototype.updateNowIndicator = function () {\n            if (this.props.dateProfile && // a way to determine if dates were rendered yet\n                this.initialNowDate // activated before?\n            ) {\n                this.unrenderNowIndicator(); // won't unrender if unnecessary\n                this.renderNowIndicator(addMs(this.initialNowDate, new Date().valueOf() - this.initialNowQueriedMs));\n                this.isNowIndicatorRendered = true;\n            }\n        };\n        // Immediately unrenders the view's current time indicator and stops any re-rendering timers.\n        // Won't cause side effects if indicator isn't rendered.\n        View.prototype.stopNowIndicator = function () {\n            if (this.nowIndicatorTimeoutID) {\n                clearTimeout(this.nowIndicatorTimeoutID);\n                this.nowIndicatorTimeoutID = null;\n            }\n            if (this.nowIndicatorIntervalID) {\n                clearInterval(this.nowIndicatorIntervalID);\n                this.nowIndicatorIntervalID = null;\n            }\n            if (this.isNowIndicatorRendered) {\n                this.unrenderNowIndicator();\n                this.isNowIndicatorRendered = false;\n            }\n        };\n        View.prototype.getNowIndicatorUnit = function (dateProfile, dateProfileGenerator) {\n            // subclasses should implement\n        };\n        // Renders a current time indicator at the given datetime\n        View.prototype.renderNowIndicator = function (date) {\n            // SUBCLASSES MUST PASS TO CHILDREN!\n        };\n        // Undoes the rendering actions from renderNowIndicator\n        View.prototype.unrenderNowIndicator = function () {\n            // SUBCLASSES MUST PASS TO CHILDREN!\n        };\n        /* Scroller\n        ------------------------------------------------------------------------------------------------------------------*/\n        View.prototype.addScroll = function (scroll, isForced) {\n            if (isForced) {\n                scroll.isForced = isForced;\n            }\n            __assign(this.queuedScroll || (this.queuedScroll = {}), scroll);\n        };\n        View.prototype.popScroll = function (isResize) {\n            this.applyQueuedScroll(isResize);\n            this.queuedScroll = null;\n        };\n        View.prototype.applyQueuedScroll = function (isResize) {\n            if (this.queuedScroll) {\n                this.applyScroll(this.queuedScroll, isResize);\n            }\n        };\n        View.prototype.queryScroll = function () {\n            var scroll = {};\n            if (this.props.dateProfile) { // dates rendered yet?\n                __assign(scroll, this.queryDateScroll());\n            }\n            return scroll;\n        };\n        View.prototype.applyScroll = function (scroll, isResize) {\n            var duration = scroll.duration, isForced = scroll.isForced;\n            if (duration != null && !isForced) {\n                delete scroll.duration;\n                if (this.props.dateProfile) { // dates rendered yet?\n                    __assign(scroll, this.computeDateScroll(duration));\n                }\n            }\n            if (this.props.dateProfile) { // dates rendered yet?\n                this.applyDateScroll(scroll);\n            }\n        };\n        View.prototype.computeDateScroll = function (duration) {\n            return {}; // subclasses must implement\n        };\n        View.prototype.queryDateScroll = function () {\n            return {}; // subclasses must implement\n        };\n        View.prototype.applyDateScroll = function (scroll) {\n            // subclasses must implement\n        };\n        // for API\n        View.prototype.scrollToDuration = function (duration) {\n            this.applyScroll({ duration: duration }, false);\n        };\n        return View;\n    }(DateComponent));\n    EmitterMixin.mixInto(View);\n    View.prototype.usesMinMaxTime = false;\n    View.prototype.dateProfileGeneratorClass = DateProfileGenerator;\n\n    var FgEventRenderer = /** @class */ (function () {\n        function FgEventRenderer() {\n            this.segs = [];\n            this.isSizeDirty = false;\n        }\n        FgEventRenderer.prototype.renderSegs = function (context, segs, mirrorInfo) {\n            this.context = context;\n            this.rangeUpdated(); // called too frequently :(\n            // render an `.el` on each seg\n            // returns a subset of the segs. segs that were actually rendered\n            segs = this.renderSegEls(segs, mirrorInfo);\n            this.segs = segs;\n            this.attachSegs(segs, mirrorInfo);\n            this.isSizeDirty = true;\n            triggerRenderedSegs(this.context, this.segs, Boolean(mirrorInfo));\n        };\n        FgEventRenderer.prototype.unrender = function (context, _segs, mirrorInfo) {\n            triggerWillRemoveSegs(this.context, this.segs, Boolean(mirrorInfo));\n            this.detachSegs(this.segs);\n            this.segs = [];\n        };\n        // Updates values that rely on options and also relate to range\n        FgEventRenderer.prototype.rangeUpdated = function () {\n            var options = this.context.options;\n            var displayEventTime;\n            var displayEventEnd;\n            this.eventTimeFormat = createFormatter(options.eventTimeFormat || this.computeEventTimeFormat(), options.defaultRangeSeparator);\n            displayEventTime = options.displayEventTime;\n            if (displayEventTime == null) {\n                displayEventTime = this.computeDisplayEventTime(); // might be based off of range\n            }\n            displayEventEnd = options.displayEventEnd;\n            if (displayEventEnd == null) {\n                displayEventEnd = this.computeDisplayEventEnd(); // might be based off of range\n            }\n            this.displayEventTime = displayEventTime;\n            this.displayEventEnd = displayEventEnd;\n        };\n        // Renders and assigns an `el` property for each foreground event segment.\n        // Only returns segments that successfully rendered.\n        FgEventRenderer.prototype.renderSegEls = function (segs, mirrorInfo) {\n            var html = '';\n            var i;\n            if (segs.length) { // don't build an empty html string\n                // build a large concatenation of event segment HTML\n                for (i = 0; i < segs.length; i++) {\n                    html += this.renderSegHtml(segs[i], mirrorInfo);\n                }\n                // Grab individual elements from the combined HTML string. Use each as the default rendering.\n                // Then, compute the 'el' for each segment. An el might be null if the eventRender callback returned false.\n                htmlToElements(html).forEach(function (el, i) {\n                    var seg = segs[i];\n                    if (el) {\n                        seg.el = el;\n                    }\n                });\n                segs = filterSegsViaEls(this.context, segs, Boolean(mirrorInfo));\n            }\n            return segs;\n        };\n        // Generic utility for generating the HTML classNames for an event segment's element\n        FgEventRenderer.prototype.getSegClasses = function (seg, isDraggable, isResizable, mirrorInfo) {\n            var classes = [\n                'fc-event',\n                seg.isStart ? 'fc-start' : 'fc-not-start',\n                seg.isEnd ? 'fc-end' : 'fc-not-end'\n            ].concat(seg.eventRange.ui.classNames);\n            if (isDraggable) {\n                classes.push('fc-draggable');\n            }\n            if (isResizable) {\n                classes.push('fc-resizable');\n            }\n            if (mirrorInfo) {\n                classes.push('fc-mirror');\n                if (mirrorInfo.isDragging) {\n                    classes.push('fc-dragging');\n                }\n                if (mirrorInfo.isResizing) {\n                    classes.push('fc-resizing');\n                }\n            }\n            return classes;\n        };\n        // Compute the text that should be displayed on an event's element.\n        // `range` can be the Event object itself, or something range-like, with at least a `start`.\n        // If event times are disabled, or the event has no time, will return a blank string.\n        // If not specified, formatter will default to the eventTimeFormat setting,\n        // and displayEnd will default to the displayEventEnd setting.\n        FgEventRenderer.prototype.getTimeText = function (eventRange, formatter, displayEnd) {\n            var def = eventRange.def, instance = eventRange.instance;\n            return this._getTimeText(instance.range.start, def.hasEnd ? instance.range.end : null, def.allDay, formatter, displayEnd, instance.forcedStartTzo, instance.forcedEndTzo);\n        };\n        FgEventRenderer.prototype._getTimeText = function (start, end, allDay, formatter, displayEnd, forcedStartTzo, forcedEndTzo) {\n            var dateEnv = this.context.dateEnv;\n            if (formatter == null) {\n                formatter = this.eventTimeFormat;\n            }\n            if (displayEnd == null) {\n                displayEnd = this.displayEventEnd;\n            }\n            if (this.displayEventTime && !allDay) {\n                if (displayEnd && end) {\n                    return dateEnv.formatRange(start, end, formatter, {\n                        forcedStartTzo: forcedStartTzo,\n                        forcedEndTzo: forcedEndTzo\n                    });\n                }\n                else {\n                    return dateEnv.format(start, formatter, {\n                        forcedTzo: forcedStartTzo\n                    });\n                }\n            }\n            return '';\n        };\n        FgEventRenderer.prototype.computeEventTimeFormat = function () {\n            return {\n                hour: 'numeric',\n                minute: '2-digit',\n                omitZeroMinute: true\n            };\n        };\n        FgEventRenderer.prototype.computeDisplayEventTime = function () {\n            return true;\n        };\n        FgEventRenderer.prototype.computeDisplayEventEnd = function () {\n            return true;\n        };\n        // Utility for generating event skin-related CSS properties\n        FgEventRenderer.prototype.getSkinCss = function (ui) {\n            return {\n                'background-color': ui.backgroundColor,\n                'border-color': ui.borderColor,\n                color: ui.textColor\n            };\n        };\n        FgEventRenderer.prototype.sortEventSegs = function (segs) {\n            var specs = this.context.eventOrderSpecs;\n            var objs = segs.map(buildSegCompareObj);\n            objs.sort(function (obj0, obj1) {\n                return compareByFieldSpecs(obj0, obj1, specs);\n            });\n            return objs.map(function (c) {\n                return c._seg;\n            });\n        };\n        FgEventRenderer.prototype.computeSizes = function (force) {\n            if (force || this.isSizeDirty) {\n                this.computeSegSizes(this.segs);\n            }\n        };\n        FgEventRenderer.prototype.assignSizes = function (force) {\n            if (force || this.isSizeDirty) {\n                this.assignSegSizes(this.segs);\n                this.isSizeDirty = false;\n            }\n        };\n        FgEventRenderer.prototype.computeSegSizes = function (segs) {\n        };\n        FgEventRenderer.prototype.assignSegSizes = function (segs) {\n        };\n        // Manipulation on rendered segs\n        FgEventRenderer.prototype.hideByHash = function (hash) {\n            if (hash) {\n                for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {\n                    var seg = _a[_i];\n                    if (hash[seg.eventRange.instance.instanceId]) {\n                        seg.el.style.visibility = 'hidden';\n                    }\n                }\n            }\n        };\n        FgEventRenderer.prototype.showByHash = function (hash) {\n            if (hash) {\n                for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {\n                    var seg = _a[_i];\n                    if (hash[seg.eventRange.instance.instanceId]) {\n                        seg.el.style.visibility = '';\n                    }\n                }\n            }\n        };\n        FgEventRenderer.prototype.selectByInstanceId = function (instanceId) {\n            if (instanceId) {\n                for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {\n                    var seg = _a[_i];\n                    var eventInstance = seg.eventRange.instance;\n                    if (eventInstance && eventInstance.instanceId === instanceId &&\n                        seg.el // necessary?\n                    ) {\n                        seg.el.classList.add('fc-selected');\n                    }\n                }\n            }\n        };\n        FgEventRenderer.prototype.unselectByInstanceId = function (instanceId) {\n            if (instanceId) {\n                for (var _i = 0, _a = this.segs; _i < _a.length; _i++) {\n                    var seg = _a[_i];\n                    if (seg.el) { // necessary?\n                        seg.el.classList.remove('fc-selected');\n                    }\n                }\n            }\n        };\n        return FgEventRenderer;\n    }());\n    // returns a object with all primitive props that can be compared\n    function buildSegCompareObj(seg) {\n        var eventDef = seg.eventRange.def;\n        var range = seg.eventRange.instance.range;\n        var start = range.start ? range.start.valueOf() : 0; // TODO: better support for open-range events\n        var end = range.end ? range.end.valueOf() : 0; // \"\n        return __assign({}, eventDef.extendedProps, eventDef, { id: eventDef.publicId, start: start,\n            end: end, duration: end - start, allDay: Number(eventDef.allDay), _seg: seg // for later retrieval\n         });\n    }\n\n    /*\n    TODO: when refactoring this class, make a new FillRenderer instance for each `type`\n    */\n    var FillRenderer = /** @class */ (function () {\n        function FillRenderer() {\n            this.fillSegTag = 'div';\n            this.dirtySizeFlags = {};\n            this.containerElsByType = {};\n            this.segsByType = {};\n        }\n        FillRenderer.prototype.getSegsByType = function (type) {\n            return this.segsByType[type] || [];\n        };\n        FillRenderer.prototype.renderSegs = function (type, context, segs) {\n            var _a;\n            this.context = context;\n            var renderedSegs = this.renderSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs\n            var containerEls = this.attachSegs(type, renderedSegs);\n            if (containerEls) {\n                (_a = (this.containerElsByType[type] || (this.containerElsByType[type] = []))).push.apply(_a, containerEls);\n            }\n            this.segsByType[type] = renderedSegs;\n            if (type === 'bgEvent') {\n                triggerRenderedSegs(context, renderedSegs, false); // isMirror=false\n            }\n            this.dirtySizeFlags[type] = true;\n        };\n        // Unrenders a specific type of fill that is currently rendered on the grid\n        FillRenderer.prototype.unrender = function (type, context) {\n            var segs = this.segsByType[type];\n            if (segs) {\n                if (type === 'bgEvent') {\n                    triggerWillRemoveSegs(context, segs, false); // isMirror=false\n                }\n                this.detachSegs(type, segs);\n            }\n        };\n        // Renders and assigns an `el` property for each fill segment. Generic enough to work with different types.\n        // Only returns segments that successfully rendered.\n        FillRenderer.prototype.renderSegEls = function (type, segs) {\n            var _this = this;\n            var html = '';\n            var i;\n            if (segs.length) {\n                // build a large concatenation of segment HTML\n                for (i = 0; i < segs.length; i++) {\n                    html += this.renderSegHtml(type, segs[i]);\n                }\n                // Grab individual elements from the combined HTML string. Use each as the default rendering.\n                // Then, compute the 'el' for each segment.\n                htmlToElements(html).forEach(function (el, i) {\n                    var seg = segs[i];\n                    if (el) {\n                        seg.el = el;\n                    }\n                });\n                if (type === 'bgEvent') {\n                    segs = filterSegsViaEls(this.context, segs, false // isMirror. background events can never be mirror elements\n                    );\n                }\n                // correct element type? (would be bad if a non-TD were inserted into a table for example)\n                segs = segs.filter(function (seg) {\n                    return elementMatches(seg.el, _this.fillSegTag);\n                });\n            }\n            return segs;\n        };\n        // Builds the HTML needed for one fill segment. Generic enough to work with different types.\n        FillRenderer.prototype.renderSegHtml = function (type, seg) {\n            var css = null;\n            var classNames = [];\n            if (type !== 'highlight' && type !== 'businessHours') {\n                css = {\n                    'background-color': seg.eventRange.ui.backgroundColor\n                };\n            }\n            if (type !== 'highlight') {\n                classNames = classNames.concat(seg.eventRange.ui.classNames);\n            }\n            if (type === 'businessHours') {\n                classNames.push('fc-bgevent');\n            }\n            else {\n                classNames.push('fc-' + type.toLowerCase());\n            }\n            return '<' + this.fillSegTag +\n                (classNames.length ? ' class=\"' + classNames.join(' ') + '\"' : '') +\n                (css ? ' style=\"' + cssToStr(css) + '\"' : '') +\n                '></' + this.fillSegTag + '>';\n        };\n        FillRenderer.prototype.detachSegs = function (type, segs) {\n            var containerEls = this.containerElsByType[type];\n            if (containerEls) {\n                containerEls.forEach(removeElement);\n                delete this.containerElsByType[type];\n            }\n        };\n        FillRenderer.prototype.computeSizes = function (force) {\n            for (var type in this.segsByType) {\n                if (force || this.dirtySizeFlags[type]) {\n                    this.computeSegSizes(this.segsByType[type]);\n                }\n            }\n        };\n        FillRenderer.prototype.assignSizes = function (force) {\n            for (var type in this.segsByType) {\n                if (force || this.dirtySizeFlags[type]) {\n                    this.assignSegSizes(this.segsByType[type]);\n                }\n            }\n            this.dirtySizeFlags = {};\n        };\n        FillRenderer.prototype.computeSegSizes = function (segs) {\n        };\n        FillRenderer.prototype.assignSegSizes = function (segs) {\n        };\n        return FillRenderer;\n    }());\n\n    var NamedTimeZoneImpl = /** @class */ (function () {\n        function NamedTimeZoneImpl(timeZoneName) {\n            this.timeZoneName = timeZoneName;\n        }\n        return NamedTimeZoneImpl;\n    }());\n\n    /*\n    An abstraction for a dragging interaction originating on an event.\n    Does higher-level things than PointerDragger, such as possibly:\n    - a \"mirror\" that moves with the pointer\n    - a minimum number of pixels or other criteria for a true drag to begin\n\n    subclasses must emit:\n    - pointerdown\n    - dragstart\n    - dragmove\n    - pointerup\n    - dragend\n    */\n    var ElementDragging = /** @class */ (function () {\n        function ElementDragging(el) {\n            this.emitter = new EmitterMixin();\n        }\n        ElementDragging.prototype.destroy = function () {\n        };\n        ElementDragging.prototype.setMirrorIsVisible = function (bool) {\n            // optional if subclass doesn't want to support a mirror\n        };\n        ElementDragging.prototype.setMirrorNeedsRevert = function (bool) {\n            // optional if subclass doesn't want to support a mirror\n        };\n        ElementDragging.prototype.setAutoScrollEnabled = function (bool) {\n            // optional\n        };\n        return ElementDragging;\n    }());\n\n    function formatDate(dateInput, settings) {\n        if (settings === void 0) { settings = {}; }\n        var dateEnv = buildDateEnv$1(settings);\n        var formatter = createFormatter(settings);\n        var dateMeta = dateEnv.createMarkerMeta(dateInput);\n        if (!dateMeta) { // TODO: warning?\n            return '';\n        }\n        return dateEnv.format(dateMeta.marker, formatter, {\n            forcedTzo: dateMeta.forcedTzo\n        });\n    }\n    function formatRange(startInput, endInput, settings // mixture of env and formatter settings\n    ) {\n        var dateEnv = buildDateEnv$1(typeof settings === 'object' && settings ? settings : {}); // pass in if non-null object\n        var formatter = createFormatter(settings, globalDefaults.defaultRangeSeparator);\n        var startMeta = dateEnv.createMarkerMeta(startInput);\n        var endMeta = dateEnv.createMarkerMeta(endInput);\n        if (!startMeta || !endMeta) { // TODO: warning?\n            return '';\n        }\n        return dateEnv.formatRange(startMeta.marker, endMeta.marker, formatter, {\n            forcedStartTzo: startMeta.forcedTzo,\n            forcedEndTzo: endMeta.forcedTzo,\n            isEndExclusive: settings.isEndExclusive\n        });\n    }\n    // TODO: more DRY and optimized\n    function buildDateEnv$1(settings) {\n        var locale = buildLocale(settings.locale || 'en', parseRawLocales([]).map); // TODO: don't hardcode 'en' everywhere\n        // ensure required settings\n        settings = __assign({ timeZone: globalDefaults.timeZone, calendarSystem: 'gregory' }, settings, { locale: locale });\n        return new DateEnv(settings);\n    }\n\n    var DRAG_META_PROPS = {\n        startTime: createDuration,\n        duration: createDuration,\n        create: Boolean,\n        sourceId: String\n    };\n    var DRAG_META_DEFAULTS = {\n        create: true\n    };\n    function parseDragMeta(raw) {\n        var leftoverProps = {};\n        var refined = refineProps(raw, DRAG_META_PROPS, DRAG_META_DEFAULTS, leftoverProps);\n        refined.leftoverProps = leftoverProps;\n        return refined;\n    }\n\n    // Computes a default column header formatting string if `colFormat` is not explicitly defined\n    function computeFallbackHeaderFormat(datesRepDistinctDays, dayCnt) {\n        // if more than one week row, or if there are a lot of columns with not much space,\n        // put just the day numbers will be in each cell\n        if (!datesRepDistinctDays || dayCnt > 10) {\n            return { weekday: 'short' }; // \"Sat\"\n        }\n        else if (dayCnt > 1) {\n            return { weekday: 'short', month: 'numeric', day: 'numeric', omitCommas: true }; // \"Sat 11/12\"\n        }\n        else {\n            return { weekday: 'long' }; // \"Saturday\"\n        }\n    }\n    function renderDateCell(dateMarker, dateProfile, datesRepDistinctDays, colCnt, colHeadFormat, context, colspan, otherAttrs) {\n        var dateEnv = context.dateEnv, theme = context.theme, options = context.options;\n        var isDateValid = rangeContainsMarker(dateProfile.activeRange, dateMarker); // TODO: called too frequently. cache somehow.\n        var classNames = [\n            'fc-day-header',\n            theme.getClass('widgetHeader')\n        ];\n        var innerHtml;\n        if (typeof options.columnHeaderHtml === 'function') {\n            innerHtml = options.columnHeaderHtml(dateEnv.toDate(dateMarker));\n        }\n        else if (typeof options.columnHeaderText === 'function') {\n            innerHtml = htmlEscape(options.columnHeaderText(dateEnv.toDate(dateMarker)));\n        }\n        else {\n            innerHtml = htmlEscape(dateEnv.format(dateMarker, colHeadFormat));\n        }\n        // if only one row of days, the classNames on the header can represent the specific days beneath\n        if (datesRepDistinctDays) {\n            classNames = classNames.concat(\n            // includes the day-of-week class\n            // noThemeHighlight=true (don't highlight the header)\n            getDayClasses(dateMarker, dateProfile, context, true));\n        }\n        else {\n            classNames.push('fc-' + DAY_IDS[dateMarker.getUTCDay()]); // only add the day-of-week class\n        }\n        return '' +\n            '<th class=\"' + classNames.join(' ') + '\"' +\n            ((isDateValid && datesRepDistinctDays) ?\n                ' data-date=\"' + dateEnv.formatIso(dateMarker, { omitTime: true }) + '\"' :\n                '') +\n            (colspan > 1 ?\n                ' colspan=\"' + colspan + '\"' :\n                '') +\n            (otherAttrs ?\n                ' ' + otherAttrs :\n                '') +\n            '>' +\n            (isDateValid ?\n                // don't make a link if the heading could represent multiple days, or if there's only one day (forceOff)\n                buildGotoAnchorHtml(options, dateEnv, { date: dateMarker, forceOff: !datesRepDistinctDays || colCnt === 1 }, innerHtml) :\n                // if not valid, display text, but no link\n                innerHtml) +\n            '</th>';\n    }\n\n    var DayHeader = /** @class */ (function (_super) {\n        __extends(DayHeader, _super);\n        function DayHeader(parentEl) {\n            var _this = _super.call(this) || this;\n            _this.renderSkeleton = memoizeRendering(_this._renderSkeleton, _this._unrenderSkeleton);\n            _this.parentEl = parentEl;\n            return _this;\n        }\n        DayHeader.prototype.render = function (props, context) {\n            var dates = props.dates, datesRepDistinctDays = props.datesRepDistinctDays;\n            var parts = [];\n            this.renderSkeleton(context);\n            if (props.renderIntroHtml) {\n                parts.push(props.renderIntroHtml());\n            }\n            var colHeadFormat = createFormatter(context.options.columnHeaderFormat ||\n                computeFallbackHeaderFormat(datesRepDistinctDays, dates.length));\n            for (var _i = 0, dates_1 = dates; _i < dates_1.length; _i++) {\n                var date = dates_1[_i];\n                parts.push(renderDateCell(date, props.dateProfile, datesRepDistinctDays, dates.length, colHeadFormat, context));\n            }\n            if (context.isRtl) {\n                parts.reverse();\n            }\n            this.thead.innerHTML = '<tr>' + parts.join('') + '</tr>';\n        };\n        DayHeader.prototype.destroy = function () {\n            _super.prototype.destroy.call(this);\n            this.renderSkeleton.unrender();\n        };\n        DayHeader.prototype._renderSkeleton = function (context) {\n            var theme = context.theme;\n            var parentEl = this.parentEl;\n            parentEl.innerHTML = ''; // because might be nbsp\n            parentEl.appendChild(this.el = htmlToElement('<div class=\"fc-row ' + theme.getClass('headerRow') + '\">' +\n                '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n                '<thead></thead>' +\n                '</table>' +\n                '</div>'));\n            this.thead = this.el.querySelector('thead');\n        };\n        DayHeader.prototype._unrenderSkeleton = function () {\n            removeElement(this.el);\n        };\n        return DayHeader;\n    }(Component));\n\n    var DaySeries = /** @class */ (function () {\n        function DaySeries(range, dateProfileGenerator) {\n            var date = range.start;\n            var end = range.end;\n            var indices = [];\n            var dates = [];\n            var dayIndex = -1;\n            while (date < end) { // loop each day from start to end\n                if (dateProfileGenerator.isHiddenDay(date)) {\n                    indices.push(dayIndex + 0.5); // mark that it's between indices\n                }\n                else {\n                    dayIndex++;\n                    indices.push(dayIndex);\n                    dates.push(date);\n                }\n                date = addDays(date, 1);\n            }\n            this.dates = dates;\n            this.indices = indices;\n            this.cnt = dates.length;\n        }\n        DaySeries.prototype.sliceRange = function (range) {\n            var firstIndex = this.getDateDayIndex(range.start); // inclusive first index\n            var lastIndex = this.getDateDayIndex(addDays(range.end, -1)); // inclusive last index\n            var clippedFirstIndex = Math.max(0, firstIndex);\n            var clippedLastIndex = Math.min(this.cnt - 1, lastIndex);\n            // deal with in-between indices\n            clippedFirstIndex = Math.ceil(clippedFirstIndex); // in-between starts round to next cell\n            clippedLastIndex = Math.floor(clippedLastIndex); // in-between ends round to prev cell\n            if (clippedFirstIndex <= clippedLastIndex) {\n                return {\n                    firstIndex: clippedFirstIndex,\n                    lastIndex: clippedLastIndex,\n                    isStart: firstIndex === clippedFirstIndex,\n                    isEnd: lastIndex === clippedLastIndex\n                };\n            }\n            else {\n                return null;\n            }\n        };\n        // Given a date, returns its chronolocial cell-index from the first cell of the grid.\n        // If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.\n        // If before the first offset, returns a negative number.\n        // If after the last offset, returns an offset past the last cell offset.\n        // Only works for *start* dates of cells. Will not work for exclusive end dates for cells.\n        DaySeries.prototype.getDateDayIndex = function (date) {\n            var indices = this.indices;\n            var dayOffset = Math.floor(diffDays(this.dates[0], date));\n            if (dayOffset < 0) {\n                return indices[0] - 1;\n            }\n            else if (dayOffset >= indices.length) {\n                return indices[indices.length - 1] + 1;\n            }\n            else {\n                return indices[dayOffset];\n            }\n        };\n        return DaySeries;\n    }());\n\n    var DayTable = /** @class */ (function () {\n        function DayTable(daySeries, breakOnWeeks) {\n            var dates = daySeries.dates;\n            var daysPerRow;\n            var firstDay;\n            var rowCnt;\n            if (breakOnWeeks) {\n                // count columns until the day-of-week repeats\n                firstDay = dates[0].getUTCDay();\n                for (daysPerRow = 1; daysPerRow < dates.length; daysPerRow++) {\n                    if (dates[daysPerRow].getUTCDay() === firstDay) {\n                        break;\n                    }\n                }\n                rowCnt = Math.ceil(dates.length / daysPerRow);\n            }\n            else {\n                rowCnt = 1;\n                daysPerRow = dates.length;\n            }\n            this.rowCnt = rowCnt;\n            this.colCnt = daysPerRow;\n            this.daySeries = daySeries;\n            this.cells = this.buildCells();\n            this.headerDates = this.buildHeaderDates();\n        }\n        DayTable.prototype.buildCells = function () {\n            var rows = [];\n            for (var row = 0; row < this.rowCnt; row++) {\n                var cells = [];\n                for (var col = 0; col < this.colCnt; col++) {\n                    cells.push(this.buildCell(row, col));\n                }\n                rows.push(cells);\n            }\n            return rows;\n        };\n        DayTable.prototype.buildCell = function (row, col) {\n            return {\n                date: this.daySeries.dates[row * this.colCnt + col]\n            };\n        };\n        DayTable.prototype.buildHeaderDates = function () {\n            var dates = [];\n            for (var col = 0; col < this.colCnt; col++) {\n                dates.push(this.cells[0][col].date);\n            }\n            return dates;\n        };\n        DayTable.prototype.sliceRange = function (range) {\n            var colCnt = this.colCnt;\n            var seriesSeg = this.daySeries.sliceRange(range);\n            var segs = [];\n            if (seriesSeg) {\n                var firstIndex = seriesSeg.firstIndex, lastIndex = seriesSeg.lastIndex;\n                var index = firstIndex;\n                while (index <= lastIndex) {\n                    var row = Math.floor(index / colCnt);\n                    var nextIndex = Math.min((row + 1) * colCnt, lastIndex + 1);\n                    segs.push({\n                        row: row,\n                        firstCol: index % colCnt,\n                        lastCol: (nextIndex - 1) % colCnt,\n                        isStart: seriesSeg.isStart && index === firstIndex,\n                        isEnd: seriesSeg.isEnd && (nextIndex - 1) === lastIndex\n                    });\n                    index = nextIndex;\n                }\n            }\n            return segs;\n        };\n        return DayTable;\n    }());\n\n    var Slicer = /** @class */ (function () {\n        function Slicer() {\n            this.sliceBusinessHours = memoize(this._sliceBusinessHours);\n            this.sliceDateSelection = memoize(this._sliceDateSpan);\n            this.sliceEventStore = memoize(this._sliceEventStore);\n            this.sliceEventDrag = memoize(this._sliceInteraction);\n            this.sliceEventResize = memoize(this._sliceInteraction);\n        }\n        Slicer.prototype.sliceProps = function (props, dateProfile, nextDayThreshold, calendar, component) {\n            var extraArgs = [];\n            for (var _i = 5; _i < arguments.length; _i++) {\n                extraArgs[_i - 5] = arguments[_i];\n            }\n            var eventUiBases = props.eventUiBases;\n            var eventSegs = this.sliceEventStore.apply(this, [props.eventStore, eventUiBases, dateProfile, nextDayThreshold, component].concat(extraArgs));\n            return {\n                dateSelectionSegs: this.sliceDateSelection.apply(this, [props.dateSelection, eventUiBases, component].concat(extraArgs)),\n                businessHourSegs: this.sliceBusinessHours.apply(this, [props.businessHours, dateProfile, nextDayThreshold, calendar, component].concat(extraArgs)),\n                fgEventSegs: eventSegs.fg,\n                bgEventSegs: eventSegs.bg,\n                eventDrag: this.sliceEventDrag.apply(this, [props.eventDrag, eventUiBases, dateProfile, nextDayThreshold, component].concat(extraArgs)),\n                eventResize: this.sliceEventResize.apply(this, [props.eventResize, eventUiBases, dateProfile, nextDayThreshold, component].concat(extraArgs)),\n                eventSelection: props.eventSelection\n            }; // TODO: give interactionSegs?\n        };\n        Slicer.prototype.sliceNowDate = function (// does not memoize\n        date, component) {\n            var extraArgs = [];\n            for (var _i = 2; _i < arguments.length; _i++) {\n                extraArgs[_i - 2] = arguments[_i];\n            }\n            return this._sliceDateSpan.apply(this, [{ range: { start: date, end: addMs(date, 1) }, allDay: false },\n                {},\n                component].concat(extraArgs));\n        };\n        Slicer.prototype._sliceBusinessHours = function (businessHours, dateProfile, nextDayThreshold, calendar, component) {\n            var extraArgs = [];\n            for (var _i = 5; _i < arguments.length; _i++) {\n                extraArgs[_i - 5] = arguments[_i];\n            }\n            if (!businessHours) {\n                return [];\n            }\n            return this._sliceEventStore.apply(this, [expandRecurring(businessHours, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), calendar),\n                {},\n                dateProfile,\n                nextDayThreshold,\n                component].concat(extraArgs)).bg;\n        };\n        Slicer.prototype._sliceEventStore = function (eventStore, eventUiBases, dateProfile, nextDayThreshold, component) {\n            var extraArgs = [];\n            for (var _i = 5; _i < arguments.length; _i++) {\n                extraArgs[_i - 5] = arguments[_i];\n            }\n            if (eventStore) {\n                var rangeRes = sliceEventStore(eventStore, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);\n                return {\n                    bg: this.sliceEventRanges(rangeRes.bg, component, extraArgs),\n                    fg: this.sliceEventRanges(rangeRes.fg, component, extraArgs)\n                };\n            }\n            else {\n                return { bg: [], fg: [] };\n            }\n        };\n        Slicer.prototype._sliceInteraction = function (interaction, eventUiBases, dateProfile, nextDayThreshold, component) {\n            var extraArgs = [];\n            for (var _i = 5; _i < arguments.length; _i++) {\n                extraArgs[_i - 5] = arguments[_i];\n            }\n            if (!interaction) {\n                return null;\n            }\n            var rangeRes = sliceEventStore(interaction.mutatedEvents, eventUiBases, computeActiveRange(dateProfile, Boolean(nextDayThreshold)), nextDayThreshold);\n            return {\n                segs: this.sliceEventRanges(rangeRes.fg, component, extraArgs),\n                affectedInstances: interaction.affectedEvents.instances,\n                isEvent: interaction.isEvent,\n                sourceSeg: interaction.origSeg\n            };\n        };\n        Slicer.prototype._sliceDateSpan = function (dateSpan, eventUiBases, component) {\n            var extraArgs = [];\n            for (var _i = 3; _i < arguments.length; _i++) {\n                extraArgs[_i - 3] = arguments[_i];\n            }\n            if (!dateSpan) {\n                return [];\n            }\n            var eventRange = fabricateEventRange(dateSpan, eventUiBases, component.context.calendar);\n            var segs = this.sliceRange.apply(this, [dateSpan.range].concat(extraArgs));\n            for (var _a = 0, segs_1 = segs; _a < segs_1.length; _a++) {\n                var seg = segs_1[_a];\n                seg.component = component;\n                seg.eventRange = eventRange;\n            }\n            return segs;\n        };\n        /*\n        \"complete\" seg means it has component and eventRange\n        */\n        Slicer.prototype.sliceEventRanges = function (eventRanges, component, // TODO: kill\n        extraArgs) {\n            var segs = [];\n            for (var _i = 0, eventRanges_1 = eventRanges; _i < eventRanges_1.length; _i++) {\n                var eventRange = eventRanges_1[_i];\n                segs.push.apply(segs, this.sliceEventRange(eventRange, component, extraArgs));\n            }\n            return segs;\n        };\n        /*\n        \"complete\" seg means it has component and eventRange\n        */\n        Slicer.prototype.sliceEventRange = function (eventRange, component, // TODO: kill\n        extraArgs) {\n            var segs = this.sliceRange.apply(this, [eventRange.range].concat(extraArgs));\n            for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {\n                var seg = segs_2[_i];\n                seg.component = component;\n                seg.eventRange = eventRange;\n                seg.isStart = eventRange.isStart && seg.isStart;\n                seg.isEnd = eventRange.isEnd && seg.isEnd;\n            }\n            return segs;\n        };\n        return Slicer;\n    }());\n    /*\n    for incorporating minTime/maxTime if appropriate\n    TODO: should be part of DateProfile!\n    TimelineDateProfile already does this btw\n    */\n    function computeActiveRange(dateProfile, isComponentAllDay) {\n        var range = dateProfile.activeRange;\n        if (isComponentAllDay) {\n            return range;\n        }\n        return {\n            start: addMs(range.start, dateProfile.minTime.milliseconds),\n            end: addMs(range.end, dateProfile.maxTime.milliseconds - 864e5) // 864e5 = ms in a day\n        };\n    }\n\n    // exports\n    // --------------------------------------------------------------------------------------------------\n    var version = '4.4.2';\n\n    exports.Calendar = Calendar;\n    exports.Component = Component;\n    exports.ComponentContext = ComponentContext;\n    exports.DateComponent = DateComponent;\n    exports.DateEnv = DateEnv;\n    exports.DateProfileGenerator = DateProfileGenerator;\n    exports.DayHeader = DayHeader;\n    exports.DaySeries = DaySeries;\n    exports.DayTable = DayTable;\n    exports.ElementDragging = ElementDragging;\n    exports.ElementScrollController = ElementScrollController;\n    exports.EmitterMixin = EmitterMixin;\n    exports.EventApi = EventApi;\n    exports.FgEventRenderer = FgEventRenderer;\n    exports.FillRenderer = FillRenderer;\n    exports.Interaction = Interaction;\n    exports.Mixin = Mixin;\n    exports.NamedTimeZoneImpl = NamedTimeZoneImpl;\n    exports.PositionCache = PositionCache;\n    exports.ScrollComponent = ScrollComponent;\n    exports.ScrollController = ScrollController;\n    exports.Slicer = Slicer;\n    exports.Splitter = Splitter;\n    exports.Theme = Theme;\n    exports.View = View;\n    exports.WindowScrollController = WindowScrollController;\n    exports.addDays = addDays;\n    exports.addDurations = addDurations;\n    exports.addMs = addMs;\n    exports.addWeeks = addWeeks;\n    exports.allowContextMenu = allowContextMenu;\n    exports.allowSelection = allowSelection;\n    exports.appendToElement = appendToElement;\n    exports.applyAll = applyAll;\n    exports.applyMutationToEventStore = applyMutationToEventStore;\n    exports.applyStyle = applyStyle;\n    exports.applyStyleProp = applyStyleProp;\n    exports.asRoughMinutes = asRoughMinutes;\n    exports.asRoughMs = asRoughMs;\n    exports.asRoughSeconds = asRoughSeconds;\n    exports.buildGotoAnchorHtml = buildGotoAnchorHtml;\n    exports.buildSegCompareObj = buildSegCompareObj;\n    exports.capitaliseFirstLetter = capitaliseFirstLetter;\n    exports.combineEventUis = combineEventUis;\n    exports.compareByFieldSpec = compareByFieldSpec;\n    exports.compareByFieldSpecs = compareByFieldSpecs;\n    exports.compareNumbers = compareNumbers;\n    exports.compensateScroll = compensateScroll;\n    exports.computeClippingRect = computeClippingRect;\n    exports.computeEdges = computeEdges;\n    exports.computeEventDraggable = computeEventDraggable;\n    exports.computeEventEndResizable = computeEventEndResizable;\n    exports.computeEventStartResizable = computeEventStartResizable;\n    exports.computeFallbackHeaderFormat = computeFallbackHeaderFormat;\n    exports.computeHeightAndMargins = computeHeightAndMargins;\n    exports.computeInnerRect = computeInnerRect;\n    exports.computeRect = computeRect;\n    exports.computeVisibleDayRange = computeVisibleDayRange;\n    exports.config = config;\n    exports.constrainPoint = constrainPoint;\n    exports.createDuration = createDuration;\n    exports.createElement = createElement;\n    exports.createEmptyEventStore = createEmptyEventStore;\n    exports.createEventInstance = createEventInstance;\n    exports.createFormatter = createFormatter;\n    exports.createPlugin = createPlugin;\n    exports.cssToStr = cssToStr;\n    exports.debounce = debounce;\n    exports.diffDates = diffDates;\n    exports.diffDayAndTime = diffDayAndTime;\n    exports.diffDays = diffDays;\n    exports.diffPoints = diffPoints;\n    exports.diffWeeks = diffWeeks;\n    exports.diffWholeDays = diffWholeDays;\n    exports.diffWholeWeeks = diffWholeWeeks;\n    exports.disableCursor = disableCursor;\n    exports.distributeHeight = distributeHeight;\n    exports.elementClosest = elementClosest;\n    exports.elementMatches = elementMatches;\n    exports.enableCursor = enableCursor;\n    exports.eventTupleToStore = eventTupleToStore;\n    exports.filterEventStoreDefs = filterEventStoreDefs;\n    exports.filterHash = filterHash;\n    exports.findChildren = findChildren;\n    exports.findElements = findElements;\n    exports.flexibleCompare = flexibleCompare;\n    exports.forceClassName = forceClassName;\n    exports.formatDate = formatDate;\n    exports.formatIsoTimeString = formatIsoTimeString;\n    exports.formatRange = formatRange;\n    exports.getAllDayHtml = getAllDayHtml;\n    exports.getClippingParents = getClippingParents;\n    exports.getDayClasses = getDayClasses;\n    exports.getElSeg = getElSeg;\n    exports.getRectCenter = getRectCenter;\n    exports.getRelevantEvents = getRelevantEvents;\n    exports.globalDefaults = globalDefaults;\n    exports.greatestDurationDenominator = greatestDurationDenominator;\n    exports.hasBgRendering = hasBgRendering;\n    exports.htmlEscape = htmlEscape;\n    exports.htmlToElement = htmlToElement;\n    exports.insertAfterElement = insertAfterElement;\n    exports.interactionSettingsStore = interactionSettingsStore;\n    exports.interactionSettingsToStore = interactionSettingsToStore;\n    exports.intersectRanges = intersectRanges;\n    exports.intersectRects = intersectRects;\n    exports.isArraysEqual = isArraysEqual;\n    exports.isDateSpansEqual = isDateSpansEqual;\n    exports.isInt = isInt;\n    exports.isInteractionValid = isInteractionValid;\n    exports.isMultiDayRange = isMultiDayRange;\n    exports.isPropsEqual = isPropsEqual;\n    exports.isPropsValid = isPropsValid;\n    exports.isSingleDay = isSingleDay;\n    exports.isValidDate = isValidDate;\n    exports.listenBySelector = listenBySelector;\n    exports.mapHash = mapHash;\n    exports.matchCellWidths = matchCellWidths;\n    exports.memoize = memoize;\n    exports.memoizeOutput = memoizeOutput;\n    exports.memoizeRendering = memoizeRendering;\n    exports.mergeEventStores = mergeEventStores;\n    exports.multiplyDuration = multiplyDuration;\n    exports.padStart = padStart;\n    exports.parseBusinessHours = parseBusinessHours;\n    exports.parseDragMeta = parseDragMeta;\n    exports.parseEventDef = parseEventDef;\n    exports.parseFieldSpecs = parseFieldSpecs;\n    exports.parseMarker = parse;\n    exports.pointInsideRect = pointInsideRect;\n    exports.prependToElement = prependToElement;\n    exports.preventContextMenu = preventContextMenu;\n    exports.preventDefault = preventDefault;\n    exports.preventSelection = preventSelection;\n    exports.processScopedUiProps = processScopedUiProps;\n    exports.rangeContainsMarker = rangeContainsMarker;\n    exports.rangeContainsRange = rangeContainsRange;\n    exports.rangesEqual = rangesEqual;\n    exports.rangesIntersect = rangesIntersect;\n    exports.refineProps = refineProps;\n    exports.removeElement = removeElement;\n    exports.removeExact = removeExact;\n    exports.renderDateCell = renderDateCell;\n    exports.requestJson = requestJson;\n    exports.sliceEventStore = sliceEventStore;\n    exports.startOfDay = startOfDay;\n    exports.subtractInnerElHeight = subtractInnerElHeight;\n    exports.translateRect = translateRect;\n    exports.uncompensateScroll = uncompensateScroll;\n    exports.undistributeHeight = undistributeHeight;\n    exports.unpromisify = unpromisify;\n    exports.version = version;\n    exports.whenTransitionDone = whenTransitionDone;\n    exports.wholeDivideDurations = wholeDivideDurations;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci9jb3JlL21haW4uanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUksS0FBNEQ7QUFDaEUsSUFBSSxDQUM0RDtBQUNoRSxDQUFDLDRCQUE0Qjs7QUFFN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHVCQUF1QjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pELHdCQUF3QixtQkFBbUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLG1CQUFtQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsdUJBQXVCO0FBQy9DO0FBQ0EsNEJBQTRCLG9CQUFvQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixvQkFBb0I7QUFDNUMsa0RBQWtEO0FBQ2xELDRCQUE0Qix1QkFBdUI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhFQUE4RTtBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSwwREFBMEQ7QUFDMUQsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLDBEQUEwRDtBQUMxRCxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsMkJBQTJCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLGlCQUFpQjtBQUNqQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUU7QUFDbkUsc0ZBQXNGO0FBQ3RGLDBCQUEwQjtBQUMxQiw4QkFBOEI7QUFDOUIsOEJBQThCO0FBQzlCO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBGQUEwRjtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUU7QUFDekUsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixtQkFBbUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHVDQUF1QztBQUM3RCxzQkFBc0Isd0JBQXdCO0FBQzlDO0FBQ0E7QUFDQSw2QkFBNkIsYUFBYTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix1QkFBdUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixzQkFBc0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUJBQXVCO0FBQ2hEO0FBQ0E7QUFDQSx3QkFBd0IsaUJBQWlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUU7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQixzQ0FBc0Msa0JBQWtCO0FBQ3ZGLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsT0FBTztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdCQUF3QiwyQkFBMkI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5QkFBeUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsOENBQThDLFFBQVE7QUFDdEQ7QUFDQSwwREFBMEQ7QUFDMUQ7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLFFBQVE7QUFDOUM7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsaUJBQWlCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtEQUFrRCx5QkFBeUI7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxzQkFBc0I7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELHlCQUF5QjtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDLFNBQVM7QUFDVCxpQkFBaUI7QUFDakI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsbUJBQW1CO0FBQ3ZDO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0Msc0NBQXNDLG9DQUFvQztBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0Msa0NBQWtDLHdDQUF3QztBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRTtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQyx5QkFBeUI7QUFDekI7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsc0JBQXNCO0FBQzdELHNDQUFzQyxxQkFBcUI7QUFDM0Q7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQSx1Q0FBdUM7QUFDdkMscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJEO0FBQzNEO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSwwREFBMEQ7QUFDMUQ7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLDhEQUE4RDtBQUM5RDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQSxtQ0FBbUMsNkJBQTZCO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQyxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckMsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkMsYUFBYTtBQUNiO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBLHNHQUFzRztBQUN0RztBQUNBLGtDQUFrQyx3QkFBd0I7QUFDMUQ7QUFDQTtBQUNBLGtDQUFrQyx3QkFBd0I7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLG9CQUFvQjtBQUN0RDtBQUNBO0FBQ0Esa0NBQWtDLGlCQUFpQixpQkFBaUI7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLHNEQUFzRDtBQUM1RjtBQUNBO0FBQ0Esc0NBQXNDLDBFQUEwRTtBQUNoSDtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0Esa0NBQWtDLHNEQUFzRDtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLDhCQUE4QixtQkFBbUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIsOEJBQThCLGlCQUFpQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6Qiw4QkFBOEIsbUJBQW1CO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QyxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsOEJBQThCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsNEJBQTRCO0FBQzNEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSwrQkFBK0IsMkJBQTJCO0FBQzFEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSwrQkFBK0IsMEJBQTBCO0FBQ3pEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSwrQkFBK0IseUJBQXlCO0FBQ3hEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSwrQkFBK0IsdUJBQXVCO0FBQ3REO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSwrQkFBK0IsNkJBQTZCO0FBQzVEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSwrQkFBK0Isb0NBQW9DO0FBQ25FO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSwrQkFBK0IsdUNBQXVDO0FBQ3RFO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSwrQkFBK0IsNkNBQTZDO0FBQzVFO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSwrQkFBK0IsOEJBQThCO0FBQzdEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSwrQkFBK0Isd0NBQXdDO0FBQ3ZFO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSwrQkFBK0Isc0NBQXNDO0FBQ3JFO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSwrQkFBK0Isa0NBQWtDO0FBQ2pFO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSwrQkFBK0IsZ0NBQWdDO0FBQy9EO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLCtCQUErQixpQ0FBaUM7QUFDaEU7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLCtCQUErQixpQ0FBaUM7QUFDaEU7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBLGdFQUFnRSw4QkFBOEI7QUFDOUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSw4QkFBOEI7QUFDOUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLHdDQUF3QyxvQkFBb0I7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLG9CQUFvQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RDtBQUN2RCxxRUFBcUU7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0Msb0JBQW9CO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLG9CQUFvQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELDRCQUE0QjtBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBLDhCQUE4Qiw2QkFBNkIsZUFBZSxrQ0FBa0M7QUFDNUc7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQSxnREFBZ0Qsd0JBQXdCO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0MsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQSxrQ0FBa0MsY0FBYztBQUNoRDtBQUNBO0FBQ0EscUJBQXFCLDBKQUEwSjtBQUMvSztBQUNBLFNBQVM7QUFDVCxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLHdCQUF3QixhQUFhO0FBQ3RFO0FBQ0E7QUFDQSxpQ0FBaUMsOEJBQThCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixpT0FBaU87QUFDaFE7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsK0JBQStCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0dBQXdHO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFO0FBQ2hFLHdEQUF3RCxnQkFBZ0I7QUFDeEU7QUFDQSxpREFBaUQsa0JBQWtCLHlEQUF5RDtBQUM1SDtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QixtRUFBbUU7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGdCQUFnQjtBQUN0RTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsMkJBQTJCO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsaUVBQWlFO0FBQ2pFO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELDJCQUEyQjtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJEO0FBQzNEO0FBQ0EsdURBQXVEO0FBQ3ZELDZEQUE2RDtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNENBQTRDO0FBQzVDLGdDQUFnQztBQUNoQyxnQ0FBZ0M7QUFDaEMsa0NBQWtDO0FBQ2xDLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRTtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkVBQTJFLGdCQUFnQjtBQUMzRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUVBQXVFO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixvQ0FBb0M7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLEdBQUc7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QixTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELDBCQUEwQjtBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCw0QkFBNEI7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRkFBb0Y7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Qsb0JBQW9CO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsZ0JBQWdCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCxnQkFBZ0I7QUFDL0U7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCLDBEQUEwRCxnQkFBZ0I7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxnQkFBZ0I7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsZUFBZSw0Q0FBNEM7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQ7QUFDNUQseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRTtBQUNsRSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsdUJBQXVCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxnQkFBZ0I7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLGdCQUFnQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsU0FBUztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsU0FBUztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLDRDQUE0QztBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0RUFBNEU7QUFDNUUsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQ7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELGdCQUFnQjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsMEJBQTBCLHNCQUFzQixHQUFHO0FBQ25ELGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDJDQUEyQztBQUMzQyx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGdDQUFnQztBQUMxRCxhQUFhO0FBQ2IsMEJBQTBCLGlDQUFpQztBQUMzRCxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTREO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxzRUFBc0Usb0RBQW9EO0FBQzFIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxzQkFBc0I7QUFDbEU7QUFDQTtBQUNBLDRCQUE0QiwyQkFBMkI7QUFDdkQ7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCw4QkFBOEI7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxrREFBa0QseUJBQXlCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQzs7QUFFQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsUUFBUTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixnREFBZ0Q7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsNEJBQTRCO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThEO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0U7QUFDbEUsZ0VBQWdFO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELDZCQUE2QjtBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBLHVDQUF1QyxPQUFPO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3Q0FBd0MsY0FBYztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsd0JBQXdCO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUEsMEJBQTBCLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxRQUFRLEVBQUU7QUFDbEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRjtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxRQUFRLE9BQU87QUFDckQ7QUFDQTtBQUNBO0FBQ0Esa0ZBQWtGO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQ7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVCQUF1QjtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNULDBCQUEwQixpQkFBaUIsMENBQTBDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixzQkFBc0IsNEJBQTRCLGlCQUFpQjtBQUNqRyxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRTtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwwQkFBMEI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLG9DQUFvQyxRQUFRO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLFNBQVM7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsdUJBQXVCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RDtBQUM1RCxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0Esd0JBQXdCLE9BQU87QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQywwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLFdBQVc7QUFDOUMsa29CQUFrb0I7QUFDbG9CLG9FQUFvRSxnQkFBZ0I7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0Q7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELHVCQUF1QjtBQUNuRix3REFBd0QsdUJBQXVCO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCx1QkFBdUI7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsaUJBQWlCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsb0NBQW9DLDhDQUE4QztBQUNuSCxrQ0FBa0MscUNBQXFDLGdEQUFnRDtBQUN2SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsMkNBQTJDO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELDZCQUE2QjtBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEMsd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0UsVUFBVTtBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RDtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLDhFQUE4RSxnQ0FBZ0M7QUFDOUc7QUFDQSxzRkFBc0YsZ0JBQWdCO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELGdCQUFnQjtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELGdCQUFnQjtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLHNCQUFzQjtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxzQkFBc0I7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCw0QkFBNEI7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRDtBQUMxRDtBQUNBO0FBQ0EsaUVBQWlFO0FBQ2pFO0FBQ0E7QUFDQSx3REFBd0Q7QUFDeEQ7QUFDQTtBQUNBLDBEQUEwRDtBQUMxRDtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQSx3TEFBd0wsMkNBQTJDO0FBQ25PO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUJBQXFCLGtDQUFrQztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRTtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsMEJBQTBCO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQyx1Q0FBdUM7QUFDdkMsaUVBQWlFLGdCQUFnQjtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsMEJBQTBCO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGNBQWMsR0FBRztBQUNsRCxpQ0FBaUMsNkNBQTZDO0FBQzlFO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0Q7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxXQUFXLG9UQUFvVDtBQUM3VztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVFQUF1RTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEMscUNBQXFDLGFBQWEscUJBQXFCO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRSxnQkFBZ0I7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTREO0FBQzVELGlEQUFpRCwyQkFBMkIsT0FBTztBQUNuRixzRUFBc0U7QUFDdEU7QUFDQSx1QkFBdUI7QUFDdkIseUVBQXlFO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isc0JBQXNCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsY0FBYztBQUMxQztBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsY0FBYztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLG9CQUFvQjtBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSxnQkFBZ0I7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlGQUF5RixTQUFTO0FBQ2xHO0FBQ0EsNkJBQTZCO0FBQzdCLGdDQUFnQyw0Q0FBNEM7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHdCQUF3QjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxzQ0FBc0Msc0RBQXNEO0FBQzdIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxzQ0FBc0M7QUFDdkUsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFLGdCQUFnQjtBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFLGdCQUFnQjtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELDhCQUE4QjtBQUN0RixxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNFQUFzRTtBQUN0RTtBQUNBLGtHQUFrRztBQUNsRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDJCQUEyQjtBQUN2RDtBQUNBO0FBQ0EsNEJBQTRCLHNCQUFzQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixnQ0FBZ0MsbURBQW1EO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsa0NBQWtDO0FBQzlEO0FBQ0E7QUFDQSw0QkFBNEIsNkJBQTZCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFLG9EQUFvRDtBQUNySDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0EsK0NBQStDO0FBQy9DO0FBQ0EsbUZBQW1GO0FBQ25GLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRTtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0Isb0JBQW9CO0FBQ25EO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRTtBQUNuRTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUU7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0EsNEJBQTRCLGlCQUFpQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxnQkFBZ0I7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELGdCQUFnQjtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsZ0JBQWdCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxnQkFBZ0I7QUFDakU7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZEO0FBQzdELHVEQUF1RDtBQUN2RCwwQkFBMEIsc0NBQXNDO0FBQ2hFO0FBQ0EsVUFBVTtBQUNWOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThEO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRTtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixpQkFBaUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLDZGQUE2RixHQUFHO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0Esb0ZBQW9GO0FBQ3BGO0FBQ0EsOEJBQThCLDhEQUE4RCxjQUFjLGdCQUFnQjtBQUMxSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG9CQUFvQjtBQUN6QztBQUNBO0FBQ0EscUJBQXFCLHdFQUF3RTtBQUM3RjtBQUNBO0FBQ0EscUJBQXFCLG1CQUFtQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLG9GQUFvRjtBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNFQUFzRTtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRSxnQkFBZ0I7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsbUVBQW1FO0FBQzNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMscUJBQXFCO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRTtBQUNoRSwwRUFBMEU7QUFDMUU7QUFDQTtBQUNBO0FBQ0EsOERBQThEO0FBQzlELDZEQUE2RDtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLDJCQUEyQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsbUJBQW1CO0FBQ2pEO0FBQ0Esa0NBQWtDLG1CQUFtQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixtQkFBbUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHVCQUF1QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsdUJBQXVCO0FBQ3BEO0FBQ0E7QUFDQSxzREFBc0QsU0FBUyxrQ0FBa0MsaUJBQWlCO0FBQ2xILGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qix1QkFBdUI7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qix1QkFBdUI7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsdUJBQXVCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qix1QkFBdUI7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsb0JBQW9CO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRCwyQkFBMkI7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxvQkFBb0I7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbURBQW1ELGFBQWE7O0FBRWhFLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci9jb3JlL21haW4uanM/NTczZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbkZ1bGxDYWxlbmRhciBDb3JlIFBhY2thZ2UgdjQuNC4yXG5Eb2NzICYgTGljZW5zZTogaHR0cHM6Ly9mdWxsY2FsZW5kYXIuaW8vXG4oYykgMjAxOSBBZGFtIFNoYXdcbiovXG5cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KSA6XG4gICAgKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBmYWN0b3J5KGdsb2JhbC5GdWxsQ2FsZW5kYXIgPSB7fSkpO1xufSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cykgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvLyBDcmVhdGluZ1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB2YXIgZWxlbWVudFByb3BIYXNoID0ge1xuICAgICAgICBjbGFzc05hbWU6IHRydWUsXG4gICAgICAgIGNvbFNwYW46IHRydWUsXG4gICAgICAgIHJvd1NwYW46IHRydWVcbiAgICB9O1xuICAgIHZhciBjb250YWluZXJUYWdIYXNoID0ge1xuICAgICAgICAnPHRyJzogJ3Rib2R5JyxcbiAgICAgICAgJzx0ZCc6ICd0cidcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodGFnTmFtZSwgYXR0cnMsIGNvbnRlbnQpIHtcbiAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcbiAgICAgICAgaWYgKGF0dHJzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBhdHRyTmFtZSBpbiBhdHRycykge1xuICAgICAgICAgICAgICAgIGlmIChhdHRyTmFtZSA9PT0gJ3N0eWxlJykge1xuICAgICAgICAgICAgICAgICAgICBhcHBseVN0eWxlKGVsLCBhdHRyc1thdHRyTmFtZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChlbGVtZW50UHJvcEhhc2hbYXR0ck5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsW2F0dHJOYW1lXSA9IGF0dHJzW2F0dHJOYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgYXR0cnNbYXR0ck5hbWVdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZWwuaW5uZXJIVE1MID0gY29udGVudDsgLy8gc2hvcnRjdXQuIG5vIG5lZWQgdG8gcHJvY2VzcyBIVE1MIGluIGFueSB3YXlcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb250ZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGFwcGVuZFRvRWxlbWVudChlbCwgY29udGVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBodG1sVG9FbGVtZW50KGh0bWwpIHtcbiAgICAgICAgaHRtbCA9IGh0bWwudHJpbSgpO1xuICAgICAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChjb21wdXRlQ29udGFpbmVyVGFnKGh0bWwpKTtcbiAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIHJldHVybiBjb250YWluZXIuZmlyc3RDaGlsZDtcbiAgICB9XG4gICAgZnVuY3Rpb24gaHRtbFRvRWxlbWVudHMoaHRtbCkge1xuICAgICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoaHRtbFRvTm9kZUxpc3QoaHRtbCkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBodG1sVG9Ob2RlTGlzdChodG1sKSB7XG4gICAgICAgIGh0bWwgPSBodG1sLnRyaW0oKTtcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoY29tcHV0ZUNvbnRhaW5lclRhZyhodG1sKSk7XG4gICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgICByZXR1cm4gY29udGFpbmVyLmNoaWxkTm9kZXM7XG4gICAgfVxuICAgIC8vIGFzc3VtZXMgaHRtbCBhbHJlYWR5IHRyaW1tZWQgYW5kIHRhZyBuYW1lcyBhcmUgbG93ZXJjYXNlXG4gICAgZnVuY3Rpb24gY29tcHV0ZUNvbnRhaW5lclRhZyhodG1sKSB7XG4gICAgICAgIHJldHVybiBjb250YWluZXJUYWdIYXNoW2h0bWwuc3Vic3RyKDAsIDMpIC8vIGZhc3RlciB0aGFuIHVzaW5nIHJlZ2V4XG4gICAgICAgIF0gfHwgJ2Rpdic7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFwcGVuZFRvRWxlbWVudChlbCwgY29udGVudCkge1xuICAgICAgICB2YXIgY2hpbGROb2RlcyA9IG5vcm1hbGl6ZUNvbnRlbnQoY29udGVudCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoY2hpbGROb2Rlc1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcHJlcGVuZFRvRWxlbWVudChwYXJlbnQsIGNvbnRlbnQpIHtcbiAgICAgICAgdmFyIG5ld0VscyA9IG5vcm1hbGl6ZUNvbnRlbnQoY29udGVudCk7XG4gICAgICAgIHZhciBhZnRlckVsID0gcGFyZW50LmZpcnN0Q2hpbGQgfHwgbnVsbDsgLy8gaWYgbm8gZmlyc3RDaGlsZCwgd2lsbCBhcHBlbmQgdG8gZW5kLCBidXQgdGhhdCdzIG9rYXksIGIvYyB0aGVyZSB3ZXJlIG5vIGNoaWxkcmVuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3RWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5ld0Vsc1tpXSwgYWZ0ZXJFbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gaW5zZXJ0QWZ0ZXJFbGVtZW50KHJlZkVsLCBjb250ZW50KSB7XG4gICAgICAgIHZhciBuZXdFbHMgPSBub3JtYWxpemVDb250ZW50KGNvbnRlbnQpO1xuICAgICAgICB2YXIgYWZ0ZXJFbCA9IHJlZkVsLm5leHRTaWJsaW5nIHx8IG51bGw7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3RWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByZWZFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdFbHNbaV0sIGFmdGVyRWwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbnRlbnQoY29udGVudCkge1xuICAgICAgICB2YXIgZWxzO1xuICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBlbHMgPSBodG1sVG9FbGVtZW50cyhjb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb250ZW50IGluc3RhbmNlb2YgTm9kZSkge1xuICAgICAgICAgICAgZWxzID0gW2NvbnRlbnRdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAvLyBOb2RlW10gb3IgTm9kZUxpc3RcbiAgICAgICAgICAgIGVscyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbHM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoZWwpIHtcbiAgICAgICAgaWYgKGVsLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFF1ZXJ5aW5nXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIGZyb20gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnQvY2xvc2VzdFxuICAgIHZhciBtYXRjaGVzTWV0aG9kID0gRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyB8fFxuICAgICAgICBFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzU2VsZWN0b3IgfHxcbiAgICAgICAgRWxlbWVudC5wcm90b3R5cGUubXNNYXRjaGVzU2VsZWN0b3I7XG4gICAgdmFyIGNsb3Nlc3RNZXRob2QgPSBFbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0IHx8IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgICAgICAvLyBwb2x5ZmlsbFxuICAgICAgICB2YXIgZWwgPSB0aGlzO1xuICAgICAgICBpZiAoIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyhlbCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50TWF0Y2hlcyhlbCwgc2VsZWN0b3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50IHx8IGVsLnBhcmVudE5vZGU7XG4gICAgICAgIH0gd2hpbGUgKGVsICE9PSBudWxsICYmIGVsLm5vZGVUeXBlID09PSAxKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBlbGVtZW50Q2xvc2VzdChlbCwgc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGNsb3Nlc3RNZXRob2QuY2FsbChlbCwgc2VsZWN0b3IpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBlbGVtZW50TWF0Y2hlcyhlbCwgc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNNZXRob2QuY2FsbChlbCwgc2VsZWN0b3IpO1xuICAgIH1cbiAgICAvLyBhY2NlcHRzIG11bHRpcGxlIHN1YmplY3QgZWxzXG4gICAgLy8gcmV0dXJucyBhIHJlYWwgYXJyYXkuIGdvb2QgZm9yIG1ldGhvZHMgbGlrZSBmb3JFYWNoXG4gICAgZnVuY3Rpb24gZmluZEVsZW1lbnRzKGNvbnRhaW5lciwgc2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIGNvbnRhaW5lcnMgPSBjb250YWluZXIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCA/IFtjb250YWluZXJdIDogY29udGFpbmVyO1xuICAgICAgICB2YXIgYWxsTWF0Y2hlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRhaW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBtYXRjaGVzID0gY29udGFpbmVyc1tpXS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWF0Y2hlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGFsbE1hdGNoZXMucHVzaChtYXRjaGVzW2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWxsTWF0Y2hlcztcbiAgICB9XG4gICAgLy8gYWNjZXB0cyBtdWx0aXBsZSBzdWJqZWN0IGVsc1xuICAgIC8vIG9ubHkgcXVlcmllcyBkaXJlY3QgY2hpbGQgZWxlbWVudHNcbiAgICBmdW5jdGlvbiBmaW5kQ2hpbGRyZW4ocGFyZW50LCBzZWxlY3Rvcikge1xuICAgICAgICB2YXIgcGFyZW50cyA9IHBhcmVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ID8gW3BhcmVudF0gOiBwYXJlbnQ7XG4gICAgICAgIHZhciBhbGxNYXRjaGVzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGNoaWxkTm9kZXMgPSBwYXJlbnRzW2ldLmNoaWxkcmVuOyAvLyBvbmx5IGV2ZXIgZWxlbWVudHNcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY2hpbGROb2Rlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZE5vZGUgPSBjaGlsZE5vZGVzW2pdO1xuICAgICAgICAgICAgICAgIGlmICghc2VsZWN0b3IgfHwgZWxlbWVudE1hdGNoZXMoY2hpbGROb2RlLCBzZWxlY3RvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxsTWF0Y2hlcy5wdXNoKGNoaWxkTm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbGxNYXRjaGVzO1xuICAgIH1cbiAgICAvLyBBdHRyaWJ1dGVzXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGZ1bmN0aW9uIGZvcmNlQ2xhc3NOYW1lKGVsLCBjbGFzc05hbWUsIGJvb2wpIHtcbiAgICAgICAgaWYgKGJvb2wpIHtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBTdHlsZVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB2YXIgUElYRUxfUFJPUF9SRSA9IC8odG9wfGxlZnR8cmlnaHR8Ym90dG9tfHdpZHRofGhlaWdodCkkL2k7XG4gICAgZnVuY3Rpb24gYXBwbHlTdHlsZShlbCwgcHJvcHMpIHtcbiAgICAgICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgIGFwcGx5U3R5bGVQcm9wKGVsLCBwcm9wTmFtZSwgcHJvcHNbcHJvcE5hbWVdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBhcHBseVN0eWxlUHJvcChlbCwgbmFtZSwgdmFsKSB7XG4gICAgICAgIGlmICh2YWwgPT0gbnVsbCkge1xuICAgICAgICAgICAgZWwuc3R5bGVbbmFtZV0gPSAnJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiBQSVhFTF9QUk9QX1JFLnRlc3QobmFtZSkpIHtcbiAgICAgICAgICAgIGVsLnN0eWxlW25hbWVdID0gdmFsICsgJ3B4JztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVsLnN0eWxlW25hbWVdID0gdmFsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9pbnRJbnNpZGVSZWN0KHBvaW50LCByZWN0KSB7XG4gICAgICAgIHJldHVybiBwb2ludC5sZWZ0ID49IHJlY3QubGVmdCAmJlxuICAgICAgICAgICAgcG9pbnQubGVmdCA8IHJlY3QucmlnaHQgJiZcbiAgICAgICAgICAgIHBvaW50LnRvcCA+PSByZWN0LnRvcCAmJlxuICAgICAgICAgICAgcG9pbnQudG9wIDwgcmVjdC5ib3R0b207XG4gICAgfVxuICAgIC8vIFJldHVybnMgYSBuZXcgcmVjdGFuZ2xlIHRoYXQgaXMgdGhlIGludGVyc2VjdGlvbiBvZiB0aGUgdHdvIHJlY3RhbmdsZXMuIElmIHRoZXkgZG9uJ3QgaW50ZXJzZWN0LCByZXR1cm5zIGZhbHNlXG4gICAgZnVuY3Rpb24gaW50ZXJzZWN0UmVjdHMocmVjdDEsIHJlY3QyKSB7XG4gICAgICAgIHZhciByZXMgPSB7XG4gICAgICAgICAgICBsZWZ0OiBNYXRoLm1heChyZWN0MS5sZWZ0LCByZWN0Mi5sZWZ0KSxcbiAgICAgICAgICAgIHJpZ2h0OiBNYXRoLm1pbihyZWN0MS5yaWdodCwgcmVjdDIucmlnaHQpLFxuICAgICAgICAgICAgdG9wOiBNYXRoLm1heChyZWN0MS50b3AsIHJlY3QyLnRvcCksXG4gICAgICAgICAgICBib3R0b206IE1hdGgubWluKHJlY3QxLmJvdHRvbSwgcmVjdDIuYm90dG9tKVxuICAgICAgICB9O1xuICAgICAgICBpZiAocmVzLmxlZnQgPCByZXMucmlnaHQgJiYgcmVzLnRvcCA8IHJlcy5ib3R0b20pIHtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGVSZWN0KHJlY3QsIGRlbHRhWCwgZGVsdGFZKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWZ0OiByZWN0LmxlZnQgKyBkZWx0YVgsXG4gICAgICAgICAgICByaWdodDogcmVjdC5yaWdodCArIGRlbHRhWCxcbiAgICAgICAgICAgIHRvcDogcmVjdC50b3AgKyBkZWx0YVksXG4gICAgICAgICAgICBib3R0b206IHJlY3QuYm90dG9tICsgZGVsdGFZXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIFJldHVybnMgYSBuZXcgcG9pbnQgdGhhdCB3aWxsIGhhdmUgYmVlbiBtb3ZlZCB0byByZXNpZGUgd2l0aGluIHRoZSBnaXZlbiByZWN0YW5nbGVcbiAgICBmdW5jdGlvbiBjb25zdHJhaW5Qb2ludChwb2ludCwgcmVjdCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGVmdDogTWF0aC5taW4oTWF0aC5tYXgocG9pbnQubGVmdCwgcmVjdC5sZWZ0KSwgcmVjdC5yaWdodCksXG4gICAgICAgICAgICB0b3A6IE1hdGgubWluKE1hdGgubWF4KHBvaW50LnRvcCwgcmVjdC50b3ApLCByZWN0LmJvdHRvbSlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gUmV0dXJucyBhIHBvaW50IHRoYXQgaXMgdGhlIGNlbnRlciBvZiB0aGUgZ2l2ZW4gcmVjdGFuZ2xlXG4gICAgZnVuY3Rpb24gZ2V0UmVjdENlbnRlcihyZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWZ0OiAocmVjdC5sZWZ0ICsgcmVjdC5yaWdodCkgLyAyLFxuICAgICAgICAgICAgdG9wOiAocmVjdC50b3AgKyByZWN0LmJvdHRvbSkgLyAyXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIFN1YnRyYWN0cyBwb2ludDIncyBjb29yZGluYXRlcyBmcm9tIHBvaW50MSdzIGNvb3JkaW5hdGVzLCByZXR1cm5pbmcgYSBkZWx0YVxuICAgIGZ1bmN0aW9uIGRpZmZQb2ludHMocG9pbnQxLCBwb2ludDIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlZnQ6IHBvaW50MS5sZWZ0IC0gcG9pbnQyLmxlZnQsXG4gICAgICAgICAgICB0b3A6IHBvaW50MS50b3AgLSBwb2ludDIudG9wXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gTG9naWMgZm9yIGRldGVybWluaW5nIGlmLCB3aGVuIHRoZSBlbGVtZW50IGlzIHJpZ2h0LXRvLWxlZnQsIHRoZSBzY3JvbGxiYXIgYXBwZWFycyBvbiB0aGUgbGVmdCBzaWRlXG4gICAgdmFyIGlzUnRsU2Nyb2xsYmFyT25MZWZ0ID0gbnVsbDtcbiAgICBmdW5jdGlvbiBnZXRJc1J0bFNjcm9sbGJhck9uTGVmdCgpIHtcbiAgICAgICAgaWYgKGlzUnRsU2Nyb2xsYmFyT25MZWZ0ID09PSBudWxsKSB7XG4gICAgICAgICAgICBpc1J0bFNjcm9sbGJhck9uTGVmdCA9IGNvbXB1dGVJc1J0bFNjcm9sbGJhck9uTGVmdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc1J0bFNjcm9sbGJhck9uTGVmdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tcHV0ZUlzUnRsU2Nyb2xsYmFyT25MZWZ0KCkge1xuICAgICAgICB2YXIgb3V0ZXJFbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgICAgdG9wOiAtMTAwMCxcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIGJvcmRlcjogMCxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgICAgICAgIG92ZXJmbG93OiAnc2Nyb2xsJyxcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb246ICdydGwnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sICc8ZGl2PjwvZGl2PicpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG91dGVyRWwpO1xuICAgICAgICB2YXIgaW5uZXJFbCA9IG91dGVyRWwuZmlyc3RDaGlsZDtcbiAgICAgICAgdmFyIHJlcyA9IGlubmVyRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCA+IG91dGVyRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcbiAgICAgICAgcmVtb3ZlRWxlbWVudChvdXRlckVsKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgLy8gVGhlIHNjcm9sbGJhciB3aWR0aCBjb21wdXRhdGlvbnMgaW4gY29tcHV0ZUVkZ2VzIGFyZSBzb21ldGltZXMgZmxhd2VkIHdoZW4gaXQgY29tZXMgdG9cbiAgICAvLyByZXRpbmEgZGlzcGxheXMsIHJvdW5kaW5nLCBhbmQgSUUxMS4gTWFzc2FnZSB0aGVtIGludG8gYSB1c2FibGUgdmFsdWUuXG4gICAgZnVuY3Rpb24gc2FuaXRpemVTY3JvbGxiYXJXaWR0aCh3aWR0aCkge1xuICAgICAgICB3aWR0aCA9IE1hdGgubWF4KDAsIHdpZHRoKTsgLy8gbm8gbmVnYXRpdmVzXG4gICAgICAgIHdpZHRoID0gTWF0aC5yb3VuZCh3aWR0aCk7XG4gICAgICAgIHJldHVybiB3aWR0aDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wdXRlRWRnZXMoZWwsIGdldFBhZGRpbmcpIHtcbiAgICAgICAgaWYgKGdldFBhZGRpbmcgPT09IHZvaWQgMCkgeyBnZXRQYWRkaW5nID0gZmFsc2U7IH1cbiAgICAgICAgdmFyIGNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gICAgICAgIHZhciBib3JkZXJMZWZ0ID0gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZS5ib3JkZXJMZWZ0V2lkdGgsIDEwKSB8fCAwO1xuICAgICAgICB2YXIgYm9yZGVyUmlnaHQgPSBwYXJzZUludChjb21wdXRlZFN0eWxlLmJvcmRlclJpZ2h0V2lkdGgsIDEwKSB8fCAwO1xuICAgICAgICB2YXIgYm9yZGVyVG9wID0gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZS5ib3JkZXJUb3BXaWR0aCwgMTApIHx8IDA7XG4gICAgICAgIHZhciBib3JkZXJCb3R0b20gPSBwYXJzZUludChjb21wdXRlZFN0eWxlLmJvcmRlckJvdHRvbVdpZHRoLCAxMCkgfHwgMDtcbiAgICAgICAgLy8gbXVzdCB1c2Ugb2Zmc2V0KFdpZHRofEhlaWdodCkgYmVjYXVzZSBjb21wYXRpYmxlIHdpdGggY2xpZW50KFdpZHRofEhlaWdodClcbiAgICAgICAgdmFyIHNjcm9sbGJhckxlZnRSaWdodCA9IHNhbml0aXplU2Nyb2xsYmFyV2lkdGgoZWwub2Zmc2V0V2lkdGggLSBlbC5jbGllbnRXaWR0aCAtIGJvcmRlckxlZnQgLSBib3JkZXJSaWdodCk7XG4gICAgICAgIHZhciBzY3JvbGxiYXJCb3R0b20gPSBzYW5pdGl6ZVNjcm9sbGJhcldpZHRoKGVsLm9mZnNldEhlaWdodCAtIGVsLmNsaWVudEhlaWdodCAtIGJvcmRlclRvcCAtIGJvcmRlckJvdHRvbSk7XG4gICAgICAgIHZhciByZXMgPSB7XG4gICAgICAgICAgICBib3JkZXJMZWZ0OiBib3JkZXJMZWZ0LFxuICAgICAgICAgICAgYm9yZGVyUmlnaHQ6IGJvcmRlclJpZ2h0LFxuICAgICAgICAgICAgYm9yZGVyVG9wOiBib3JkZXJUb3AsXG4gICAgICAgICAgICBib3JkZXJCb3R0b206IGJvcmRlckJvdHRvbSxcbiAgICAgICAgICAgIHNjcm9sbGJhckJvdHRvbTogc2Nyb2xsYmFyQm90dG9tLFxuICAgICAgICAgICAgc2Nyb2xsYmFyTGVmdDogMCxcbiAgICAgICAgICAgIHNjcm9sbGJhclJpZ2h0OiAwXG4gICAgICAgIH07XG4gICAgICAgIGlmIChnZXRJc1J0bFNjcm9sbGJhck9uTGVmdCgpICYmIGNvbXB1dGVkU3R5bGUuZGlyZWN0aW9uID09PSAncnRsJykgeyAvLyBpcyB0aGUgc2Nyb2xsYmFyIG9uIHRoZSBsZWZ0IHNpZGU/XG4gICAgICAgICAgICByZXMuc2Nyb2xsYmFyTGVmdCA9IHNjcm9sbGJhckxlZnRSaWdodDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlcy5zY3JvbGxiYXJSaWdodCA9IHNjcm9sbGJhckxlZnRSaWdodDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2V0UGFkZGluZykge1xuICAgICAgICAgICAgcmVzLnBhZGRpbmdMZWZ0ID0gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZS5wYWRkaW5nTGVmdCwgMTApIHx8IDA7XG4gICAgICAgICAgICByZXMucGFkZGluZ1JpZ2h0ID0gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZS5wYWRkaW5nUmlnaHQsIDEwKSB8fCAwO1xuICAgICAgICAgICAgcmVzLnBhZGRpbmdUb3AgPSBwYXJzZUludChjb21wdXRlZFN0eWxlLnBhZGRpbmdUb3AsIDEwKSB8fCAwO1xuICAgICAgICAgICAgcmVzLnBhZGRpbmdCb3R0b20gPSBwYXJzZUludChjb21wdXRlZFN0eWxlLnBhZGRpbmdCb3R0b20sIDEwKSB8fCAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbXB1dGVJbm5lclJlY3QoZWwsIGdvV2l0aGluUGFkZGluZykge1xuICAgICAgICBpZiAoZ29XaXRoaW5QYWRkaW5nID09PSB2b2lkIDApIHsgZ29XaXRoaW5QYWRkaW5nID0gZmFsc2U7IH1cbiAgICAgICAgdmFyIG91dGVyUmVjdCA9IGNvbXB1dGVSZWN0KGVsKTtcbiAgICAgICAgdmFyIGVkZ2VzID0gY29tcHV0ZUVkZ2VzKGVsLCBnb1dpdGhpblBhZGRpbmcpO1xuICAgICAgICB2YXIgcmVzID0ge1xuICAgICAgICAgICAgbGVmdDogb3V0ZXJSZWN0LmxlZnQgKyBlZGdlcy5ib3JkZXJMZWZ0ICsgZWRnZXMuc2Nyb2xsYmFyTGVmdCxcbiAgICAgICAgICAgIHJpZ2h0OiBvdXRlclJlY3QucmlnaHQgLSBlZGdlcy5ib3JkZXJSaWdodCAtIGVkZ2VzLnNjcm9sbGJhclJpZ2h0LFxuICAgICAgICAgICAgdG9wOiBvdXRlclJlY3QudG9wICsgZWRnZXMuYm9yZGVyVG9wLFxuICAgICAgICAgICAgYm90dG9tOiBvdXRlclJlY3QuYm90dG9tIC0gZWRnZXMuYm9yZGVyQm90dG9tIC0gZWRnZXMuc2Nyb2xsYmFyQm90dG9tXG4gICAgICAgIH07XG4gICAgICAgIGlmIChnb1dpdGhpblBhZGRpbmcpIHtcbiAgICAgICAgICAgIHJlcy5sZWZ0ICs9IGVkZ2VzLnBhZGRpbmdMZWZ0O1xuICAgICAgICAgICAgcmVzLnJpZ2h0IC09IGVkZ2VzLnBhZGRpbmdSaWdodDtcbiAgICAgICAgICAgIHJlcy50b3AgKz0gZWRnZXMucGFkZGluZ1RvcDtcbiAgICAgICAgICAgIHJlcy5ib3R0b20gLT0gZWRnZXMucGFkZGluZ0JvdHRvbTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wdXRlUmVjdChlbCkge1xuICAgICAgICB2YXIgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGVmdDogcmVjdC5sZWZ0ICsgd2luZG93LnBhZ2VYT2Zmc2V0LFxuICAgICAgICAgICAgdG9wOiByZWN0LnRvcCArIHdpbmRvdy5wYWdlWU9mZnNldCxcbiAgICAgICAgICAgIHJpZ2h0OiByZWN0LnJpZ2h0ICsgd2luZG93LnBhZ2VYT2Zmc2V0LFxuICAgICAgICAgICAgYm90dG9tOiByZWN0LmJvdHRvbSArIHdpbmRvdy5wYWdlWU9mZnNldFxuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wdXRlVmlld3BvcnRSZWN0KCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGVmdDogd2luZG93LnBhZ2VYT2Zmc2V0LFxuICAgICAgICAgICAgcmlnaHQ6IHdpbmRvdy5wYWdlWE9mZnNldCArIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCxcbiAgICAgICAgICAgIHRvcDogd2luZG93LnBhZ2VZT2Zmc2V0LFxuICAgICAgICAgICAgYm90dG9tOiB3aW5kb3cucGFnZVlPZmZzZXQgKyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbXB1dGVIZWlnaHRBbmRNYXJnaW5zKGVsKSB7XG4gICAgICAgIHJldHVybiBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQgKyBjb21wdXRlVk1hcmdpbnMoZWwpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wdXRlVk1hcmdpbnMoZWwpIHtcbiAgICAgICAgdmFyIGNvbXB1dGVkID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQoY29tcHV0ZWQubWFyZ2luVG9wLCAxMCkgK1xuICAgICAgICAgICAgcGFyc2VJbnQoY29tcHV0ZWQubWFyZ2luQm90dG9tLCAxMCk7XG4gICAgfVxuICAgIC8vIGRvZXMgbm90IHJldHVybiB3aW5kb3dcbiAgICBmdW5jdGlvbiBnZXRDbGlwcGluZ1BhcmVudHMoZWwpIHtcbiAgICAgICAgdmFyIHBhcmVudHMgPSBbXTtcbiAgICAgICAgd2hpbGUgKGVsIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHsgLy8gd2lsbCBzdG9wIHdoZW4gZ2V0cyB0byBkb2N1bWVudCBvciBudWxsXG4gICAgICAgICAgICB2YXIgY29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgICAgICAgICAgIGlmIChjb21wdXRlZFN0eWxlLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKC8oYXV0b3xzY3JvbGwpLykudGVzdChjb21wdXRlZFN0eWxlLm92ZXJmbG93ICsgY29tcHV0ZWRTdHlsZS5vdmVyZmxvd1kgKyBjb21wdXRlZFN0eWxlLm92ZXJmbG93WCkpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnRzLnB1c2goZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWwgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJlbnRzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wdXRlQ2xpcHBpbmdSZWN0KGVsKSB7XG4gICAgICAgIHJldHVybiBnZXRDbGlwcGluZ1BhcmVudHMoZWwpXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbXB1dGVJbm5lclJlY3QoZWwpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmNvbmNhdChjb21wdXRlVmlld3BvcnRSZWN0KCkpXG4gICAgICAgICAgICAucmVkdWNlKGZ1bmN0aW9uIChyZWN0MCwgcmVjdDEpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnRlcnNlY3RSZWN0cyhyZWN0MCwgcmVjdDEpIHx8IHJlY3QxOyAvLyBzaG91bGQgYWx3YXlzIGludGVyc2VjdFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBTdG9wcyBhIG1vdXNlL3RvdWNoIGV2ZW50IGZyb20gZG9pbmcgaXQncyBuYXRpdmUgYnJvd3NlciBhY3Rpb25cbiAgICBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdChldikge1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICAvLyBFdmVudCBEZWxlZ2F0aW9uXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGZ1bmN0aW9uIGxpc3RlbkJ5U2VsZWN0b3IoY29udGFpbmVyLCBldmVudFR5cGUsIHNlbGVjdG9yLCBoYW5kbGVyKSB7XG4gICAgICAgIGZ1bmN0aW9uIHJlYWxIYW5kbGVyKGV2KSB7XG4gICAgICAgICAgICB2YXIgbWF0Y2hlZENoaWxkID0gZWxlbWVudENsb3Nlc3QoZXYudGFyZ2V0LCBzZWxlY3Rvcik7XG4gICAgICAgICAgICBpZiAobWF0Y2hlZENoaWxkKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlci5jYWxsKG1hdGNoZWRDaGlsZCwgZXYsIG1hdGNoZWRDaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCByZWFsSGFuZGxlcik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb250YWluZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIHJlYWxIYW5kbGVyKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbGlzdGVuVG9Ib3ZlckJ5U2VsZWN0b3IoY29udGFpbmVyLCBzZWxlY3Rvciwgb25Nb3VzZUVudGVyLCBvbk1vdXNlTGVhdmUpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRNYXRjaGVkQ2hpbGQ7XG4gICAgICAgIHJldHVybiBsaXN0ZW5CeVNlbGVjdG9yKGNvbnRhaW5lciwgJ21vdXNlb3ZlcicsIHNlbGVjdG9yLCBmdW5jdGlvbiAoZXYsIG1hdGNoZWRDaGlsZCkge1xuICAgICAgICAgICAgaWYgKG1hdGNoZWRDaGlsZCAhPT0gY3VycmVudE1hdGNoZWRDaGlsZCkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRNYXRjaGVkQ2hpbGQgPSBtYXRjaGVkQ2hpbGQ7XG4gICAgICAgICAgICAgICAgb25Nb3VzZUVudGVyKGV2LCBtYXRjaGVkQ2hpbGQpO1xuICAgICAgICAgICAgICAgIHZhciByZWFsT25Nb3VzZUxlYXZlXzEgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE1hdGNoZWRDaGlsZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIG9uTW91c2VMZWF2ZShldiwgbWF0Y2hlZENoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZENoaWxkLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCByZWFsT25Nb3VzZUxlYXZlXzEpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgLy8gbGlzdGVuIHRvIHRoZSBuZXh0IG1vdXNlbGVhdmUsIGFuZCB0aGVuIHVuYXR0YWNoXG4gICAgICAgICAgICAgICAgbWF0Y2hlZENoaWxkLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCByZWFsT25Nb3VzZUxlYXZlXzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gQW5pbWF0aW9uXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHZhciB0cmFuc2l0aW9uRXZlbnROYW1lcyA9IFtcbiAgICAgICAgJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICAgICAnb3RyYW5zaXRpb25lbmQnLFxuICAgICAgICAnb1RyYW5zaXRpb25FbmQnLFxuICAgICAgICAnbXNUcmFuc2l0aW9uRW5kJyxcbiAgICAgICAgJ3RyYW5zaXRpb25lbmQnXG4gICAgXTtcbiAgICAvLyB0cmlnZ2VyZWQgb25seSB3aGVuIHRoZSBuZXh0IHNpbmdsZSBzdWJzZXF1ZW50IHRyYW5zaXRpb24gZmluaXNoZXNcbiAgICBmdW5jdGlvbiB3aGVuVHJhbnNpdGlvbkRvbmUoZWwsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciByZWFsQ2FsbGJhY2sgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGV2KTtcbiAgICAgICAgICAgIHRyYW5zaXRpb25FdmVudE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCByZWFsQ2FsbGJhY2spO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRyYW5zaXRpb25FdmVudE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHJlYWxDYWxsYmFjayk7IC8vIGNyb3NzLWJyb3dzZXIgd2F5IHRvIGRldGVybWluZSB3aGVuIHRoZSB0cmFuc2l0aW9uIGZpbmlzaGVzXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBEQVlfSURTID0gWydzdW4nLCAnbW9uJywgJ3R1ZScsICd3ZWQnLCAndGh1JywgJ2ZyaScsICdzYXQnXTtcbiAgICAvLyBBZGRpbmdcbiAgICBmdW5jdGlvbiBhZGRXZWVrcyhtLCBuKSB7XG4gICAgICAgIHZhciBhID0gZGF0ZVRvVXRjQXJyYXkobSk7XG4gICAgICAgIGFbMl0gKz0gbiAqIDc7XG4gICAgICAgIHJldHVybiBhcnJheVRvVXRjRGF0ZShhKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWRkRGF5cyhtLCBuKSB7XG4gICAgICAgIHZhciBhID0gZGF0ZVRvVXRjQXJyYXkobSk7XG4gICAgICAgIGFbMl0gKz0gbjtcbiAgICAgICAgcmV0dXJuIGFycmF5VG9VdGNEYXRlKGEpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZGRNcyhtLCBuKSB7XG4gICAgICAgIHZhciBhID0gZGF0ZVRvVXRjQXJyYXkobSk7XG4gICAgICAgIGFbNl0gKz0gbjtcbiAgICAgICAgcmV0dXJuIGFycmF5VG9VdGNEYXRlKGEpO1xuICAgIH1cbiAgICAvLyBEaWZmaW5nIChhbGwgcmV0dXJuIGZsb2F0cylcbiAgICBmdW5jdGlvbiBkaWZmV2Vla3MobTAsIG0xKSB7XG4gICAgICAgIHJldHVybiBkaWZmRGF5cyhtMCwgbTEpIC8gNztcbiAgICB9XG4gICAgZnVuY3Rpb24gZGlmZkRheXMobTAsIG0xKSB7XG4gICAgICAgIHJldHVybiAobTEudmFsdWVPZigpIC0gbTAudmFsdWVPZigpKSAvICgxMDAwICogNjAgKiA2MCAqIDI0KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZGlmZkhvdXJzKG0wLCBtMSkge1xuICAgICAgICByZXR1cm4gKG0xLnZhbHVlT2YoKSAtIG0wLnZhbHVlT2YoKSkgLyAoMTAwMCAqIDYwICogNjApO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkaWZmTWludXRlcyhtMCwgbTEpIHtcbiAgICAgICAgcmV0dXJuIChtMS52YWx1ZU9mKCkgLSBtMC52YWx1ZU9mKCkpIC8gKDEwMDAgKiA2MCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRpZmZTZWNvbmRzKG0wLCBtMSkge1xuICAgICAgICByZXR1cm4gKG0xLnZhbHVlT2YoKSAtIG0wLnZhbHVlT2YoKSkgLyAxMDAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkaWZmRGF5QW5kVGltZShtMCwgbTEpIHtcbiAgICAgICAgdmFyIG0wZGF5ID0gc3RhcnRPZkRheShtMCk7XG4gICAgICAgIHZhciBtMWRheSA9IHN0YXJ0T2ZEYXkobTEpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcnM6IDAsXG4gICAgICAgICAgICBtb250aHM6IDAsXG4gICAgICAgICAgICBkYXlzOiBNYXRoLnJvdW5kKGRpZmZEYXlzKG0wZGF5LCBtMWRheSkpLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzOiAobTEudmFsdWVPZigpIC0gbTFkYXkudmFsdWVPZigpKSAtIChtMC52YWx1ZU9mKCkgLSBtMGRheS52YWx1ZU9mKCkpXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIERpZmZpbmcgV2hvbGUgVW5pdHNcbiAgICBmdW5jdGlvbiBkaWZmV2hvbGVXZWVrcyhtMCwgbTEpIHtcbiAgICAgICAgdmFyIGQgPSBkaWZmV2hvbGVEYXlzKG0wLCBtMSk7XG4gICAgICAgIGlmIChkICE9PSBudWxsICYmIGQgJSA3ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZCAvIDc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRpZmZXaG9sZURheXMobTAsIG0xKSB7XG4gICAgICAgIGlmICh0aW1lQXNNcyhtMCkgPT09IHRpbWVBc01zKG0xKSkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoZGlmZkRheXMobTAsIG0xKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8vIFN0YXJ0LU9mXG4gICAgZnVuY3Rpb24gc3RhcnRPZkRheShtKSB7XG4gICAgICAgIHJldHVybiBhcnJheVRvVXRjRGF0ZShbXG4gICAgICAgICAgICBtLmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgICAgICAgICBtLmdldFVUQ01vbnRoKCksXG4gICAgICAgICAgICBtLmdldFVUQ0RhdGUoKVxuICAgICAgICBdKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3RhcnRPZkhvdXIobSkge1xuICAgICAgICByZXR1cm4gYXJyYXlUb1V0Y0RhdGUoW1xuICAgICAgICAgICAgbS5nZXRVVENGdWxsWWVhcigpLFxuICAgICAgICAgICAgbS5nZXRVVENNb250aCgpLFxuICAgICAgICAgICAgbS5nZXRVVENEYXRlKCksXG4gICAgICAgICAgICBtLmdldFVUQ0hvdXJzKClcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0YXJ0T2ZNaW51dGUobSkge1xuICAgICAgICByZXR1cm4gYXJyYXlUb1V0Y0RhdGUoW1xuICAgICAgICAgICAgbS5nZXRVVENGdWxsWWVhcigpLFxuICAgICAgICAgICAgbS5nZXRVVENNb250aCgpLFxuICAgICAgICAgICAgbS5nZXRVVENEYXRlKCksXG4gICAgICAgICAgICBtLmdldFVUQ0hvdXJzKCksXG4gICAgICAgICAgICBtLmdldFVUQ01pbnV0ZXMoKVxuICAgICAgICBdKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3RhcnRPZlNlY29uZChtKSB7XG4gICAgICAgIHJldHVybiBhcnJheVRvVXRjRGF0ZShbXG4gICAgICAgICAgICBtLmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgICAgICAgICBtLmdldFVUQ01vbnRoKCksXG4gICAgICAgICAgICBtLmdldFVUQ0RhdGUoKSxcbiAgICAgICAgICAgIG0uZ2V0VVRDSG91cnMoKSxcbiAgICAgICAgICAgIG0uZ2V0VVRDTWludXRlcygpLFxuICAgICAgICAgICAgbS5nZXRVVENTZWNvbmRzKClcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIC8vIFdlZWsgQ29tcHV0YXRpb25cbiAgICBmdW5jdGlvbiB3ZWVrT2ZZZWFyKG1hcmtlciwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHkgPSBtYXJrZXIuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgICAgdmFyIHcgPSB3ZWVrT2ZHaXZlblllYXIobWFya2VyLCB5LCBkb3csIGRveSk7XG4gICAgICAgIGlmICh3IDwgMSkge1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtPZkdpdmVuWWVhcihtYXJrZXIsIHkgLSAxLCBkb3csIGRveSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5leHRXID0gd2Vla09mR2l2ZW5ZZWFyKG1hcmtlciwgeSArIDEsIGRvdywgZG95KTtcbiAgICAgICAgaWYgKG5leHRXID49IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbih3LCBuZXh0Vyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdlZWtPZkdpdmVuWWVhcihtYXJrZXIsIHllYXIsIGRvdywgZG95KSB7XG4gICAgICAgIHZhciBmaXJzdFdlZWtTdGFydCA9IGFycmF5VG9VdGNEYXRlKFt5ZWFyLCAwLCAxICsgZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KV0pO1xuICAgICAgICB2YXIgZGF5U3RhcnQgPSBzdGFydE9mRGF5KG1hcmtlcik7XG4gICAgICAgIHZhciBkYXlzID0gTWF0aC5yb3VuZChkaWZmRGF5cyhmaXJzdFdlZWtTdGFydCwgZGF5U3RhcnQpKTtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoZGF5cyAvIDcpICsgMTsgLy8gemVyby1pbmRleGVkXG4gICAgfVxuICAgIC8vIHN0YXJ0LW9mLWZpcnN0LXdlZWsgLSBzdGFydC1vZi15ZWFyXG4gICAgZnVuY3Rpb24gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSB7XG4gICAgICAgIC8vIGZpcnN0LXdlZWsgZGF5IC0tIHdoaWNoIGphbnVhcnkgaXMgYWx3YXlzIGluIHRoZSBmaXJzdCB3ZWVrICg0IGZvciBpc28sIDEgZm9yIG90aGVyKVxuICAgICAgICB2YXIgZndkID0gNyArIGRvdyAtIGRveTtcbiAgICAgICAgLy8gZmlyc3Qtd2VlayBkYXkgbG9jYWwgd2Vla2RheSAtLSB3aGljaCBsb2NhbCB3ZWVrZGF5IGlzIGZ3ZFxuICAgICAgICB2YXIgZndkbHcgPSAoNyArIGFycmF5VG9VdGNEYXRlKFt5ZWFyLCAwLCBmd2RdKS5nZXRVVENEYXkoKSAtIGRvdykgJSA3O1xuICAgICAgICByZXR1cm4gLWZ3ZGx3ICsgZndkIC0gMTtcbiAgICB9XG4gICAgLy8gQXJyYXkgQ29udmVyc2lvblxuICAgIGZ1bmN0aW9uIGRhdGVUb0xvY2FsQXJyYXkoZGF0ZSkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgZGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgZGF0ZS5nZXRNb250aCgpLFxuICAgICAgICAgICAgZGF0ZS5nZXREYXRlKCksXG4gICAgICAgICAgICBkYXRlLmdldEhvdXJzKCksXG4gICAgICAgICAgICBkYXRlLmdldE1pbnV0ZXMoKSxcbiAgICAgICAgICAgIGRhdGUuZ2V0U2Vjb25kcygpLFxuICAgICAgICAgICAgZGF0ZS5nZXRNaWxsaXNlY29uZHMoKVxuICAgICAgICBdO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhcnJheVRvTG9jYWxEYXRlKGEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGFbMF0sIGFbMV0gfHwgMCwgYVsyXSA9PSBudWxsID8gMSA6IGFbMl0sIC8vIGRheSBvZiBtb250aFxuICAgICAgICBhWzNdIHx8IDAsIGFbNF0gfHwgMCwgYVs1XSB8fCAwKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZGF0ZVRvVXRjQXJyYXkoZGF0ZSkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgZGF0ZS5nZXRVVENGdWxsWWVhcigpLFxuICAgICAgICAgICAgZGF0ZS5nZXRVVENNb250aCgpLFxuICAgICAgICAgICAgZGF0ZS5nZXRVVENEYXRlKCksXG4gICAgICAgICAgICBkYXRlLmdldFVUQ0hvdXJzKCksXG4gICAgICAgICAgICBkYXRlLmdldFVUQ01pbnV0ZXMoKSxcbiAgICAgICAgICAgIGRhdGUuZ2V0VVRDU2Vjb25kcygpLFxuICAgICAgICAgICAgZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKVxuICAgICAgICBdO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhcnJheVRvVXRjRGF0ZShhKSB7XG4gICAgICAgIC8vIGFjY29yZGluZyB0byB3ZWIgc3RhbmRhcmRzIChhbmQgU2FmYXJpKSwgYSBtb250aCBpbmRleCBpcyByZXF1aXJlZC5cbiAgICAgICAgLy8gbWFzc2FnZSBpZiBvbmx5IGdpdmVuIGEgeWVhci5cbiAgICAgICAgaWYgKGEubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBhID0gYS5jb25jYXQoWzBdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkoRGF0ZSwgYSkpO1xuICAgIH1cbiAgICAvLyBPdGhlciBVdGlsc1xuICAgIGZ1bmN0aW9uIGlzVmFsaWREYXRlKG0pIHtcbiAgICAgICAgcmV0dXJuICFpc05hTihtLnZhbHVlT2YoKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRpbWVBc01zKG0pIHtcbiAgICAgICAgcmV0dXJuIG0uZ2V0VVRDSG91cnMoKSAqIDEwMDAgKiA2MCAqIDYwICtcbiAgICAgICAgICAgIG0uZ2V0VVRDTWludXRlcygpICogMTAwMCAqIDYwICtcbiAgICAgICAgICAgIG0uZ2V0VVRDU2Vjb25kcygpICogMTAwMCArXG4gICAgICAgICAgICBtLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgIH1cblxuICAgIHZhciBJTlRFUk5BTF9VTklUUyA9IFsneWVhcnMnLCAnbW9udGhzJywgJ2RheXMnLCAnbWlsbGlzZWNvbmRzJ107XG4gICAgdmFyIFBBUlNFX1JFID0gL14oLT8pKD86KFxcZCspXFwuKT8oXFxkKyk6KFxcZFxcZCkoPzo6KFxcZFxcZCkoPzpcXC4oXFxkXFxkXFxkKSk/KT8vO1xuICAgIC8vIFBhcnNpbmcgYW5kIENyZWF0aW9uXG4gICAgZnVuY3Rpb24gY3JlYXRlRHVyYXRpb24oaW5wdXQsIHVuaXQpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlU3RyaW5nKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnICYmIGlucHV0KSB7IC8vIG5vbi1udWxsIG9iamVjdFxuICAgICAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZU9iamVjdChpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZU9iamVjdCgoX2EgPSB7fSwgX2FbdW5pdCB8fCAnbWlsbGlzZWNvbmRzJ10gPSBpbnB1dCwgX2EpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnNlU3RyaW5nKHMpIHtcbiAgICAgICAgdmFyIG0gPSBQQVJTRV9SRS5leGVjKHMpO1xuICAgICAgICBpZiAobSkge1xuICAgICAgICAgICAgdmFyIHNpZ24gPSBtWzFdID8gLTEgOiAxO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB5ZWFyczogMCxcbiAgICAgICAgICAgICAgICBtb250aHM6IDAsXG4gICAgICAgICAgICAgICAgZGF5czogc2lnbiAqIChtWzJdID8gcGFyc2VJbnQobVsyXSwgMTApIDogMCksXG4gICAgICAgICAgICAgICAgbWlsbGlzZWNvbmRzOiBzaWduICogKChtWzNdID8gcGFyc2VJbnQobVszXSwgMTApIDogMCkgKiA2MCAqIDYwICogMTAwMCArIC8vIGhvdXJzXG4gICAgICAgICAgICAgICAgICAgIChtWzRdID8gcGFyc2VJbnQobVs0XSwgMTApIDogMCkgKiA2MCAqIDEwMDAgKyAvLyBtaW51dGVzXG4gICAgICAgICAgICAgICAgICAgIChtWzVdID8gcGFyc2VJbnQobVs1XSwgMTApIDogMCkgKiAxMDAwICsgLy8gc2Vjb25kc1xuICAgICAgICAgICAgICAgICAgICAobVs2XSA/IHBhcnNlSW50KG1bNl0sIDEwKSA6IDApIC8vIG1zXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gbm9ybWFsaXplT2JqZWN0KG9iaikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcnM6IG9iai55ZWFycyB8fCBvYmoueWVhciB8fCAwLFxuICAgICAgICAgICAgbW9udGhzOiBvYmoubW9udGhzIHx8IG9iai5tb250aCB8fCAwLFxuICAgICAgICAgICAgZGF5czogKG9iai5kYXlzIHx8IG9iai5kYXkgfHwgMCkgK1xuICAgICAgICAgICAgICAgIGdldFdlZWtzRnJvbUlucHV0KG9iaikgKiA3LFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzOiAob2JqLmhvdXJzIHx8IG9iai5ob3VyIHx8IDApICogNjAgKiA2MCAqIDEwMDAgKyAvLyBob3Vyc1xuICAgICAgICAgICAgICAgIChvYmoubWludXRlcyB8fCBvYmoubWludXRlIHx8IDApICogNjAgKiAxMDAwICsgLy8gbWludXRlc1xuICAgICAgICAgICAgICAgIChvYmouc2Vjb25kcyB8fCBvYmouc2Vjb25kIHx8IDApICogMTAwMCArIC8vIHNlY29uZHNcbiAgICAgICAgICAgICAgICAob2JqLm1pbGxpc2Vjb25kcyB8fCBvYmoubWlsbGlzZWNvbmQgfHwgb2JqLm1zIHx8IDApIC8vIG1zXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFdlZWtzRnJvbUlucHV0KG9iaikge1xuICAgICAgICByZXR1cm4gb2JqLndlZWtzIHx8IG9iai53ZWVrIHx8IDA7XG4gICAgfVxuICAgIC8vIEVxdWFsaXR5XG4gICAgZnVuY3Rpb24gZHVyYXRpb25zRXF1YWwoZDAsIGQxKSB7XG4gICAgICAgIHJldHVybiBkMC55ZWFycyA9PT0gZDEueWVhcnMgJiZcbiAgICAgICAgICAgIGQwLm1vbnRocyA9PT0gZDEubW9udGhzICYmXG4gICAgICAgICAgICBkMC5kYXlzID09PSBkMS5kYXlzICYmXG4gICAgICAgICAgICBkMC5taWxsaXNlY29uZHMgPT09IGQxLm1pbGxpc2Vjb25kcztcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNTaW5nbGVEYXkoZHVyKSB7XG4gICAgICAgIHJldHVybiBkdXIueWVhcnMgPT09IDAgJiYgZHVyLm1vbnRocyA9PT0gMCAmJiBkdXIuZGF5cyA9PT0gMSAmJiBkdXIubWlsbGlzZWNvbmRzID09PSAwO1xuICAgIH1cbiAgICAvLyBTaW1wbGUgTWF0aFxuICAgIGZ1bmN0aW9uIGFkZER1cmF0aW9ucyhkMCwgZDEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHllYXJzOiBkMC55ZWFycyArIGQxLnllYXJzLFxuICAgICAgICAgICAgbW9udGhzOiBkMC5tb250aHMgKyBkMS5tb250aHMsXG4gICAgICAgICAgICBkYXlzOiBkMC5kYXlzICsgZDEuZGF5cyxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kczogZDAubWlsbGlzZWNvbmRzICsgZDEubWlsbGlzZWNvbmRzXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN1YnRyYWN0RHVyYXRpb25zKGQxLCBkMCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcnM6IGQxLnllYXJzIC0gZDAueWVhcnMsXG4gICAgICAgICAgICBtb250aHM6IGQxLm1vbnRocyAtIGQwLm1vbnRocyxcbiAgICAgICAgICAgIGRheXM6IGQxLmRheXMgLSBkMC5kYXlzLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzOiBkMS5taWxsaXNlY29uZHMgLSBkMC5taWxsaXNlY29uZHNcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbXVsdGlwbHlEdXJhdGlvbihkLCBuKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB5ZWFyczogZC55ZWFycyAqIG4sXG4gICAgICAgICAgICBtb250aHM6IGQubW9udGhzICogbixcbiAgICAgICAgICAgIGRheXM6IGQuZGF5cyAqIG4sXG4gICAgICAgICAgICBtaWxsaXNlY29uZHM6IGQubWlsbGlzZWNvbmRzICogblxuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBDb252ZXJzaW9uc1xuICAgIC8vIFwiUm91Z2hcIiBiZWNhdXNlIHRoZXkgYXJlIGJhc2VkIG9uIGF2ZXJhZ2UtY2FzZSBHcmVnb3JpYW4gbW9udGhzL3llYXJzXG4gICAgZnVuY3Rpb24gYXNSb3VnaFllYXJzKGR1cikge1xuICAgICAgICByZXR1cm4gYXNSb3VnaERheXMoZHVyKSAvIDM2NTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXNSb3VnaE1vbnRocyhkdXIpIHtcbiAgICAgICAgcmV0dXJuIGFzUm91Z2hEYXlzKGR1cikgLyAzMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXNSb3VnaERheXMoZHVyKSB7XG4gICAgICAgIHJldHVybiBhc1JvdWdoTXMoZHVyKSAvIDg2NGU1O1xuICAgIH1cbiAgICBmdW5jdGlvbiBhc1JvdWdoTWludXRlcyhkdXIpIHtcbiAgICAgICAgcmV0dXJuIGFzUm91Z2hNcyhkdXIpIC8gKDEwMDAgKiA2MCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFzUm91Z2hTZWNvbmRzKGR1cikge1xuICAgICAgICByZXR1cm4gYXNSb3VnaE1zKGR1cikgLyAxMDAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhc1JvdWdoTXMoZHVyKSB7XG4gICAgICAgIHJldHVybiBkdXIueWVhcnMgKiAoMzY1ICogODY0ZTUpICtcbiAgICAgICAgICAgIGR1ci5tb250aHMgKiAoMzAgKiA4NjRlNSkgK1xuICAgICAgICAgICAgZHVyLmRheXMgKiA4NjRlNSArXG4gICAgICAgICAgICBkdXIubWlsbGlzZWNvbmRzO1xuICAgIH1cbiAgICAvLyBBZHZhbmNlZCBNYXRoXG4gICAgZnVuY3Rpb24gd2hvbGVEaXZpZGVEdXJhdGlvbnMobnVtZXJhdG9yLCBkZW5vbWluYXRvcikge1xuICAgICAgICB2YXIgcmVzID0gbnVsbDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBJTlRFUk5BTF9VTklUUy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHVuaXQgPSBJTlRFUk5BTF9VTklUU1tpXTtcbiAgICAgICAgICAgIGlmIChkZW5vbWluYXRvclt1bml0XSkge1xuICAgICAgICAgICAgICAgIHZhciBsb2NhbFJlcyA9IG51bWVyYXRvclt1bml0XSAvIGRlbm9taW5hdG9yW3VuaXRdO1xuICAgICAgICAgICAgICAgIGlmICghaXNJbnQobG9jYWxSZXMpIHx8IChyZXMgIT09IG51bGwgJiYgcmVzICE9PSBsb2NhbFJlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlcyA9IGxvY2FsUmVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobnVtZXJhdG9yW3VuaXRdKSB7XG4gICAgICAgICAgICAgICAgLy8gbmVlZHMgdG8gZGl2aWRlIGJ5IHNvbWV0aGluZyBidXQgY2FuJ3QhXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgZnVuY3Rpb24gZ3JlYXRlc3REdXJhdGlvbkRlbm9taW5hdG9yKGR1ciwgZG9udFJldHVybldlZWtzKSB7XG4gICAgICAgIHZhciBtcyA9IGR1ci5taWxsaXNlY29uZHM7XG4gICAgICAgIGlmIChtcykge1xuICAgICAgICAgICAgaWYgKG1zICUgMTAwMCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHVuaXQ6ICdtaWxsaXNlY29uZCcsIHZhbHVlOiBtcyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1zICUgKDEwMDAgKiA2MCkgIT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB1bml0OiAnc2Vjb25kJywgdmFsdWU6IG1zIC8gMTAwMCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1zICUgKDEwMDAgKiA2MCAqIDYwKSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHVuaXQ6ICdtaW51dGUnLCB2YWx1ZTogbXMgLyAoMTAwMCAqIDYwKSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdW5pdDogJ2hvdXInLCB2YWx1ZTogbXMgLyAoMTAwMCAqIDYwICogNjApIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGR1ci5kYXlzKSB7XG4gICAgICAgICAgICBpZiAoIWRvbnRSZXR1cm5XZWVrcyAmJiBkdXIuZGF5cyAlIDcgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB1bml0OiAnd2VlaycsIHZhbHVlOiBkdXIuZGF5cyAvIDcgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHVuaXQ6ICdkYXknLCB2YWx1ZTogZHVyLmRheXMgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZHVyLm1vbnRocykge1xuICAgICAgICAgICAgcmV0dXJuIHsgdW5pdDogJ21vbnRoJywgdmFsdWU6IGR1ci5tb250aHMgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZHVyLnllYXJzKSB7XG4gICAgICAgICAgICByZXR1cm4geyB1bml0OiAneWVhcicsIHZhbHVlOiBkdXIueWVhcnMgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyB1bml0OiAnbWlsbGlzZWNvbmQnLCB2YWx1ZTogMCB9O1xuICAgIH1cblxuICAgIC8qIEZ1bGxDYWxlbmRhci1zcGVjaWZpYyBET00gVXRpbGl0aWVzXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gICAgLy8gR2l2ZW4gdGhlIHNjcm9sbGJhciB3aWR0aHMgb2Ygc29tZSBvdGhlciBjb250YWluZXIsIGNyZWF0ZSBib3JkZXJzL21hcmdpbnMgb24gcm93RWxzIGluIG9yZGVyIHRvIG1hdGNoIHRoZSBsZWZ0XG4gICAgLy8gYW5kIHJpZ2h0IHNwYWNlIHRoYXQgd2FzIG9mZnNldCBieSB0aGUgc2Nyb2xsYmFycy4gQSAxLXBpeGVsIGJvcmRlciBmaXJzdCwgdGhlbiBtYXJnaW4gYmV5b25kIHRoYXQuXG4gICAgZnVuY3Rpb24gY29tcGVuc2F0ZVNjcm9sbChyb3dFbCwgc2Nyb2xsYmFyV2lkdGhzKSB7XG4gICAgICAgIGlmIChzY3JvbGxiYXJXaWR0aHMubGVmdCkge1xuICAgICAgICAgICAgYXBwbHlTdHlsZShyb3dFbCwge1xuICAgICAgICAgICAgICAgIGJvcmRlckxlZnRXaWR0aDogMSxcbiAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiBzY3JvbGxiYXJXaWR0aHMubGVmdCAtIDFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzY3JvbGxiYXJXaWR0aHMucmlnaHQpIHtcbiAgICAgICAgICAgIGFwcGx5U3R5bGUocm93RWwsIHtcbiAgICAgICAgICAgICAgICBib3JkZXJSaWdodFdpZHRoOiAxLFxuICAgICAgICAgICAgICAgIG1hcmdpblJpZ2h0OiBzY3JvbGxiYXJXaWR0aHMucmlnaHQgLSAxXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBVbmRvZXMgY29tcGVuc2F0ZVNjcm9sbCBhbmQgcmVzdG9yZXMgYWxsIGJvcmRlcnMvbWFyZ2luc1xuICAgIGZ1bmN0aW9uIHVuY29tcGVuc2F0ZVNjcm9sbChyb3dFbCkge1xuICAgICAgICBhcHBseVN0eWxlKHJvd0VsLCB7XG4gICAgICAgICAgICBtYXJnaW5MZWZ0OiAnJyxcbiAgICAgICAgICAgIG1hcmdpblJpZ2h0OiAnJyxcbiAgICAgICAgICAgIGJvcmRlckxlZnRXaWR0aDogJycsXG4gICAgICAgICAgICBib3JkZXJSaWdodFdpZHRoOiAnJ1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gTWFrZSB0aGUgbW91c2UgY3Vyc29yIGV4cHJlc3MgdGhhdCBhbiBldmVudCBpcyBub3QgYWxsb3dlZCBpbiB0aGUgY3VycmVudCBhcmVhXG4gICAgZnVuY3Rpb24gZGlzYWJsZUN1cnNvcigpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdmYy1ub3QtYWxsb3dlZCcpO1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIHRoZSBtb3VzZSBjdXJzb3IgdG8gaXRzIG9yaWdpbmFsIGxvb2tcbiAgICBmdW5jdGlvbiBlbmFibGVDdXJzb3IoKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnZmMtbm90LWFsbG93ZWQnKTtcbiAgICB9XG4gICAgLy8gR2l2ZW4gYSB0b3RhbCBhdmFpbGFibGUgaGVpZ2h0IHRvIGZpbGwsIGhhdmUgYGVsc2AgKGVzc2VudGlhbGx5IGNoaWxkIHJvd3MpIGV4cGFuZCB0byBhY2NvbW9kYXRlLlxuICAgIC8vIEJ5IGRlZmF1bHQsIGFsbCBlbGVtZW50cyB0aGF0IGFyZSBzaG9ydGVyIHRoYW4gdGhlIHJlY29tbWVuZGVkIGhlaWdodCBhcmUgZXhwYW5kZWQgdW5pZm9ybWx5LCBub3QgY29uc2lkZXJpbmdcbiAgICAvLyBhbnkgb3RoZXIgZWxzIHRoYXQgYXJlIGFscmVhZHkgdG9vIHRhbGwuIGlmIGBzaG91bGRSZWRpc3RyaWJ1dGVgIGlzIG9uLCBpdCBjb25zaWRlcnMgdGhlc2UgdGFsbCByb3dzIGFuZFxuICAgIC8vIHJlZHVjZXMgdGhlIGF2YWlsYWJsZSBoZWlnaHQuXG4gICAgZnVuY3Rpb24gZGlzdHJpYnV0ZUhlaWdodChlbHMsIGF2YWlsYWJsZUhlaWdodCwgc2hvdWxkUmVkaXN0cmlidXRlKSB7XG4gICAgICAgIC8vICpGTE9PUklORyBOT1RFKjogd2UgZmxvb3IgaW4gY2VydGFpbiBwbGFjZXMgYmVjYXVzZSB6b29tIGNhbiBnaXZlIGluYWNjdXJhdGUgZmxvYXRpbmctcG9pbnQgZGltZW5zaW9ucyxcbiAgICAgICAgLy8gYW5kIGl0IGlzIGJldHRlciB0byBiZSBzaG9ydGVyIHRoYW4gdGFsbGVyLCB0byBhdm9pZCBjcmVhdGluZyB1bm5lY2Vzc2FyeSBzY3JvbGxiYXJzLlxuICAgICAgICB2YXIgbWluT2Zmc2V0MSA9IE1hdGguZmxvb3IoYXZhaWxhYmxlSGVpZ2h0IC8gZWxzLmxlbmd0aCk7IC8vIGZvciBub24tbGFzdCBlbGVtZW50XG4gICAgICAgIHZhciBtaW5PZmZzZXQyID0gTWF0aC5mbG9vcihhdmFpbGFibGVIZWlnaHQgLSBtaW5PZmZzZXQxICogKGVscy5sZW5ndGggLSAxKSk7IC8vIGZvciBsYXN0IGVsZW1lbnQgKkZMT09SSU5HIE5PVEUqXG4gICAgICAgIHZhciBmbGV4RWxzID0gW107IC8vIGVsZW1lbnRzIHRoYXQgYXJlIGFsbG93ZWQgdG8gZXhwYW5kLiBhcnJheSBvZiBET00gbm9kZXNcbiAgICAgICAgdmFyIGZsZXhPZmZzZXRzID0gW107IC8vIGFtb3VudCBvZiB2ZXJ0aWNhbCBzcGFjZSBpdCB0YWtlcyB1cFxuICAgICAgICB2YXIgZmxleEhlaWdodHMgPSBbXTsgLy8gYWN0dWFsIGNzcyBoZWlnaHRcbiAgICAgICAgdmFyIHVzZWRIZWlnaHQgPSAwO1xuICAgICAgICB1bmRpc3RyaWJ1dGVIZWlnaHQoZWxzKTsgLy8gZ2l2ZSBhbGwgZWxlbWVudHMgdGhlaXIgbmF0dXJhbCBoZWlnaHRcbiAgICAgICAgLy8gZmluZCBlbGVtZW50cyB0aGF0IGFyZSBiZWxvdyB0aGUgcmVjb21tZW5kZWQgaGVpZ2h0IChleHBhbmRhYmxlKS5cbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIHF1ZXJ5IGZvciBoZWlnaHRzIGluIGEgc2luZ2xlIGZpcnN0IHBhc3MgKHRvIGF2b2lkIHJlZmxvdyBvc2NpbGxhdGlvbikuXG4gICAgICAgIGVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCwgaSkge1xuICAgICAgICAgICAgdmFyIG1pbk9mZnNldCA9IGkgPT09IGVscy5sZW5ndGggLSAxID8gbWluT2Zmc2V0MiA6IG1pbk9mZnNldDE7XG4gICAgICAgICAgICB2YXIgbmF0dXJhbEhlaWdodCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICAgICAgICAgIHZhciBuYXR1cmFsT2Zmc2V0ID0gbmF0dXJhbEhlaWdodCArIGNvbXB1dGVWTWFyZ2lucyhlbCk7XG4gICAgICAgICAgICBpZiAobmF0dXJhbE9mZnNldCA8IG1pbk9mZnNldCkge1xuICAgICAgICAgICAgICAgIGZsZXhFbHMucHVzaChlbCk7XG4gICAgICAgICAgICAgICAgZmxleE9mZnNldHMucHVzaChuYXR1cmFsT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBmbGV4SGVpZ2h0cy5wdXNoKG5hdHVyYWxIZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBlbGVtZW50IHN0cmV0Y2hlcyBwYXN0IHJlY29tbWVuZGVkIGhlaWdodCAobm9uLWV4cGFuZGFibGUpLiBtYXJrIHRoZSBzcGFjZSBhcyBvY2N1cGllZC5cbiAgICAgICAgICAgICAgICB1c2VkSGVpZ2h0ICs9IG5hdHVyYWxPZmZzZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyByZWFkanVzdCB0aGUgcmVjb21tZW5kZWQgaGVpZ2h0IHRvIG9ubHkgY29uc2lkZXIgdGhlIGhlaWdodCBhdmFpbGFibGUgdG8gbm9uLW1heGVkLW91dCByb3dzLlxuICAgICAgICBpZiAoc2hvdWxkUmVkaXN0cmlidXRlKSB7XG4gICAgICAgICAgICBhdmFpbGFibGVIZWlnaHQgLT0gdXNlZEhlaWdodDtcbiAgICAgICAgICAgIG1pbk9mZnNldDEgPSBNYXRoLmZsb29yKGF2YWlsYWJsZUhlaWdodCAvIGZsZXhFbHMubGVuZ3RoKTtcbiAgICAgICAgICAgIG1pbk9mZnNldDIgPSBNYXRoLmZsb29yKGF2YWlsYWJsZUhlaWdodCAtIG1pbk9mZnNldDEgKiAoZmxleEVscy5sZW5ndGggLSAxKSk7IC8vICpGTE9PUklORyBOT1RFKlxuICAgICAgICB9XG4gICAgICAgIC8vIGFzc2lnbiBoZWlnaHRzIHRvIGFsbCBleHBhbmRhYmxlIGVsZW1lbnRzXG4gICAgICAgIGZsZXhFbHMuZm9yRWFjaChmdW5jdGlvbiAoZWwsIGkpIHtcbiAgICAgICAgICAgIHZhciBtaW5PZmZzZXQgPSBpID09PSBmbGV4RWxzLmxlbmd0aCAtIDEgPyBtaW5PZmZzZXQyIDogbWluT2Zmc2V0MTtcbiAgICAgICAgICAgIHZhciBuYXR1cmFsT2Zmc2V0ID0gZmxleE9mZnNldHNbaV07XG4gICAgICAgICAgICB2YXIgbmF0dXJhbEhlaWdodCA9IGZsZXhIZWlnaHRzW2ldO1xuICAgICAgICAgICAgdmFyIG5ld0hlaWdodCA9IG1pbk9mZnNldCAtIChuYXR1cmFsT2Zmc2V0IC0gbmF0dXJhbEhlaWdodCk7IC8vIHN1YnRyYWN0IHRoZSBtYXJnaW4vcGFkZGluZ1xuICAgICAgICAgICAgaWYgKG5hdHVyYWxPZmZzZXQgPCBtaW5PZmZzZXQpIHsgLy8gd2UgY2hlY2sgdGhpcyBhZ2FpbiBiZWNhdXNlIHJlZGlzdHJpYnV0aW9uIG1pZ2h0IGhhdmUgY2hhbmdlZCB0aGluZ3NcbiAgICAgICAgICAgICAgICBlbC5zdHlsZS5oZWlnaHQgPSBuZXdIZWlnaHQgKyAncHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gVW5kb2VzIGRpc3RydWJ1dGVIZWlnaHQsIHJlc3RvcmluZyBhbGwgZWxzIHRvIHRoZWlyIG5hdHVyYWwgaGVpZ2h0XG4gICAgZnVuY3Rpb24gdW5kaXN0cmlidXRlSGVpZ2h0KGVscykge1xuICAgICAgICBlbHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgIGVsLnN0eWxlLmhlaWdodCA9ICcnO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gR2l2ZW4gYGVsc2AsIGEgc2V0IG9mIDx0ZD4gY2VsbHMsIGZpbmQgdGhlIGNlbGwgd2l0aCB0aGUgbGFyZ2VzdCBuYXR1cmFsIHdpZHRoIGFuZCBzZXQgdGhlIHdpZHRocyBvZiBhbGwgdGhlXG4gICAgLy8gY2VsbHMgdG8gYmUgdGhhdCB3aWR0aC5cbiAgICAvLyBQUkVSRVFVSVNJVEU6IGlmIHlvdSB3YW50IGEgY2VsbCB0byB0YWtlIHVwIHdpZHRoLCBpdCBuZWVkcyB0byBoYXZlIGEgc2luZ2xlIGlubmVyIGVsZW1lbnQgdy8gZGlzcGxheTppbmxpbmVcbiAgICBmdW5jdGlvbiBtYXRjaENlbGxXaWR0aHMoZWxzKSB7XG4gICAgICAgIHZhciBtYXhJbm5lcldpZHRoID0gMDtcbiAgICAgICAgZWxzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICB2YXIgaW5uZXJFbCA9IGVsLmZpcnN0Q2hpbGQ7IC8vIGhvcGVmdWxseSBhbiBlbGVtZW50XG4gICAgICAgICAgICBpZiAoaW5uZXJFbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIGlubmVyV2lkdGhfMSA9IGlubmVyRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgICAgICAgICAgICAgaWYgKGlubmVyV2lkdGhfMSA+IG1heElubmVyV2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgbWF4SW5uZXJXaWR0aCA9IGlubmVyV2lkdGhfMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBtYXhJbm5lcldpZHRoKys7IC8vIHNvbWV0aW1lcyBub3QgYWNjdXJhdGUgb2Ygd2lkdGggdGhlIHRleHQgbmVlZHMgdG8gc3RheSBvbiBvbmUgbGluZS4gaW5zdXJhbmNlXG4gICAgICAgIGVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgZWwuc3R5bGUud2lkdGggPSBtYXhJbm5lcldpZHRoICsgJ3B4JztcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBtYXhJbm5lcldpZHRoO1xuICAgIH1cbiAgICAvLyBHaXZlbiBvbmUgZWxlbWVudCB0aGF0IHJlc2lkZXMgaW5zaWRlIGFub3RoZXIsXG4gICAgLy8gU3VidHJhY3RzIHRoZSBoZWlnaHQgb2YgdGhlIGlubmVyIGVsZW1lbnQgZnJvbSB0aGUgb3V0ZXIgZWxlbWVudC5cbiAgICBmdW5jdGlvbiBzdWJ0cmFjdElubmVyRWxIZWlnaHQob3V0ZXJFbCwgaW5uZXJFbCkge1xuICAgICAgICAvLyBlZmZpbicgSUU4LzkvMTAvMTEgc29tZXRpbWVzIHJldHVybnMgMCBmb3IgZGltZW5zaW9ucy4gdGhpcyB3ZWlyZCBoYWNrIHdhcyB0aGUgb25seSB0aGluZyB0aGF0IHdvcmtlZFxuICAgICAgICB2YXIgcmVmbG93U3R5bGVQcm9wcyA9IHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgbGVmdDogLTEgLy8gZW5zdXJlIHJlZmxvdyBpbiBjYXNlIHRoZSBlbCB3YXMgYWxyZWFkeSByZWxhdGl2ZS4gbmVnYXRpdmUgaXMgbGVzcyBsaWtlbHkgdG8gY2F1c2UgbmV3IHNjcm9sbFxuICAgICAgICB9O1xuICAgICAgICBhcHBseVN0eWxlKG91dGVyRWwsIHJlZmxvd1N0eWxlUHJvcHMpO1xuICAgICAgICBhcHBseVN0eWxlKGlubmVyRWwsIHJlZmxvd1N0eWxlUHJvcHMpO1xuICAgICAgICB2YXIgZGlmZiA9IC8vIGdyYWIgdGhlIGRpbWVuc2lvbnNcbiAgICAgICAgIG91dGVyRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IC1cbiAgICAgICAgICAgIGlubmVyRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgICAgICAvLyB1bmRvIGhhY2tcbiAgICAgICAgdmFyIHJlc2V0U3R5bGVQcm9wcyA9IHsgcG9zaXRpb246ICcnLCBsZWZ0OiAnJyB9O1xuICAgICAgICBhcHBseVN0eWxlKG91dGVyRWwsIHJlc2V0U3R5bGVQcm9wcyk7XG4gICAgICAgIGFwcGx5U3R5bGUoaW5uZXJFbCwgcmVzZXRTdHlsZVByb3BzKTtcbiAgICAgICAgcmV0dXJuIGRpZmY7XG4gICAgfVxuICAgIC8qIFNlbGVjdGlvblxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICAgIGZ1bmN0aW9uIHByZXZlbnRTZWxlY3Rpb24oZWwpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnZmMtdW5zZWxlY3RhYmxlJyk7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdHN0YXJ0JywgcHJldmVudERlZmF1bHQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhbGxvd1NlbGVjdGlvbihlbCkge1xuICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdmYy11bnNlbGVjdGFibGUnKTtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2VsZWN0c3RhcnQnLCBwcmV2ZW50RGVmYXVsdCk7XG4gICAgfVxuICAgIC8qIENvbnRleHQgTWVudVxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICAgIGZ1bmN0aW9uIHByZXZlbnRDb250ZXh0TWVudShlbCkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIHByZXZlbnREZWZhdWx0KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWxsb3dDb250ZXh0TWVudShlbCkge1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIHByZXZlbnREZWZhdWx0KTtcbiAgICB9XG4gICAgLyogT2JqZWN0IE9yZGVyaW5nIGJ5IEZpZWxkXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gICAgZnVuY3Rpb24gcGFyc2VGaWVsZFNwZWNzKGlucHV0KSB7XG4gICAgICAgIHZhciBzcGVjcyA9IFtdO1xuICAgICAgICB2YXIgdG9rZW5zID0gW107XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgdG9rZW47XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0b2tlbnMgPSBpbnB1dC5zcGxpdCgvXFxzKixcXHMqLyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0b2tlbnMgPSBbaW5wdXRdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgICAgICB0b2tlbnMgPSBpbnB1dDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgc3BlY3MucHVzaCh0b2tlbi5jaGFyQXQoMCkgPT09ICctJyA/XG4gICAgICAgICAgICAgICAgICAgIHsgZmllbGQ6IHRva2VuLnN1YnN0cmluZygxKSwgb3JkZXI6IC0xIH0gOlxuICAgICAgICAgICAgICAgICAgICB7IGZpZWxkOiB0b2tlbiwgb3JkZXI6IDEgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdG9rZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBzcGVjcy5wdXNoKHsgZnVuYzogdG9rZW4gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNwZWNzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wYXJlQnlGaWVsZFNwZWNzKG9iajAsIG9iajEsIGZpZWxkU3BlY3MpIHtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBjbXA7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBmaWVsZFNwZWNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjbXAgPSBjb21wYXJlQnlGaWVsZFNwZWMob2JqMCwgb2JqMSwgZmllbGRTcGVjc1tpXSk7XG4gICAgICAgICAgICBpZiAoY21wKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNtcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tcGFyZUJ5RmllbGRTcGVjKG9iajAsIG9iajEsIGZpZWxkU3BlYykge1xuICAgICAgICBpZiAoZmllbGRTcGVjLmZ1bmMpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWVsZFNwZWMuZnVuYyhvYmowLCBvYmoxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmxleGlibGVDb21wYXJlKG9iajBbZmllbGRTcGVjLmZpZWxkXSwgb2JqMVtmaWVsZFNwZWMuZmllbGRdKVxuICAgICAgICAgICAgKiAoZmllbGRTcGVjLm9yZGVyIHx8IDEpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmbGV4aWJsZUNvbXBhcmUoYSwgYikge1xuICAgICAgICBpZiAoIWEgJiYgIWIpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGEgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBiID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhhKS5sb2NhbGVDb21wYXJlKFN0cmluZyhiKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGEgLSBiO1xuICAgIH1cbiAgICAvKiBTdHJpbmcgVXRpbGl0aWVzXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gICAgZnVuY3Rpb24gY2FwaXRhbGlzZUZpcnN0TGV0dGVyKHN0cikge1xuICAgICAgICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwYWRTdGFydCh2YWwsIGxlbikge1xuICAgICAgICB2YXIgcyA9IFN0cmluZyh2YWwpO1xuICAgICAgICByZXR1cm4gJzAwMCcuc3Vic3RyKDAsIGxlbiAtIHMubGVuZ3RoKSArIHM7XG4gICAgfVxuICAgIC8qIE51bWJlciBVdGlsaXRpZXNcbiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlTnVtYmVycyhhLCBiKSB7XG4gICAgICAgIHJldHVybiBhIC0gYjtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNJbnQobikge1xuICAgICAgICByZXR1cm4gbiAlIDEgPT09IDA7XG4gICAgfVxuICAgIC8qIFdlaXJkIFV0aWxpdGllc1xuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICAgIGZ1bmN0aW9uIGFwcGx5QWxsKGZ1bmN0aW9ucywgdGhpc09iaiwgYXJncykge1xuICAgICAgICBpZiAodHlwZW9mIGZ1bmN0aW9ucyA9PT0gJ2Z1bmN0aW9uJykgeyAvLyBzdXBwbGllZCBhIHNpbmdsZSBmdW5jdGlvblxuICAgICAgICAgICAgZnVuY3Rpb25zID0gW2Z1bmN0aW9uc107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZ1bmN0aW9ucykge1xuICAgICAgICAgICAgdmFyIGkgPSB2b2lkIDA7XG4gICAgICAgICAgICB2YXIgcmV0ID0gdm9pZCAwO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGZ1bmN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHJldCA9IGZ1bmN0aW9uc1tpXS5hcHBseSh0aGlzT2JqLCBhcmdzKSB8fCByZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZpcnN0RGVmaW5lZCgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChhcmdzW2ldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJnc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIGFzIGxvbmcgYXMgaXQgY29udGludWVzIHRvIGJlIGludm9rZWQsIHdpbGwgbm90XG4gICAgLy8gYmUgdHJpZ2dlcmVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvclxuICAgIC8vIE4gbWlsbGlzZWNvbmRzLiBJZiBgaW1tZWRpYXRlYCBpcyBwYXNzZWQsIHRyaWdnZXIgdGhlIGZ1bmN0aW9uIG9uIHRoZVxuICAgIC8vIGxlYWRpbmcgZWRnZSwgaW5zdGVhZCBvZiB0aGUgdHJhaWxpbmcuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL2Jsb2IvMS42LjAvdW5kZXJzY29yZS5qcyNMNzE0XG4gICAgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCkge1xuICAgICAgICB2YXIgdGltZW91dDtcbiAgICAgICAgdmFyIGFyZ3M7XG4gICAgICAgIHZhciBjb250ZXh0O1xuICAgICAgICB2YXIgdGltZXN0YW1wO1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbGFzdCA9IG5ldyBEYXRlKCkudmFsdWVPZigpIC0gdGltZXN0YW1wO1xuICAgICAgICAgICAgaWYgKGxhc3QgPCB3YWl0KSB7XG4gICAgICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQgLSBsYXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgICAgICAgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29udGV4dCA9IHRoaXM7XG4gICAgICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgdGltZXN0YW1wID0gbmV3IERhdGUoKS52YWx1ZU9mKCk7XG4gICAgICAgICAgICBpZiAoIXRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBOdW1iZXIgYW5kIEJvb2xlYW4gYXJlIG9ubHkgdHlwZXMgdGhhdCBkZWZhdWx0cyBvciBub3QgY29tcHV0ZWQgZm9yXG4gICAgLy8gVE9ETzogd3JpdGUgbW9yZSBjb21tZW50c1xuICAgIGZ1bmN0aW9uIHJlZmluZVByb3BzKHJhd1Byb3BzLCBwcm9jZXNzb3JzLCBkZWZhdWx0cywgbGVmdG92ZXJQcm9wcykge1xuICAgICAgICBpZiAoZGVmYXVsdHMgPT09IHZvaWQgMCkgeyBkZWZhdWx0cyA9IHt9OyB9XG4gICAgICAgIHZhciByZWZpbmVkID0ge307XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBwcm9jZXNzb3JzKSB7XG4gICAgICAgICAgICB2YXIgcHJvY2Vzc29yID0gcHJvY2Vzc29yc1trZXldO1xuICAgICAgICAgICAgaWYgKHJhd1Byb3BzW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIGZvdW5kXG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3NvciA9PT0gRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgcmVmaW5lZFtrZXldID0gdHlwZW9mIHJhd1Byb3BzW2tleV0gPT09ICdmdW5jdGlvbicgPyByYXdQcm9wc1trZXldIDogbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvY2Vzc29yKSB7IC8vIGEgcmVmaW5pbmcgZnVuY3Rpb24/XG4gICAgICAgICAgICAgICAgICAgIHJlZmluZWRba2V5XSA9IHByb2Nlc3NvcihyYXdQcm9wc1trZXldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZmluZWRba2V5XSA9IHJhd1Byb3BzW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZGVmYXVsdHNba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhlcmUncyBhbiBleHBsaWNpdCBkZWZhdWx0XG4gICAgICAgICAgICAgICAgcmVmaW5lZFtrZXldID0gZGVmYXVsdHNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG11c3QgY29tcHV0ZSBhIGRlZmF1bHRcbiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc29yID09PSBTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVmaW5lZFtrZXldID0gJyc7IC8vIGVtcHR5IHN0cmluZyBpcyBkZWZhdWx0IGZvciBTdHJpbmdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIXByb2Nlc3NvciB8fCBwcm9jZXNzb3IgPT09IE51bWJlciB8fCBwcm9jZXNzb3IgPT09IEJvb2xlYW4gfHwgcHJvY2Vzc29yID09PSBGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgICAgICByZWZpbmVkW2tleV0gPSBudWxsOyAvLyBhc3NpZ24gbnVsbCBmb3Igb3RoZXIgbm9uLWN1c3RvbSBwcm9jZXNzb3IgZnVuY3NcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZmluZWRba2V5XSA9IHByb2Nlc3NvcihudWxsKTsgLy8gcnVuIHRoZSBjdXN0b20gcHJvY2Vzc29yIGZ1bmNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxlZnRvdmVyUHJvcHMpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiByYXdQcm9wcykge1xuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzb3JzW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBsZWZ0b3ZlclByb3BzW2tleV0gPSByYXdQcm9wc1trZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVmaW5lZDtcbiAgICB9XG4gICAgLyogRGF0ZSBzdHVmZiB0aGF0IGRvZXNuJ3QgYmVsb25nIGluIGRhdGVsaWIgY29yZVxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICAgIC8vIGdpdmVuIGEgdGltZWQgcmFuZ2UsIGNvbXB1dGVzIGFuIGFsbC1kYXkgcmFuZ2UgdGhhdCBoYXMgdGhlIHNhbWUgZXhhY3QgZHVyYXRpb24sXG4gICAgLy8gYnV0IHdob3NlIHN0YXJ0IHRpbWUgaXMgYWxpZ25lZCB3aXRoIHRoZSBzdGFydCBvZiB0aGUgZGF5LlxuICAgIGZ1bmN0aW9uIGNvbXB1dGVBbGlnbmVkRGF5UmFuZ2UodGltZWRSYW5nZSkge1xuICAgICAgICB2YXIgZGF5Q250ID0gTWF0aC5mbG9vcihkaWZmRGF5cyh0aW1lZFJhbmdlLnN0YXJ0LCB0aW1lZFJhbmdlLmVuZCkpIHx8IDE7XG4gICAgICAgIHZhciBzdGFydCA9IHN0YXJ0T2ZEYXkodGltZWRSYW5nZS5zdGFydCk7XG4gICAgICAgIHZhciBlbmQgPSBhZGREYXlzKHN0YXJ0LCBkYXlDbnQpO1xuICAgICAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kIH07XG4gICAgfVxuICAgIC8vIGdpdmVuIGEgdGltZWQgcmFuZ2UsIGNvbXB1dGVzIGFuIGFsbC1kYXkgcmFuZ2UgYmFzZWQgb24gaG93IGZvciB0aGUgZW5kIGRhdGUgYmxlZWRzIGludG8gdGhlIG5leHQgZGF5XG4gICAgLy8gVE9ETzogZ2l2ZSBuZXh0RGF5VGhyZXNob2xkIGEgZGVmYXVsdCBhcmdcbiAgICBmdW5jdGlvbiBjb21wdXRlVmlzaWJsZURheVJhbmdlKHRpbWVkUmFuZ2UsIG5leHREYXlUaHJlc2hvbGQpIHtcbiAgICAgICAgaWYgKG5leHREYXlUaHJlc2hvbGQgPT09IHZvaWQgMCkgeyBuZXh0RGF5VGhyZXNob2xkID0gY3JlYXRlRHVyYXRpb24oMCk7IH1cbiAgICAgICAgdmFyIHN0YXJ0RGF5ID0gbnVsbDtcbiAgICAgICAgdmFyIGVuZERheSA9IG51bGw7XG4gICAgICAgIGlmICh0aW1lZFJhbmdlLmVuZCkge1xuICAgICAgICAgICAgZW5kRGF5ID0gc3RhcnRPZkRheSh0aW1lZFJhbmdlLmVuZCk7XG4gICAgICAgICAgICB2YXIgZW5kVGltZU1TID0gdGltZWRSYW5nZS5lbmQudmFsdWVPZigpIC0gZW5kRGF5LnZhbHVlT2YoKTsgLy8gIyBvZiBtaWxsaXNlY29uZHMgaW50byBgZW5kRGF5YFxuICAgICAgICAgICAgLy8gSWYgdGhlIGVuZCB0aW1lIGlzIGFjdHVhbGx5IGluY2x1c2l2ZWx5IHBhcnQgb2YgdGhlIG5leHQgZGF5IGFuZCBpcyBlcXVhbCB0byBvclxuICAgICAgICAgICAgLy8gYmV5b25kIHRoZSBuZXh0IGRheSB0aHJlc2hvbGQsIGFkanVzdCB0aGUgZW5kIHRvIGJlIHRoZSBleGNsdXNpdmUgZW5kIG9mIGBlbmREYXlgLlxuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBsZWF2aW5nIGl0IGFzIGluY2x1c2l2ZSB3aWxsIGNhdXNlIGl0IHRvIGV4Y2x1ZGUgYGVuZERheWAuXG4gICAgICAgICAgICBpZiAoZW5kVGltZU1TICYmIGVuZFRpbWVNUyA+PSBhc1JvdWdoTXMobmV4dERheVRocmVzaG9sZCkpIHtcbiAgICAgICAgICAgICAgICBlbmREYXkgPSBhZGREYXlzKGVuZERheSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVkUmFuZ2Uuc3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXJ0RGF5ID0gc3RhcnRPZkRheSh0aW1lZFJhbmdlLnN0YXJ0KTsgLy8gdGhlIGJlZ2lubmluZyBvZiB0aGUgZGF5IHRoZSByYW5nZSBzdGFydHNcbiAgICAgICAgICAgIC8vIElmIGVuZCBpcyB3aXRoaW4gYHN0YXJ0RGF5YCBidXQgbm90IHBhc3QgbmV4dERheVRocmVzaG9sZCwgYXNzaWduIHRoZSBkZWZhdWx0IGR1cmF0aW9uIG9mIG9uZSBkYXkuXG4gICAgICAgICAgICBpZiAoZW5kRGF5ICYmIGVuZERheSA8PSBzdGFydERheSkge1xuICAgICAgICAgICAgICAgIGVuZERheSA9IGFkZERheXMoc3RhcnREYXksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydERheSwgZW5kOiBlbmREYXkgfTtcbiAgICB9XG4gICAgLy8gc3BhbnMgZnJvbSBvbmUgZGF5IGludG8gYW5vdGhlcj9cbiAgICBmdW5jdGlvbiBpc011bHRpRGF5UmFuZ2UocmFuZ2UpIHtcbiAgICAgICAgdmFyIHZpc2libGVSYW5nZSA9IGNvbXB1dGVWaXNpYmxlRGF5UmFuZ2UocmFuZ2UpO1xuICAgICAgICByZXR1cm4gZGlmZkRheXModmlzaWJsZVJhbmdlLnN0YXJ0LCB2aXNpYmxlUmFuZ2UuZW5kKSA+IDE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRpZmZEYXRlcyhkYXRlMCwgZGF0ZTEsIGRhdGVFbnYsIGxhcmdlVW5pdCkge1xuICAgICAgICBpZiAobGFyZ2VVbml0ID09PSAneWVhcicpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbihkYXRlRW52LmRpZmZXaG9sZVllYXJzKGRhdGUwLCBkYXRlMSksICd5ZWFyJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGFyZ2VVbml0ID09PSAnbW9udGgnKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oZGF0ZUVudi5kaWZmV2hvbGVNb250aHMoZGF0ZTAsIGRhdGUxKSwgJ21vbnRoJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZGlmZkRheUFuZFRpbWUoZGF0ZTAsIGRhdGUxKTsgLy8gcmV0dXJucyBhIGR1cmF0aW9uXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuICAgIFBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG4gICAgcHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuICAgIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuICAgIFJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG4gICAgQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG4gICAgSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbiAgICBMT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG4gICAgT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG4gICAgUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbiAgICAvKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcGFyc2VSZWN1cnJpbmcoZXZlbnRJbnB1dCwgYWxsRGF5RGVmYXVsdCwgZGF0ZUVudiwgcmVjdXJyaW5nVHlwZXMsIGxlZnRvdmVycykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlY3VycmluZ1R5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbG9jYWxMZWZ0b3ZlcnMgPSB7fTtcbiAgICAgICAgICAgIHZhciBwYXJzZWQgPSByZWN1cnJpbmdUeXBlc1tpXS5wYXJzZShldmVudElucHV0LCBsb2NhbExlZnRvdmVycywgZGF0ZUVudik7XG4gICAgICAgICAgICBpZiAocGFyc2VkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFsbERheSA9IGxvY2FsTGVmdG92ZXJzLmFsbERheTtcbiAgICAgICAgICAgICAgICBkZWxldGUgbG9jYWxMZWZ0b3ZlcnMuYWxsRGF5OyAvLyByZW1vdmUgZnJvbSBsZWZ0b3ZlcnNcbiAgICAgICAgICAgICAgICBpZiAoYWxsRGF5ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxsRGF5ID0gYWxsRGF5RGVmYXVsdDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsbERheSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxEYXkgPSBwYXJzZWQuYWxsRGF5R3Vlc3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWxsRGF5ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxEYXkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfX2Fzc2lnbihsZWZ0b3ZlcnMsIGxvY2FsTGVmdG92ZXJzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBhbGxEYXk6IGFsbERheSxcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IHBhcnNlZC5kdXJhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgdHlwZURhdGE6IHBhcnNlZC50eXBlRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZUlkOiBpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLypcbiAgICBFdmVudCBNVVNUIGhhdmUgYSByZWN1cnJpbmdEZWZcbiAgICAqL1xuICAgIGZ1bmN0aW9uIGV4cGFuZFJlY3VycmluZ1JhbmdlcyhldmVudERlZiwgZHVyYXRpb24sIGZyYW1pbmdSYW5nZSwgZGF0ZUVudiwgcmVjdXJyaW5nVHlwZXMpIHtcbiAgICAgICAgdmFyIHR5cGVEZWYgPSByZWN1cnJpbmdUeXBlc1tldmVudERlZi5yZWN1cnJpbmdEZWYudHlwZUlkXTtcbiAgICAgICAgdmFyIG1hcmtlcnMgPSB0eXBlRGVmLmV4cGFuZChldmVudERlZi5yZWN1cnJpbmdEZWYudHlwZURhdGEsIHtcbiAgICAgICAgICAgIHN0YXJ0OiBkYXRlRW52LnN1YnRyYWN0KGZyYW1pbmdSYW5nZS5zdGFydCwgZHVyYXRpb24pLFxuICAgICAgICAgICAgZW5kOiBmcmFtaW5nUmFuZ2UuZW5kXG4gICAgICAgIH0sIGRhdGVFbnYpO1xuICAgICAgICAvLyB0aGUgcmVjdXJyZW5jZSBwbHVnaW5zIGRvbid0IGd1YXJhbnRlZSB0aGF0IGFsbC1kYXkgZXZlbnRzIGFyZSBzdGFydC1vZi1kYXksIHNvIHdlIGhhdmUgdG9cbiAgICAgICAgaWYgKGV2ZW50RGVmLmFsbERheSkge1xuICAgICAgICAgICAgbWFya2VycyA9IG1hcmtlcnMubWFwKHN0YXJ0T2ZEYXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXJrZXJzO1xuICAgIH1cblxuICAgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG4gICAgLy8gTWVyZ2VzIGFuIGFycmF5IG9mIG9iamVjdHMgaW50byBhIHNpbmdsZSBvYmplY3QuXG4gICAgLy8gVGhlIHNlY29uZCBhcmd1bWVudCBhbGxvd3MgZm9yIGFuIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIHdobydzIG9iamVjdCB2YWx1ZXMgd2lsbCBiZSBtZXJnZWQgdG9nZXRoZXIuXG4gICAgZnVuY3Rpb24gbWVyZ2VQcm9wcyhwcm9wT2JqcywgY29tcGxleFByb3BzKSB7XG4gICAgICAgIHZhciBkZXN0ID0ge307XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgbmFtZTtcbiAgICAgICAgdmFyIGNvbXBsZXhPYmpzO1xuICAgICAgICB2YXIgajtcbiAgICAgICAgdmFyIHZhbDtcbiAgICAgICAgdmFyIHByb3BzO1xuICAgICAgICBpZiAoY29tcGxleFByb3BzKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29tcGxleFByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbmFtZSA9IGNvbXBsZXhQcm9wc1tpXTtcbiAgICAgICAgICAgICAgICBjb21wbGV4T2JqcyA9IFtdO1xuICAgICAgICAgICAgICAgIC8vIGNvbGxlY3QgdGhlIHRyYWlsaW5nIG9iamVjdCB2YWx1ZXMsIHN0b3BwaW5nIHdoZW4gYSBub24tb2JqZWN0IGlzIGRpc2NvdmVyZWRcbiAgICAgICAgICAgICAgICBmb3IgKGogPSBwcm9wT2Jqcy5sZW5ndGggLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgICAgICAgICAgICAgICB2YWwgPSBwcm9wT2Jqc1tqXVtuYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIHZhbCkgeyAvLyBub24tbnVsbCBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXhPYmpzLnVuc2hpZnQodmFsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdFtuYW1lXSA9IHZhbDsgLy8gaWYgdGhlcmUgd2VyZSBubyBvYmplY3RzLCB0aGlzIHZhbHVlIHdpbGwgYmUgdXNlZFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIHRyYWlsaW5nIHZhbHVlcyB3ZXJlIG9iamVjdHMsIHVzZSB0aGUgbWVyZ2VkIHZhbHVlXG4gICAgICAgICAgICAgICAgaWYgKGNvbXBsZXhPYmpzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBkZXN0W25hbWVdID0gbWVyZ2VQcm9wcyhjb21wbGV4T2Jqcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGNvcHkgdmFsdWVzIGludG8gdGhlIGRlc3RpbmF0aW9uLCBnb2luZyBmcm9tIGxhc3QgdG8gZmlyc3RcbiAgICAgICAgZm9yIChpID0gcHJvcE9ianMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIHByb3BzID0gcHJvcE9ianNbaV07XG4gICAgICAgICAgICBmb3IgKG5hbWUgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShuYW1lIGluIGRlc3QpKSB7IC8vIGlmIGFscmVhZHkgYXNzaWduZWQgYnkgcHJldmlvdXMgcHJvcHMgb3IgY29tcGxleCBwcm9wcywgZG9uJ3QgcmVhc3NpZ25cbiAgICAgICAgICAgICAgICAgICAgZGVzdFtuYW1lXSA9IHByb3BzW25hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmlsdGVySGFzaChoYXNoLCBmdW5jKSB7XG4gICAgICAgIHZhciBmaWx0ZXJlZCA9IHt9O1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gaGFzaCkge1xuICAgICAgICAgICAgaWYgKGZ1bmMoaGFzaFtrZXldLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgZmlsdGVyZWRba2V5XSA9IGhhc2hba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsdGVyZWQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1hcEhhc2goaGFzaCwgZnVuYykge1xuICAgICAgICB2YXIgbmV3SGFzaCA9IHt9O1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gaGFzaCkge1xuICAgICAgICAgICAgbmV3SGFzaFtrZXldID0gZnVuYyhoYXNoW2tleV0sIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld0hhc2g7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFycmF5VG9IYXNoKGEpIHtcbiAgICAgICAgdmFyIGhhc2ggPSB7fTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBhXzEgPSBhOyBfaSA8IGFfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gYV8xW19pXTtcbiAgICAgICAgICAgIGhhc2hbaXRlbV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoYXNoO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYXNoVmFsdWVzVG9BcnJheShvYmopIHtcbiAgICAgICAgdmFyIGEgPSBbXTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICAgICAgYS5wdXNoKG9ialtrZXldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNQcm9wc0VxdWFsKG9iajAsIG9iajEpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iajApIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iajAsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gb2JqMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqMSkge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqMSwga2V5KSkge1xuICAgICAgICAgICAgICAgIGlmIChvYmowW2tleV0gIT09IG9iajFba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlRXZlbnRzKHJhd0V2ZW50cywgc291cmNlSWQsIGNhbGVuZGFyLCBhbGxvd09wZW5SYW5nZSkge1xuICAgICAgICB2YXIgZXZlbnRTdG9yZSA9IGNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHJhd0V2ZW50c18xID0gcmF3RXZlbnRzOyBfaSA8IHJhd0V2ZW50c18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHJhd0V2ZW50ID0gcmF3RXZlbnRzXzFbX2ldO1xuICAgICAgICAgICAgdmFyIHR1cGxlID0gcGFyc2VFdmVudChyYXdFdmVudCwgc291cmNlSWQsIGNhbGVuZGFyLCBhbGxvd09wZW5SYW5nZSk7XG4gICAgICAgICAgICBpZiAodHVwbGUpIHtcbiAgICAgICAgICAgICAgICBldmVudFR1cGxlVG9TdG9yZSh0dXBsZSwgZXZlbnRTdG9yZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV2ZW50U3RvcmU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGV2ZW50VHVwbGVUb1N0b3JlKHR1cGxlLCBldmVudFN0b3JlKSB7XG4gICAgICAgIGlmIChldmVudFN0b3JlID09PSB2b2lkIDApIHsgZXZlbnRTdG9yZSA9IGNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpOyB9XG4gICAgICAgIGV2ZW50U3RvcmUuZGVmc1t0dXBsZS5kZWYuZGVmSWRdID0gdHVwbGUuZGVmO1xuICAgICAgICBpZiAodHVwbGUuaW5zdGFuY2UpIHtcbiAgICAgICAgICAgIGV2ZW50U3RvcmUuaW5zdGFuY2VzW3R1cGxlLmluc3RhbmNlLmluc3RhbmNlSWRdID0gdHVwbGUuaW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV2ZW50U3RvcmU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGV4cGFuZFJlY3VycmluZyhldmVudFN0b3JlLCBmcmFtaW5nUmFuZ2UsIGNhbGVuZGFyKSB7XG4gICAgICAgIHZhciBkYXRlRW52ID0gY2FsZW5kYXIuZGF0ZUVudjtcbiAgICAgICAgdmFyIGRlZnMgPSBldmVudFN0b3JlLmRlZnMsIGluc3RhbmNlcyA9IGV2ZW50U3RvcmUuaW5zdGFuY2VzO1xuICAgICAgICAvLyByZW1vdmUgZXhpc3RpbmcgcmVjdXJyaW5nIGluc3RhbmNlc1xuICAgICAgICBpbnN0YW5jZXMgPSBmaWx0ZXJIYXNoKGluc3RhbmNlcywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gIWRlZnNbaW5zdGFuY2UuZGVmSWRdLnJlY3VycmluZ0RlZjtcbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAodmFyIGRlZklkIGluIGRlZnMpIHtcbiAgICAgICAgICAgIHZhciBkZWYgPSBkZWZzW2RlZklkXTtcbiAgICAgICAgICAgIGlmIChkZWYucmVjdXJyaW5nRGVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gZGVmLnJlY3VycmluZ0RlZi5kdXJhdGlvbjtcbiAgICAgICAgICAgICAgICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gZGVmLmFsbERheSA/XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxlbmRhci5kZWZhdWx0QWxsRGF5RXZlbnREdXJhdGlvbiA6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxlbmRhci5kZWZhdWx0VGltZWRFdmVudER1cmF0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRzID0gZXhwYW5kUmVjdXJyaW5nUmFuZ2VzKGRlZiwgZHVyYXRpb24sIGZyYW1pbmdSYW5nZSwgY2FsZW5kYXIuZGF0ZUVudiwgY2FsZW5kYXIucGx1Z2luU3lzdGVtLmhvb2tzLnJlY3VycmluZ1R5cGVzKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHN0YXJ0c18xID0gc3RhcnRzOyBfaSA8IHN0YXJ0c18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBzdGFydHNfMVtfaV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZUV2ZW50SW5zdGFuY2UoZGVmSWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogZGF0ZUVudi5hZGQoc3RhcnQsIGR1cmF0aW9uKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VzW2luc3RhbmNlLmluc3RhbmNlSWRdID0gaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRlZnM6IGRlZnMsIGluc3RhbmNlczogaW5zdGFuY2VzIH07XG4gICAgfVxuICAgIC8vIHJldHJpZXZlcyBldmVudHMgdGhhdCBoYXZlIHRoZSBzYW1lIGdyb3VwSWQgYXMgdGhlIGluc3RhbmNlIHNwZWNpZmllZCBieSBgaW5zdGFuY2VJZGBcbiAgICAvLyBvciB0aGV5IGFyZSB0aGUgc2FtZSBhcyB0aGUgaW5zdGFuY2UuXG4gICAgLy8gd2h5IG1pZ2h0IGluc3RhbmNlSWQgbm90IGJlIGluIHRoZSBzdG9yZT8gYW4gZXZlbnQgZnJvbSBhbm90aGVyIGNhbGVuZGFyP1xuICAgIGZ1bmN0aW9uIGdldFJlbGV2YW50RXZlbnRzKGV2ZW50U3RvcmUsIGluc3RhbmNlSWQpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gZXZlbnRTdG9yZS5pbnN0YW5jZXNbaW5zdGFuY2VJZF07XG4gICAgICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgICAgICAgdmFyIGRlZl8xID0gZXZlbnRTdG9yZS5kZWZzW2luc3RhbmNlLmRlZklkXTtcbiAgICAgICAgICAgIC8vIGdldCBldmVudHMvaW5zdGFuY2VzIHdpdGggc2FtZSBncm91cFxuICAgICAgICAgICAgdmFyIG5ld1N0b3JlID0gZmlsdGVyRXZlbnRTdG9yZURlZnMoZXZlbnRTdG9yZSwgZnVuY3Rpb24gKGxvb2tEZWYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNFdmVudERlZnNHcm91cGVkKGRlZl8xLCBsb29rRGVmKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gYWRkIHRoZSBvcmlnaW5hbFxuICAgICAgICAgICAgLy8gVE9ETzogd2lzaCB3ZSBjb3VsZCB1c2UgZXZlbnRUdXBsZVRvU3RvcmUgb3Igc29tZXRoaW5nIGxpa2UgaXRcbiAgICAgICAgICAgIG5ld1N0b3JlLmRlZnNbZGVmXzEuZGVmSWRdID0gZGVmXzE7XG4gICAgICAgICAgICBuZXdTdG9yZS5pbnN0YW5jZXNbaW5zdGFuY2UuaW5zdGFuY2VJZF0gPSBpbnN0YW5jZTtcbiAgICAgICAgICAgIHJldHVybiBuZXdTdG9yZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3JlYXRlRW1wdHlFdmVudFN0b3JlKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzRXZlbnREZWZzR3JvdXBlZChkZWYwLCBkZWYxKSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKGRlZjAuZ3JvdXBJZCAmJiBkZWYwLmdyb3VwSWQgPT09IGRlZjEuZ3JvdXBJZCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybVJhd0V2ZW50cyhyYXdFdmVudHMsIGV2ZW50U291cmNlLCBjYWxlbmRhcikge1xuICAgICAgICB2YXIgY2FsRWFjaFRyYW5zZm9ybSA9IGNhbGVuZGFyLm9wdCgnZXZlbnREYXRhVHJhbnNmb3JtJyk7XG4gICAgICAgIHZhciBzb3VyY2VFYWNoVHJhbnNmb3JtID0gZXZlbnRTb3VyY2UgPyBldmVudFNvdXJjZS5ldmVudERhdGFUcmFuc2Zvcm0gOiBudWxsO1xuICAgICAgICBpZiAoc291cmNlRWFjaFRyYW5zZm9ybSkge1xuICAgICAgICAgICAgcmF3RXZlbnRzID0gdHJhbnNmb3JtRWFjaFJhd0V2ZW50KHJhd0V2ZW50cywgc291cmNlRWFjaFRyYW5zZm9ybSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbEVhY2hUcmFuc2Zvcm0pIHtcbiAgICAgICAgICAgIHJhd0V2ZW50cyA9IHRyYW5zZm9ybUVhY2hSYXdFdmVudChyYXdFdmVudHMsIGNhbEVhY2hUcmFuc2Zvcm0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByYXdFdmVudHM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybUVhY2hSYXdFdmVudChyYXdFdmVudHMsIGZ1bmMpIHtcbiAgICAgICAgdmFyIHJlZmluZWRFdmVudHM7XG4gICAgICAgIGlmICghZnVuYykge1xuICAgICAgICAgICAgcmVmaW5lZEV2ZW50cyA9IHJhd0V2ZW50cztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlZmluZWRFdmVudHMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgcmF3RXZlbnRzXzIgPSByYXdFdmVudHM7IF9pIDwgcmF3RXZlbnRzXzIubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJhd0V2ZW50ID0gcmF3RXZlbnRzXzJbX2ldO1xuICAgICAgICAgICAgICAgIHZhciByZWZpbmVkRXZlbnQgPSBmdW5jKHJhd0V2ZW50KTtcbiAgICAgICAgICAgICAgICBpZiAocmVmaW5lZEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZmluZWRFdmVudHMucHVzaChyZWZpbmVkRXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyZWZpbmVkRXZlbnQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZWZpbmVkRXZlbnRzLnB1c2gocmF3RXZlbnQpO1xuICAgICAgICAgICAgICAgIH0gLy8gaWYgYSBkaWZmZXJlbnQgZmFsc3kgdmFsdWUsIGRvIG5vdGhpbmdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVmaW5lZEV2ZW50cztcbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlRW1wdHlFdmVudFN0b3JlKCkge1xuICAgICAgICByZXR1cm4geyBkZWZzOiB7fSwgaW5zdGFuY2VzOiB7fSB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBtZXJnZUV2ZW50U3RvcmVzKHN0b3JlMCwgc3RvcmUxKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkZWZzOiBfX2Fzc2lnbih7fSwgc3RvcmUwLmRlZnMsIHN0b3JlMS5kZWZzKSxcbiAgICAgICAgICAgIGluc3RhbmNlczogX19hc3NpZ24oe30sIHN0b3JlMC5pbnN0YW5jZXMsIHN0b3JlMS5pbnN0YW5jZXMpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZpbHRlckV2ZW50U3RvcmVEZWZzKGV2ZW50U3RvcmUsIGZpbHRlckZ1bmMpIHtcbiAgICAgICAgdmFyIGRlZnMgPSBmaWx0ZXJIYXNoKGV2ZW50U3RvcmUuZGVmcywgZmlsdGVyRnVuYyk7XG4gICAgICAgIHZhciBpbnN0YW5jZXMgPSBmaWx0ZXJIYXNoKGV2ZW50U3RvcmUuaW5zdGFuY2VzLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWZzW2luc3RhbmNlLmRlZklkXTsgLy8gc3RpbGwgZXhpc3RzP1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHsgZGVmczogZGVmcywgaW5zdGFuY2VzOiBpbnN0YW5jZXMgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZVJhbmdlKGlucHV0LCBkYXRlRW52KSB7XG4gICAgICAgIHZhciBzdGFydCA9IG51bGw7XG4gICAgICAgIHZhciBlbmQgPSBudWxsO1xuICAgICAgICBpZiAoaW5wdXQuc3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gZGF0ZUVudi5jcmVhdGVNYXJrZXIoaW5wdXQuc3RhcnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnB1dC5lbmQpIHtcbiAgICAgICAgICAgIGVuZCA9IGRhdGVFbnYuY3JlYXRlTWFya2VyKGlucHV0LmVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzdGFydCAmJiAhZW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnQgJiYgZW5kICYmIGVuZCA8IHN0YXJ0KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kIH07XG4gICAgfVxuICAgIC8vIFNJREUtRUZGRUNUOiB3aWxsIG11dGF0ZSByYW5nZXMuXG4gICAgLy8gV2lsbCByZXR1cm4gYSBuZXcgYXJyYXkgcmVzdWx0LlxuICAgIGZ1bmN0aW9uIGludmVydFJhbmdlcyhyYW5nZXMsIGNvbnN0cmFpbnRSYW5nZSkge1xuICAgICAgICB2YXIgaW52ZXJ0ZWRSYW5nZXMgPSBbXTtcbiAgICAgICAgdmFyIHN0YXJ0ID0gY29uc3RyYWludFJhbmdlLnN0YXJ0OyAvLyB0aGUgZW5kIG9mIHRoZSBwcmV2aW91cyByYW5nZS4gdGhlIHN0YXJ0IG9mIHRoZSBuZXcgcmFuZ2VcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBkYXRlUmFuZ2U7XG4gICAgICAgIC8vIHJhbmdlcyBuZWVkIHRvIGJlIGluIG9yZGVyLiByZXF1aXJlZCBmb3Igb3VyIGRhdGUtd2Fsa2luZyBhbGdvcml0aG1cbiAgICAgICAgcmFuZ2VzLnNvcnQoY29tcGFyZVJhbmdlcyk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGRhdGVSYW5nZSA9IHJhbmdlc1tpXTtcbiAgICAgICAgICAgIC8vIGFkZCB0aGUgc3BhbiBvZiB0aW1lIGJlZm9yZSB0aGUgZXZlbnQgKGlmIHRoZXJlIGlzIGFueSlcbiAgICAgICAgICAgIGlmIChkYXRlUmFuZ2Uuc3RhcnQgPiBzdGFydCkgeyAvLyBjb21wYXJlIG1pbGxpc2Vjb25kIHRpbWUgKHNraXAgYW55IGFtYmlnIGxvZ2ljKVxuICAgICAgICAgICAgICAgIGludmVydGVkUmFuZ2VzLnB1c2goeyBzdGFydDogc3RhcnQsIGVuZDogZGF0ZVJhbmdlLnN0YXJ0IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGVSYW5nZS5lbmQgPiBzdGFydCkge1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gZGF0ZVJhbmdlLmVuZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBhZGQgdGhlIHNwYW4gb2YgdGltZSBhZnRlciB0aGUgbGFzdCBldmVudCAoaWYgdGhlcmUgaXMgYW55KVxuICAgICAgICBpZiAoc3RhcnQgPCBjb25zdHJhaW50UmFuZ2UuZW5kKSB7IC8vIGNvbXBhcmUgbWlsbGlzZWNvbmQgdGltZSAoc2tpcCBhbnkgYW1iaWcgbG9naWMpXG4gICAgICAgICAgICBpbnZlcnRlZFJhbmdlcy5wdXNoKHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGNvbnN0cmFpbnRSYW5nZS5lbmQgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGludmVydGVkUmFuZ2VzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wYXJlUmFuZ2VzKHJhbmdlMCwgcmFuZ2UxKSB7XG4gICAgICAgIHJldHVybiByYW5nZTAuc3RhcnQudmFsdWVPZigpIC0gcmFuZ2UxLnN0YXJ0LnZhbHVlT2YoKTsgLy8gZWFybGllciByYW5nZXMgZ28gZmlyc3RcbiAgICB9XG4gICAgZnVuY3Rpb24gaW50ZXJzZWN0UmFuZ2VzKHJhbmdlMCwgcmFuZ2UxKSB7XG4gICAgICAgIHZhciBzdGFydCA9IHJhbmdlMC5zdGFydDtcbiAgICAgICAgdmFyIGVuZCA9IHJhbmdlMC5lbmQ7XG4gICAgICAgIHZhciBuZXdSYW5nZSA9IG51bGw7XG4gICAgICAgIGlmIChyYW5nZTEuc3RhcnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChzdGFydCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gcmFuZ2UxLnN0YXJ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSBuZXcgRGF0ZShNYXRoLm1heChzdGFydC52YWx1ZU9mKCksIHJhbmdlMS5zdGFydC52YWx1ZU9mKCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmFuZ2UxLmVuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoZW5kID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZW5kID0gcmFuZ2UxLmVuZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVuZCA9IG5ldyBEYXRlKE1hdGgubWluKGVuZC52YWx1ZU9mKCksIHJhbmdlMS5lbmQudmFsdWVPZigpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0ID09PSBudWxsIHx8IGVuZCA9PT0gbnVsbCB8fCBzdGFydCA8IGVuZCkge1xuICAgICAgICAgICAgbmV3UmFuZ2UgPSB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3UmFuZ2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJhbmdlc0VxdWFsKHJhbmdlMCwgcmFuZ2UxKSB7XG4gICAgICAgIHJldHVybiAocmFuZ2UwLnN0YXJ0ID09PSBudWxsID8gbnVsbCA6IHJhbmdlMC5zdGFydC52YWx1ZU9mKCkpID09PSAocmFuZ2UxLnN0YXJ0ID09PSBudWxsID8gbnVsbCA6IHJhbmdlMS5zdGFydC52YWx1ZU9mKCkpICYmXG4gICAgICAgICAgICAocmFuZ2UwLmVuZCA9PT0gbnVsbCA/IG51bGwgOiByYW5nZTAuZW5kLnZhbHVlT2YoKSkgPT09IChyYW5nZTEuZW5kID09PSBudWxsID8gbnVsbCA6IHJhbmdlMS5lbmQudmFsdWVPZigpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmFuZ2VzSW50ZXJzZWN0KHJhbmdlMCwgcmFuZ2UxKSB7XG4gICAgICAgIHJldHVybiAocmFuZ2UwLmVuZCA9PT0gbnVsbCB8fCByYW5nZTEuc3RhcnQgPT09IG51bGwgfHwgcmFuZ2UwLmVuZCA+IHJhbmdlMS5zdGFydCkgJiZcbiAgICAgICAgICAgIChyYW5nZTAuc3RhcnQgPT09IG51bGwgfHwgcmFuZ2UxLmVuZCA9PT0gbnVsbCB8fCByYW5nZTAuc3RhcnQgPCByYW5nZTEuZW5kKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmFuZ2VDb250YWluc1JhbmdlKG91dGVyUmFuZ2UsIGlubmVyUmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIChvdXRlclJhbmdlLnN0YXJ0ID09PSBudWxsIHx8IChpbm5lclJhbmdlLnN0YXJ0ICE9PSBudWxsICYmIGlubmVyUmFuZ2Uuc3RhcnQgPj0gb3V0ZXJSYW5nZS5zdGFydCkpICYmXG4gICAgICAgICAgICAob3V0ZXJSYW5nZS5lbmQgPT09IG51bGwgfHwgKGlubmVyUmFuZ2UuZW5kICE9PSBudWxsICYmIGlubmVyUmFuZ2UuZW5kIDw9IG91dGVyUmFuZ2UuZW5kKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJhbmdlQ29udGFpbnNNYXJrZXIocmFuZ2UsIGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIChyYW5nZS5zdGFydCA9PT0gbnVsbCB8fCBkYXRlID49IHJhbmdlLnN0YXJ0KSAmJlxuICAgICAgICAgICAgKHJhbmdlLmVuZCA9PT0gbnVsbCB8fCBkYXRlIDwgcmFuZ2UuZW5kKTtcbiAgICB9XG4gICAgLy8gSWYgdGhlIGdpdmVuIGRhdGUgaXMgbm90IHdpdGhpbiB0aGUgZ2l2ZW4gcmFuZ2UsIG1vdmUgaXQgaW5zaWRlLlxuICAgIC8vIChJZiBpdCdzIHBhc3QgdGhlIGVuZCwgbWFrZSBpdCBvbmUgbWlsbGlzZWNvbmQgYmVmb3JlIHRoZSBlbmQpLlxuICAgIGZ1bmN0aW9uIGNvbnN0cmFpbk1hcmtlclRvUmFuZ2UoZGF0ZSwgcmFuZ2UpIHtcbiAgICAgICAgaWYgKHJhbmdlLnN0YXJ0ICE9IG51bGwgJiYgZGF0ZSA8IHJhbmdlLnN0YXJ0KSB7XG4gICAgICAgICAgICByZXR1cm4gcmFuZ2Uuc3RhcnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJhbmdlLmVuZCAhPSBudWxsICYmIGRhdGUgPj0gcmFuZ2UuZW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUocmFuZ2UuZW5kLnZhbHVlT2YoKSAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUV4YWN0KGFycmF5LCBleGFjdFZhbCkge1xuICAgICAgICB2YXIgcmVtb3ZlQ250ID0gMDtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IGFycmF5Lmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGFycmF5W2ldID09PSBleGFjdFZhbCkge1xuICAgICAgICAgICAgICAgIGFycmF5LnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICByZW1vdmVDbnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVtb3ZlQ250O1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0FycmF5c0VxdWFsKGEwLCBhMSkge1xuICAgICAgICB2YXIgbGVuID0gYTAubGVuZ3RoO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgaWYgKGxlbiAhPT0gYTEubGVuZ3RoKSB7IC8vIG5vdCBhcnJheT8gb3Igbm90IHNhbWUgbGVuZ3RoP1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKGEwW2ldICE9PSBhMVtpXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZW1vaXplKHdvcmtlckZ1bmMpIHtcbiAgICAgICAgdmFyIGFyZ3M7XG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIWFyZ3MgfHwgIWlzQXJyYXlzRXF1YWwoYXJncywgYXJndW1lbnRzKSkge1xuICAgICAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICAgICAgcmVzID0gd29ya2VyRnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLypcbiAgICBhbHdheXMgZXhlY3V0ZXMgdGhlIHdvcmtlckZ1bmMsIGJ1dCBpZiB0aGUgcmVzdWx0IGlzIGVxdWFsIHRvIHRoZSBwcmV2aW91cyByZXN1bHQsXG4gICAgcmV0dXJuIHRoZSBwcmV2aW91cyByZXN1bHQgaW5zdGVhZC5cbiAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemVPdXRwdXQod29ya2VyRnVuYywgZXF1YWxpdHlGdW5jKSB7XG4gICAgICAgIHZhciBjYWNoZWRSZXMgPSBudWxsO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG5ld1JlcyA9IHdvcmtlckZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIGlmIChjYWNoZWRSZXMgPT09IG51bGwgfHwgIShjYWNoZWRSZXMgPT09IG5ld1JlcyB8fCBlcXVhbGl0eUZ1bmMoY2FjaGVkUmVzLCBuZXdSZXMpKSkge1xuICAgICAgICAgICAgICAgIGNhY2hlZFJlcyA9IG5ld1JlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRSZXM7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIEVYVEVOREVEX1NFVFRJTkdTX0FORF9TRVZFUklUSUVTID0ge1xuICAgICAgICB3ZWVrOiAzLFxuICAgICAgICBzZXBhcmF0b3I6IDAsXG4gICAgICAgIG9taXRaZXJvTWludXRlOiAwLFxuICAgICAgICBtZXJpZGllbTogMCxcbiAgICAgICAgb21pdENvbW1hczogMFxuICAgIH07XG4gICAgdmFyIFNUQU5EQVJEX0RBVEVfUFJPUF9TRVZFUklUSUVTID0ge1xuICAgICAgICB0aW1lWm9uZU5hbWU6IDcsXG4gICAgICAgIGVyYTogNixcbiAgICAgICAgeWVhcjogNSxcbiAgICAgICAgbW9udGg6IDQsXG4gICAgICAgIGRheTogMixcbiAgICAgICAgd2Vla2RheTogMixcbiAgICAgICAgaG91cjogMSxcbiAgICAgICAgbWludXRlOiAxLFxuICAgICAgICBzZWNvbmQ6IDFcbiAgICB9O1xuICAgIHZhciBNRVJJRElFTV9SRSA9IC9cXHMqKFthcF0pXFwuP21cXC4/L2k7IC8vIGVhdHMgdXAgbGVhZGluZyBzcGFjZXMgdG9vXG4gICAgdmFyIENPTU1BX1JFID0gLywvZzsgLy8gd2UgbmVlZCByZSBmb3IgZ2xvYmFsbmVzc1xuICAgIHZhciBNVUxUSV9TUEFDRV9SRSA9IC9cXHMrL2c7XG4gICAgdmFyIExUUl9SRSA9IC9cXHUyMDBlL2c7IC8vIGNvbnRyb2wgY2hhcmFjdGVyXG4gICAgdmFyIFVUQ19SRSA9IC9VVEN8R01ULztcbiAgICB2YXIgTmF0aXZlRm9ybWF0dGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBOYXRpdmVGb3JtYXR0ZXIoZm9ybWF0U2V0dGluZ3MpIHtcbiAgICAgICAgICAgIHZhciBzdGFuZGFyZERhdGVQcm9wcyA9IHt9O1xuICAgICAgICAgICAgdmFyIGV4dGVuZGVkU2V0dGluZ3MgPSB7fTtcbiAgICAgICAgICAgIHZhciBzZXZlcml0eSA9IDA7XG4gICAgICAgICAgICBmb3IgKHZhciBuYW1lXzEgaW4gZm9ybWF0U2V0dGluZ3MpIHtcbiAgICAgICAgICAgICAgICBpZiAobmFtZV8xIGluIEVYVEVOREVEX1NFVFRJTkdTX0FORF9TRVZFUklUSUVTKSB7XG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZGVkU2V0dGluZ3NbbmFtZV8xXSA9IGZvcm1hdFNldHRpbmdzW25hbWVfMV07XG4gICAgICAgICAgICAgICAgICAgIHNldmVyaXR5ID0gTWF0aC5tYXgoRVhURU5ERURfU0VUVElOR1NfQU5EX1NFVkVSSVRJRVNbbmFtZV8xXSwgc2V2ZXJpdHkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhbmRhcmREYXRlUHJvcHNbbmFtZV8xXSA9IGZvcm1hdFNldHRpbmdzW25hbWVfMV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lXzEgaW4gU1RBTkRBUkRfREFURV9QUk9QX1NFVkVSSVRJRVMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldmVyaXR5ID0gTWF0aC5tYXgoU1RBTkRBUkRfREFURV9QUk9QX1NFVkVSSVRJRVNbbmFtZV8xXSwgc2V2ZXJpdHkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zdGFuZGFyZERhdGVQcm9wcyA9IHN0YW5kYXJkRGF0ZVByb3BzO1xuICAgICAgICAgICAgdGhpcy5leHRlbmRlZFNldHRpbmdzID0gZXh0ZW5kZWRTZXR0aW5ncztcbiAgICAgICAgICAgIHRoaXMuc2V2ZXJpdHkgPSBzZXZlcml0eTtcbiAgICAgICAgICAgIHRoaXMuYnVpbGRGb3JtYXR0aW5nRnVuYyA9IG1lbW9pemUoYnVpbGRGb3JtYXR0aW5nRnVuYyk7XG4gICAgICAgIH1cbiAgICAgICAgTmF0aXZlRm9ybWF0dGVyLnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbiAoZGF0ZSwgY29udGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRGb3JtYXR0aW5nRnVuYyh0aGlzLnN0YW5kYXJkRGF0ZVByb3BzLCB0aGlzLmV4dGVuZGVkU2V0dGluZ3MsIGNvbnRleHQpKGRhdGUpO1xuICAgICAgICB9O1xuICAgICAgICBOYXRpdmVGb3JtYXR0ZXIucHJvdG90eXBlLmZvcm1hdFJhbmdlID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQsIGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIHN0YW5kYXJkRGF0ZVByb3BzID0gX2Euc3RhbmRhcmREYXRlUHJvcHMsIGV4dGVuZGVkU2V0dGluZ3MgPSBfYS5leHRlbmRlZFNldHRpbmdzO1xuICAgICAgICAgICAgdmFyIGRpZmZTZXZlcml0eSA9IGNvbXB1dGVNYXJrZXJEaWZmU2V2ZXJpdHkoc3RhcnQubWFya2VyLCBlbmQubWFya2VyLCBjb250ZXh0LmNhbGVuZGFyU3lzdGVtKTtcbiAgICAgICAgICAgIGlmICghZGlmZlNldmVyaXR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KHN0YXJ0LCBjb250ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBiaWdnZXN0VW5pdEZvclBhcnRpYWwgPSBkaWZmU2V2ZXJpdHk7XG4gICAgICAgICAgICBpZiAoYmlnZ2VzdFVuaXRGb3JQYXJ0aWFsID4gMSAmJiAvLyB0aGUgdHdvIGRhdGVzIGFyZSBkaWZmZXJlbnQgaW4gYSB3YXkgdGhhdCdzIGxhcmdlciBzY2FsZSB0aGFuIHRpbWVcbiAgICAgICAgICAgICAgICAoc3RhbmRhcmREYXRlUHJvcHMueWVhciA9PT0gJ251bWVyaWMnIHx8IHN0YW5kYXJkRGF0ZVByb3BzLnllYXIgPT09ICcyLWRpZ2l0JykgJiZcbiAgICAgICAgICAgICAgICAoc3RhbmRhcmREYXRlUHJvcHMubW9udGggPT09ICdudW1lcmljJyB8fCBzdGFuZGFyZERhdGVQcm9wcy5tb250aCA9PT0gJzItZGlnaXQnKSAmJlxuICAgICAgICAgICAgICAgIChzdGFuZGFyZERhdGVQcm9wcy5kYXkgPT09ICdudW1lcmljJyB8fCBzdGFuZGFyZERhdGVQcm9wcy5kYXkgPT09ICcyLWRpZ2l0JykpIHtcbiAgICAgICAgICAgICAgICBiaWdnZXN0VW5pdEZvclBhcnRpYWwgPSAxOyAvLyBtYWtlIGl0IGxvb2sgbGlrZSB0aGUgZGF0ZXMgYXJlIG9ubHkgZGlmZmVyZW50IGluIHRlcm1zIG9mIHRpbWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBmdWxsMCA9IHRoaXMuZm9ybWF0KHN0YXJ0LCBjb250ZXh0KTtcbiAgICAgICAgICAgIHZhciBmdWxsMSA9IHRoaXMuZm9ybWF0KGVuZCwgY29udGV4dCk7XG4gICAgICAgICAgICBpZiAoZnVsbDAgPT09IGZ1bGwxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bGwwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHBhcnRpYWxEYXRlUHJvcHMgPSBjb21wdXRlUGFydGlhbEZvcm1hdHRpbmdPcHRpb25zKHN0YW5kYXJkRGF0ZVByb3BzLCBiaWdnZXN0VW5pdEZvclBhcnRpYWwpO1xuICAgICAgICAgICAgdmFyIHBhcnRpYWxGb3JtYXR0aW5nRnVuYyA9IGJ1aWxkRm9ybWF0dGluZ0Z1bmMocGFydGlhbERhdGVQcm9wcywgZXh0ZW5kZWRTZXR0aW5ncywgY29udGV4dCk7XG4gICAgICAgICAgICB2YXIgcGFydGlhbDAgPSBwYXJ0aWFsRm9ybWF0dGluZ0Z1bmMoc3RhcnQpO1xuICAgICAgICAgICAgdmFyIHBhcnRpYWwxID0gcGFydGlhbEZvcm1hdHRpbmdGdW5jKGVuZCk7XG4gICAgICAgICAgICB2YXIgaW5zZXJ0aW9uID0gZmluZENvbW1vbkluc2VydGlvbihmdWxsMCwgcGFydGlhbDAsIGZ1bGwxLCBwYXJ0aWFsMSk7XG4gICAgICAgICAgICB2YXIgc2VwYXJhdG9yID0gZXh0ZW5kZWRTZXR0aW5ncy5zZXBhcmF0b3IgfHwgJyc7XG4gICAgICAgICAgICBpZiAoaW5zZXJ0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluc2VydGlvbi5iZWZvcmUgKyBwYXJ0aWFsMCArIHNlcGFyYXRvciArIHBhcnRpYWwxICsgaW5zZXJ0aW9uLmFmdGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZ1bGwwICsgc2VwYXJhdG9yICsgZnVsbDE7XG4gICAgICAgIH07XG4gICAgICAgIE5hdGl2ZUZvcm1hdHRlci5wcm90b3R5cGUuZ2V0TGFyZ2VzdFVuaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuc2V2ZXJpdHkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd5ZWFyJztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnbW9udGgnO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd3ZWVrJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2RheSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBOYXRpdmVGb3JtYXR0ZXI7XG4gICAgfSgpKTtcbiAgICBmdW5jdGlvbiBidWlsZEZvcm1hdHRpbmdGdW5jKHN0YW5kYXJkRGF0ZVByb3BzLCBleHRlbmRlZFNldHRpbmdzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBzdGFuZGFyZERhdGVQcm9wQ250ID0gT2JqZWN0LmtleXMoc3RhbmRhcmREYXRlUHJvcHMpLmxlbmd0aDtcbiAgICAgICAgaWYgKHN0YW5kYXJkRGF0ZVByb3BDbnQgPT09IDEgJiYgc3RhbmRhcmREYXRlUHJvcHMudGltZVpvbmVOYW1lID09PSAnc2hvcnQnKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0VGltZVpvbmVPZmZzZXQoZGF0ZS50aW1lWm9uZU9mZnNldCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFuZGFyZERhdGVQcm9wQ250ID09PSAwICYmIGV4dGVuZGVkU2V0dGluZ3Mud2Vlaykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdFdlZWtOdW1iZXIoY29udGV4dC5jb21wdXRlV2Vla051bWJlcihkYXRlLm1hcmtlciksIGNvbnRleHQud2Vla0xhYmVsLCBjb250ZXh0LmxvY2FsZSwgZXh0ZW5kZWRTZXR0aW5ncy53ZWVrKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1aWxkTmF0aXZlRm9ybWF0dGluZ0Z1bmMoc3RhbmRhcmREYXRlUHJvcHMsIGV4dGVuZGVkU2V0dGluZ3MsIGNvbnRleHQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBidWlsZE5hdGl2ZUZvcm1hdHRpbmdGdW5jKHN0YW5kYXJkRGF0ZVByb3BzLCBleHRlbmRlZFNldHRpbmdzLCBjb250ZXh0KSB7XG4gICAgICAgIHN0YW5kYXJkRGF0ZVByb3BzID0gX19hc3NpZ24oe30sIHN0YW5kYXJkRGF0ZVByb3BzKTsgLy8gY29weVxuICAgICAgICBleHRlbmRlZFNldHRpbmdzID0gX19hc3NpZ24oe30sIGV4dGVuZGVkU2V0dGluZ3MpOyAvLyBjb3B5XG4gICAgICAgIHNhbml0aXplU2V0dGluZ3Moc3RhbmRhcmREYXRlUHJvcHMsIGV4dGVuZGVkU2V0dGluZ3MpO1xuICAgICAgICBzdGFuZGFyZERhdGVQcm9wcy50aW1lWm9uZSA9ICdVVEMnOyAvLyB3ZSBsZXZlcmFnZSB0aGUgb25seSBndWFyYW50ZWVkIHRpbWVab25lIGZvciBvdXIgVVRDIG1hcmtlcnNcbiAgICAgICAgdmFyIG5vcm1hbEZvcm1hdCA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGNvbnRleHQubG9jYWxlLmNvZGVzLCBzdGFuZGFyZERhdGVQcm9wcyk7XG4gICAgICAgIHZhciB6ZXJvRm9ybWF0OyAvLyBuZWVkZWQ/XG4gICAgICAgIGlmIChleHRlbmRlZFNldHRpbmdzLm9taXRaZXJvTWludXRlKSB7XG4gICAgICAgICAgICB2YXIgemVyb1Byb3BzID0gX19hc3NpZ24oe30sIHN0YW5kYXJkRGF0ZVByb3BzKTtcbiAgICAgICAgICAgIGRlbGV0ZSB6ZXJvUHJvcHMubWludXRlOyAvLyBzZWNvbmRzIGFuZCBtcyB3ZXJlIGFscmVhZHkgY29uc2lkZXJlZCBpbiBzYW5pdGl6ZVNldHRpbmdzXG4gICAgICAgICAgICB6ZXJvRm9ybWF0ID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoY29udGV4dC5sb2NhbGUuY29kZXMsIHplcm9Qcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICAgICAgICB2YXIgbWFya2VyID0gZGF0ZS5tYXJrZXI7XG4gICAgICAgICAgICB2YXIgZm9ybWF0O1xuICAgICAgICAgICAgaWYgKHplcm9Gb3JtYXQgJiYgIW1hcmtlci5nZXRVVENNaW51dGVzKCkpIHtcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSB6ZXJvRm9ybWF0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gbm9ybWFsRm9ybWF0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHMgPSBmb3JtYXQuZm9ybWF0KG1hcmtlcik7XG4gICAgICAgICAgICByZXR1cm4gcG9zdFByb2Nlc3MocywgZGF0ZSwgc3RhbmRhcmREYXRlUHJvcHMsIGV4dGVuZGVkU2V0dGluZ3MsIGNvbnRleHQpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBzYW5pdGl6ZVNldHRpbmdzKHN0YW5kYXJkRGF0ZVByb3BzLCBleHRlbmRlZFNldHRpbmdzKSB7XG4gICAgICAgIC8vIGRlYWwgd2l0aCBhIGJyb3dzZXIgaW5jb25zaXN0ZW5jeSB3aGVyZSBmb3JtYXR0aW5nIHRoZSB0aW1lem9uZVxuICAgICAgICAvLyByZXF1aXJlcyB0aGF0IHRoZSBob3VyL21pbnV0ZSBiZSBwcmVzZW50LlxuICAgICAgICBpZiAoc3RhbmRhcmREYXRlUHJvcHMudGltZVpvbmVOYW1lKSB7XG4gICAgICAgICAgICBpZiAoIXN0YW5kYXJkRGF0ZVByb3BzLmhvdXIpIHtcbiAgICAgICAgICAgICAgICBzdGFuZGFyZERhdGVQcm9wcy5ob3VyID0gJzItZGlnaXQnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzdGFuZGFyZERhdGVQcm9wcy5taW51dGUpIHtcbiAgICAgICAgICAgICAgICBzdGFuZGFyZERhdGVQcm9wcy5taW51dGUgPSAnMi1kaWdpdCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gb25seSBzdXBwb3J0IHNob3J0IHRpbWV6b25lIG5hbWVzXG4gICAgICAgIGlmIChzdGFuZGFyZERhdGVQcm9wcy50aW1lWm9uZU5hbWUgPT09ICdsb25nJykge1xuICAgICAgICAgICAgc3RhbmRhcmREYXRlUHJvcHMudGltZVpvbmVOYW1lID0gJ3Nob3J0JztcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiByZXF1ZXN0aW5nIHRvIGRpc3BsYXkgc2Vjb25kcywgTVVTVCBkaXNwbGF5IG1pbnV0ZXNcbiAgICAgICAgaWYgKGV4dGVuZGVkU2V0dGluZ3Mub21pdFplcm9NaW51dGUgJiYgKHN0YW5kYXJkRGF0ZVByb3BzLnNlY29uZCB8fCBzdGFuZGFyZERhdGVQcm9wcy5taWxsaXNlY29uZCkpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBleHRlbmRlZFNldHRpbmdzLm9taXRaZXJvTWludXRlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBvc3RQcm9jZXNzKHMsIGRhdGUsIHN0YW5kYXJkRGF0ZVByb3BzLCBleHRlbmRlZFNldHRpbmdzLCBjb250ZXh0KSB7XG4gICAgICAgIHMgPSBzLnJlcGxhY2UoTFRSX1JFLCAnJyk7IC8vIHJlbW92ZSBsZWZ0LXRvLXJpZ2h0IGNvbnRyb2wgY2hhcnMuIGRvIGZpcnN0LiBnb29kIGZvciBvdGhlciByZWdleGVzXG4gICAgICAgIGlmIChzdGFuZGFyZERhdGVQcm9wcy50aW1lWm9uZU5hbWUgPT09ICdzaG9ydCcpIHtcbiAgICAgICAgICAgIHMgPSBpbmplY3RUem9TdHIocywgKGNvbnRleHQudGltZVpvbmUgPT09ICdVVEMnIHx8IGRhdGUudGltZVpvbmVPZmZzZXQgPT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgICdVVEMnIDogLy8gaW1wb3J0YW50IHRvIG5vcm1hbGl6ZSBmb3IgSUUsIHdoaWNoIGRvZXMgXCJHTVRcIlxuICAgICAgICAgICAgICAgIGZvcm1hdFRpbWVab25lT2Zmc2V0KGRhdGUudGltZVpvbmVPZmZzZXQpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXh0ZW5kZWRTZXR0aW5ncy5vbWl0Q29tbWFzKSB7XG4gICAgICAgICAgICBzID0gcy5yZXBsYWNlKENPTU1BX1JFLCAnJykudHJpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleHRlbmRlZFNldHRpbmdzLm9taXRaZXJvTWludXRlKSB7XG4gICAgICAgICAgICBzID0gcy5yZXBsYWNlKCc6MDAnLCAnJyk7IC8vIHplcm9Gb3JtYXQgZG9lc24ndCBhbHdheXMgYWNoaWV2ZSB0aGlzXG4gICAgICAgIH1cbiAgICAgICAgLy8gXiBkbyBhbnl0aGluZyB0aGF0IG1pZ2h0IGNyZWF0ZSBhZGphY2VudCBzcGFjZXMgYmVmb3JlIHRoaXMgcG9pbnQsXG4gICAgICAgIC8vIGJlY2F1c2UgTUVSSURJRU1fUkUgbGlrZXMgdG8gZWF0IHVwIGxvYWRpbmcgc3BhY2VzXG4gICAgICAgIGlmIChleHRlbmRlZFNldHRpbmdzLm1lcmlkaWVtID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcyA9IHMucmVwbGFjZShNRVJJRElFTV9SRSwgJycpLnRyaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChleHRlbmRlZFNldHRpbmdzLm1lcmlkaWVtID09PSAnbmFycm93JykgeyAvLyBhL3BcbiAgICAgICAgICAgIHMgPSBzLnJlcGxhY2UoTUVSSURJRU1fUkUsIGZ1bmN0aW9uIChtMCwgbTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbTEudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGV4dGVuZGVkU2V0dGluZ3MubWVyaWRpZW0gPT09ICdzaG9ydCcpIHsgLy8gYW0vcG1cbiAgICAgICAgICAgIHMgPSBzLnJlcGxhY2UoTUVSSURJRU1fUkUsIGZ1bmN0aW9uIChtMCwgbTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbTEudG9Mb2NhbGVMb3dlckNhc2UoKSArICdtJztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGV4dGVuZGVkU2V0dGluZ3MubWVyaWRpZW0gPT09ICdsb3dlcmNhc2UnKSB7IC8vIG90aGVyIG1lcmlkaWVtIHRyYW5zZm9ybWVycyBhbHJlYWR5IGNvbnZlcnRlZCB0byBsb3dlcmNhc2VcbiAgICAgICAgICAgIHMgPSBzLnJlcGxhY2UoTUVSSURJRU1fUkUsIGZ1bmN0aW9uIChtMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtMC50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcyA9IHMucmVwbGFjZShNVUxUSV9TUEFDRV9SRSwgJyAnKTtcbiAgICAgICAgcyA9IHMudHJpbSgpO1xuICAgICAgICByZXR1cm4gcztcbiAgICB9XG4gICAgZnVuY3Rpb24gaW5qZWN0VHpvU3RyKHMsIHR6b1N0cikge1xuICAgICAgICB2YXIgcmVwbGFjZWQgPSBmYWxzZTtcbiAgICAgICAgcyA9IHMucmVwbGFjZShVVENfUkUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlcGxhY2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiB0em9TdHI7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBJRTExIGRvZXNuJ3QgaW5jbHVkZSBVVEMvR01UIGluIHRoZSBvcmlnaW5hbCBzdHJpbmcsIHNvIGFwcGVuZCB0byBlbmRcbiAgICAgICAgaWYgKCFyZXBsYWNlZCkge1xuICAgICAgICAgICAgcyArPSAnICcgKyB0em9TdHI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXIobnVtLCB3ZWVrTGFiZWwsIGxvY2FsZSwgZGlzcGxheSkge1xuICAgICAgICB2YXIgcGFydHMgPSBbXTtcbiAgICAgICAgaWYgKGRpc3BsYXkgPT09ICduYXJyb3cnKSB7XG4gICAgICAgICAgICBwYXJ0cy5wdXNoKHdlZWtMYWJlbCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGlzcGxheSA9PT0gJ3Nob3J0Jykge1xuICAgICAgICAgICAgcGFydHMucHVzaCh3ZWVrTGFiZWwsICcgJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb3RoZXJ3aXNlLCBjb25zaWRlcmVkICdudW1lcmljJ1xuICAgICAgICBwYXJ0cy5wdXNoKGxvY2FsZS5zaW1wbGVOdW1iZXJGb3JtYXQuZm9ybWF0KG51bSkpO1xuICAgICAgICBpZiAobG9jYWxlLm9wdGlvbnMuaXNSdGwpIHsgLy8gVE9ETzogdXNlIGNvbnRyb2wgY2hhcmFjdGVycyBpbnN0ZWFkP1xuICAgICAgICAgICAgcGFydHMucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcnKTtcbiAgICB9XG4gICAgLy8gUmFuZ2UgRm9ybWF0dGluZyBVdGlsc1xuICAgIC8vIDAgPSBleGFjdGx5IHRoZSBzYW1lXG4gICAgLy8gMSA9IGRpZmZlcmVudCBieSB0aW1lXG4gICAgLy8gYW5kIGJpZ2dlclxuICAgIGZ1bmN0aW9uIGNvbXB1dGVNYXJrZXJEaWZmU2V2ZXJpdHkoZDAsIGQxLCBjYSkge1xuICAgICAgICBpZiAoY2EuZ2V0TWFya2VyWWVhcihkMCkgIT09IGNhLmdldE1hcmtlclllYXIoZDEpKSB7XG4gICAgICAgICAgICByZXR1cm4gNTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2EuZ2V0TWFya2VyTW9udGgoZDApICE9PSBjYS5nZXRNYXJrZXJNb250aChkMSkpIHtcbiAgICAgICAgICAgIHJldHVybiA0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYS5nZXRNYXJrZXJEYXkoZDApICE9PSBjYS5nZXRNYXJrZXJEYXkoZDEpKSB7XG4gICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZUFzTXMoZDApICE9PSB0aW1lQXNNcyhkMSkpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wdXRlUGFydGlhbEZvcm1hdHRpbmdPcHRpb25zKG9wdGlvbnMsIGJpZ2dlc3RVbml0KSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT3B0aW9ucyA9IHt9O1xuICAgICAgICBmb3IgKHZhciBuYW1lXzIgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKCEobmFtZV8yIGluIFNUQU5EQVJEX0RBVEVfUFJPUF9TRVZFUklUSUVTKSB8fCAvLyBub3QgYSBkYXRlIHBhcnQgcHJvcCAobGlrZSB0aW1lWm9uZSlcbiAgICAgICAgICAgICAgICBTVEFOREFSRF9EQVRFX1BST1BfU0VWRVJJVElFU1tuYW1lXzJdIDw9IGJpZ2dlc3RVbml0KSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9wdGlvbnNbbmFtZV8yXSA9IG9wdGlvbnNbbmFtZV8yXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFydGlhbE9wdGlvbnM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZpbmRDb21tb25JbnNlcnRpb24oZnVsbDAsIHBhcnRpYWwwLCBmdWxsMSwgcGFydGlhbDEpIHtcbiAgICAgICAgdmFyIGkwID0gMDtcbiAgICAgICAgd2hpbGUgKGkwIDwgZnVsbDAubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgZm91bmQwID0gZnVsbDAuaW5kZXhPZihwYXJ0aWFsMCwgaTApO1xuICAgICAgICAgICAgaWYgKGZvdW5kMCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBiZWZvcmUwID0gZnVsbDAuc3Vic3RyKDAsIGZvdW5kMCk7XG4gICAgICAgICAgICBpMCA9IGZvdW5kMCArIHBhcnRpYWwwLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBhZnRlcjAgPSBmdWxsMC5zdWJzdHIoaTApO1xuICAgICAgICAgICAgdmFyIGkxID0gMDtcbiAgICAgICAgICAgIHdoaWxlIChpMSA8IGZ1bGwxLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciBmb3VuZDEgPSBmdWxsMS5pbmRleE9mKHBhcnRpYWwxLCBpMSk7XG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kMSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBiZWZvcmUxID0gZnVsbDEuc3Vic3RyKDAsIGZvdW5kMSk7XG4gICAgICAgICAgICAgICAgaTEgPSBmb3VuZDEgKyBwYXJ0aWFsMS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgdmFyIGFmdGVyMSA9IGZ1bGwxLnN1YnN0cihpMSk7XG4gICAgICAgICAgICAgICAgaWYgKGJlZm9yZTAgPT09IGJlZm9yZTEgJiYgYWZ0ZXIwID09PSBhZnRlcjEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZTogYmVmb3JlMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyOiBhZnRlcjBcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLypcbiAgICBUT0RPOiBmaXggdGhlIHRlcm1pbm9sb2d5IG9mIFwiZm9ybWF0dGVyXCIgdnMgXCJmb3JtYXR0aW5nIGZ1bmNcIlxuICAgICovXG4gICAgLypcbiAgICBBdCB0aGUgdGltZSBvZiBpbnN0YW50aWF0aW9uLCB0aGlzIG9iamVjdCBkb2VzIG5vdCBrbm93IHdoaWNoIGNtZC1mb3JtYXR0aW5nIHN5c3RlbSBpdCB3aWxsIHVzZS5cbiAgICBJdCByZWNlaXZlcyB0aGlzIGF0IHRoZSB0aW1lIG9mIGZvcm1hdHRpbmcsIGFzIGEgc2V0dGluZy5cbiAgICAqL1xuICAgIHZhciBDbWRGb3JtYXR0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIENtZEZvcm1hdHRlcihjbWRTdHIsIHNlcGFyYXRvcikge1xuICAgICAgICAgICAgdGhpcy5jbWRTdHIgPSBjbWRTdHI7XG4gICAgICAgICAgICB0aGlzLnNlcGFyYXRvciA9IHNlcGFyYXRvcjtcbiAgICAgICAgfVxuICAgICAgICBDbWRGb3JtYXR0ZXIucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChkYXRlLCBjb250ZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC5jbWRGb3JtYXR0ZXIodGhpcy5jbWRTdHIsIGNyZWF0ZVZlcmJvc2VGb3JtYXR0aW5nQXJnKGRhdGUsIG51bGwsIGNvbnRleHQsIHRoaXMuc2VwYXJhdG9yKSk7XG4gICAgICAgIH07XG4gICAgICAgIENtZEZvcm1hdHRlci5wcm90b3R5cGUuZm9ybWF0UmFuZ2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgY29udGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuY21kRm9ybWF0dGVyKHRoaXMuY21kU3RyLCBjcmVhdGVWZXJib3NlRm9ybWF0dGluZ0FyZyhzdGFydCwgZW5kLCBjb250ZXh0LCB0aGlzLnNlcGFyYXRvcikpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gQ21kRm9ybWF0dGVyO1xuICAgIH0oKSk7XG5cbiAgICB2YXIgRnVuY0Zvcm1hdHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gRnVuY0Zvcm1hdHRlcihmdW5jKSB7XG4gICAgICAgICAgICB0aGlzLmZ1bmMgPSBmdW5jO1xuICAgICAgICB9XG4gICAgICAgIEZ1bmNGb3JtYXR0ZXIucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChkYXRlLCBjb250ZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mdW5jKGNyZWF0ZVZlcmJvc2VGb3JtYXR0aW5nQXJnKGRhdGUsIG51bGwsIGNvbnRleHQpKTtcbiAgICAgICAgfTtcbiAgICAgICAgRnVuY0Zvcm1hdHRlci5wcm90b3R5cGUuZm9ybWF0UmFuZ2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgY29udGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZnVuYyhjcmVhdGVWZXJib3NlRm9ybWF0dGluZ0FyZyhzdGFydCwgZW5kLCBjb250ZXh0KSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBGdW5jRm9ybWF0dGVyO1xuICAgIH0oKSk7XG5cbiAgICAvLyBGb3JtYXR0ZXIgT2JqZWN0IENyZWF0aW9uXG4gICAgZnVuY3Rpb24gY3JlYXRlRm9ybWF0dGVyKGlucHV0LCBkZWZhdWx0U2VwYXJhdG9yKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnICYmIGlucHV0KSB7IC8vIG5vbi1udWxsIG9iamVjdFxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkZWZhdWx0U2VwYXJhdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gX19hc3NpZ24oeyBzZXBhcmF0b3I6IGRlZmF1bHRTZXBhcmF0b3IgfSwgaW5wdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBOYXRpdmVGb3JtYXR0ZXIoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ21kRm9ybWF0dGVyKGlucHV0LCBkZWZhdWx0U2VwYXJhdG9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRnVuY0Zvcm1hdHRlcihpbnB1dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gU3RyaW5nIFV0aWxzXG4gICAgLy8gdGltZVpvbmVPZmZzZXQgaXMgaW4gbWludXRlc1xuICAgIGZ1bmN0aW9uIGJ1aWxkSXNvU3RyaW5nKG1hcmtlciwgdGltZVpvbmVPZmZzZXQsIHN0cmlwWmVyb1RpbWUpIHtcbiAgICAgICAgaWYgKHN0cmlwWmVyb1RpbWUgPT09IHZvaWQgMCkgeyBzdHJpcFplcm9UaW1lID0gZmFsc2U7IH1cbiAgICAgICAgdmFyIHMgPSBtYXJrZXIudG9JU09TdHJpbmcoKTtcbiAgICAgICAgcyA9IHMucmVwbGFjZSgnLjAwMCcsICcnKTtcbiAgICAgICAgaWYgKHN0cmlwWmVyb1RpbWUpIHtcbiAgICAgICAgICAgIHMgPSBzLnJlcGxhY2UoJ1QwMDowMDowMFonLCAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMubGVuZ3RoID4gMTApIHsgLy8gdGltZSBwYXJ0IHdhc24ndCBzdHJpcHBlZCwgY2FuIGFkZCB0aW1lem9uZSBpbmZvXG4gICAgICAgICAgICBpZiAodGltZVpvbmVPZmZzZXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHMgPSBzLnJlcGxhY2UoJ1onLCAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aW1lWm9uZU9mZnNldCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHMgPSBzLnJlcGxhY2UoJ1onLCBmb3JtYXRUaW1lWm9uZU9mZnNldCh0aW1lWm9uZU9mZnNldCwgdHJ1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlLCBpdHMgVVRDLTAgYW5kIHdlIHdhbnQgdG8ga2VlcCB0aGUgWlxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb3JtYXRJc29UaW1lU3RyaW5nKG1hcmtlcikge1xuICAgICAgICByZXR1cm4gcGFkU3RhcnQobWFya2VyLmdldFVUQ0hvdXJzKCksIDIpICsgJzonICtcbiAgICAgICAgICAgIHBhZFN0YXJ0KG1hcmtlci5nZXRVVENNaW51dGVzKCksIDIpICsgJzonICtcbiAgICAgICAgICAgIHBhZFN0YXJ0KG1hcmtlci5nZXRVVENTZWNvbmRzKCksIDIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb3JtYXRUaW1lWm9uZU9mZnNldChtaW51dGVzLCBkb0lzbykge1xuICAgICAgICBpZiAoZG9Jc28gPT09IHZvaWQgMCkgeyBkb0lzbyA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBzaWduID0gbWludXRlcyA8IDAgPyAnLScgOiAnKyc7XG4gICAgICAgIHZhciBhYnMgPSBNYXRoLmFicyhtaW51dGVzKTtcbiAgICAgICAgdmFyIGhvdXJzID0gTWF0aC5mbG9vcihhYnMgLyA2MCk7XG4gICAgICAgIHZhciBtaW5zID0gTWF0aC5yb3VuZChhYnMgJSA2MCk7XG4gICAgICAgIGlmIChkb0lzbykge1xuICAgICAgICAgICAgcmV0dXJuIHNpZ24gKyBwYWRTdGFydChob3VycywgMikgKyAnOicgKyBwYWRTdGFydChtaW5zLCAyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnR01UJyArIHNpZ24gKyBob3VycyArIChtaW5zID8gJzonICsgcGFkU3RhcnQobWlucywgMikgOiAnJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQXJnIFV0aWxzXG4gICAgZnVuY3Rpb24gY3JlYXRlVmVyYm9zZUZvcm1hdHRpbmdBcmcoc3RhcnQsIGVuZCwgY29udGV4dCwgc2VwYXJhdG9yKSB7XG4gICAgICAgIHZhciBzdGFydEluZm8gPSBleHBhbmRab25lZE1hcmtlcihzdGFydCwgY29udGV4dC5jYWxlbmRhclN5c3RlbSk7XG4gICAgICAgIHZhciBlbmRJbmZvID0gZW5kID8gZXhwYW5kWm9uZWRNYXJrZXIoZW5kLCBjb250ZXh0LmNhbGVuZGFyU3lzdGVtKSA6IG51bGw7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRlOiBzdGFydEluZm8sXG4gICAgICAgICAgICBzdGFydDogc3RhcnRJbmZvLFxuICAgICAgICAgICAgZW5kOiBlbmRJbmZvLFxuICAgICAgICAgICAgdGltZVpvbmU6IGNvbnRleHQudGltZVpvbmUsXG4gICAgICAgICAgICBsb2NhbGVDb2RlczogY29udGV4dC5sb2NhbGUuY29kZXMsXG4gICAgICAgICAgICBzZXBhcmF0b3I6IHNlcGFyYXRvclxuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBleHBhbmRab25lZE1hcmtlcihkYXRlSW5mbywgY2FsZW5kYXJTeXN0ZW0pIHtcbiAgICAgICAgdmFyIGEgPSBjYWxlbmRhclN5c3RlbS5tYXJrZXJUb0FycmF5KGRhdGVJbmZvLm1hcmtlcik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtYXJrZXI6IGRhdGVJbmZvLm1hcmtlcixcbiAgICAgICAgICAgIHRpbWVab25lT2Zmc2V0OiBkYXRlSW5mby50aW1lWm9uZU9mZnNldCxcbiAgICAgICAgICAgIGFycmF5OiBhLFxuICAgICAgICAgICAgeWVhcjogYVswXSxcbiAgICAgICAgICAgIG1vbnRoOiBhWzFdLFxuICAgICAgICAgICAgZGF5OiBhWzJdLFxuICAgICAgICAgICAgaG91cjogYVszXSxcbiAgICAgICAgICAgIG1pbnV0ZTogYVs0XSxcbiAgICAgICAgICAgIHNlY29uZDogYVs1XSxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kOiBhWzZdXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIEV2ZW50U291cmNlQXBpID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBFdmVudFNvdXJjZUFwaShjYWxlbmRhciwgaW50ZXJuYWxFdmVudFNvdXJjZSkge1xuICAgICAgICAgICAgdGhpcy5jYWxlbmRhciA9IGNhbGVuZGFyO1xuICAgICAgICAgICAgdGhpcy5pbnRlcm5hbEV2ZW50U291cmNlID0gaW50ZXJuYWxFdmVudFNvdXJjZTtcbiAgICAgICAgfVxuICAgICAgICBFdmVudFNvdXJjZUFwaS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5jYWxlbmRhci5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ1JFTU9WRV9FVkVOVF9TT1VSQ0UnLFxuICAgICAgICAgICAgICAgIHNvdXJjZUlkOiB0aGlzLmludGVybmFsRXZlbnRTb3VyY2Uuc291cmNlSWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBFdmVudFNvdXJjZUFwaS5wcm90b3R5cGUucmVmZXRjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdGRVRDSF9FVkVOVF9TT1VSQ0VTJyxcbiAgICAgICAgICAgICAgICBzb3VyY2VJZHM6IFt0aGlzLmludGVybmFsRXZlbnRTb3VyY2Uuc291cmNlSWRdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50U291cmNlQXBpLnByb3RvdHlwZSwgXCJpZFwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbnRlcm5hbEV2ZW50U291cmNlLnB1YmxpY0lkO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudFNvdXJjZUFwaS5wcm90b3R5cGUsIFwidXJsXCIsIHtcbiAgICAgICAgICAgIC8vIG9ubHkgcmVsZXZhbnQgdG8ganNvbi1mZWVkIGV2ZW50IHNvdXJjZXNcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmludGVybmFsRXZlbnRTb3VyY2UubWV0YS51cmw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIEV2ZW50U291cmNlQXBpO1xuICAgIH0oKSk7XG5cbiAgICB2YXIgRXZlbnRBcGkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIEV2ZW50QXBpKGNhbGVuZGFyLCBkZWYsIGluc3RhbmNlKSB7XG4gICAgICAgICAgICB0aGlzLl9jYWxlbmRhciA9IGNhbGVuZGFyO1xuICAgICAgICAgICAgdGhpcy5fZGVmID0gZGVmO1xuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBpbnN0YW5jZSB8fCBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8qXG4gICAgICAgIFRPRE86IG1ha2UgZXZlbnQgc3RydWN0IG1vcmUgcmVzcG9uc2libGUgZm9yIHRoaXNcbiAgICAgICAgKi9cbiAgICAgICAgRXZlbnRBcGkucHJvdG90eXBlLnNldFByb3AgPSBmdW5jdGlvbiAobmFtZSwgdmFsKSB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgaWYgKG5hbWUgaW4gREFURV9QUk9QUykgO1xuICAgICAgICAgICAgZWxzZSBpZiAobmFtZSBpbiBOT05fREFURV9QUk9QUykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgTk9OX0RBVEVfUFJPUFNbbmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gTk9OX0RBVEVfUFJPUFNbbmFtZV0odmFsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5tdXRhdGUoe1xuICAgICAgICAgICAgICAgICAgICBzdGFuZGFyZFByb3BzOiAoX2EgPSB7fSwgX2FbbmFtZV0gPSB2YWwsIF9hKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobmFtZSBpbiBVTlNDT1BFRF9FVkVOVF9VSV9QUk9QUykge1xuICAgICAgICAgICAgICAgIHZhciB1aSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIFVOU0NPUEVEX0VWRU5UX1VJX1BST1BTW25hbWVdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbCA9IFVOU0NPUEVEX0VWRU5UX1VJX1BST1BTW25hbWVdKHZhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSAnY29sb3InKSB7XG4gICAgICAgICAgICAgICAgICAgIHVpID0geyBiYWNrZ3JvdW5kQ29sb3I6IHZhbCwgYm9yZGVyQ29sb3I6IHZhbCB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChuYW1lID09PSAnZWRpdGFibGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHVpID0geyBzdGFydEVkaXRhYmxlOiB2YWwsIGR1cmF0aW9uRWRpdGFibGU6IHZhbCB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdWkgPSAoX2IgPSB7fSwgX2JbbmFtZV0gPSB2YWwsIF9iKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5tdXRhdGUoe1xuICAgICAgICAgICAgICAgICAgICBzdGFuZGFyZFByb3BzOiB7IHVpOiB1aSB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIEV2ZW50QXBpLnByb3RvdHlwZS5zZXRFeHRlbmRlZFByb3AgPSBmdW5jdGlvbiAobmFtZSwgdmFsKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICB0aGlzLm11dGF0ZSh7XG4gICAgICAgICAgICAgICAgZXh0ZW5kZWRQcm9wczogKF9hID0ge30sIF9hW25hbWVdID0gdmFsLCBfYSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBFdmVudEFwaS5wcm90b3R5cGUuc2V0U3RhcnQgPSBmdW5jdGlvbiAoc3RhcnRJbnB1dCwgb3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgICAgIHZhciBkYXRlRW52ID0gdGhpcy5fY2FsZW5kYXIuZGF0ZUVudjtcbiAgICAgICAgICAgIHZhciBzdGFydCA9IGRhdGVFbnYuY3JlYXRlTWFya2VyKHN0YXJ0SW5wdXQpO1xuICAgICAgICAgICAgaWYgKHN0YXJ0ICYmIHRoaXMuX2luc3RhbmNlKSB7IC8vIFRPRE86IHdhcm5pbmcgaWYgcGFyc2VkIGJhZFxuICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZVJhbmdlID0gdGhpcy5faW5zdGFuY2UucmFuZ2U7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0RGVsdGEgPSBkaWZmRGF0ZXMoaW5zdGFuY2VSYW5nZS5zdGFydCwgc3RhcnQsIGRhdGVFbnYsIG9wdGlvbnMuZ3JhbnVsYXJpdHkpOyAvLyB3aGF0IGlmIHBhcnNlZCBiYWQhP1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLm1haW50YWluRHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tdXRhdGUoeyBkYXRlc0RlbHRhOiBzdGFydERlbHRhIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tdXRhdGUoeyBzdGFydERlbHRhOiBzdGFydERlbHRhIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgRXZlbnRBcGkucHJvdG90eXBlLnNldEVuZCA9IGZ1bmN0aW9uIChlbmRJbnB1dCwgb3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgICAgIHZhciBkYXRlRW52ID0gdGhpcy5fY2FsZW5kYXIuZGF0ZUVudjtcbiAgICAgICAgICAgIHZhciBlbmQ7XG4gICAgICAgICAgICBpZiAoZW5kSW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGVuZCA9IGRhdGVFbnYuY3JlYXRlTWFya2VyKGVuZElucHV0KTtcbiAgICAgICAgICAgICAgICBpZiAoIWVuZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47IC8vIFRPRE86IHdhcm5pbmcgaWYgcGFyc2VkIGJhZFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9pbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIGlmIChlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVuZERlbHRhID0gZGlmZkRhdGVzKHRoaXMuX2luc3RhbmNlLnJhbmdlLmVuZCwgZW5kLCBkYXRlRW52LCBvcHRpb25zLmdyYW51bGFyaXR5KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tdXRhdGUoeyBlbmREZWx0YTogZW5kRGVsdGEgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm11dGF0ZSh7IHN0YW5kYXJkUHJvcHM6IHsgaGFzRW5kOiBmYWxzZSB9IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgRXZlbnRBcGkucHJvdG90eXBlLnNldERhdGVzID0gZnVuY3Rpb24gKHN0YXJ0SW5wdXQsIGVuZElucHV0LCBvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICAgICAgdmFyIGRhdGVFbnYgPSB0aGlzLl9jYWxlbmRhci5kYXRlRW52O1xuICAgICAgICAgICAgdmFyIHN0YW5kYXJkUHJvcHMgPSB7IGFsbERheTogb3B0aW9ucy5hbGxEYXkgfTtcbiAgICAgICAgICAgIHZhciBzdGFydCA9IGRhdGVFbnYuY3JlYXRlTWFya2VyKHN0YXJ0SW5wdXQpO1xuICAgICAgICAgICAgdmFyIGVuZDtcbiAgICAgICAgICAgIGlmICghc3RhcnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47IC8vIFRPRE86IHdhcm5pbmcgaWYgcGFyc2VkIGJhZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVuZElucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBlbmQgPSBkYXRlRW52LmNyZWF0ZU1hcmtlcihlbmRJbnB1dCk7XG4gICAgICAgICAgICAgICAgaWYgKCFlbmQpIHsgLy8gVE9ETzogd2FybmluZyBpZiBwYXJzZWQgYmFkXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5faW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2VSYW5nZSA9IHRoaXMuX2luc3RhbmNlLnJhbmdlO1xuICAgICAgICAgICAgICAgIC8vIHdoZW4gY29tcHV0aW5nIHRoZSBkaWZmIGZvciBhbiBldmVudCBiZWluZyBjb252ZXJ0ZWQgdG8gYWxsLWRheSxcbiAgICAgICAgICAgICAgICAvLyBjb21wdXRlIGRpZmYgb2ZmIG9mIHRoZSBhbGwtZGF5IHZhbHVlcyB0aGUgd2F5IGV2ZW50LW11dGF0aW9uIGRvZXMuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuYWxsRGF5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlUmFuZ2UgPSBjb21wdXRlQWxpZ25lZERheVJhbmdlKGluc3RhbmNlUmFuZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgc3RhcnREZWx0YSA9IGRpZmZEYXRlcyhpbnN0YW5jZVJhbmdlLnN0YXJ0LCBzdGFydCwgZGF0ZUVudiwgb3B0aW9ucy5ncmFudWxhcml0eSk7XG4gICAgICAgICAgICAgICAgaWYgKGVuZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZW5kRGVsdGEgPSBkaWZmRGF0ZXMoaW5zdGFuY2VSYW5nZS5lbmQsIGVuZCwgZGF0ZUVudiwgb3B0aW9ucy5ncmFudWxhcml0eSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkdXJhdGlvbnNFcXVhbChzdGFydERlbHRhLCBlbmREZWx0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubXV0YXRlKHsgZGF0ZXNEZWx0YTogc3RhcnREZWx0YSwgc3RhbmRhcmRQcm9wczogc3RhbmRhcmRQcm9wcyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubXV0YXRlKHsgc3RhcnREZWx0YTogc3RhcnREZWx0YSwgZW5kRGVsdGE6IGVuZERlbHRhLCBzdGFuZGFyZFByb3BzOiBzdGFuZGFyZFByb3BzIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgeyAvLyBtZWFucyBcImNsZWFyIHRoZSBlbmRcIlxuICAgICAgICAgICAgICAgICAgICBzdGFuZGFyZFByb3BzLmhhc0VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm11dGF0ZSh7IGRhdGVzRGVsdGE6IHN0YXJ0RGVsdGEsIHN0YW5kYXJkUHJvcHM6IHN0YW5kYXJkUHJvcHMgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBFdmVudEFwaS5wcm90b3R5cGUubW92ZVN0YXJ0ID0gZnVuY3Rpb24gKGRlbHRhSW5wdXQpIHtcbiAgICAgICAgICAgIHZhciBkZWx0YSA9IGNyZWF0ZUR1cmF0aW9uKGRlbHRhSW5wdXQpO1xuICAgICAgICAgICAgaWYgKGRlbHRhKSB7IC8vIFRPRE86IHdhcm5pbmcgaWYgcGFyc2VkIGJhZFxuICAgICAgICAgICAgICAgIHRoaXMubXV0YXRlKHsgc3RhcnREZWx0YTogZGVsdGEgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIEV2ZW50QXBpLnByb3RvdHlwZS5tb3ZlRW5kID0gZnVuY3Rpb24gKGRlbHRhSW5wdXQpIHtcbiAgICAgICAgICAgIHZhciBkZWx0YSA9IGNyZWF0ZUR1cmF0aW9uKGRlbHRhSW5wdXQpO1xuICAgICAgICAgICAgaWYgKGRlbHRhKSB7IC8vIFRPRE86IHdhcm5pbmcgaWYgcGFyc2VkIGJhZFxuICAgICAgICAgICAgICAgIHRoaXMubXV0YXRlKHsgZW5kRGVsdGE6IGRlbHRhIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBFdmVudEFwaS5wcm90b3R5cGUubW92ZURhdGVzID0gZnVuY3Rpb24gKGRlbHRhSW5wdXQpIHtcbiAgICAgICAgICAgIHZhciBkZWx0YSA9IGNyZWF0ZUR1cmF0aW9uKGRlbHRhSW5wdXQpO1xuICAgICAgICAgICAgaWYgKGRlbHRhKSB7IC8vIFRPRE86IHdhcm5pbmcgaWYgcGFyc2VkIGJhZFxuICAgICAgICAgICAgICAgIHRoaXMubXV0YXRlKHsgZGF0ZXNEZWx0YTogZGVsdGEgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIEV2ZW50QXBpLnByb3RvdHlwZS5zZXRBbGxEYXkgPSBmdW5jdGlvbiAoYWxsRGF5LCBvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICAgICAgdmFyIHN0YW5kYXJkUHJvcHMgPSB7IGFsbERheTogYWxsRGF5IH07XG4gICAgICAgICAgICB2YXIgbWFpbnRhaW5EdXJhdGlvbiA9IG9wdGlvbnMubWFpbnRhaW5EdXJhdGlvbjtcbiAgICAgICAgICAgIGlmIChtYWludGFpbkR1cmF0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtYWludGFpbkR1cmF0aW9uID0gdGhpcy5fY2FsZW5kYXIub3B0KCdhbGxEYXlNYWludGFpbkR1cmF0aW9uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fZGVmLmFsbERheSAhPT0gYWxsRGF5KSB7XG4gICAgICAgICAgICAgICAgc3RhbmRhcmRQcm9wcy5oYXNFbmQgPSBtYWludGFpbkR1cmF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tdXRhdGUoeyBzdGFuZGFyZFByb3BzOiBzdGFuZGFyZFByb3BzIH0pO1xuICAgICAgICB9O1xuICAgICAgICBFdmVudEFwaS5wcm90b3R5cGUuZm9ybWF0UmFuZ2UgPSBmdW5jdGlvbiAoZm9ybWF0SW5wdXQpIHtcbiAgICAgICAgICAgIHZhciBkYXRlRW52ID0gdGhpcy5fY2FsZW5kYXIuZGF0ZUVudjtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuX2luc3RhbmNlO1xuICAgICAgICAgICAgdmFyIGZvcm1hdHRlciA9IGNyZWF0ZUZvcm1hdHRlcihmb3JtYXRJbnB1dCwgdGhpcy5fY2FsZW5kYXIub3B0KCdkZWZhdWx0UmFuZ2VTZXBhcmF0b3InKSk7XG4gICAgICAgICAgICBpZiAodGhpcy5fZGVmLmhhc0VuZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRlRW52LmZvcm1hdFJhbmdlKGluc3RhbmNlLnJhbmdlLnN0YXJ0LCBpbnN0YW5jZS5yYW5nZS5lbmQsIGZvcm1hdHRlciwge1xuICAgICAgICAgICAgICAgICAgICBmb3JjZWRTdGFydFR6bzogaW5zdGFuY2UuZm9yY2VkU3RhcnRUem8sXG4gICAgICAgICAgICAgICAgICAgIGZvcmNlZEVuZFR6bzogaW5zdGFuY2UuZm9yY2VkRW5kVHpvXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZUVudi5mb3JtYXQoaW5zdGFuY2UucmFuZ2Uuc3RhcnQsIGZvcm1hdHRlciwge1xuICAgICAgICAgICAgICAgICAgICBmb3JjZWRUem86IGluc3RhbmNlLmZvcmNlZFN0YXJ0VHpvXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIEV2ZW50QXBpLnByb3RvdHlwZS5tdXRhdGUgPSBmdW5jdGlvbiAobXV0YXRpb24pIHtcbiAgICAgICAgICAgIHZhciBkZWYgPSB0aGlzLl9kZWY7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICAgICAgICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhbGVuZGFyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ01VVEFURV9FVkVOVFMnLFxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZUlkOiBpbnN0YW5jZS5pbnN0YW5jZUlkLFxuICAgICAgICAgICAgICAgICAgICBtdXRhdGlvbjogbXV0YXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGZyb21BcGk6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRTdG9yZSA9IHRoaXMuX2NhbGVuZGFyLnN0YXRlLmV2ZW50U3RvcmU7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGVmID0gZXZlbnRTdG9yZS5kZWZzW2RlZi5kZWZJZF07XG4gICAgICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBldmVudFN0b3JlLmluc3RhbmNlc1tpbnN0YW5jZS5pbnN0YW5jZUlkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgRXZlbnRBcGkucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhbGVuZGFyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnUkVNT1ZFX0VWRU5UX0RFRicsXG4gICAgICAgICAgICAgICAgZGVmSWQ6IHRoaXMuX2RlZi5kZWZJZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwic291cmNlXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBzb3VyY2VJZCA9IHRoaXMuX2RlZi5zb3VyY2VJZDtcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFdmVudFNvdXJjZUFwaSh0aGlzLl9jYWxlbmRhciwgdGhpcy5fY2FsZW5kYXIuc3RhdGUuZXZlbnRTb3VyY2VzW3NvdXJjZUlkXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwic3RhcnRcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlID9cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FsZW5kYXIuZGF0ZUVudi50b0RhdGUodGhpcy5faW5zdGFuY2UucmFuZ2Uuc3RhcnQpIDpcbiAgICAgICAgICAgICAgICAgICAgbnVsbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRBcGkucHJvdG90eXBlLCBcImVuZFwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuX2luc3RhbmNlICYmIHRoaXMuX2RlZi5oYXNFbmQpID9cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FsZW5kYXIuZGF0ZUVudi50b0RhdGUodGhpcy5faW5zdGFuY2UucmFuZ2UuZW5kKSA6XG4gICAgICAgICAgICAgICAgICAgIG51bGw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50QXBpLnByb3RvdHlwZSwgXCJpZFwiLCB7XG4gICAgICAgICAgICAvLyBjb21wdXRhYmxlIHByb3BzIHRoYXQgYWxsIGFjY2VzcyB0aGUgZGVmXG4gICAgICAgICAgICAvLyBUT0RPOiBmaW5kIGEgVHlwZVNjcmlwdC1jb21wYXRpYmxlIHdheSB0byBkbyB0aGlzIGF0IHNjYWxlXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi5wdWJsaWNJZDsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwiZ3JvdXBJZFwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi5ncm91cElkOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50QXBpLnByb3RvdHlwZSwgXCJhbGxEYXlcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kZWYuYWxsRGF5OyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50QXBpLnByb3RvdHlwZSwgXCJ0aXRsZVwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi50aXRsZTsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwidXJsXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLnVybDsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwicmVuZGVyaW5nXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLnJlbmRlcmluZzsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwic3RhcnRFZGl0YWJsZVwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi51aS5zdGFydEVkaXRhYmxlOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50QXBpLnByb3RvdHlwZSwgXCJkdXJhdGlvbkVkaXRhYmxlXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLnVpLmR1cmF0aW9uRWRpdGFibGU7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRBcGkucHJvdG90eXBlLCBcImNvbnN0cmFpbnRcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kZWYudWkuY29uc3RyYWludHNbMF0gfHwgbnVsbDsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwib3ZlcmxhcFwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi51aS5vdmVybGFwOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50QXBpLnByb3RvdHlwZSwgXCJhbGxvd1wiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi51aS5hbGxvd3NbMF0gfHwgbnVsbDsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwiYmFja2dyb3VuZENvbG9yXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLnVpLmJhY2tncm91bmRDb2xvcjsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwiYm9yZGVyQ29sb3JcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kZWYudWkuYm9yZGVyQ29sb3I7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRBcGkucHJvdG90eXBlLCBcInRleHRDb2xvclwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi51aS50ZXh0Q29sb3I7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRBcGkucHJvdG90eXBlLCBcImNsYXNzTmFtZXNcIiwge1xuICAgICAgICAgICAgLy8gTk9URTogdXNlciBjYW4ndCBtb2RpZnkgdGhlc2UgYmVjYXVzZSBPYmplY3QuZnJlZXplIHdhcyBjYWxsZWQgaW4gZXZlbnQtZGVmIHBhcnNpbmdcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLnVpLmNsYXNzTmFtZXM7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRBcGkucHJvdG90eXBlLCBcImV4dGVuZGVkUHJvcHNcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kZWYuZXh0ZW5kZWRQcm9wczsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBFdmVudEFwaTtcbiAgICB9KCkpO1xuXG4gICAgLypcbiAgICBTcGVjaWZ5aW5nIG5leHREYXlUaHJlc2hvbGQgc2lnbmFscyB0aGF0IGFsbC1kYXkgcmFuZ2VzIHNob3VsZCBiZSBzbGljZWQuXG4gICAgKi9cbiAgICBmdW5jdGlvbiBzbGljZUV2ZW50U3RvcmUoZXZlbnRTdG9yZSwgZXZlbnRVaUJhc2VzLCBmcmFtaW5nUmFuZ2UsIG5leHREYXlUaHJlc2hvbGQpIHtcbiAgICAgICAgdmFyIGludmVyc2VCZ0J5R3JvdXBJZCA9IHt9O1xuICAgICAgICB2YXIgaW52ZXJzZUJnQnlEZWZJZCA9IHt9O1xuICAgICAgICB2YXIgZGVmQnlHcm91cElkID0ge307XG4gICAgICAgIHZhciBiZ1JhbmdlcyA9IFtdO1xuICAgICAgICB2YXIgZmdSYW5nZXMgPSBbXTtcbiAgICAgICAgdmFyIGV2ZW50VWlzID0gY29tcGlsZUV2ZW50VWlzKGV2ZW50U3RvcmUuZGVmcywgZXZlbnRVaUJhc2VzKTtcbiAgICAgICAgZm9yICh2YXIgZGVmSWQgaW4gZXZlbnRTdG9yZS5kZWZzKSB7XG4gICAgICAgICAgICB2YXIgZGVmID0gZXZlbnRTdG9yZS5kZWZzW2RlZklkXTtcbiAgICAgICAgICAgIGlmIChkZWYucmVuZGVyaW5nID09PSAnaW52ZXJzZS1iYWNrZ3JvdW5kJykge1xuICAgICAgICAgICAgICAgIGlmIChkZWYuZ3JvdXBJZCkge1xuICAgICAgICAgICAgICAgICAgICBpbnZlcnNlQmdCeUdyb3VwSWRbZGVmLmdyb3VwSWRdID0gW107XG4gICAgICAgICAgICAgICAgICAgIGlmICghZGVmQnlHcm91cElkW2RlZi5ncm91cElkXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmQnlHcm91cElkW2RlZi5ncm91cElkXSA9IGRlZjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW52ZXJzZUJnQnlEZWZJZFtkZWZJZF0gPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaW5zdGFuY2VJZCBpbiBldmVudFN0b3JlLmluc3RhbmNlcykge1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gZXZlbnRTdG9yZS5pbnN0YW5jZXNbaW5zdGFuY2VJZF07XG4gICAgICAgICAgICB2YXIgZGVmID0gZXZlbnRTdG9yZS5kZWZzW2luc3RhbmNlLmRlZklkXTtcbiAgICAgICAgICAgIHZhciB1aSA9IGV2ZW50VWlzW2RlZi5kZWZJZF07XG4gICAgICAgICAgICB2YXIgb3JpZ1JhbmdlID0gaW5zdGFuY2UucmFuZ2U7XG4gICAgICAgICAgICB2YXIgbm9ybWFsUmFuZ2UgPSAoIWRlZi5hbGxEYXkgJiYgbmV4dERheVRocmVzaG9sZCkgP1xuICAgICAgICAgICAgICAgIGNvbXB1dGVWaXNpYmxlRGF5UmFuZ2Uob3JpZ1JhbmdlLCBuZXh0RGF5VGhyZXNob2xkKSA6XG4gICAgICAgICAgICAgICAgb3JpZ1JhbmdlO1xuICAgICAgICAgICAgdmFyIHNsaWNlZFJhbmdlID0gaW50ZXJzZWN0UmFuZ2VzKG5vcm1hbFJhbmdlLCBmcmFtaW5nUmFuZ2UpO1xuICAgICAgICAgICAgaWYgKHNsaWNlZFJhbmdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRlZi5yZW5kZXJpbmcgPT09ICdpbnZlcnNlLWJhY2tncm91bmQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWYuZ3JvdXBJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW52ZXJzZUJnQnlHcm91cElkW2RlZi5ncm91cElkXS5wdXNoKHNsaWNlZFJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGludmVyc2VCZ0J5RGVmSWRbaW5zdGFuY2UuZGVmSWRdLnB1c2goc2xpY2VkUmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAoZGVmLnJlbmRlcmluZyA9PT0gJ2JhY2tncm91bmQnID8gYmdSYW5nZXMgOiBmZ1JhbmdlcykucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWY6IGRlZixcbiAgICAgICAgICAgICAgICAgICAgICAgIHVpOiB1aSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlOiBzbGljZWRSYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU3RhcnQ6IG5vcm1hbFJhbmdlLnN0YXJ0ICYmIG5vcm1hbFJhbmdlLnN0YXJ0LnZhbHVlT2YoKSA9PT0gc2xpY2VkUmFuZ2Uuc3RhcnQudmFsdWVPZigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNFbmQ6IG5vcm1hbFJhbmdlLmVuZCAmJiBub3JtYWxSYW5nZS5lbmQudmFsdWVPZigpID09PSBzbGljZWRSYW5nZS5lbmQudmFsdWVPZigpXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBncm91cElkIGluIGludmVyc2VCZ0J5R3JvdXBJZCkgeyAvLyBCWSBHUk9VUFxuICAgICAgICAgICAgdmFyIHJhbmdlcyA9IGludmVyc2VCZ0J5R3JvdXBJZFtncm91cElkXTtcbiAgICAgICAgICAgIHZhciBpbnZlcnRlZFJhbmdlcyA9IGludmVydFJhbmdlcyhyYW5nZXMsIGZyYW1pbmdSYW5nZSk7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGludmVydGVkUmFuZ2VzXzEgPSBpbnZlcnRlZFJhbmdlczsgX2kgPCBpbnZlcnRlZFJhbmdlc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBpbnZlcnRlZFJhbmdlID0gaW52ZXJ0ZWRSYW5nZXNfMVtfaV07XG4gICAgICAgICAgICAgICAgdmFyIGRlZiA9IGRlZkJ5R3JvdXBJZFtncm91cElkXTtcbiAgICAgICAgICAgICAgICB2YXIgdWkgPSBldmVudFVpc1tkZWYuZGVmSWRdO1xuICAgICAgICAgICAgICAgIGJnUmFuZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBkZWY6IGRlZixcbiAgICAgICAgICAgICAgICAgICAgdWk6IHVpLFxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2U6IGludmVydGVkUmFuZ2UsXG4gICAgICAgICAgICAgICAgICAgIGlzU3RhcnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBpc0VuZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBkZWZJZCBpbiBpbnZlcnNlQmdCeURlZklkKSB7XG4gICAgICAgICAgICB2YXIgcmFuZ2VzID0gaW52ZXJzZUJnQnlEZWZJZFtkZWZJZF07XG4gICAgICAgICAgICB2YXIgaW52ZXJ0ZWRSYW5nZXMgPSBpbnZlcnRSYW5nZXMocmFuZ2VzLCBmcmFtaW5nUmFuZ2UpO1xuICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBpbnZlcnRlZFJhbmdlc18yID0gaW52ZXJ0ZWRSYW5nZXM7IF9hIDwgaW52ZXJ0ZWRSYW5nZXNfMi5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaW52ZXJ0ZWRSYW5nZSA9IGludmVydGVkUmFuZ2VzXzJbX2FdO1xuICAgICAgICAgICAgICAgIGJnUmFuZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBkZWY6IGV2ZW50U3RvcmUuZGVmc1tkZWZJZF0sXG4gICAgICAgICAgICAgICAgICAgIHVpOiBldmVudFVpc1tkZWZJZF0sXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogaW52ZXJ0ZWRSYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgaXNTdGFydDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGlzRW5kOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGJnOiBiZ1JhbmdlcywgZmc6IGZnUmFuZ2VzIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhc0JnUmVuZGVyaW5nKGRlZikge1xuICAgICAgICByZXR1cm4gZGVmLnJlbmRlcmluZyA9PT0gJ2JhY2tncm91bmQnIHx8IGRlZi5yZW5kZXJpbmcgPT09ICdpbnZlcnNlLWJhY2tncm91bmQnO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmaWx0ZXJTZWdzVmlhRWxzKGNvbnRleHQsIHNlZ3MsIGlzTWlycm9yKSB7XG4gICAgICAgIHZhciBjYWxlbmRhciA9IGNvbnRleHQuY2FsZW5kYXIsIHZpZXcgPSBjb250ZXh0LnZpZXc7XG4gICAgICAgIGlmIChjYWxlbmRhci5oYXNQdWJsaWNIYW5kbGVycygnZXZlbnRSZW5kZXInKSkge1xuICAgICAgICAgICAgc2VncyA9IHNlZ3MuZmlsdGVyKGZ1bmN0aW9uIChzZWcpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3VzdG9tID0gY2FsZW5kYXIucHVibGljbHlUcmlnZ2VyKCdldmVudFJlbmRlcicsIFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IG5ldyBFdmVudEFwaShjYWxlbmRhciwgc2VnLmV2ZW50UmFuZ2UuZGVmLCBzZWcuZXZlbnRSYW5nZS5pbnN0YW5jZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBpc01pcnJvcjogaXNNaXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1N0YXJ0OiBzZWcuaXNTdGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRW5kOiBzZWcuaXNFbmQsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBpbmNsdWRlIHNlZy5yYW5nZSBvbmNlIGFsbCBjb21wb25lbnRzIGNvbnNpc3RlbnRseSBnZW5lcmF0ZSBpdFxuICAgICAgICAgICAgICAgICAgICAgICAgZWw6IHNlZy5lbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXc6IHZpZXdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIGlmIChjdXN0b20gPT09IGZhbHNlKSB7IC8vIG1lYW5zIGRvbid0IHJlbmRlciBhdCBhbGxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjdXN0b20gJiYgY3VzdG9tICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlZy5lbCA9IGN1c3RvbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHNlZ3NfMSA9IHNlZ3M7IF9pIDwgc2Vnc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHNlZyA9IHNlZ3NfMVtfaV07XG4gICAgICAgICAgICBzZXRFbFNlZyhzZWcuZWwsIHNlZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlZ3M7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldEVsU2VnKGVsLCBzZWcpIHtcbiAgICAgICAgZWwuZmNTZWcgPSBzZWc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEVsU2VnKGVsKSB7XG4gICAgICAgIHJldHVybiBlbC5mY1NlZyB8fCBudWxsO1xuICAgIH1cbiAgICAvLyBldmVudCB1aSBjb21wdXRhdGlvblxuICAgIGZ1bmN0aW9uIGNvbXBpbGVFdmVudFVpcyhldmVudERlZnMsIGV2ZW50VWlCYXNlcykge1xuICAgICAgICByZXR1cm4gbWFwSGFzaChldmVudERlZnMsIGZ1bmN0aW9uIChldmVudERlZikge1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBpbGVFdmVudFVpKGV2ZW50RGVmLCBldmVudFVpQmFzZXMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tcGlsZUV2ZW50VWkoZXZlbnREZWYsIGV2ZW50VWlCYXNlcykge1xuICAgICAgICB2YXIgdWlzID0gW107XG4gICAgICAgIGlmIChldmVudFVpQmFzZXNbJyddKSB7XG4gICAgICAgICAgICB1aXMucHVzaChldmVudFVpQmFzZXNbJyddKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnRVaUJhc2VzW2V2ZW50RGVmLmRlZklkXSkge1xuICAgICAgICAgICAgdWlzLnB1c2goZXZlbnRVaUJhc2VzW2V2ZW50RGVmLmRlZklkXSk7XG4gICAgICAgIH1cbiAgICAgICAgdWlzLnB1c2goZXZlbnREZWYudWkpO1xuICAgICAgICByZXR1cm4gY29tYmluZUV2ZW50VWlzKHVpcyk7XG4gICAgfVxuICAgIC8vIHRyaWdnZXJzXG4gICAgZnVuY3Rpb24gdHJpZ2dlclJlbmRlcmVkU2Vncyhjb250ZXh0LCBzZWdzLCBpc01pcnJvcnMpIHtcbiAgICAgICAgdmFyIGNhbGVuZGFyID0gY29udGV4dC5jYWxlbmRhciwgdmlldyA9IGNvbnRleHQudmlldztcbiAgICAgICAgaWYgKGNhbGVuZGFyLmhhc1B1YmxpY0hhbmRsZXJzKCdldmVudFBvc2l0aW9uZWQnKSkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBzZWdzXzIgPSBzZWdzOyBfaSA8IHNlZ3NfMi5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VnID0gc2Vnc18yW19pXTtcbiAgICAgICAgICAgICAgICBjYWxlbmRhci5wdWJsaWNseVRyaWdnZXJBZnRlclNpemluZygnZXZlbnRQb3NpdGlvbmVkJywgW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudDogbmV3IEV2ZW50QXBpKGNhbGVuZGFyLCBzZWcuZXZlbnRSYW5nZS5kZWYsIHNlZy5ldmVudFJhbmdlLmluc3RhbmNlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzTWlycm9yOiBpc01pcnJvcnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1N0YXJ0OiBzZWcuaXNTdGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRW5kOiBzZWcuaXNFbmQsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbDogc2VnLmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlldzogdmlld1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjYWxlbmRhci5zdGF0ZS5ldmVudFNvdXJjZUxvYWRpbmdMZXZlbCkgeyAvLyBhdm9pZCBpbml0aWFsIGVtcHR5IHN0YXRlIHdoaWxlIHBlbmRpbmdcbiAgICAgICAgICAgIGNhbGVuZGFyLmFmdGVyU2l6aW5nVHJpZ2dlcnMuX2V2ZW50c1Bvc2l0aW9uZWQgPSBbbnVsbF07IC8vIGZpcmUgb25jZVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyaWdnZXJXaWxsUmVtb3ZlU2Vncyhjb250ZXh0LCBzZWdzLCBpc01pcnJvcnMpIHtcbiAgICAgICAgdmFyIGNhbGVuZGFyID0gY29udGV4dC5jYWxlbmRhciwgdmlldyA9IGNvbnRleHQudmlldztcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBzZWdzXzMgPSBzZWdzOyBfaSA8IHNlZ3NfMy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBzZWcgPSBzZWdzXzNbX2ldO1xuICAgICAgICAgICAgY2FsZW5kYXIudHJpZ2dlcignZXZlbnRFbFJlbW92ZScsIHNlZy5lbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbGVuZGFyLmhhc1B1YmxpY0hhbmRsZXJzKCdldmVudERlc3Ryb3knKSkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBzZWdzXzQgPSBzZWdzOyBfYSA8IHNlZ3NfNC5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VnID0gc2Vnc180W19hXTtcbiAgICAgICAgICAgICAgICBjYWxlbmRhci5wdWJsaWNseVRyaWdnZXIoJ2V2ZW50RGVzdHJveScsIFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IG5ldyBFdmVudEFwaShjYWxlbmRhciwgc2VnLmV2ZW50UmFuZ2UuZGVmLCBzZWcuZXZlbnRSYW5nZS5pbnN0YW5jZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBpc01pcnJvcjogaXNNaXJyb3JzLFxuICAgICAgICAgICAgICAgICAgICAgICAgZWw6IHNlZy5lbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXc6IHZpZXdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGlzLWludGVyYWN0YWJsZVxuICAgIGZ1bmN0aW9uIGNvbXB1dGVFdmVudERyYWdnYWJsZShjb250ZXh0LCBldmVudERlZiwgZXZlbnRVaSkge1xuICAgICAgICB2YXIgY2FsZW5kYXIgPSBjb250ZXh0LmNhbGVuZGFyLCB2aWV3ID0gY29udGV4dC52aWV3O1xuICAgICAgICB2YXIgdHJhbnNmb3JtZXJzID0gY2FsZW5kYXIucGx1Z2luU3lzdGVtLmhvb2tzLmlzRHJhZ2dhYmxlVHJhbnNmb3JtZXJzO1xuICAgICAgICB2YXIgdmFsID0gZXZlbnRVaS5zdGFydEVkaXRhYmxlO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHRyYW5zZm9ybWVyc18xID0gdHJhbnNmb3JtZXJzOyBfaSA8IHRyYW5zZm9ybWVyc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHRyYW5zZm9ybWVyID0gdHJhbnNmb3JtZXJzXzFbX2ldO1xuICAgICAgICAgICAgdmFsID0gdHJhbnNmb3JtZXIodmFsLCBldmVudERlZiwgZXZlbnRVaSwgdmlldyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tcHV0ZUV2ZW50U3RhcnRSZXNpemFibGUoY29udGV4dCwgZXZlbnREZWYsIGV2ZW50VWkpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50VWkuZHVyYXRpb25FZGl0YWJsZSAmJiBjb250ZXh0Lm9wdGlvbnMuZXZlbnRSZXNpemFibGVGcm9tU3RhcnQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbXB1dGVFdmVudEVuZFJlc2l6YWJsZShjb250ZXh0LCBldmVudERlZiwgZXZlbnRVaSkge1xuICAgICAgICByZXR1cm4gZXZlbnRVaS5kdXJhdGlvbkVkaXRhYmxlO1xuICAgIH1cblxuICAgIC8vIGFwcGxpZXMgdGhlIG11dGF0aW9uIHRvIEFMTCBkZWZzL2luc3RhbmNlcyB3aXRoaW4gdGhlIGV2ZW50IHN0b3JlXG4gICAgZnVuY3Rpb24gYXBwbHlNdXRhdGlvblRvRXZlbnRTdG9yZShldmVudFN0b3JlLCBldmVudENvbmZpZ0Jhc2UsIG11dGF0aW9uLCBjYWxlbmRhcikge1xuICAgICAgICB2YXIgZXZlbnRDb25maWdzID0gY29tcGlsZUV2ZW50VWlzKGV2ZW50U3RvcmUuZGVmcywgZXZlbnRDb25maWdCYXNlKTtcbiAgICAgICAgdmFyIGRlc3QgPSBjcmVhdGVFbXB0eUV2ZW50U3RvcmUoKTtcbiAgICAgICAgZm9yICh2YXIgZGVmSWQgaW4gZXZlbnRTdG9yZS5kZWZzKSB7XG4gICAgICAgICAgICB2YXIgZGVmID0gZXZlbnRTdG9yZS5kZWZzW2RlZklkXTtcbiAgICAgICAgICAgIGRlc3QuZGVmc1tkZWZJZF0gPSBhcHBseU11dGF0aW9uVG9FdmVudERlZihkZWYsIGV2ZW50Q29uZmlnc1tkZWZJZF0sIG11dGF0aW9uLCBjYWxlbmRhci5wbHVnaW5TeXN0ZW0uaG9va3MuZXZlbnREZWZNdXRhdGlvbkFwcGxpZXJzLCBjYWxlbmRhcik7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaW5zdGFuY2VJZCBpbiBldmVudFN0b3JlLmluc3RhbmNlcykge1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gZXZlbnRTdG9yZS5pbnN0YW5jZXNbaW5zdGFuY2VJZF07XG4gICAgICAgICAgICB2YXIgZGVmID0gZGVzdC5kZWZzW2luc3RhbmNlLmRlZklkXTsgLy8gaW1wb3J0YW50IHRvIGdyYWIgdGhlIG5ld2x5IG1vZGlmaWVkIGRlZlxuICAgICAgICAgICAgZGVzdC5pbnN0YW5jZXNbaW5zdGFuY2VJZF0gPSBhcHBseU11dGF0aW9uVG9FdmVudEluc3RhbmNlKGluc3RhbmNlLCBkZWYsIGV2ZW50Q29uZmlnc1tpbnN0YW5jZS5kZWZJZF0sIG11dGF0aW9uLCBjYWxlbmRhcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFwcGx5TXV0YXRpb25Ub0V2ZW50RGVmKGV2ZW50RGVmLCBldmVudENvbmZpZywgbXV0YXRpb24sIGFwcGxpZXJzLCBjYWxlbmRhcikge1xuICAgICAgICB2YXIgc3RhbmRhcmRQcm9wcyA9IG11dGF0aW9uLnN0YW5kYXJkUHJvcHMgfHwge307XG4gICAgICAgIC8vIGlmIGhhc0VuZCBoYXMgbm90IGJlZW4gc3BlY2lmaWVkLCBndWVzcyBhIGdvb2QgdmFsdWUgYmFzZWQgb24gZGVsdGFzLlxuICAgICAgICAvLyBpZiBkdXJhdGlvbiB3aWxsIGNoYW5nZSwgdGhlcmUncyBubyB3YXkgdGhlIGRlZmF1bHQgZHVyYXRpb24gd2lsbCBwZXJzaXN0LFxuICAgICAgICAvLyBhbmQgdGh1cywgd2UgbmVlZCB0byBtYXJrIHRoZSBldmVudCBhcyBoYXZpbmcgYSByZWFsIGVuZFxuICAgICAgICBpZiAoc3RhbmRhcmRQcm9wcy5oYXNFbmQgPT0gbnVsbCAmJlxuICAgICAgICAgICAgZXZlbnRDb25maWcuZHVyYXRpb25FZGl0YWJsZSAmJlxuICAgICAgICAgICAgKG11dGF0aW9uLnN0YXJ0RGVsdGEgfHwgbXV0YXRpb24uZW5kRGVsdGEpKSB7XG4gICAgICAgICAgICBzdGFuZGFyZFByb3BzLmhhc0VuZCA9IHRydWU7IC8vIFRPRE86IGlzIHRoaXMgbXV0YXRpb24gb2theT9cbiAgICAgICAgfVxuICAgICAgICB2YXIgY29weSA9IF9fYXNzaWduKHt9LCBldmVudERlZiwgc3RhbmRhcmRQcm9wcywgeyB1aTogX19hc3NpZ24oe30sIGV2ZW50RGVmLnVpLCBzdGFuZGFyZFByb3BzLnVpKSB9KTtcbiAgICAgICAgaWYgKG11dGF0aW9uLmV4dGVuZGVkUHJvcHMpIHtcbiAgICAgICAgICAgIGNvcHkuZXh0ZW5kZWRQcm9wcyA9IF9fYXNzaWduKHt9LCBjb3B5LmV4dGVuZGVkUHJvcHMsIG11dGF0aW9uLmV4dGVuZGVkUHJvcHMpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgYXBwbGllcnNfMSA9IGFwcGxpZXJzOyBfaSA8IGFwcGxpZXJzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgYXBwbGllciA9IGFwcGxpZXJzXzFbX2ldO1xuICAgICAgICAgICAgYXBwbGllcihjb3B5LCBtdXRhdGlvbiwgY2FsZW5kYXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY29weS5oYXNFbmQgJiYgY2FsZW5kYXIub3B0KCdmb3JjZUV2ZW50RHVyYXRpb24nKSkge1xuICAgICAgICAgICAgY29weS5oYXNFbmQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbiAgICBmdW5jdGlvbiBhcHBseU11dGF0aW9uVG9FdmVudEluc3RhbmNlKGV2ZW50SW5zdGFuY2UsIGV2ZW50RGVmLCAvLyBtdXN0IGZpcnN0IGJlIG1vZGlmaWVkIGJ5IGFwcGx5TXV0YXRpb25Ub0V2ZW50RGVmXG4gICAgZXZlbnRDb25maWcsIG11dGF0aW9uLCBjYWxlbmRhcikge1xuICAgICAgICB2YXIgZGF0ZUVudiA9IGNhbGVuZGFyLmRhdGVFbnY7XG4gICAgICAgIHZhciBmb3JjZUFsbERheSA9IG11dGF0aW9uLnN0YW5kYXJkUHJvcHMgJiYgbXV0YXRpb24uc3RhbmRhcmRQcm9wcy5hbGxEYXkgPT09IHRydWU7XG4gICAgICAgIHZhciBjbGVhckVuZCA9IG11dGF0aW9uLnN0YW5kYXJkUHJvcHMgJiYgbXV0YXRpb24uc3RhbmRhcmRQcm9wcy5oYXNFbmQgPT09IGZhbHNlO1xuICAgICAgICB2YXIgY29weSA9IF9fYXNzaWduKHt9LCBldmVudEluc3RhbmNlKTtcbiAgICAgICAgaWYgKGZvcmNlQWxsRGF5KSB7XG4gICAgICAgICAgICBjb3B5LnJhbmdlID0gY29tcHV0ZUFsaWduZWREYXlSYW5nZShjb3B5LnJhbmdlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobXV0YXRpb24uZGF0ZXNEZWx0YSAmJiBldmVudENvbmZpZy5zdGFydEVkaXRhYmxlKSB7XG4gICAgICAgICAgICBjb3B5LnJhbmdlID0ge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBkYXRlRW52LmFkZChjb3B5LnJhbmdlLnN0YXJ0LCBtdXRhdGlvbi5kYXRlc0RlbHRhKSxcbiAgICAgICAgICAgICAgICBlbmQ6IGRhdGVFbnYuYWRkKGNvcHkucmFuZ2UuZW5kLCBtdXRhdGlvbi5kYXRlc0RlbHRhKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobXV0YXRpb24uc3RhcnREZWx0YSAmJiBldmVudENvbmZpZy5kdXJhdGlvbkVkaXRhYmxlKSB7XG4gICAgICAgICAgICBjb3B5LnJhbmdlID0ge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBkYXRlRW52LmFkZChjb3B5LnJhbmdlLnN0YXJ0LCBtdXRhdGlvbi5zdGFydERlbHRhKSxcbiAgICAgICAgICAgICAgICBlbmQ6IGNvcHkucmFuZ2UuZW5kXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChtdXRhdGlvbi5lbmREZWx0YSAmJiBldmVudENvbmZpZy5kdXJhdGlvbkVkaXRhYmxlKSB7XG4gICAgICAgICAgICBjb3B5LnJhbmdlID0ge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBjb3B5LnJhbmdlLnN0YXJ0LFxuICAgICAgICAgICAgICAgIGVuZDogZGF0ZUVudi5hZGQoY29weS5yYW5nZS5lbmQsIG11dGF0aW9uLmVuZERlbHRhKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2xlYXJFbmQpIHtcbiAgICAgICAgICAgIGNvcHkucmFuZ2UgPSB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IGNvcHkucmFuZ2Uuc3RhcnQsXG4gICAgICAgICAgICAgICAgZW5kOiBjYWxlbmRhci5nZXREZWZhdWx0RXZlbnRFbmQoZXZlbnREZWYuYWxsRGF5LCBjb3B5LnJhbmdlLnN0YXJ0KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpbiBjYXNlIGV2ZW50IHdhcyBhbGwtZGF5IGJ1dCB0aGUgc3VwcGxpZWQgZGVsdGFzIHdlcmUgbm90XG4gICAgICAgIC8vIGJldHRlciB1dGlsIGZvciB0aGlzP1xuICAgICAgICBpZiAoZXZlbnREZWYuYWxsRGF5KSB7XG4gICAgICAgICAgICBjb3B5LnJhbmdlID0ge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBzdGFydE9mRGF5KGNvcHkucmFuZ2Uuc3RhcnQpLFxuICAgICAgICAgICAgICAgIGVuZDogc3RhcnRPZkRheShjb3B5LnJhbmdlLmVuZClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgLy8gaGFuZGxlIGludmFsaWQgZHVyYXRpb25zXG4gICAgICAgIGlmIChjb3B5LnJhbmdlLmVuZCA8IGNvcHkucmFuZ2Uuc3RhcnQpIHtcbiAgICAgICAgICAgIGNvcHkucmFuZ2UuZW5kID0gY2FsZW5kYXIuZ2V0RGVmYXVsdEV2ZW50RW5kKGV2ZW50RGVmLmFsbERheSwgY29weS5yYW5nZS5zdGFydCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvcHk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVkdWNlRXZlbnRTdG9yZSAoZXZlbnRTdG9yZSwgYWN0aW9uLCBldmVudFNvdXJjZXMsIGRhdGVQcm9maWxlLCBjYWxlbmRhcikge1xuICAgICAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdSRUNFSVZFX0VWRU5UUyc6IC8vIHJhd1xuICAgICAgICAgICAgICAgIHJldHVybiByZWNlaXZlUmF3RXZlbnRzKGV2ZW50U3RvcmUsIGV2ZW50U291cmNlc1thY3Rpb24uc291cmNlSWRdLCBhY3Rpb24uZmV0Y2hJZCwgYWN0aW9uLmZldGNoUmFuZ2UsIGFjdGlvbi5yYXdFdmVudHMsIGNhbGVuZGFyKTtcbiAgICAgICAgICAgIGNhc2UgJ0FERF9FVkVOVFMnOiAvLyBhbHJlYWR5IHBhcnNlZCwgYnV0IG5vdCBleHBhbmRlZFxuICAgICAgICAgICAgICAgIHJldHVybiBhZGRFdmVudChldmVudFN0b3JlLCBhY3Rpb24uZXZlbnRTdG9yZSwgLy8gbmV3IG9uZXNcbiAgICAgICAgICAgICAgICBkYXRlUHJvZmlsZSA/IGRhdGVQcm9maWxlLmFjdGl2ZVJhbmdlIDogbnVsbCwgY2FsZW5kYXIpO1xuICAgICAgICAgICAgY2FzZSAnTUVSR0VfRVZFTlRTJzogLy8gYWxyZWFkeSBwYXJzZWQgYW5kIGV4cGFuZGVkXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lcmdlRXZlbnRTdG9yZXMoZXZlbnRTdG9yZSwgYWN0aW9uLmV2ZW50U3RvcmUpO1xuICAgICAgICAgICAgY2FzZSAnUFJFVic6IC8vIFRPRE86IGhvdyBkbyB3ZSB0cmFjayBhbGwgYWN0aW9ucyB0aGF0IGFmZmVjdCBkYXRlUHJvZmlsZSA6KFxuICAgICAgICAgICAgY2FzZSAnTkVYVCc6XG4gICAgICAgICAgICBjYXNlICdTRVRfREFURSc6XG4gICAgICAgICAgICBjYXNlICdTRVRfVklFV19UWVBFJzpcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZVByb2ZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4cGFuZFJlY3VycmluZyhldmVudFN0b3JlLCBkYXRlUHJvZmlsZS5hY3RpdmVSYW5nZSwgY2FsZW5kYXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50U3RvcmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnQ0hBTkdFX1RJTUVaT05FJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV6b25lRGF0ZXMoZXZlbnRTdG9yZSwgYWN0aW9uLm9sZERhdGVFbnYsIGNhbGVuZGFyLmRhdGVFbnYpO1xuICAgICAgICAgICAgY2FzZSAnTVVUQVRFX0VWRU5UUyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcGx5TXV0YXRpb25Ub1JlbGF0ZWQoZXZlbnRTdG9yZSwgYWN0aW9uLmluc3RhbmNlSWQsIGFjdGlvbi5tdXRhdGlvbiwgYWN0aW9uLmZyb21BcGksIGNhbGVuZGFyKTtcbiAgICAgICAgICAgIGNhc2UgJ1JFTU9WRV9FVkVOVF9JTlNUQU5DRVMnOlxuICAgICAgICAgICAgICAgIHJldHVybiBleGNsdWRlSW5zdGFuY2VzKGV2ZW50U3RvcmUsIGFjdGlvbi5pbnN0YW5jZXMpO1xuICAgICAgICAgICAgY2FzZSAnUkVNT1ZFX0VWRU5UX0RFRic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlckV2ZW50U3RvcmVEZWZzKGV2ZW50U3RvcmUsIGZ1bmN0aW9uIChldmVudERlZikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnREZWYuZGVmSWQgIT09IGFjdGlvbi5kZWZJZDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNhc2UgJ1JFTU9WRV9FVkVOVF9TT1VSQ0UnOlxuICAgICAgICAgICAgICAgIHJldHVybiBleGNsdWRlRXZlbnRzQnlTb3VyY2VJZChldmVudFN0b3JlLCBhY3Rpb24uc291cmNlSWQpO1xuICAgICAgICAgICAgY2FzZSAnUkVNT1ZFX0FMTF9FVkVOVF9TT1VSQ0VTJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVyRXZlbnRTdG9yZURlZnMoZXZlbnRTdG9yZSwgZnVuY3Rpb24gKGV2ZW50RGVmKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhZXZlbnREZWYuc291cmNlSWQ7IC8vIG9ubHkga2VlcCBldmVudHMgd2l0aCBubyBzb3VyY2UgaWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNhc2UgJ1JFTU9WRV9BTExfRVZFTlRTJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlRW1wdHlFdmVudFN0b3JlKCk7XG4gICAgICAgICAgICBjYXNlICdSRVNFVF9FVkVOVFMnOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGRlZnM6IGV2ZW50U3RvcmUuZGVmcyxcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VzOiBldmVudFN0b3JlLmluc3RhbmNlc1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBldmVudFN0b3JlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlY2VpdmVSYXdFdmVudHMoZXZlbnRTdG9yZSwgZXZlbnRTb3VyY2UsIGZldGNoSWQsIGZldGNoUmFuZ2UsIHJhd0V2ZW50cywgY2FsZW5kYXIpIHtcbiAgICAgICAgaWYgKGV2ZW50U291cmNlICYmIC8vIG5vdCBhbHJlYWR5IHJlbW92ZWRcbiAgICAgICAgICAgIGZldGNoSWQgPT09IGV2ZW50U291cmNlLmxhdGVzdEZldGNoSWQgLy8gVE9ETzogd2lzaCB0aGlzIGxvZ2ljIHdhcyBhbHdheXMgaW4gZXZlbnQtc291cmNlc1xuICAgICAgICApIHtcbiAgICAgICAgICAgIHZhciBzdWJzZXQgPSBwYXJzZUV2ZW50cyh0cmFuc2Zvcm1SYXdFdmVudHMocmF3RXZlbnRzLCBldmVudFNvdXJjZSwgY2FsZW5kYXIpLCBldmVudFNvdXJjZS5zb3VyY2VJZCwgY2FsZW5kYXIpO1xuICAgICAgICAgICAgaWYgKGZldGNoUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBzdWJzZXQgPSBleHBhbmRSZWN1cnJpbmcoc3Vic2V0LCBmZXRjaFJhbmdlLCBjYWxlbmRhcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWVyZ2VFdmVudFN0b3JlcyhleGNsdWRlRXZlbnRzQnlTb3VyY2VJZChldmVudFN0b3JlLCBldmVudFNvdXJjZS5zb3VyY2VJZCksIHN1YnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV2ZW50U3RvcmU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFkZEV2ZW50KGV2ZW50U3RvcmUsIHN1YnNldCwgZXhwYW5kUmFuZ2UsIGNhbGVuZGFyKSB7XG4gICAgICAgIGlmIChleHBhbmRSYW5nZSkge1xuICAgICAgICAgICAgc3Vic2V0ID0gZXhwYW5kUmVjdXJyaW5nKHN1YnNldCwgZXhwYW5kUmFuZ2UsIGNhbGVuZGFyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVyZ2VFdmVudFN0b3JlcyhldmVudFN0b3JlLCBzdWJzZXQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZXpvbmVEYXRlcyhldmVudFN0b3JlLCBvbGREYXRlRW52LCBuZXdEYXRlRW52KSB7XG4gICAgICAgIHZhciBkZWZzID0gZXZlbnRTdG9yZS5kZWZzO1xuICAgICAgICB2YXIgaW5zdGFuY2VzID0gbWFwSGFzaChldmVudFN0b3JlLmluc3RhbmNlcywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgICAgICB2YXIgZGVmID0gZGVmc1tpbnN0YW5jZS5kZWZJZF07XG4gICAgICAgICAgICBpZiAoZGVmLmFsbERheSB8fCBkZWYucmVjdXJyaW5nRGVmKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlOyAvLyBpc24ndCBkZXBlbmRlbnQgb24gdGltZXpvbmVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbih7fSwgaW5zdGFuY2UsIHsgcmFuZ2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBuZXdEYXRlRW52LmNyZWF0ZU1hcmtlcihvbGREYXRlRW52LnRvRGF0ZShpbnN0YW5jZS5yYW5nZS5zdGFydCwgaW5zdGFuY2UuZm9yY2VkU3RhcnRUem8pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogbmV3RGF0ZUVudi5jcmVhdGVNYXJrZXIob2xkRGF0ZUVudi50b0RhdGUoaW5zdGFuY2UucmFuZ2UuZW5kLCBpbnN0YW5jZS5mb3JjZWRFbmRUem8pKVxuICAgICAgICAgICAgICAgICAgICB9LCBmb3JjZWRTdGFydFR6bzogbmV3RGF0ZUVudi5jYW5Db21wdXRlT2Zmc2V0ID8gbnVsbCA6IGluc3RhbmNlLmZvcmNlZFN0YXJ0VHpvLCBmb3JjZWRFbmRUem86IG5ld0RhdGVFbnYuY2FuQ29tcHV0ZU9mZnNldCA/IG51bGwgOiBpbnN0YW5jZS5mb3JjZWRFbmRUem8gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4geyBkZWZzOiBkZWZzLCBpbnN0YW5jZXM6IGluc3RhbmNlcyB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBhcHBseU11dGF0aW9uVG9SZWxhdGVkKGV2ZW50U3RvcmUsIGluc3RhbmNlSWQsIG11dGF0aW9uLCBmcm9tQXBpLCBjYWxlbmRhcikge1xuICAgICAgICB2YXIgcmVsZXZhbnQgPSBnZXRSZWxldmFudEV2ZW50cyhldmVudFN0b3JlLCBpbnN0YW5jZUlkKTtcbiAgICAgICAgdmFyIGV2ZW50Q29uZmlnQmFzZSA9IGZyb21BcGkgP1xuICAgICAgICAgICAgeyAnJzoge1xuICAgICAgICAgICAgICAgICAgICBzdGFydEVkaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbkVkaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb25zdHJhaW50czogW10sXG4gICAgICAgICAgICAgICAgICAgIG92ZXJsYXA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGFsbG93czogW10sXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJycsXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgdGV4dENvbG9yOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lczogW11cbiAgICAgICAgICAgICAgICB9IH0gOlxuICAgICAgICAgICAgY2FsZW5kYXIuZXZlbnRVaUJhc2VzO1xuICAgICAgICByZWxldmFudCA9IGFwcGx5TXV0YXRpb25Ub0V2ZW50U3RvcmUocmVsZXZhbnQsIGV2ZW50Q29uZmlnQmFzZSwgbXV0YXRpb24sIGNhbGVuZGFyKTtcbiAgICAgICAgcmV0dXJuIG1lcmdlRXZlbnRTdG9yZXMoZXZlbnRTdG9yZSwgcmVsZXZhbnQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBleGNsdWRlRXZlbnRzQnlTb3VyY2VJZChldmVudFN0b3JlLCBzb3VyY2VJZCkge1xuICAgICAgICByZXR1cm4gZmlsdGVyRXZlbnRTdG9yZURlZnMoZXZlbnRTdG9yZSwgZnVuY3Rpb24gKGV2ZW50RGVmKSB7XG4gICAgICAgICAgICByZXR1cm4gZXZlbnREZWYuc291cmNlSWQgIT09IHNvdXJjZUlkO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gUVVFU1RJT046IHdoeSBub3QganVzdCByZXR1cm4gaW5zdGFuY2VzPyBkbyBhIGdlbmVyYWwgb2JqZWN0LXByb3BlcnR5LWV4Y2x1c2lvbiB1dGlsXG4gICAgZnVuY3Rpb24gZXhjbHVkZUluc3RhbmNlcyhldmVudFN0b3JlLCByZW1vdmFscykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGVmczogZXZlbnRTdG9yZS5kZWZzLFxuICAgICAgICAgICAgaW5zdGFuY2VzOiBmaWx0ZXJIYXNoKGV2ZW50U3RvcmUuaW5zdGFuY2VzLCBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIXJlbW92YWxzW2luc3RhbmNlLmluc3RhbmNlSWRdO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBoaWdoLWxldmVsIHNlZ21lbnRpbmctYXdhcmUgdGVzdGVyIGZ1bmN0aW9uc1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGZ1bmN0aW9uIGlzSW50ZXJhY3Rpb25WYWxpZChpbnRlcmFjdGlvbiwgY2FsZW5kYXIpIHtcbiAgICAgICAgcmV0dXJuIGlzTmV3UHJvcHNWYWxpZCh7IGV2ZW50RHJhZzogaW50ZXJhY3Rpb24gfSwgY2FsZW5kYXIpOyAvLyBIQUNLOiB0aGUgZXZlbnREcmFnIHByb3BzIGlzIHVzZWQgZm9yIEFMTCBpbnRlcmFjdGlvbnNcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNEYXRlU2VsZWN0aW9uVmFsaWQoZGF0ZVNlbGVjdGlvbiwgY2FsZW5kYXIpIHtcbiAgICAgICAgcmV0dXJuIGlzTmV3UHJvcHNWYWxpZCh7IGRhdGVTZWxlY3Rpb246IGRhdGVTZWxlY3Rpb24gfSwgY2FsZW5kYXIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc05ld1Byb3BzVmFsaWQobmV3UHJvcHMsIGNhbGVuZGFyKSB7XG4gICAgICAgIHZhciB2aWV3ID0gY2FsZW5kYXIudmlldztcbiAgICAgICAgdmFyIHByb3BzID0gX19hc3NpZ24oeyBidXNpbmVzc0hvdXJzOiB2aWV3ID8gdmlldy5wcm9wcy5idXNpbmVzc0hvdXJzIDogY3JlYXRlRW1wdHlFdmVudFN0b3JlKCksIGRhdGVTZWxlY3Rpb246ICcnLCBldmVudFN0b3JlOiBjYWxlbmRhci5zdGF0ZS5ldmVudFN0b3JlLCBldmVudFVpQmFzZXM6IGNhbGVuZGFyLmV2ZW50VWlCYXNlcywgZXZlbnRTZWxlY3Rpb246ICcnLCBldmVudERyYWc6IG51bGwsIGV2ZW50UmVzaXplOiBudWxsIH0sIG5ld1Byb3BzKTtcbiAgICAgICAgcmV0dXJuIChjYWxlbmRhci5wbHVnaW5TeXN0ZW0uaG9va3MuaXNQcm9wc1ZhbGlkIHx8IGlzUHJvcHNWYWxpZCkocHJvcHMsIGNhbGVuZGFyKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNQcm9wc1ZhbGlkKHN0YXRlLCBjYWxlbmRhciwgZGF0ZVNwYW5NZXRhLCBmaWx0ZXJDb25maWcpIHtcbiAgICAgICAgaWYgKGRhdGVTcGFuTWV0YSA9PT0gdm9pZCAwKSB7IGRhdGVTcGFuTWV0YSA9IHt9OyB9XG4gICAgICAgIGlmIChzdGF0ZS5ldmVudERyYWcgJiYgIWlzSW50ZXJhY3Rpb25Qcm9wc1ZhbGlkKHN0YXRlLCBjYWxlbmRhciwgZGF0ZVNwYW5NZXRhLCBmaWx0ZXJDb25maWcpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmRhdGVTZWxlY3Rpb24gJiYgIWlzRGF0ZVNlbGVjdGlvblByb3BzVmFsaWQoc3RhdGUsIGNhbGVuZGFyLCBkYXRlU3Bhbk1ldGEsIGZpbHRlckNvbmZpZykpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gTW92aW5nIEV2ZW50IFZhbGlkYXRpb25cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBmdW5jdGlvbiBpc0ludGVyYWN0aW9uUHJvcHNWYWxpZChzdGF0ZSwgY2FsZW5kYXIsIGRhdGVTcGFuTWV0YSwgZmlsdGVyQ29uZmlnKSB7XG4gICAgICAgIHZhciBpbnRlcmFjdGlvbiA9IHN0YXRlLmV2ZW50RHJhZzsgLy8gSEFDSzogdGhlIGV2ZW50RHJhZyBwcm9wcyBpcyB1c2VkIGZvciBBTEwgaW50ZXJhY3Rpb25zXG4gICAgICAgIHZhciBzdWJqZWN0RXZlbnRTdG9yZSA9IGludGVyYWN0aW9uLm11dGF0ZWRFdmVudHM7XG4gICAgICAgIHZhciBzdWJqZWN0RGVmcyA9IHN1YmplY3RFdmVudFN0b3JlLmRlZnM7XG4gICAgICAgIHZhciBzdWJqZWN0SW5zdGFuY2VzID0gc3ViamVjdEV2ZW50U3RvcmUuaW5zdGFuY2VzO1xuICAgICAgICB2YXIgc3ViamVjdENvbmZpZ3MgPSBjb21waWxlRXZlbnRVaXMoc3ViamVjdERlZnMsIGludGVyYWN0aW9uLmlzRXZlbnQgP1xuICAgICAgICAgICAgc3RhdGUuZXZlbnRVaUJhc2VzIDpcbiAgICAgICAgICAgIHsgJyc6IGNhbGVuZGFyLnNlbGVjdGlvbkNvbmZpZyB9IC8vIGlmIG5vdCBhIHJlYWwgZXZlbnQsIHZhbGlkYXRlIGFzIGEgc2VsZWN0aW9uXG4gICAgICAgICk7XG4gICAgICAgIGlmIChmaWx0ZXJDb25maWcpIHtcbiAgICAgICAgICAgIHN1YmplY3RDb25maWdzID0gbWFwSGFzaChzdWJqZWN0Q29uZmlncywgZmlsdGVyQ29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3RoZXJFdmVudFN0b3JlID0gZXhjbHVkZUluc3RhbmNlcyhzdGF0ZS5ldmVudFN0b3JlLCBpbnRlcmFjdGlvbi5hZmZlY3RlZEV2ZW50cy5pbnN0YW5jZXMpOyAvLyBleGNsdWRlIHRoZSBzdWJqZWN0IGV2ZW50cy4gVE9ETzogZXhjbHVkZSBkZWZzIHRvbz9cbiAgICAgICAgdmFyIG90aGVyRGVmcyA9IG90aGVyRXZlbnRTdG9yZS5kZWZzO1xuICAgICAgICB2YXIgb3RoZXJJbnN0YW5jZXMgPSBvdGhlckV2ZW50U3RvcmUuaW5zdGFuY2VzO1xuICAgICAgICB2YXIgb3RoZXJDb25maWdzID0gY29tcGlsZUV2ZW50VWlzKG90aGVyRGVmcywgc3RhdGUuZXZlbnRVaUJhc2VzKTtcbiAgICAgICAgZm9yICh2YXIgc3ViamVjdEluc3RhbmNlSWQgaW4gc3ViamVjdEluc3RhbmNlcykge1xuICAgICAgICAgICAgdmFyIHN1YmplY3RJbnN0YW5jZSA9IHN1YmplY3RJbnN0YW5jZXNbc3ViamVjdEluc3RhbmNlSWRdO1xuICAgICAgICAgICAgdmFyIHN1YmplY3RSYW5nZSA9IHN1YmplY3RJbnN0YW5jZS5yYW5nZTtcbiAgICAgICAgICAgIHZhciBzdWJqZWN0Q29uZmlnID0gc3ViamVjdENvbmZpZ3Nbc3ViamVjdEluc3RhbmNlLmRlZklkXTtcbiAgICAgICAgICAgIHZhciBzdWJqZWN0RGVmID0gc3ViamVjdERlZnNbc3ViamVjdEluc3RhbmNlLmRlZklkXTtcbiAgICAgICAgICAgIC8vIGNvbnN0cmFpbnRcbiAgICAgICAgICAgIGlmICghYWxsQ29uc3RyYWludHNQYXNzKHN1YmplY3RDb25maWcuY29uc3RyYWludHMsIHN1YmplY3RSYW5nZSwgb3RoZXJFdmVudFN0b3JlLCBzdGF0ZS5idXNpbmVzc0hvdXJzLCBjYWxlbmRhcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBvdmVybGFwXG4gICAgICAgICAgICB2YXIgb3ZlcmxhcEZ1bmMgPSBjYWxlbmRhci5vcHQoJ2V2ZW50T3ZlcmxhcCcpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvdmVybGFwRnVuYyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIG92ZXJsYXBGdW5jID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIG90aGVySW5zdGFuY2VJZCBpbiBvdGhlckluc3RhbmNlcykge1xuICAgICAgICAgICAgICAgIHZhciBvdGhlckluc3RhbmNlID0gb3RoZXJJbnN0YW5jZXNbb3RoZXJJbnN0YW5jZUlkXTtcbiAgICAgICAgICAgICAgICAvLyBpbnRlcnNlY3QhIGV2YWx1YXRlXG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlc0ludGVyc2VjdChzdWJqZWN0UmFuZ2UsIG90aGVySW5zdGFuY2UucmFuZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvdGhlck92ZXJsYXAgPSBvdGhlckNvbmZpZ3Nbb3RoZXJJbnN0YW5jZS5kZWZJZF0ub3ZlcmxhcDtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc2lkZXIgdGhlIG90aGVyIGV2ZW50J3Mgb3ZlcmxhcC4gb25seSBkbyB0aGlzIGlmIHRoZSBzdWJqZWN0IGV2ZW50IGlzIGEgXCJyZWFsXCIgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgaWYgKG90aGVyT3ZlcmxhcCA9PT0gZmFsc2UgJiYgaW50ZXJhY3Rpb24uaXNFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJqZWN0Q29uZmlnLm92ZXJsYXAgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG92ZXJsYXBGdW5jICYmICFvdmVybGFwRnVuYyhuZXcgRXZlbnRBcGkoY2FsZW5kYXIsIG90aGVyRGVmc1tvdGhlckluc3RhbmNlLmRlZklkXSwgb3RoZXJJbnN0YW5jZSksIC8vIHN0aWxsIGV2ZW50XG4gICAgICAgICAgICAgICAgICAgIG5ldyBFdmVudEFwaShjYWxlbmRhciwgc3ViamVjdERlZiwgc3ViamVjdEluc3RhbmNlKSAvLyBtb3ZpbmcgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYWxsb3cgKGEgZnVuY3Rpb24pXG4gICAgICAgICAgICB2YXIgY2FsZW5kYXJFdmVudFN0b3JlID0gY2FsZW5kYXIuc3RhdGUuZXZlbnRTdG9yZTsgLy8gbmVlZCBnbG9iYWwtdG8tY2FsZW5kYXIsIG5vdCBsb2NhbCB0byBjb21wb25lbnQgKHNwbGl0dGFibGUpc3RhdGVcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBzdWJqZWN0Q29uZmlnLmFsbG93czsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc3ViamVjdEFsbG93ID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgIHZhciBzdWJqZWN0RGF0ZVNwYW4gPSBfX2Fzc2lnbih7fSwgZGF0ZVNwYW5NZXRhLCB7IHJhbmdlOiBzdWJqZWN0SW5zdGFuY2UucmFuZ2UsIGFsbERheTogc3ViamVjdERlZi5hbGxEYXkgfSk7XG4gICAgICAgICAgICAgICAgdmFyIG9yaWdEZWYgPSBjYWxlbmRhckV2ZW50U3RvcmUuZGVmc1tzdWJqZWN0RGVmLmRlZklkXTtcbiAgICAgICAgICAgICAgICB2YXIgb3JpZ0luc3RhbmNlID0gY2FsZW5kYXJFdmVudFN0b3JlLmluc3RhbmNlc1tzdWJqZWN0SW5zdGFuY2VJZF07XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50QXBpID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIGlmIChvcmlnRGVmKSB7IC8vIHdhcyBwcmV2aW91c2x5IGluIHRoZSBjYWxlbmRhclxuICAgICAgICAgICAgICAgICAgICBldmVudEFwaSA9IG5ldyBFdmVudEFwaShjYWxlbmRhciwgb3JpZ0RlZiwgb3JpZ0luc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7IC8vIHdhcyBhbiBleHRlcm5hbCBldmVudFxuICAgICAgICAgICAgICAgICAgICBldmVudEFwaSA9IG5ldyBFdmVudEFwaShjYWxlbmRhciwgc3ViamVjdERlZik7IC8vIG5vIGluc3RhbmNlLCBiZWNhdXNlIGhhZCBubyBkYXRlc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXN1YmplY3RBbGxvdyhjYWxlbmRhci5idWlsZERhdGVTcGFuQXBpKHN1YmplY3REYXRlU3BhbiksIGV2ZW50QXBpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBEYXRlIFNlbGVjdGlvbiBWYWxpZGF0aW9uXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgZnVuY3Rpb24gaXNEYXRlU2VsZWN0aW9uUHJvcHNWYWxpZChzdGF0ZSwgY2FsZW5kYXIsIGRhdGVTcGFuTWV0YSwgZmlsdGVyQ29uZmlnKSB7XG4gICAgICAgIHZhciByZWxldmFudEV2ZW50U3RvcmUgPSBzdGF0ZS5ldmVudFN0b3JlO1xuICAgICAgICB2YXIgcmVsZXZhbnREZWZzID0gcmVsZXZhbnRFdmVudFN0b3JlLmRlZnM7XG4gICAgICAgIHZhciByZWxldmFudEluc3RhbmNlcyA9IHJlbGV2YW50RXZlbnRTdG9yZS5pbnN0YW5jZXM7XG4gICAgICAgIHZhciBzZWxlY3Rpb24gPSBzdGF0ZS5kYXRlU2VsZWN0aW9uO1xuICAgICAgICB2YXIgc2VsZWN0aW9uUmFuZ2UgPSBzZWxlY3Rpb24ucmFuZ2U7XG4gICAgICAgIHZhciBzZWxlY3Rpb25Db25maWcgPSBjYWxlbmRhci5zZWxlY3Rpb25Db25maWc7XG4gICAgICAgIGlmIChmaWx0ZXJDb25maWcpIHtcbiAgICAgICAgICAgIHNlbGVjdGlvbkNvbmZpZyA9IGZpbHRlckNvbmZpZyhzZWxlY3Rpb25Db25maWcpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNvbnN0cmFpbnRcbiAgICAgICAgaWYgKCFhbGxDb25zdHJhaW50c1Bhc3Moc2VsZWN0aW9uQ29uZmlnLmNvbnN0cmFpbnRzLCBzZWxlY3Rpb25SYW5nZSwgcmVsZXZhbnRFdmVudFN0b3JlLCBzdGF0ZS5idXNpbmVzc0hvdXJzLCBjYWxlbmRhcikpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBvdmVybGFwXG4gICAgICAgIHZhciBvdmVybGFwRnVuYyA9IGNhbGVuZGFyLm9wdCgnc2VsZWN0T3ZlcmxhcCcpO1xuICAgICAgICBpZiAodHlwZW9mIG92ZXJsYXBGdW5jICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvdmVybGFwRnVuYyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgcmVsZXZhbnRJbnN0YW5jZUlkIGluIHJlbGV2YW50SW5zdGFuY2VzKSB7XG4gICAgICAgICAgICB2YXIgcmVsZXZhbnRJbnN0YW5jZSA9IHJlbGV2YW50SW5zdGFuY2VzW3JlbGV2YW50SW5zdGFuY2VJZF07XG4gICAgICAgICAgICAvLyBpbnRlcnNlY3QhIGV2YWx1YXRlXG4gICAgICAgICAgICBpZiAocmFuZ2VzSW50ZXJzZWN0KHNlbGVjdGlvblJhbmdlLCByZWxldmFudEluc3RhbmNlLnJhbmdlKSkge1xuICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rpb25Db25maWcub3ZlcmxhcCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3ZlcmxhcEZ1bmMgJiYgIW92ZXJsYXBGdW5jKG5ldyBFdmVudEFwaShjYWxlbmRhciwgcmVsZXZhbnREZWZzW3JlbGV2YW50SW5zdGFuY2UuZGVmSWRdLCByZWxldmFudEluc3RhbmNlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBhbGxvdyAoYSBmdW5jdGlvbilcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHNlbGVjdGlvbkNvbmZpZy5hbGxvd3M7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2VsZWN0aW9uQWxsb3cgPSBfYVtfaV07XG4gICAgICAgICAgICB2YXIgZnVsbERhdGVTcGFuID0gX19hc3NpZ24oe30sIGRhdGVTcGFuTWV0YSwgc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIGlmICghc2VsZWN0aW9uQWxsb3coY2FsZW5kYXIuYnVpbGREYXRlU3BhbkFwaShmdWxsRGF0ZVNwYW4pLCBudWxsKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gQ29uc3RyYWludCBVdGlsc1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGZ1bmN0aW9uIGFsbENvbnN0cmFpbnRzUGFzcyhjb25zdHJhaW50cywgc3ViamVjdFJhbmdlLCBvdGhlckV2ZW50U3RvcmUsIGJ1c2luZXNzSG91cnNVbmV4cGFuZGVkLCBjYWxlbmRhcikge1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGNvbnN0cmFpbnRzXzEgPSBjb25zdHJhaW50czsgX2kgPCBjb25zdHJhaW50c18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGNvbnN0cmFpbnQgPSBjb25zdHJhaW50c18xW19pXTtcbiAgICAgICAgICAgIGlmICghYW55UmFuZ2VzQ29udGFpblJhbmdlKGNvbnN0cmFpbnRUb1Jhbmdlcyhjb25zdHJhaW50LCBzdWJqZWN0UmFuZ2UsIG90aGVyRXZlbnRTdG9yZSwgYnVzaW5lc3NIb3Vyc1VuZXhwYW5kZWQsIGNhbGVuZGFyKSwgc3ViamVjdFJhbmdlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29uc3RyYWludFRvUmFuZ2VzKGNvbnN0cmFpbnQsIHN1YmplY3RSYW5nZSwgLy8gZm9yIGV4cGFuZGluZyBhIHJlY3VycmluZyBjb25zdHJhaW50LCBvciBleHBhbmRpbmcgYnVzaW5lc3MgaG91cnNcbiAgICBvdGhlckV2ZW50U3RvcmUsIC8vIGZvciBpZiBjb25zdHJhaW50IGlzIGFuIGV2ZW4gZ3JvdXAgSURcbiAgICBidXNpbmVzc0hvdXJzVW5leHBhbmRlZCwgLy8gZm9yIGlmIGNvbnN0cmFpbnQgaXMgJ2J1c2luZXNzSG91cnMnXG4gICAgY2FsZW5kYXIgLy8gZm9yIGV4cGFuZGluZyBidXNpbmVzc2hvdXJzXG4gICAgKSB7XG4gICAgICAgIGlmIChjb25zdHJhaW50ID09PSAnYnVzaW5lc3NIb3VycycpIHtcbiAgICAgICAgICAgIHJldHVybiBldmVudFN0b3JlVG9SYW5nZXMoZXhwYW5kUmVjdXJyaW5nKGJ1c2luZXNzSG91cnNVbmV4cGFuZGVkLCBzdWJqZWN0UmFuZ2UsIGNhbGVuZGFyKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGNvbnN0cmFpbnQgPT09ICdzdHJpbmcnKSB7IC8vIGFuIGdyb3VwIElEXG4gICAgICAgICAgICByZXR1cm4gZXZlbnRTdG9yZVRvUmFuZ2VzKGZpbHRlckV2ZW50U3RvcmVEZWZzKG90aGVyRXZlbnRTdG9yZSwgZnVuY3Rpb24gKGV2ZW50RGVmKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50RGVmLmdyb3VwSWQgPT09IGNvbnN0cmFpbnQ7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGNvbnN0cmFpbnQgPT09ICdvYmplY3QnICYmIGNvbnN0cmFpbnQpIHsgLy8gbm9uLW51bGwgb2JqZWN0XG4gICAgICAgICAgICByZXR1cm4gZXZlbnRTdG9yZVRvUmFuZ2VzKGV4cGFuZFJlY3VycmluZyhjb25zdHJhaW50LCBzdWJqZWN0UmFuZ2UsIGNhbGVuZGFyKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtdOyAvLyBpZiBpdCdzIGZhbHNlXG4gICAgfVxuICAgIC8vIFRPRE86IG1vdmUgdG8gZXZlbnQtc3RvcmUgZmlsZT9cbiAgICBmdW5jdGlvbiBldmVudFN0b3JlVG9SYW5nZXMoZXZlbnRTdG9yZSkge1xuICAgICAgICB2YXIgaW5zdGFuY2VzID0gZXZlbnRTdG9yZS5pbnN0YW5jZXM7XG4gICAgICAgIHZhciByYW5nZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaW5zdGFuY2VJZCBpbiBpbnN0YW5jZXMpIHtcbiAgICAgICAgICAgIHJhbmdlcy5wdXNoKGluc3RhbmNlc1tpbnN0YW5jZUlkXS5yYW5nZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJhbmdlcztcbiAgICB9XG4gICAgLy8gVE9ETzogbW92ZSB0byBnZW9tIGZpbGU/XG4gICAgZnVuY3Rpb24gYW55UmFuZ2VzQ29udGFpblJhbmdlKG91dGVyUmFuZ2VzLCBpbm5lclJhbmdlKSB7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgb3V0ZXJSYW5nZXNfMSA9IG91dGVyUmFuZ2VzOyBfaSA8IG91dGVyUmFuZ2VzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgb3V0ZXJSYW5nZSA9IG91dGVyUmFuZ2VzXzFbX2ldO1xuICAgICAgICAgICAgaWYgKHJhbmdlQ29udGFpbnNSYW5nZShvdXRlclJhbmdlLCBpbm5lclJhbmdlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gUGFyc2luZ1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbnN0cmFpbnQoaW5wdXQsIGNhbGVuZGFyKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRXZlbnRzKGlucHV0LCAnJywgY2FsZW5kYXIsIHRydWUpOyAvLyBhbGxvd09wZW5SYW5nZT10cnVlXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyAmJiBpbnB1dCkgeyAvLyBub24tbnVsbCBvYmplY3RcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUV2ZW50cyhbaW5wdXRdLCAnJywgY2FsZW5kYXIsIHRydWUpOyAvLyBhbGxvd09wZW5SYW5nZT10cnVlXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGh0bWxFc2NhcGUocykge1xuICAgICAgICByZXR1cm4gKHMgKyAnJykucmVwbGFjZSgvJi9nLCAnJmFtcDsnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgJyYjMDM5OycpXG4gICAgICAgICAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxuL2csICc8YnIgLz4nKTtcbiAgICB9XG4gICAgLy8gR2l2ZW4gYSBoYXNoIG9mIENTUyBwcm9wZXJ0aWVzLCByZXR1cm5zIGEgc3RyaW5nIG9mIENTUy5cbiAgICAvLyBVc2VzIHByb3BlcnR5IG5hbWVzIGFzLWlzIChubyBjYW1lbC1jYXNlIGNvbnZlcnNpb24pLiBXaWxsIG5vdCBtYWtlIHN0YXRlbWVudHMgZm9yIG51bGwvdW5kZWZpbmVkIHZhbHVlcy5cbiAgICBmdW5jdGlvbiBjc3NUb1N0cihjc3NQcm9wcykge1xuICAgICAgICB2YXIgc3RhdGVtZW50cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBuYW1lXzEgaW4gY3NzUHJvcHMpIHtcbiAgICAgICAgICAgIHZhciB2YWwgPSBjc3NQcm9wc1tuYW1lXzFdO1xuICAgICAgICAgICAgaWYgKHZhbCAhPSBudWxsICYmIHZhbCAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZW1lbnRzLnB1c2gobmFtZV8xICsgJzonICsgdmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhdGVtZW50cy5qb2luKCc7Jyk7XG4gICAgfVxuICAgIC8vIEdpdmVuIGFuIG9iamVjdCBoYXNoIG9mIEhUTUwgYXR0cmlidXRlIG5hbWVzIHRvIHZhbHVlcyxcbiAgICAvLyBnZW5lcmF0ZXMgYSBzdHJpbmcgdGhhdCBjYW4gYmUgaW5qZWN0ZWQgYmV0d2VlbiA8ID4gaW4gSFRNTFxuICAgIGZ1bmN0aW9uIGF0dHJzVG9TdHIoYXR0cnMpIHtcbiAgICAgICAgdmFyIHBhcnRzID0gW107XG4gICAgICAgIGZvciAodmFyIG5hbWVfMiBpbiBhdHRycykge1xuICAgICAgICAgICAgdmFyIHZhbCA9IGF0dHJzW25hbWVfMl07XG4gICAgICAgICAgICBpZiAodmFsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKG5hbWVfMiArICc9XCInICsgaHRtbEVzY2FwZSh2YWwpICsgJ1wiJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oJyAnKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGFyc2VDbGFzc05hbWUocmF3KSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJhdykpIHtcbiAgICAgICAgICAgIHJldHVybiByYXc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHJhdyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiByYXcuc3BsaXQoL1xccysvKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBVTlNDT1BFRF9FVkVOVF9VSV9QUk9QUyA9IHtcbiAgICAgICAgZWRpdGFibGU6IEJvb2xlYW4sXG4gICAgICAgIHN0YXJ0RWRpdGFibGU6IEJvb2xlYW4sXG4gICAgICAgIGR1cmF0aW9uRWRpdGFibGU6IEJvb2xlYW4sXG4gICAgICAgIGNvbnN0cmFpbnQ6IG51bGwsXG4gICAgICAgIG92ZXJsYXA6IG51bGwsXG4gICAgICAgIGFsbG93OiBudWxsLFxuICAgICAgICBjbGFzc05hbWU6IHBhcnNlQ2xhc3NOYW1lLFxuICAgICAgICBjbGFzc05hbWVzOiBwYXJzZUNsYXNzTmFtZSxcbiAgICAgICAgY29sb3I6IFN0cmluZyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBTdHJpbmcsXG4gICAgICAgIGJvcmRlckNvbG9yOiBTdHJpbmcsXG4gICAgICAgIHRleHRDb2xvcjogU3RyaW5nXG4gICAgfTtcbiAgICBmdW5jdGlvbiBwcm9jZXNzVW5zY29wZWRVaVByb3BzKHJhd1Byb3BzLCBjYWxlbmRhciwgbGVmdG92ZXJzKSB7XG4gICAgICAgIHZhciBwcm9wcyA9IHJlZmluZVByb3BzKHJhd1Byb3BzLCBVTlNDT1BFRF9FVkVOVF9VSV9QUk9QUywge30sIGxlZnRvdmVycyk7XG4gICAgICAgIHZhciBjb25zdHJhaW50ID0gbm9ybWFsaXplQ29uc3RyYWludChwcm9wcy5jb25zdHJhaW50LCBjYWxlbmRhcik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFydEVkaXRhYmxlOiBwcm9wcy5zdGFydEVkaXRhYmxlICE9IG51bGwgPyBwcm9wcy5zdGFydEVkaXRhYmxlIDogcHJvcHMuZWRpdGFibGUsXG4gICAgICAgICAgICBkdXJhdGlvbkVkaXRhYmxlOiBwcm9wcy5kdXJhdGlvbkVkaXRhYmxlICE9IG51bGwgPyBwcm9wcy5kdXJhdGlvbkVkaXRhYmxlIDogcHJvcHMuZWRpdGFibGUsXG4gICAgICAgICAgICBjb25zdHJhaW50czogY29uc3RyYWludCAhPSBudWxsID8gW2NvbnN0cmFpbnRdIDogW10sXG4gICAgICAgICAgICBvdmVybGFwOiBwcm9wcy5vdmVybGFwLFxuICAgICAgICAgICAgYWxsb3dzOiBwcm9wcy5hbGxvdyAhPSBudWxsID8gW3Byb3BzLmFsbG93XSA6IFtdLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBwcm9wcy5iYWNrZ3JvdW5kQ29sb3IgfHwgcHJvcHMuY29sb3IsXG4gICAgICAgICAgICBib3JkZXJDb2xvcjogcHJvcHMuYm9yZGVyQ29sb3IgfHwgcHJvcHMuY29sb3IsXG4gICAgICAgICAgICB0ZXh0Q29sb3I6IHByb3BzLnRleHRDb2xvcixcbiAgICAgICAgICAgIGNsYXNzTmFtZXM6IHByb3BzLmNsYXNzTmFtZXMuY29uY2F0KHByb3BzLmNsYXNzTmFtZSlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcHJvY2Vzc1Njb3BlZFVpUHJvcHMocHJlZml4LCByYXdTY29wZWQsIGNhbGVuZGFyLCBsZWZ0b3ZlcnMpIHtcbiAgICAgICAgdmFyIHJhd1Vuc2NvcGVkID0ge307XG4gICAgICAgIHZhciB3YXNGb3VuZCA9IHt9O1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gVU5TQ09QRURfRVZFTlRfVUlfUFJPUFMpIHtcbiAgICAgICAgICAgIHZhciBzY29wZWRLZXkgPSBwcmVmaXggKyBjYXBpdGFsaXNlRmlyc3RMZXR0ZXIoa2V5KTtcbiAgICAgICAgICAgIHJhd1Vuc2NvcGVkW2tleV0gPSByYXdTY29wZWRbc2NvcGVkS2V5XTtcbiAgICAgICAgICAgIHdhc0ZvdW5kW3Njb3BlZEtleV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmVmaXggPT09ICdldmVudCcpIHtcbiAgICAgICAgICAgIHJhd1Vuc2NvcGVkLmVkaXRhYmxlID0gcmF3U2NvcGVkLmVkaXRhYmxlOyAvLyBzcGVjaWFsIGNhc2UuIHRoZXJlIGlzIG5vICdldmVudEVkaXRhYmxlJywganVzdCAnZWRpdGFibGUnXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxlZnRvdmVycykge1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHJhd1Njb3BlZCkge1xuICAgICAgICAgICAgICAgIGlmICghd2FzRm91bmRba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICBsZWZ0b3ZlcnNba2V5XSA9IHJhd1Njb3BlZFtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvY2Vzc1Vuc2NvcGVkVWlQcm9wcyhyYXdVbnNjb3BlZCwgY2FsZW5kYXIpO1xuICAgIH1cbiAgICB2YXIgRU1QVFlfRVZFTlRfVUkgPSB7XG4gICAgICAgIHN0YXJ0RWRpdGFibGU6IG51bGwsXG4gICAgICAgIGR1cmF0aW9uRWRpdGFibGU6IG51bGwsXG4gICAgICAgIGNvbnN0cmFpbnRzOiBbXSxcbiAgICAgICAgb3ZlcmxhcDogbnVsbCxcbiAgICAgICAgYWxsb3dzOiBbXSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnJyxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICcnLFxuICAgICAgICB0ZXh0Q29sb3I6ICcnLFxuICAgICAgICBjbGFzc05hbWVzOiBbXVxuICAgIH07XG4gICAgLy8gcHJldmVudCBhZ2FpbnN0IHByb2JsZW1zIHdpdGggPDIgYXJncyFcbiAgICBmdW5jdGlvbiBjb21iaW5lRXZlbnRVaXModWlzKSB7XG4gICAgICAgIHJldHVybiB1aXMucmVkdWNlKGNvbWJpbmVUd29FdmVudFVpcywgRU1QVFlfRVZFTlRfVUkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21iaW5lVHdvRXZlbnRVaXMoaXRlbTAsIGl0ZW0xKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFydEVkaXRhYmxlOiBpdGVtMS5zdGFydEVkaXRhYmxlICE9IG51bGwgPyBpdGVtMS5zdGFydEVkaXRhYmxlIDogaXRlbTAuc3RhcnRFZGl0YWJsZSxcbiAgICAgICAgICAgIGR1cmF0aW9uRWRpdGFibGU6IGl0ZW0xLmR1cmF0aW9uRWRpdGFibGUgIT0gbnVsbCA/IGl0ZW0xLmR1cmF0aW9uRWRpdGFibGUgOiBpdGVtMC5kdXJhdGlvbkVkaXRhYmxlLFxuICAgICAgICAgICAgY29uc3RyYWludHM6IGl0ZW0wLmNvbnN0cmFpbnRzLmNvbmNhdChpdGVtMS5jb25zdHJhaW50cyksXG4gICAgICAgICAgICBvdmVybGFwOiB0eXBlb2YgaXRlbTEub3ZlcmxhcCA9PT0gJ2Jvb2xlYW4nID8gaXRlbTEub3ZlcmxhcCA6IGl0ZW0wLm92ZXJsYXAsXG4gICAgICAgICAgICBhbGxvd3M6IGl0ZW0wLmFsbG93cy5jb25jYXQoaXRlbTEuYWxsb3dzKSxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogaXRlbTEuYmFja2dyb3VuZENvbG9yIHx8IGl0ZW0wLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgIGJvcmRlckNvbG9yOiBpdGVtMS5ib3JkZXJDb2xvciB8fCBpdGVtMC5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgIHRleHRDb2xvcjogaXRlbTEudGV4dENvbG9yIHx8IGl0ZW0wLnRleHRDb2xvcixcbiAgICAgICAgICAgIGNsYXNzTmFtZXM6IGl0ZW0wLmNsYXNzTmFtZXMuY29uY2F0KGl0ZW0xLmNsYXNzTmFtZXMpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIE5PTl9EQVRFX1BST1BTID0ge1xuICAgICAgICBpZDogU3RyaW5nLFxuICAgICAgICBncm91cElkOiBTdHJpbmcsXG4gICAgICAgIHRpdGxlOiBTdHJpbmcsXG4gICAgICAgIHVybDogU3RyaW5nLFxuICAgICAgICByZW5kZXJpbmc6IFN0cmluZyxcbiAgICAgICAgZXh0ZW5kZWRQcm9wczogbnVsbFxuICAgIH07XG4gICAgdmFyIERBVEVfUFJPUFMgPSB7XG4gICAgICAgIHN0YXJ0OiBudWxsLFxuICAgICAgICBkYXRlOiBudWxsLFxuICAgICAgICBlbmQ6IG51bGwsXG4gICAgICAgIGFsbERheTogbnVsbFxuICAgIH07XG4gICAgdmFyIHVpZCA9IDA7XG4gICAgZnVuY3Rpb24gcGFyc2VFdmVudChyYXcsIHNvdXJjZUlkLCBjYWxlbmRhciwgYWxsb3dPcGVuUmFuZ2UpIHtcbiAgICAgICAgdmFyIGFsbERheURlZmF1bHQgPSBjb21wdXRlSXNBbGxEYXlEZWZhdWx0KHNvdXJjZUlkLCBjYWxlbmRhcik7XG4gICAgICAgIHZhciBsZWZ0b3ZlcnMwID0ge307XG4gICAgICAgIHZhciByZWN1cnJpbmdSZXMgPSBwYXJzZVJlY3VycmluZyhyYXcsIC8vIHJhdywgYnV0IHdpdGggc2luZ2xlLWV2ZW50IHN0dWZmIHN0cmlwcGVkIG91dFxuICAgICAgICBhbGxEYXlEZWZhdWx0LCBjYWxlbmRhci5kYXRlRW52LCBjYWxlbmRhci5wbHVnaW5TeXN0ZW0uaG9va3MucmVjdXJyaW5nVHlwZXMsIGxlZnRvdmVyczAgLy8gd2lsbCBwb3B1bGF0ZSB3aXRoIG5vbi1yZWN1cnJpbmcgcHJvcHNcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHJlY3VycmluZ1Jlcykge1xuICAgICAgICAgICAgdmFyIGRlZiA9IHBhcnNlRXZlbnREZWYobGVmdG92ZXJzMCwgc291cmNlSWQsIHJlY3VycmluZ1Jlcy5hbGxEYXksIEJvb2xlYW4ocmVjdXJyaW5nUmVzLmR1cmF0aW9uKSwgY2FsZW5kYXIpO1xuICAgICAgICAgICAgZGVmLnJlY3VycmluZ0RlZiA9IHtcbiAgICAgICAgICAgICAgICB0eXBlSWQ6IHJlY3VycmluZ1Jlcy50eXBlSWQsXG4gICAgICAgICAgICAgICAgdHlwZURhdGE6IHJlY3VycmluZ1Jlcy50eXBlRGF0YSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogcmVjdXJyaW5nUmVzLmR1cmF0aW9uXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHsgZGVmOiBkZWYsIGluc3RhbmNlOiBudWxsIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgbGVmdG92ZXJzMSA9IHt9O1xuICAgICAgICAgICAgdmFyIHNpbmdsZVJlcyA9IHBhcnNlU2luZ2xlKHJhdywgYWxsRGF5RGVmYXVsdCwgY2FsZW5kYXIsIGxlZnRvdmVyczEsIGFsbG93T3BlblJhbmdlKTtcbiAgICAgICAgICAgIGlmIChzaW5nbGVSZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVmID0gcGFyc2VFdmVudERlZihsZWZ0b3ZlcnMxLCBzb3VyY2VJZCwgc2luZ2xlUmVzLmFsbERheSwgc2luZ2xlUmVzLmhhc0VuZCwgY2FsZW5kYXIpO1xuICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZUV2ZW50SW5zdGFuY2UoZGVmLmRlZklkLCBzaW5nbGVSZXMucmFuZ2UsIHNpbmdsZVJlcy5mb3JjZWRTdGFydFR6bywgc2luZ2xlUmVzLmZvcmNlZEVuZFR6byk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZGVmOiBkZWYsIGluc3RhbmNlOiBpbnN0YW5jZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKlxuICAgIFdpbGwgTk9UIHBvcHVsYXRlIGV4dGVuZGVkUHJvcHMgd2l0aCB0aGUgbGVmdG92ZXIgcHJvcGVydGllcy5cbiAgICBXaWxsIE5PVCBwb3B1bGF0ZSBkYXRlLXJlbGF0ZWQgcHJvcHMuXG4gICAgVGhlIEV2ZW50Tm9uRGF0ZUlucHV0IGhhcyBiZWVuIG5vcm1hbGl6ZWQgKGlkID0+IHB1YmxpY0lkLCBldGMpLlxuICAgICovXG4gICAgZnVuY3Rpb24gcGFyc2VFdmVudERlZihyYXcsIHNvdXJjZUlkLCBhbGxEYXksIGhhc0VuZCwgY2FsZW5kYXIpIHtcbiAgICAgICAgdmFyIGxlZnRvdmVycyA9IHt9O1xuICAgICAgICB2YXIgZGVmID0gcGx1Y2tOb25EYXRlUHJvcHMocmF3LCBjYWxlbmRhciwgbGVmdG92ZXJzKTtcbiAgICAgICAgZGVmLmRlZklkID0gU3RyaW5nKHVpZCsrKTtcbiAgICAgICAgZGVmLnNvdXJjZUlkID0gc291cmNlSWQ7XG4gICAgICAgIGRlZi5hbGxEYXkgPSBhbGxEYXk7XG4gICAgICAgIGRlZi5oYXNFbmQgPSBoYXNFbmQ7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBjYWxlbmRhci5wbHVnaW5TeXN0ZW0uaG9va3MuZXZlbnREZWZQYXJzZXJzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGV2ZW50RGVmUGFyc2VyID0gX2FbX2ldO1xuICAgICAgICAgICAgdmFyIG5ld0xlZnRvdmVycyA9IHt9O1xuICAgICAgICAgICAgZXZlbnREZWZQYXJzZXIoZGVmLCBsZWZ0b3ZlcnMsIG5ld0xlZnRvdmVycyk7XG4gICAgICAgICAgICBsZWZ0b3ZlcnMgPSBuZXdMZWZ0b3ZlcnM7XG4gICAgICAgIH1cbiAgICAgICAgZGVmLmV4dGVuZGVkUHJvcHMgPSBfX2Fzc2lnbihsZWZ0b3ZlcnMsIGRlZi5leHRlbmRlZFByb3BzIHx8IHt9KTtcbiAgICAgICAgLy8gaGVscCBvdXQgRXZlbnRBcGkgZnJvbSBoYXZpbmcgdXNlciBtb2RpZnkgcHJvcHNcbiAgICAgICAgT2JqZWN0LmZyZWV6ZShkZWYudWkuY2xhc3NOYW1lcyk7XG4gICAgICAgIE9iamVjdC5mcmVlemUoZGVmLmV4dGVuZGVkUHJvcHMpO1xuICAgICAgICByZXR1cm4gZGVmO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVFdmVudEluc3RhbmNlKGRlZklkLCByYW5nZSwgZm9yY2VkU3RhcnRUem8sIGZvcmNlZEVuZFR6bykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5zdGFuY2VJZDogU3RyaW5nKHVpZCsrKSxcbiAgICAgICAgICAgIGRlZklkOiBkZWZJZCxcbiAgICAgICAgICAgIHJhbmdlOiByYW5nZSxcbiAgICAgICAgICAgIGZvcmNlZFN0YXJ0VHpvOiBmb3JjZWRTdGFydFR6byA9PSBudWxsID8gbnVsbCA6IGZvcmNlZFN0YXJ0VHpvLFxuICAgICAgICAgICAgZm9yY2VkRW5kVHpvOiBmb3JjZWRFbmRUem8gPT0gbnVsbCA/IG51bGwgOiBmb3JjZWRFbmRUem9cbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGFyc2VTaW5nbGUocmF3LCBhbGxEYXlEZWZhdWx0LCBjYWxlbmRhciwgbGVmdG92ZXJzLCBhbGxvd09wZW5SYW5nZSkge1xuICAgICAgICB2YXIgcHJvcHMgPSBwbHVja0RhdGVQcm9wcyhyYXcsIGxlZnRvdmVycyk7XG4gICAgICAgIHZhciBhbGxEYXkgPSBwcm9wcy5hbGxEYXk7XG4gICAgICAgIHZhciBzdGFydE1ldGE7XG4gICAgICAgIHZhciBzdGFydE1hcmtlciA9IG51bGw7XG4gICAgICAgIHZhciBoYXNFbmQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVuZE1ldGE7XG4gICAgICAgIHZhciBlbmRNYXJrZXIgPSBudWxsO1xuICAgICAgICBzdGFydE1ldGEgPSBjYWxlbmRhci5kYXRlRW52LmNyZWF0ZU1hcmtlck1ldGEocHJvcHMuc3RhcnQpO1xuICAgICAgICBpZiAoc3RhcnRNZXRhKSB7XG4gICAgICAgICAgICBzdGFydE1hcmtlciA9IHN0YXJ0TWV0YS5tYXJrZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWFsbG93T3BlblJhbmdlKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcHMuZW5kICE9IG51bGwpIHtcbiAgICAgICAgICAgIGVuZE1ldGEgPSBjYWxlbmRhci5kYXRlRW52LmNyZWF0ZU1hcmtlck1ldGEocHJvcHMuZW5kKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWxsRGF5ID09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChhbGxEYXlEZWZhdWx0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhbGxEYXkgPSBhbGxEYXlEZWZhdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZmFsbCBiYWNrIHRvIHRoZSBkYXRlIHByb3BzIExBU1RcbiAgICAgICAgICAgICAgICBhbGxEYXkgPSAoIXN0YXJ0TWV0YSB8fCBzdGFydE1ldGEuaXNUaW1lVW5zcGVjaWZpZWQpICYmXG4gICAgICAgICAgICAgICAgICAgICghZW5kTWV0YSB8fCBlbmRNZXRhLmlzVGltZVVuc3BlY2lmaWVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYWxsRGF5ICYmIHN0YXJ0TWFya2VyKSB7XG4gICAgICAgICAgICBzdGFydE1hcmtlciA9IHN0YXJ0T2ZEYXkoc3RhcnRNYXJrZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmRNZXRhKSB7XG4gICAgICAgICAgICBlbmRNYXJrZXIgPSBlbmRNZXRhLm1hcmtlcjtcbiAgICAgICAgICAgIGlmIChhbGxEYXkpIHtcbiAgICAgICAgICAgICAgICBlbmRNYXJrZXIgPSBzdGFydE9mRGF5KGVuZE1hcmtlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhcnRNYXJrZXIgJiYgZW5kTWFya2VyIDw9IHN0YXJ0TWFya2VyKSB7XG4gICAgICAgICAgICAgICAgZW5kTWFya2VyID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5kTWFya2VyKSB7XG4gICAgICAgICAgICBoYXNFbmQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFhbGxvd09wZW5SYW5nZSkge1xuICAgICAgICAgICAgaGFzRW5kID0gY2FsZW5kYXIub3B0KCdmb3JjZUV2ZW50RHVyYXRpb24nKSB8fCBmYWxzZTtcbiAgICAgICAgICAgIGVuZE1hcmtlciA9IGNhbGVuZGFyLmRhdGVFbnYuYWRkKHN0YXJ0TWFya2VyLCBhbGxEYXkgP1xuICAgICAgICAgICAgICAgIGNhbGVuZGFyLmRlZmF1bHRBbGxEYXlFdmVudER1cmF0aW9uIDpcbiAgICAgICAgICAgICAgICBjYWxlbmRhci5kZWZhdWx0VGltZWRFdmVudER1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWxsRGF5OiBhbGxEYXksXG4gICAgICAgICAgICBoYXNFbmQ6IGhhc0VuZCxcbiAgICAgICAgICAgIHJhbmdlOiB7IHN0YXJ0OiBzdGFydE1hcmtlciwgZW5kOiBlbmRNYXJrZXIgfSxcbiAgICAgICAgICAgIGZvcmNlZFN0YXJ0VHpvOiBzdGFydE1ldGEgPyBzdGFydE1ldGEuZm9yY2VkVHpvIDogbnVsbCxcbiAgICAgICAgICAgIGZvcmNlZEVuZFR6bzogZW5kTWV0YSA/IGVuZE1ldGEuZm9yY2VkVHpvIDogbnVsbFxuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBwbHVja0RhdGVQcm9wcyhyYXcsIGxlZnRvdmVycykge1xuICAgICAgICB2YXIgcHJvcHMgPSByZWZpbmVQcm9wcyhyYXcsIERBVEVfUFJPUFMsIHt9LCBsZWZ0b3ZlcnMpO1xuICAgICAgICBwcm9wcy5zdGFydCA9IChwcm9wcy5zdGFydCAhPT0gbnVsbCkgPyBwcm9wcy5zdGFydCA6IHByb3BzLmRhdGU7XG4gICAgICAgIGRlbGV0ZSBwcm9wcy5kYXRlO1xuICAgICAgICByZXR1cm4gcHJvcHM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBsdWNrTm9uRGF0ZVByb3BzKHJhdywgY2FsZW5kYXIsIGxlZnRvdmVycykge1xuICAgICAgICB2YXIgcHJlTGVmdG92ZXJzID0ge307XG4gICAgICAgIHZhciBwcm9wcyA9IHJlZmluZVByb3BzKHJhdywgTk9OX0RBVEVfUFJPUFMsIHt9LCBwcmVMZWZ0b3ZlcnMpO1xuICAgICAgICB2YXIgdWkgPSBwcm9jZXNzVW5zY29wZWRVaVByb3BzKHByZUxlZnRvdmVycywgY2FsZW5kYXIsIGxlZnRvdmVycyk7XG4gICAgICAgIHByb3BzLnB1YmxpY0lkID0gcHJvcHMuaWQ7XG4gICAgICAgIGRlbGV0ZSBwcm9wcy5pZDtcbiAgICAgICAgcHJvcHMudWkgPSB1aTtcbiAgICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wdXRlSXNBbGxEYXlEZWZhdWx0KHNvdXJjZUlkLCBjYWxlbmRhcikge1xuICAgICAgICB2YXIgcmVzID0gbnVsbDtcbiAgICAgICAgaWYgKHNvdXJjZUlkKSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gY2FsZW5kYXIuc3RhdGUuZXZlbnRTb3VyY2VzW3NvdXJjZUlkXTtcbiAgICAgICAgICAgIHJlcyA9IHNvdXJjZS5hbGxEYXlEZWZhdWx0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzID0gY2FsZW5kYXIub3B0KCdhbGxEYXlEZWZhdWx0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICB2YXIgREVGX0RFRkFVTFRTID0ge1xuICAgICAgICBzdGFydFRpbWU6ICcwOTowMCcsXG4gICAgICAgIGVuZFRpbWU6ICcxNzowMCcsXG4gICAgICAgIGRheXNPZldlZWs6IFsxLCAyLCAzLCA0LCA1XSxcbiAgICAgICAgcmVuZGVyaW5nOiAnaW52ZXJzZS1iYWNrZ3JvdW5kJyxcbiAgICAgICAgY2xhc3NOYW1lczogJ2ZjLW5vbmJ1c2luZXNzJyxcbiAgICAgICAgZ3JvdXBJZDogJ19idXNpbmVzc0hvdXJzJyAvLyBzbyBtdWx0aXBsZSBkZWZzIGdldCBncm91cGVkXG4gICAgfTtcbiAgICAvKlxuICAgIFRPRE86IHBhc3MgYXJvdW5kIGFzIEV2ZW50RGVmSGFzaCEhIVxuICAgICovXG4gICAgZnVuY3Rpb24gcGFyc2VCdXNpbmVzc0hvdXJzKGlucHV0LCBjYWxlbmRhcikge1xuICAgICAgICByZXR1cm4gcGFyc2VFdmVudHMocmVmaW5lSW5wdXRzKGlucHV0KSwgJycsIGNhbGVuZGFyKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVmaW5lSW5wdXRzKGlucHV0KSB7XG4gICAgICAgIHZhciByYXdEZWZzO1xuICAgICAgICBpZiAoaW5wdXQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJhd0RlZnMgPSBbe31dOyAvLyB3aWxsIGdldCBERUZfREVGQVVMVFMgdmVyYmF0aW1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgICAgICAgICAgLy8gaWYgc3BlY2lmeWluZyBhbiBhcnJheSwgZXZlcnkgc3ViLWRlZmluaXRpb24gTkVFRFMgYSBkYXktb2Ytd2Vla1xuICAgICAgICAgICAgcmF3RGVmcyA9IGlucHV0LmZpbHRlcihmdW5jdGlvbiAocmF3RGVmKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJhd0RlZi5kYXlzT2ZXZWVrO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyAmJiBpbnB1dCkgeyAvLyBub24tbnVsbCBvYmplY3RcbiAgICAgICAgICAgIHJhd0RlZnMgPSBbaW5wdXRdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAvLyBpcyBwcm9iYWJseSBmYWxzZVxuICAgICAgICAgICAgcmF3RGVmcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJhd0RlZnMgPSByYXdEZWZzLm1hcChmdW5jdGlvbiAocmF3RGVmKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oe30sIERFRl9ERUZBVUxUUywgcmF3RGVmKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByYXdEZWZzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1lbW9pemVSZW5kZXJpbmcocmVuZGVyRnVuYywgdW5yZW5kZXJGdW5jLCBkZXBlbmRlbmNpZXMpIHtcbiAgICAgICAgaWYgKGRlcGVuZGVuY2llcyA9PT0gdm9pZCAwKSB7IGRlcGVuZGVuY2llcyA9IFtdOyB9XG4gICAgICAgIHZhciBkZXBlbmRlbnRzID0gW107XG4gICAgICAgIHZhciB0aGlzQ29udGV4dDtcbiAgICAgICAgdmFyIHByZXZBcmdzO1xuICAgICAgICBmdW5jdGlvbiB1bnJlbmRlcigpIHtcbiAgICAgICAgICAgIGlmIChwcmV2QXJncykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgZGVwZW5kZW50c18xID0gZGVwZW5kZW50czsgX2kgPCBkZXBlbmRlbnRzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXBlbmRlbnQgPSBkZXBlbmRlbnRzXzFbX2ldO1xuICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbnQudW5yZW5kZXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHVucmVuZGVyRnVuYykge1xuICAgICAgICAgICAgICAgICAgICB1bnJlbmRlckZ1bmMuYXBwbHkodGhpc0NvbnRleHQsIHByZXZBcmdzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJldkFyZ3MgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlcygpIHtcbiAgICAgICAgICAgIGlmICghcHJldkFyZ3MgfHwgIWlzQXJyYXlzRXF1YWwocHJldkFyZ3MsIGFyZ3VtZW50cykpIHtcbiAgICAgICAgICAgICAgICB1bnJlbmRlcigpO1xuICAgICAgICAgICAgICAgIHRoaXNDb250ZXh0ID0gdGhpcztcbiAgICAgICAgICAgICAgICBwcmV2QXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgICAgICByZW5kZXJGdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzLmRlcGVuZGVudHMgPSBkZXBlbmRlbnRzO1xuICAgICAgICByZXMudW5yZW5kZXIgPSB1bnJlbmRlcjtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBkZXBlbmRlbmNpZXNfMSA9IGRlcGVuZGVuY2llczsgX2kgPCBkZXBlbmRlbmNpZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBkZXBlbmRlbmN5ID0gZGVwZW5kZW5jaWVzXzFbX2ldO1xuICAgICAgICAgICAgZGVwZW5kZW5jeS5kZXBlbmRlbnRzLnB1c2gocmVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIHZhciBFTVBUWV9FVkVOVF9TVE9SRSA9IGNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpOyAvLyBmb3IgcHVyZWNvbXBvbmVudHMuIFRPRE86IGtlZXAgZWxzZXdoZXJlXG4gICAgdmFyIFNwbGl0dGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBTcGxpdHRlcigpIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0S2V5c0ZvckV2ZW50RGVmcyA9IG1lbW9pemUodGhpcy5fZ2V0S2V5c0ZvckV2ZW50RGVmcyk7XG4gICAgICAgICAgICB0aGlzLnNwbGl0RGF0ZVNlbGVjdGlvbiA9IG1lbW9pemUodGhpcy5fc3BsaXREYXRlU3Bhbik7XG4gICAgICAgICAgICB0aGlzLnNwbGl0RXZlbnRTdG9yZSA9IG1lbW9pemUodGhpcy5fc3BsaXRFdmVudFN0b3JlKTtcbiAgICAgICAgICAgIHRoaXMuc3BsaXRJbmRpdmlkdWFsVWkgPSBtZW1vaXplKHRoaXMuX3NwbGl0SW5kaXZpZHVhbFVpKTtcbiAgICAgICAgICAgIHRoaXMuc3BsaXRFdmVudERyYWcgPSBtZW1vaXplKHRoaXMuX3NwbGl0SW50ZXJhY3Rpb24pO1xuICAgICAgICAgICAgdGhpcy5zcGxpdEV2ZW50UmVzaXplID0gbWVtb2l6ZSh0aGlzLl9zcGxpdEludGVyYWN0aW9uKTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRVaUJ1aWxkZXJzID0ge307IC8vIFRPRE86IHR5cGVzY3JpcHQgcHJvdGVjdGlvblxuICAgICAgICB9XG4gICAgICAgIFNwbGl0dGVyLnByb3RvdHlwZS5zcGxpdFByb3BzID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGtleUluZm9zID0gdGhpcy5nZXRLZXlJbmZvKHByb3BzKTtcbiAgICAgICAgICAgIHZhciBkZWZLZXlzID0gdGhpcy5nZXRLZXlzRm9yRXZlbnREZWZzKHByb3BzLmV2ZW50U3RvcmUpO1xuICAgICAgICAgICAgdmFyIGRhdGVTZWxlY3Rpb25zID0gdGhpcy5zcGxpdERhdGVTZWxlY3Rpb24ocHJvcHMuZGF0ZVNlbGVjdGlvbik7XG4gICAgICAgICAgICB2YXIgaW5kaXZpZHVhbFVpID0gdGhpcy5zcGxpdEluZGl2aWR1YWxVaShwcm9wcy5ldmVudFVpQmFzZXMsIGRlZktleXMpOyAvLyB0aGUgaW5kaXZpZHVhbCAqYmFzZXMqXG4gICAgICAgICAgICB2YXIgZXZlbnRTdG9yZXMgPSB0aGlzLnNwbGl0RXZlbnRTdG9yZShwcm9wcy5ldmVudFN0b3JlLCBkZWZLZXlzKTtcbiAgICAgICAgICAgIHZhciBldmVudERyYWdzID0gdGhpcy5zcGxpdEV2ZW50RHJhZyhwcm9wcy5ldmVudERyYWcpO1xuICAgICAgICAgICAgdmFyIGV2ZW50UmVzaXplcyA9IHRoaXMuc3BsaXRFdmVudFJlc2l6ZShwcm9wcy5ldmVudFJlc2l6ZSk7XG4gICAgICAgICAgICB2YXIgc3BsaXRQcm9wcyA9IHt9O1xuICAgICAgICAgICAgdGhpcy5ldmVudFVpQnVpbGRlcnMgPSBtYXBIYXNoKGtleUluZm9zLCBmdW5jdGlvbiAoaW5mbywga2V5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmV2ZW50VWlCdWlsZGVyc1trZXldIHx8IG1lbW9pemUoYnVpbGRFdmVudFVpRm9yS2V5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGtleUluZm9zKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleUluZm8gPSBrZXlJbmZvc1trZXldO1xuICAgICAgICAgICAgICAgIHZhciBldmVudFN0b3JlID0gZXZlbnRTdG9yZXNba2V5XSB8fCBFTVBUWV9FVkVOVF9TVE9SRTtcbiAgICAgICAgICAgICAgICB2YXIgYnVpbGRFdmVudFVpID0gdGhpcy5ldmVudFVpQnVpbGRlcnNba2V5XTtcbiAgICAgICAgICAgICAgICBzcGxpdFByb3BzW2tleV0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1c2luZXNzSG91cnM6IGtleUluZm8uYnVzaW5lc3NIb3VycyB8fCBwcm9wcy5idXNpbmVzc0hvdXJzLFxuICAgICAgICAgICAgICAgICAgICBkYXRlU2VsZWN0aW9uOiBkYXRlU2VsZWN0aW9uc1trZXldIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50U3RvcmU6IGV2ZW50U3RvcmUsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50VWlCYXNlczogYnVpbGRFdmVudFVpKHByb3BzLmV2ZW50VWlCYXNlc1snJ10sIGtleUluZm8udWksIGluZGl2aWR1YWxVaVtrZXldKSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRTZWxlY3Rpb246IGV2ZW50U3RvcmUuaW5zdGFuY2VzW3Byb3BzLmV2ZW50U2VsZWN0aW9uXSA/IHByb3BzLmV2ZW50U2VsZWN0aW9uIDogJycsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50RHJhZzogZXZlbnREcmFnc1trZXldIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50UmVzaXplOiBldmVudFJlc2l6ZXNba2V5XSB8fCBudWxsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzcGxpdFByb3BzO1xuICAgICAgICB9O1xuICAgICAgICBTcGxpdHRlci5wcm90b3R5cGUuX3NwbGl0RGF0ZVNwYW4gPSBmdW5jdGlvbiAoZGF0ZVNwYW4pIHtcbiAgICAgICAgICAgIHZhciBkYXRlU3BhbnMgPSB7fTtcbiAgICAgICAgICAgIGlmIChkYXRlU3Bhbikge1xuICAgICAgICAgICAgICAgIHZhciBrZXlzID0gdGhpcy5nZXRLZXlzRm9yRGF0ZVNwYW4oZGF0ZVNwYW4pO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwga2V5c18xID0ga2V5czsgX2kgPCBrZXlzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzXzFbX2ldO1xuICAgICAgICAgICAgICAgICAgICBkYXRlU3BhbnNba2V5XSA9IGRhdGVTcGFuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkYXRlU3BhbnM7XG4gICAgICAgIH07XG4gICAgICAgIFNwbGl0dGVyLnByb3RvdHlwZS5fZ2V0S2V5c0ZvckV2ZW50RGVmcyA9IGZ1bmN0aW9uIChldmVudFN0b3JlKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIG1hcEhhc2goZXZlbnRTdG9yZS5kZWZzLCBmdW5jdGlvbiAoZXZlbnREZWYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZ2V0S2V5c0ZvckV2ZW50RGVmKGV2ZW50RGVmKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBTcGxpdHRlci5wcm90b3R5cGUuX3NwbGl0RXZlbnRTdG9yZSA9IGZ1bmN0aW9uIChldmVudFN0b3JlLCBkZWZLZXlzKSB7XG4gICAgICAgICAgICB2YXIgZGVmcyA9IGV2ZW50U3RvcmUuZGVmcywgaW5zdGFuY2VzID0gZXZlbnRTdG9yZS5pbnN0YW5jZXM7XG4gICAgICAgICAgICB2YXIgc3BsaXRTdG9yZXMgPSB7fTtcbiAgICAgICAgICAgIGZvciAodmFyIGRlZklkIGluIGRlZnMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gZGVmS2V5c1tkZWZJZF07IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgICAgIGlmICghc3BsaXRTdG9yZXNba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3BsaXRTdG9yZXNba2V5XSA9IGNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNwbGl0U3RvcmVzW2tleV0uZGVmc1tkZWZJZF0gPSBkZWZzW2RlZklkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBpbnN0YW5jZUlkIGluIGluc3RhbmNlcykge1xuICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGluc3RhbmNlc1tpbnN0YW5jZUlkXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IDAsIF9jID0gZGVmS2V5c1tpbnN0YW5jZS5kZWZJZF07IF9iIDwgX2MubGVuZ3RoOyBfYisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBfY1tfYl07XG4gICAgICAgICAgICAgICAgICAgIGlmIChzcGxpdFN0b3Jlc1trZXldKSB7IC8vIG11c3QgaGF2ZSBhbHJlYWR5IGJlZW4gY3JlYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgc3BsaXRTdG9yZXNba2V5XS5pbnN0YW5jZXNbaW5zdGFuY2VJZF0gPSBpbnN0YW5jZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzcGxpdFN0b3JlcztcbiAgICAgICAgfTtcbiAgICAgICAgU3BsaXR0ZXIucHJvdG90eXBlLl9zcGxpdEluZGl2aWR1YWxVaSA9IGZ1bmN0aW9uIChldmVudFVpQmFzZXMsIGRlZktleXMpIHtcbiAgICAgICAgICAgIHZhciBzcGxpdEhhc2hlcyA9IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIgZGVmSWQgaW4gZXZlbnRVaUJhc2VzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRlZklkKSB7IC8vIG5vdCB0aGUgJycga2V5XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBkZWZLZXlzW2RlZklkXTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNwbGl0SGFzaGVzW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGxpdEhhc2hlc1trZXldID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzcGxpdEhhc2hlc1trZXldW2RlZklkXSA9IGV2ZW50VWlCYXNlc1tkZWZJZF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3BsaXRIYXNoZXM7XG4gICAgICAgIH07XG4gICAgICAgIFNwbGl0dGVyLnByb3RvdHlwZS5fc3BsaXRJbnRlcmFjdGlvbiA9IGZ1bmN0aW9uIChpbnRlcmFjdGlvbikge1xuICAgICAgICAgICAgdmFyIHNwbGl0U3RhdGVzID0ge307XG4gICAgICAgICAgICBpZiAoaW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB2YXIgYWZmZWN0ZWRTdG9yZXNfMSA9IHRoaXMuX3NwbGl0RXZlbnRTdG9yZShpbnRlcmFjdGlvbi5hZmZlY3RlZEV2ZW50cywgdGhpcy5fZ2V0S2V5c0ZvckV2ZW50RGVmcyhpbnRlcmFjdGlvbi5hZmZlY3RlZEV2ZW50cykgLy8gY2FuJ3QgdXNlIGNhY2hlZC4gbWlnaHQgYmUgZXZlbnRzIGZyb20gb3RoZXIgY2FsZW5kYXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIC8vIGNhbid0IHJlbHkgb24gZGVmS2V5cyBiZWNhdXNlIGV2ZW50IGRhdGEgaXMgbXV0YXRlZFxuICAgICAgICAgICAgICAgIHZhciBtdXRhdGVkS2V5c0J5RGVmSWQgPSB0aGlzLl9nZXRLZXlzRm9yRXZlbnREZWZzKGludGVyYWN0aW9uLm11dGF0ZWRFdmVudHMpO1xuICAgICAgICAgICAgICAgIHZhciBtdXRhdGVkU3RvcmVzXzEgPSB0aGlzLl9zcGxpdEV2ZW50U3RvcmUoaW50ZXJhY3Rpb24ubXV0YXRlZEV2ZW50cywgbXV0YXRlZEtleXNCeURlZklkKTtcbiAgICAgICAgICAgICAgICB2YXIgcG9wdWxhdGUgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc3BsaXRTdGF0ZXNba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3BsaXRTdGF0ZXNba2V5XSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZmZlY3RlZEV2ZW50czogYWZmZWN0ZWRTdG9yZXNfMVtrZXldIHx8IEVNUFRZX0VWRU5UX1NUT1JFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0ZWRFdmVudHM6IG11dGF0ZWRTdG9yZXNfMVtrZXldIHx8IEVNUFRZX0VWRU5UX1NUT1JFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRXZlbnQ6IGludGVyYWN0aW9uLmlzRXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ1NlZzogaW50ZXJhY3Rpb24ub3JpZ1NlZ1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGFmZmVjdGVkU3RvcmVzXzEpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9wdWxhdGUoa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG11dGF0ZWRTdG9yZXNfMSkge1xuICAgICAgICAgICAgICAgICAgICBwb3B1bGF0ZShrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzcGxpdFN0YXRlcztcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFNwbGl0dGVyO1xuICAgIH0oKSk7XG4gICAgZnVuY3Rpb24gYnVpbGRFdmVudFVpRm9yS2V5KGFsbFVpLCBldmVudFVpRm9yS2V5LCBpbmRpdmlkdWFsVWkpIHtcbiAgICAgICAgdmFyIGJhc2VQYXJ0cyA9IFtdO1xuICAgICAgICBpZiAoYWxsVWkpIHtcbiAgICAgICAgICAgIGJhc2VQYXJ0cy5wdXNoKGFsbFVpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnRVaUZvcktleSkge1xuICAgICAgICAgICAgYmFzZVBhcnRzLnB1c2goZXZlbnRVaUZvcktleSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0dWZmID0ge1xuICAgICAgICAgICAgJyc6IGNvbWJpbmVFdmVudFVpcyhiYXNlUGFydHMpXG4gICAgICAgIH07XG4gICAgICAgIGlmIChpbmRpdmlkdWFsVWkpIHtcbiAgICAgICAgICAgIF9fYXNzaWduKHN0dWZmLCBpbmRpdmlkdWFsVWkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHVmZjtcbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZXMgSFRNTCBmb3IgYW4gYW5jaG9yIHRvIGFub3RoZXIgdmlldyBpbnRvIHRoZSBjYWxlbmRhci5cbiAgICAvLyBXaWxsIGVpdGhlciBnZW5lcmF0ZSBhbiA8YT4gdGFnIG9yIGEgbm9uLWNsaWNrYWJsZSA8c3Bhbj4gdGFnLCBkZXBlbmRpbmcgb24gZW5hYmxlZCBzZXR0aW5ncy5cbiAgICAvLyBgZ290b09wdGlvbnNgIGNhbiBlaXRoZXIgYmUgYSBEYXRlTWFya2VyLCBvciBhbiBvYmplY3Qgd2l0aCB0aGUgZm9ybTpcbiAgICAvLyB7IGRhdGUsIHR5cGUsIGZvcmNlT2ZmIH1cbiAgICAvLyBgdHlwZWAgaXMgYSB2aWV3LXR5cGUgbGlrZSBcImRheVwiIG9yIFwid2Vla1wiLiBkZWZhdWx0IHZhbHVlIGlzIFwiZGF5XCIuXG4gICAgLy8gYGF0dHJzYCBhbmQgYGlubmVySHRtbGAgYXJlIHVzZSB0byBnZW5lcmF0ZSB0aGUgcmVzdCBvZiB0aGUgSFRNTCB0YWcuXG4gICAgZnVuY3Rpb24gYnVpbGRHb3RvQW5jaG9ySHRtbChhbGxPcHRpb25zLCBkYXRlRW52LCBnb3RvT3B0aW9ucywgYXR0cnMsIGlubmVySHRtbCkge1xuICAgICAgICB2YXIgZGF0ZTtcbiAgICAgICAgdmFyIHR5cGU7XG4gICAgICAgIHZhciBmb3JjZU9mZjtcbiAgICAgICAgdmFyIGZpbmFsT3B0aW9ucztcbiAgICAgICAgaWYgKGdvdG9PcHRpb25zIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgZGF0ZSA9IGdvdG9PcHRpb25zOyAvLyBhIHNpbmdsZSBkYXRlLWxpa2UgaW5wdXRcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRhdGUgPSBnb3RvT3B0aW9ucy5kYXRlO1xuICAgICAgICAgICAgdHlwZSA9IGdvdG9PcHRpb25zLnR5cGU7XG4gICAgICAgICAgICBmb3JjZU9mZiA9IGdvdG9PcHRpb25zLmZvcmNlT2ZmO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGRhdGU6IGRhdGVFbnYuZm9ybWF0SXNvKGRhdGUsIHsgb21pdFRpbWU6IHRydWUgfSksXG4gICAgICAgICAgICB0eXBlOiB0eXBlIHx8ICdkYXknXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0eXBlb2YgYXR0cnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpbm5lckh0bWwgPSBhdHRycztcbiAgICAgICAgICAgIGF0dHJzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBhdHRycyA9IGF0dHJzID8gJyAnICsgYXR0cnNUb1N0cihhdHRycykgOiAnJzsgLy8gd2lsbCBoYXZlIGEgbGVhZGluZyBzcGFjZVxuICAgICAgICBpbm5lckh0bWwgPSBpbm5lckh0bWwgfHwgJyc7XG4gICAgICAgIGlmICghZm9yY2VPZmYgJiYgYWxsT3B0aW9ucy5uYXZMaW5rcykge1xuICAgICAgICAgICAgcmV0dXJuICc8YScgKyBhdHRycyArXG4gICAgICAgICAgICAgICAgJyBkYXRhLWdvdG89XCInICsgaHRtbEVzY2FwZShKU09OLnN0cmluZ2lmeShmaW5hbE9wdGlvbnMpKSArICdcIj4nICtcbiAgICAgICAgICAgICAgICBpbm5lckh0bWwgK1xuICAgICAgICAgICAgICAgICc8L2E+JztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnPHNwYW4nICsgYXR0cnMgKyAnPicgK1xuICAgICAgICAgICAgICAgIGlubmVySHRtbCArXG4gICAgICAgICAgICAgICAgJzwvc3Bhbj4nO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEFsbERheUh0bWwoYWxsT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gYWxsT3B0aW9ucy5hbGxEYXlIdG1sIHx8IGh0bWxFc2NhcGUoYWxsT3B0aW9ucy5hbGxEYXlUZXh0KTtcbiAgICB9XG4gICAgLy8gQ29tcHV0ZXMgSFRNTCBjbGFzc05hbWVzIGZvciBhIHNpbmdsZS1kYXkgZWxlbWVudFxuICAgIGZ1bmN0aW9uIGdldERheUNsYXNzZXMoZGF0ZSwgZGF0ZVByb2ZpbGUsIGNvbnRleHQsIG5vVGhlbWVIaWdobGlnaHQpIHtcbiAgICAgICAgdmFyIGNhbGVuZGFyID0gY29udGV4dC5jYWxlbmRhciwgb3B0aW9ucyA9IGNvbnRleHQub3B0aW9ucywgdGhlbWUgPSBjb250ZXh0LnRoZW1lLCBkYXRlRW52ID0gY29udGV4dC5kYXRlRW52O1xuICAgICAgICB2YXIgY2xhc3NlcyA9IFtdO1xuICAgICAgICB2YXIgdG9kYXlTdGFydDtcbiAgICAgICAgdmFyIHRvZGF5RW5kO1xuICAgICAgICBpZiAoIXJhbmdlQ29udGFpbnNNYXJrZXIoZGF0ZVByb2ZpbGUuYWN0aXZlUmFuZ2UsIGRhdGUpKSB7XG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2ZjLWRpc2FibGVkLWRheScpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCdmYy0nICsgREFZX0lEU1tkYXRlLmdldFVUQ0RheSgpXSk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5tb250aE1vZGUgJiZcbiAgICAgICAgICAgICAgICBkYXRlRW52LmdldE1vbnRoKGRhdGUpICE9PSBkYXRlRW52LmdldE1vbnRoKGRhdGVQcm9maWxlLmN1cnJlbnRSYW5nZS5zdGFydCkpIHtcbiAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2ZjLW90aGVyLW1vbnRoJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b2RheVN0YXJ0ID0gc3RhcnRPZkRheShjYWxlbmRhci5nZXROb3coKSk7XG4gICAgICAgICAgICB0b2RheUVuZCA9IGFkZERheXModG9kYXlTdGFydCwgMSk7XG4gICAgICAgICAgICBpZiAoZGF0ZSA8IHRvZGF5U3RhcnQpIHtcbiAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2ZjLXBhc3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRhdGUgPj0gdG9kYXlFbmQpIHtcbiAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2ZjLWZ1dHVyZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCdmYy10b2RheScpO1xuICAgICAgICAgICAgICAgIGlmIChub1RoZW1lSGlnaGxpZ2h0ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzZXMucHVzaCh0aGVtZS5nZXRDbGFzcygndG9kYXknKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbGFzc2VzO1xuICAgIH1cblxuICAgIC8vIGdpdmVuIGEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyBhIHJlc3VsdCBhc3luY2hyb25vdXNseS5cbiAgICAvLyB0aGUgZnVuY3Rpb24gY2FuIGVpdGhlciBjYWxsIHBhc3NlZC1pbiBzdWNjZXNzIGFuZCBmYWlsdXJlIGNhbGxiYWNrcyxcbiAgICAvLyBvciBpdCBjYW4gcmV0dXJuIGEgcHJvbWlzZS5cbiAgICAvLyBpZiB5b3UgbmVlZCB0byBwYXNzIGFkZGl0aW9uYWwgcGFyYW1zIHRvIGZ1bmMsIGJpbmQgdGhlbSBmaXJzdC5cbiAgICBmdW5jdGlvbiB1bnByb21pc2lmeShmdW5jLCBzdWNjZXNzLCBmYWlsdXJlKSB7XG4gICAgICAgIC8vIGd1YXJkIGFnYWluc3Qgc3VjY2Vzcy9mYWlsdXJlIGNhbGxiYWNrcyBiZWluZyBjYWxsZWQgbW9yZSB0aGFuIG9uY2VcbiAgICAgICAgLy8gYW5kIGd1YXJkIGFnYWluc3QgYSBwcm9taXNlIEFORCBjYWxsYmFjayBiZWluZyB1c2VkIHRvZ2V0aGVyLlxuICAgICAgICB2YXIgaXNSZXNvbHZlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgd3JhcHBlZFN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIWlzUmVzb2x2ZWQpIHtcbiAgICAgICAgICAgICAgICBpc1Jlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzdWNjZXNzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciB3cmFwcGVkRmFpbHVyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghaXNSZXNvbHZlZCkge1xuICAgICAgICAgICAgICAgIGlzUmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChmYWlsdXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZhaWx1cmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciByZXMgPSBmdW5jKHdyYXBwZWRTdWNjZXNzLCB3cmFwcGVkRmFpbHVyZSk7XG4gICAgICAgIGlmIChyZXMgJiYgdHlwZW9mIHJlcy50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXMudGhlbih3cmFwcGVkU3VjY2Vzcywgd3JhcHBlZEZhaWx1cmUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIE1peGluID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBNaXhpbigpIHtcbiAgICAgICAgfVxuICAgICAgICAvLyBtaXggaW50byBhIENMQVNTXG4gICAgICAgIE1peGluLm1peEludG8gPSBmdW5jdGlvbiAoZGVzdENsYXNzKSB7XG4gICAgICAgICAgICB0aGlzLm1peEludG9PYmooZGVzdENsYXNzLnByb3RvdHlwZSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIG1peCBpbnRvIEFOWSBvYmplY3RcbiAgICAgICAgTWl4aW4ubWl4SW50b09iaiA9IGZ1bmN0aW9uIChkZXN0T2JqKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcy5wcm90b3R5cGUpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWRlc3RPYmpbbmFtZV0pIHsgLy8gaWYgZGVzdGluYXRpb24gZG9lc24ndCBhbHJlYWR5IGRlZmluZSBpdFxuICAgICAgICAgICAgICAgICAgICBkZXN0T2JqW25hbWVdID0gX3RoaXMucHJvdG90eXBlW25hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvKlxuICAgICAgICB3aWxsIG92ZXJyaWRlIGV4aXN0aW5nIG1ldGhvZHNcbiAgICAgICAgVE9ETzogcmVtb3ZlISBub3QgdXNlZCBhbnltb3JlXG4gICAgICAgICovXG4gICAgICAgIE1peGluLm1peE92ZXIgPSBmdW5jdGlvbiAoZGVzdENsYXNzKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcy5wcm90b3R5cGUpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICBkZXN0Q2xhc3MucHJvdG90eXBlW25hbWVdID0gX3RoaXMucHJvdG90eXBlW25hbWVdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBNaXhpbjtcbiAgICB9KCkpO1xuXG4gICAgLypcbiAgICBVU0FHRTpcbiAgICAgIGltcG9ydCB7IGRlZmF1bHQgYXMgRW1pdHRlck1peGluLCBFbWl0dGVySW50ZXJmYWNlIH0gZnJvbSAnLi9FbWl0dGVyTWl4aW4nXG4gICAgaW4gY2xhc3M6XG4gICAgICBvbjogRW1pdHRlckludGVyZmFjZVsnb24nXVxuICAgICAgb25lOiBFbWl0dGVySW50ZXJmYWNlWydvbmUnXVxuICAgICAgb2ZmOiBFbWl0dGVySW50ZXJmYWNlWydvZmYnXVxuICAgICAgdHJpZ2dlcjogRW1pdHRlckludGVyZmFjZVsndHJpZ2dlciddXG4gICAgICB0cmlnZ2VyV2l0aDogRW1pdHRlckludGVyZmFjZVsndHJpZ2dlcldpdGgnXVxuICAgICAgaGFzSGFuZGxlcnM6IEVtaXR0ZXJJbnRlcmZhY2VbJ2hhc0hhbmRsZXJzJ11cbiAgICBhZnRlciBjbGFzczpcbiAgICAgIEVtaXR0ZXJNaXhpbi5taXhJbnRvKFRoZUNsYXNzKVxuICAgICovXG4gICAgdmFyIEVtaXR0ZXJNaXhpbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKEVtaXR0ZXJNaXhpbiwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gRW1pdHRlck1peGluKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIEVtaXR0ZXJNaXhpbi5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAodHlwZSwgaGFuZGxlcikge1xuICAgICAgICAgICAgYWRkVG9IYXNoKHRoaXMuX2hhbmRsZXJzIHx8ICh0aGlzLl9oYW5kbGVycyA9IHt9KSwgdHlwZSwgaGFuZGxlcik7XG4gICAgICAgICAgICByZXR1cm4gdGhpczsgLy8gZm9yIGNoYWluaW5nXG4gICAgICAgIH07XG4gICAgICAgIC8vIHRvZG86IGFkZCBjb21tZW50c1xuICAgICAgICBFbWl0dGVyTWl4aW4ucHJvdG90eXBlLm9uZSA9IGZ1bmN0aW9uICh0eXBlLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICBhZGRUb0hhc2godGhpcy5fb25lSGFuZGxlcnMgfHwgKHRoaXMuX29uZUhhbmRsZXJzID0ge30pLCB0eXBlLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzOyAvLyBmb3IgY2hhaW5pbmdcbiAgICAgICAgfTtcbiAgICAgICAgRW1pdHRlck1peGluLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiAodHlwZSwgaGFuZGxlcikge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2hhbmRsZXJzKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlRnJvbUhhc2godGhpcy5faGFuZGxlcnMsIHR5cGUsIGhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX29uZUhhbmRsZXJzKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlRnJvbUhhc2godGhpcy5fb25lSGFuZGxlcnMsIHR5cGUsIGhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7IC8vIGZvciBjaGFpbmluZ1xuICAgICAgICB9O1xuICAgICAgICBFbWl0dGVyTWl4aW4ucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcldpdGgodHlwZSwgdGhpcywgYXJncyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpczsgLy8gZm9yIGNoYWluaW5nXG4gICAgICAgIH07XG4gICAgICAgIEVtaXR0ZXJNaXhpbi5wcm90b3R5cGUudHJpZ2dlcldpdGggPSBmdW5jdGlvbiAodHlwZSwgY29udGV4dCwgYXJncykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2hhbmRsZXJzKSB7XG4gICAgICAgICAgICAgICAgYXBwbHlBbGwodGhpcy5faGFuZGxlcnNbdHlwZV0sIGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX29uZUhhbmRsZXJzKSB7XG4gICAgICAgICAgICAgICAgYXBwbHlBbGwodGhpcy5fb25lSGFuZGxlcnNbdHlwZV0sIGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9vbmVIYW5kbGVyc1t0eXBlXTsgLy8gd2lsbCBuZXZlciBmaXJlIGFnYWluXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpczsgLy8gZm9yIGNoYWluaW5nXG4gICAgICAgIH07XG4gICAgICAgIEVtaXR0ZXJNaXhpbi5wcm90b3R5cGUuaGFzSGFuZGxlcnMgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLl9oYW5kbGVycyAmJiB0aGlzLl9oYW5kbGVyc1t0eXBlXSAmJiB0aGlzLl9oYW5kbGVyc1t0eXBlXS5sZW5ndGgpIHx8XG4gICAgICAgICAgICAgICAgKHRoaXMuX29uZUhhbmRsZXJzICYmIHRoaXMuX29uZUhhbmRsZXJzW3R5cGVdICYmIHRoaXMuX29uZUhhbmRsZXJzW3R5cGVdLmxlbmd0aCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBFbWl0dGVyTWl4aW47XG4gICAgfShNaXhpbikpO1xuICAgIGZ1bmN0aW9uIGFkZFRvSGFzaChoYXNoLCB0eXBlLCBoYW5kbGVyKSB7XG4gICAgICAgIChoYXNoW3R5cGVdIHx8IChoYXNoW3R5cGVdID0gW10pKVxuICAgICAgICAgICAgLnB1c2goaGFuZGxlcik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbW92ZUZyb21IYXNoKGhhc2gsIHR5cGUsIGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIGlmIChoYXNoW3R5cGVdKSB7XG4gICAgICAgICAgICAgICAgaGFzaFt0eXBlXSA9IGhhc2hbdHlwZV0uZmlsdGVyKGZ1bmN0aW9uIChmdW5jKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jICE9PSBoYW5kbGVyO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIGhhc2hbdHlwZV07IC8vIHJlbW92ZSBhbGwgaGFuZGxlciBmdW5jcyBmb3IgdGhpcyB0eXBlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKlxuICAgIFJlY29yZHMgb2Zmc2V0IGluZm9ybWF0aW9uIGZvciBhIHNldCBvZiBlbGVtZW50cywgcmVsYXRpdmUgdG8gYW4gb3JpZ2luIGVsZW1lbnQuXG4gICAgQ2FuIHJlY29yZCB0aGUgbGVmdC9yaWdodCBPUiB0aGUgdG9wL2JvdHRvbSBPUiBib3RoLlxuICAgIFByb3ZpZGVzIG1ldGhvZHMgZm9yIHF1ZXJ5aW5nIHRoZSBjYWNoZSBieSBwb3NpdGlvbi5cbiAgICAqL1xuICAgIHZhciBQb3NpdGlvbkNhY2hlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBQb3NpdGlvbkNhY2hlKG9yaWdpbkVsLCBlbHMsIGlzSG9yaXpvbnRhbCwgaXNWZXJ0aWNhbCkge1xuICAgICAgICAgICAgdGhpcy5vcmlnaW5FbCA9IG9yaWdpbkVsO1xuICAgICAgICAgICAgdGhpcy5lbHMgPSBlbHM7XG4gICAgICAgICAgICB0aGlzLmlzSG9yaXpvbnRhbCA9IGlzSG9yaXpvbnRhbDtcbiAgICAgICAgICAgIHRoaXMuaXNWZXJ0aWNhbCA9IGlzVmVydGljYWw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUXVlcmllcyB0aGUgZWxzIGZvciBjb29yZGluYXRlcyBhbmQgc3RvcmVzIHRoZW0uXG4gICAgICAgIC8vIENhbGwgdGhpcyBtZXRob2QgYmVmb3JlIHVzaW5nIGFuZCBvZiB0aGUgZ2V0KiBtZXRob2RzIGJlbG93LlxuICAgICAgICBQb3NpdGlvbkNhY2hlLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvcmlnaW5FbCA9IHRoaXMub3JpZ2luRWw7XG4gICAgICAgICAgICB2YXIgb3JpZ2luQ2xpZW50UmVjdCA9IHRoaXMub3JpZ2luQ2xpZW50UmVjdCA9XG4gICAgICAgICAgICAgICAgb3JpZ2luRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IC8vIHJlbGF0aXZlIHRvIHZpZXdwb3J0IHRvcC1sZWZ0XG4gICAgICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1aWxkRWxIb3Jpem9udGFscyhvcmlnaW5DbGllbnRSZWN0LmxlZnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuaXNWZXJ0aWNhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYnVpbGRFbFZlcnRpY2FscyhvcmlnaW5DbGllbnRSZWN0LnRvcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIFBvcHVsYXRlcyB0aGUgbGVmdC9yaWdodCBpbnRlcm5hbCBjb29yZGluYXRlIGFycmF5c1xuICAgICAgICBQb3NpdGlvbkNhY2hlLnByb3RvdHlwZS5idWlsZEVsSG9yaXpvbnRhbHMgPSBmdW5jdGlvbiAob3JpZ2luQ2xpZW50TGVmdCkge1xuICAgICAgICAgICAgdmFyIGxlZnRzID0gW107XG4gICAgICAgICAgICB2YXIgcmlnaHRzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5lbHM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgIHZhciByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgbGVmdHMucHVzaChyZWN0LmxlZnQgLSBvcmlnaW5DbGllbnRMZWZ0KTtcbiAgICAgICAgICAgICAgICByaWdodHMucHVzaChyZWN0LnJpZ2h0IC0gb3JpZ2luQ2xpZW50TGVmdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmxlZnRzID0gbGVmdHM7XG4gICAgICAgICAgICB0aGlzLnJpZ2h0cyA9IHJpZ2h0cztcbiAgICAgICAgfTtcbiAgICAgICAgLy8gUG9wdWxhdGVzIHRoZSB0b3AvYm90dG9tIGludGVybmFsIGNvb3JkaW5hdGUgYXJyYXlzXG4gICAgICAgIFBvc2l0aW9uQ2FjaGUucHJvdG90eXBlLmJ1aWxkRWxWZXJ0aWNhbHMgPSBmdW5jdGlvbiAob3JpZ2luQ2xpZW50VG9wKSB7XG4gICAgICAgICAgICB2YXIgdG9wcyA9IFtdO1xuICAgICAgICAgICAgdmFyIGJvdHRvbXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLmVsczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZWwgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgdmFyIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICB0b3BzLnB1c2gocmVjdC50b3AgLSBvcmlnaW5DbGllbnRUb3ApO1xuICAgICAgICAgICAgICAgIGJvdHRvbXMucHVzaChyZWN0LmJvdHRvbSAtIG9yaWdpbkNsaWVudFRvcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnRvcHMgPSB0b3BzO1xuICAgICAgICAgICAgdGhpcy5ib3R0b21zID0gYm90dG9tcztcbiAgICAgICAgfTtcbiAgICAgICAgLy8gR2l2ZW4gYSBsZWZ0IG9mZnNldCAoZnJvbSBkb2N1bWVudCBsZWZ0KSwgcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGVsIHRoYXQgaXQgaG9yaXpvbnRhbGx5IGludGVyc2VjdHMuXG4gICAgICAgIC8vIElmIG5vIGludGVyc2VjdGlvbiBpcyBtYWRlLCByZXR1cm5zIHVuZGVmaW5lZC5cbiAgICAgICAgUG9zaXRpb25DYWNoZS5wcm90b3R5cGUubGVmdFRvSW5kZXggPSBmdW5jdGlvbiAobGVmdFBvc2l0aW9uKSB7XG4gICAgICAgICAgICB2YXIgbGVmdHMgPSB0aGlzLmxlZnRzO1xuICAgICAgICAgICAgdmFyIHJpZ2h0cyA9IHRoaXMucmlnaHRzO1xuICAgICAgICAgICAgdmFyIGxlbiA9IGxlZnRzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxlZnRQb3NpdGlvbiA+PSBsZWZ0c1tpXSAmJiBsZWZ0UG9zaXRpb24gPCByaWdodHNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBHaXZlbiBhIHRvcCBvZmZzZXQgKGZyb20gZG9jdW1lbnQgdG9wKSwgcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGVsIHRoYXQgaXQgdmVydGljYWxseSBpbnRlcnNlY3RzLlxuICAgICAgICAvLyBJZiBubyBpbnRlcnNlY3Rpb24gaXMgbWFkZSwgcmV0dXJucyB1bmRlZmluZWQuXG4gICAgICAgIFBvc2l0aW9uQ2FjaGUucHJvdG90eXBlLnRvcFRvSW5kZXggPSBmdW5jdGlvbiAodG9wUG9zaXRpb24pIHtcbiAgICAgICAgICAgIHZhciB0b3BzID0gdGhpcy50b3BzO1xuICAgICAgICAgICAgdmFyIGJvdHRvbXMgPSB0aGlzLmJvdHRvbXM7XG4gICAgICAgICAgICB2YXIgbGVuID0gdG9wcy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh0b3BQb3NpdGlvbiA+PSB0b3BzW2ldICYmIHRvcFBvc2l0aW9uIDwgYm90dG9tc1tpXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIEdldHMgdGhlIHdpZHRoIG9mIHRoZSBlbGVtZW50IGF0IHRoZSBnaXZlbiBpbmRleFxuICAgICAgICBQb3NpdGlvbkNhY2hlLnByb3RvdHlwZS5nZXRXaWR0aCA9IGZ1bmN0aW9uIChsZWZ0SW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJpZ2h0c1tsZWZ0SW5kZXhdIC0gdGhpcy5sZWZ0c1tsZWZ0SW5kZXhdO1xuICAgICAgICB9O1xuICAgICAgICAvLyBHZXRzIHRoZSBoZWlnaHQgb2YgdGhlIGVsZW1lbnQgYXQgdGhlIGdpdmVuIGluZGV4XG4gICAgICAgIFBvc2l0aW9uQ2FjaGUucHJvdG90eXBlLmdldEhlaWdodCA9IGZ1bmN0aW9uICh0b3BJbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYm90dG9tc1t0b3BJbmRleF0gLSB0aGlzLnRvcHNbdG9wSW5kZXhdO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gUG9zaXRpb25DYWNoZTtcbiAgICB9KCkpO1xuXG4gICAgLypcbiAgICBBbiBvYmplY3QgZm9yIGdldHRpbmcvc2V0dGluZyBzY3JvbGwtcmVsYXRlZCBpbmZvcm1hdGlvbiBmb3IgYW4gZWxlbWVudC5cbiAgICBJbnRlcm5hbGx5LCB0aGlzIGlzIGRvbmUgdmVyeSBkaWZmZXJlbnRseSBmb3Igd2luZG93IHZlcnN1cyBET00gZWxlbWVudCxcbiAgICBzbyB0aGlzIG9iamVjdCBzZXJ2ZXMgYXMgYSBjb21tb24gaW50ZXJmYWNlLlxuICAgICovXG4gICAgdmFyIFNjcm9sbENvbnRyb2xsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIFNjcm9sbENvbnRyb2xsZXIoKSB7XG4gICAgICAgIH1cbiAgICAgICAgU2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0TWF4U2Nyb2xsVG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2Nyb2xsSGVpZ2h0KCkgLSB0aGlzLmdldENsaWVudEhlaWdodCgpO1xuICAgICAgICB9O1xuICAgICAgICBTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5nZXRNYXhTY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2Nyb2xsV2lkdGgoKSAtIHRoaXMuZ2V0Q2xpZW50V2lkdGgoKTtcbiAgICAgICAgfTtcbiAgICAgICAgU2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuY2FuU2Nyb2xsVmVydGljYWxseSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE1heFNjcm9sbFRvcCgpID4gMDtcbiAgICAgICAgfTtcbiAgICAgICAgU2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuY2FuU2Nyb2xsSG9yaXpvbnRhbGx5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWF4U2Nyb2xsTGVmdCgpID4gMDtcbiAgICAgICAgfTtcbiAgICAgICAgU2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuY2FuU2Nyb2xsVXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTY3JvbGxUb3AoKSA+IDA7XG4gICAgICAgIH07XG4gICAgICAgIFNjcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmNhblNjcm9sbERvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTY3JvbGxUb3AoKSA8IHRoaXMuZ2V0TWF4U2Nyb2xsVG9wKCk7XG4gICAgICAgIH07XG4gICAgICAgIFNjcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmNhblNjcm9sbExlZnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTY3JvbGxMZWZ0KCkgPiAwO1xuICAgICAgICB9O1xuICAgICAgICBTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5jYW5TY3JvbGxSaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFNjcm9sbExlZnQoKSA8IHRoaXMuZ2V0TWF4U2Nyb2xsTGVmdCgpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gU2Nyb2xsQ29udHJvbGxlcjtcbiAgICB9KCkpO1xuICAgIHZhciBFbGVtZW50U2Nyb2xsQ29udHJvbGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKEVsZW1lbnRTY3JvbGxDb250cm9sbGVyLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBFbGVtZW50U2Nyb2xsQ29udHJvbGxlcihlbCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgICAgIF90aGlzLmVsID0gZWw7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgRWxlbWVudFNjcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmdldFNjcm9sbFRvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVsLnNjcm9sbFRvcDtcbiAgICAgICAgfTtcbiAgICAgICAgRWxlbWVudFNjcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmdldFNjcm9sbExlZnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbC5zY3JvbGxMZWZ0O1xuICAgICAgICB9O1xuICAgICAgICBFbGVtZW50U2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuc2V0U2Nyb2xsVG9wID0gZnVuY3Rpb24gKHRvcCkge1xuICAgICAgICAgICAgdGhpcy5lbC5zY3JvbGxUb3AgPSB0b3A7XG4gICAgICAgIH07XG4gICAgICAgIEVsZW1lbnRTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5zZXRTY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKGxlZnQpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc2Nyb2xsTGVmdCA9IGxlZnQ7XG4gICAgICAgIH07XG4gICAgICAgIEVsZW1lbnRTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5nZXRTY3JvbGxXaWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVsLnNjcm9sbFdpZHRoO1xuICAgICAgICB9O1xuICAgICAgICBFbGVtZW50U2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0U2Nyb2xsSGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWwuc2Nyb2xsSGVpZ2h0O1xuICAgICAgICB9O1xuICAgICAgICBFbGVtZW50U2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0Q2xpZW50SGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWwuY2xpZW50SGVpZ2h0O1xuICAgICAgICB9O1xuICAgICAgICBFbGVtZW50U2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0Q2xpZW50V2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbC5jbGllbnRXaWR0aDtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIEVsZW1lbnRTY3JvbGxDb250cm9sbGVyO1xuICAgIH0oU2Nyb2xsQ29udHJvbGxlcikpO1xuICAgIHZhciBXaW5kb3dTY3JvbGxDb250cm9sbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoV2luZG93U2Nyb2xsQ29udHJvbGxlciwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gV2luZG93U2Nyb2xsQ29udHJvbGxlcigpIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgfVxuICAgICAgICBXaW5kb3dTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5nZXRTY3JvbGxUb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgICAgICB9O1xuICAgICAgICBXaW5kb3dTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5nZXRTY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5wYWdlWE9mZnNldDtcbiAgICAgICAgfTtcbiAgICAgICAgV2luZG93U2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuc2V0U2Nyb2xsVG9wID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgIHdpbmRvdy5zY3JvbGwod2luZG93LnBhZ2VYT2Zmc2V0LCBuKTtcbiAgICAgICAgfTtcbiAgICAgICAgV2luZG93U2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuc2V0U2Nyb2xsTGVmdCA9IGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICB3aW5kb3cuc2Nyb2xsKG4sIHdpbmRvdy5wYWdlWU9mZnNldCk7XG4gICAgICAgIH07XG4gICAgICAgIFdpbmRvd1Njcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmdldFNjcm9sbFdpZHRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxXaWR0aDtcbiAgICAgICAgfTtcbiAgICAgICAgV2luZG93U2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0U2Nyb2xsSGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQ7XG4gICAgICAgIH07XG4gICAgICAgIFdpbmRvd1Njcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmdldENsaWVudEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICAgICAgICB9O1xuICAgICAgICBXaW5kb3dTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5nZXRDbGllbnRXaWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBXaW5kb3dTY3JvbGxDb250cm9sbGVyO1xuICAgIH0oU2Nyb2xsQ29udHJvbGxlcikpO1xuXG4gICAgLypcbiAgICBFbWJvZGllcyBhIGRpdiB0aGF0IGhhcyBwb3RlbnRpYWwgc2Nyb2xsYmFyc1xuICAgICovXG4gICAgdmFyIFNjcm9sbENvbXBvbmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKFNjcm9sbENvbXBvbmVudCwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gU2Nyb2xsQ29tcG9uZW50KG92ZXJmbG93WCwgb3ZlcmZsb3dZKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnZmMtc2Nyb2xsZXInXG4gICAgICAgICAgICB9KSkgfHwgdGhpcztcbiAgICAgICAgICAgIF90aGlzLm92ZXJmbG93WCA9IG92ZXJmbG93WDtcbiAgICAgICAgICAgIF90aGlzLm92ZXJmbG93WSA9IG92ZXJmbG93WTtcbiAgICAgICAgICAgIF90aGlzLmFwcGx5T3ZlcmZsb3coKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuICAgICAgICAvLyBzZXRzIHRvIG5hdHVyYWwgaGVpZ2h0LCB1bmxvY2tzIG92ZXJmbG93XG4gICAgICAgIFNjcm9sbENvbXBvbmVudC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnNldEhlaWdodCgnYXV0bycpO1xuICAgICAgICAgICAgdGhpcy5hcHBseU92ZXJmbG93KCk7XG4gICAgICAgIH07XG4gICAgICAgIFNjcm9sbENvbXBvbmVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlbW92ZUVsZW1lbnQodGhpcy5lbCk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIE92ZXJmbG93XG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIFNjcm9sbENvbXBvbmVudC5wcm90b3R5cGUuYXBwbHlPdmVyZmxvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGFwcGx5U3R5bGUodGhpcy5lbCwge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93WDogdGhpcy5vdmVyZmxvd1gsXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3dZOiB0aGlzLm92ZXJmbG93WVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIENhdXNlcyBhbnkgJ2F1dG8nIG92ZXJmbG93IHZhbHVlcyB0byByZXNvbHZlcyB0byAnc2Nyb2xsJyBvciAnaGlkZGVuJy5cbiAgICAgICAgLy8gVXNlZnVsIGZvciBwcmVzZXJ2aW5nIHNjcm9sbGJhciB3aWR0aHMgcmVnYXJkbGVzcyBvZiBmdXR1cmUgcmVzaXplcy5cbiAgICAgICAgLy8gQ2FuIHBhc3MgaW4gc2Nyb2xsYmFyV2lkdGhzIGZvciBvcHRpbWl6YXRpb24uXG4gICAgICAgIFNjcm9sbENvbXBvbmVudC5wcm90b3R5cGUubG9ja092ZXJmbG93ID0gZnVuY3Rpb24gKHNjcm9sbGJhcldpZHRocykge1xuICAgICAgICAgICAgdmFyIG92ZXJmbG93WCA9IHRoaXMub3ZlcmZsb3dYO1xuICAgICAgICAgICAgdmFyIG92ZXJmbG93WSA9IHRoaXMub3ZlcmZsb3dZO1xuICAgICAgICAgICAgc2Nyb2xsYmFyV2lkdGhzID0gc2Nyb2xsYmFyV2lkdGhzIHx8IHRoaXMuZ2V0U2Nyb2xsYmFyV2lkdGhzKCk7XG4gICAgICAgICAgICBpZiAob3ZlcmZsb3dYID09PSAnYXV0bycpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvd1ggPSAoc2Nyb2xsYmFyV2lkdGhzLmJvdHRvbSB8fCAvLyBob3Jpem9udGFsIHNjcm9sbGJhcnM/XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FuU2Nyb2xsSG9yaXpvbnRhbGx5KCkgLy8gT1Igc2Nyb2xsaW5nIHBhbmUgd2l0aCBtYXNzbGVzcyBzY3JvbGxiYXJzP1xuICAgICAgICAgICAgICAgICkgPyAnc2Nyb2xsJyA6ICdoaWRkZW4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG92ZXJmbG93WSA9PT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3dZID0gKHNjcm9sbGJhcldpZHRocy5sZWZ0IHx8IHNjcm9sbGJhcldpZHRocy5yaWdodCB8fCAvLyBob3Jpem9udGFsIHNjcm9sbGJhcnM/XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FuU2Nyb2xsVmVydGljYWxseSgpIC8vIE9SIHNjcm9sbGluZyBwYW5lIHdpdGggbWFzc2xlc3Mgc2Nyb2xsYmFycz9cbiAgICAgICAgICAgICAgICApID8gJ3Njcm9sbCcgOiAnaGlkZGVuJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFwcGx5U3R5bGUodGhpcy5lbCwgeyBvdmVyZmxvd1g6IG92ZXJmbG93WCwgb3ZlcmZsb3dZOiBvdmVyZmxvd1kgfSk7XG4gICAgICAgIH07XG4gICAgICAgIFNjcm9sbENvbXBvbmVudC5wcm90b3R5cGUuc2V0SGVpZ2h0ID0gZnVuY3Rpb24gKGhlaWdodCkge1xuICAgICAgICAgICAgYXBwbHlTdHlsZVByb3AodGhpcy5lbCwgJ2hlaWdodCcsIGhlaWdodCk7XG4gICAgICAgIH07XG4gICAgICAgIFNjcm9sbENvbXBvbmVudC5wcm90b3R5cGUuZ2V0U2Nyb2xsYmFyV2lkdGhzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGVkZ2VzID0gY29tcHV0ZUVkZ2VzKHRoaXMuZWwpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBsZWZ0OiBlZGdlcy5zY3JvbGxiYXJMZWZ0LFxuICAgICAgICAgICAgICAgIHJpZ2h0OiBlZGdlcy5zY3JvbGxiYXJSaWdodCxcbiAgICAgICAgICAgICAgICBib3R0b206IGVkZ2VzLnNjcm9sbGJhckJvdHRvbVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFNjcm9sbENvbXBvbmVudDtcbiAgICB9KEVsZW1lbnRTY3JvbGxDb250cm9sbGVyKSk7XG5cbiAgICB2YXIgVGhlbWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIFRoZW1lKGNhbGVuZGFyT3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5jYWxlbmRhck9wdGlvbnMgPSBjYWxlbmRhck9wdGlvbnM7XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NJY29uT3ZlcnJpZGUoKTtcbiAgICAgICAgfVxuICAgICAgICBUaGVtZS5wcm90b3R5cGUucHJvY2Vzc0ljb25PdmVycmlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmljb25PdmVycmlkZU9wdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0SWNvbk92ZXJyaWRlKHRoaXMuY2FsZW5kYXJPcHRpb25zW3RoaXMuaWNvbk92ZXJyaWRlT3B0aW9uXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFRoZW1lLnByb3RvdHlwZS5zZXRJY29uT3ZlcnJpZGUgPSBmdW5jdGlvbiAoaWNvbk92ZXJyaWRlSGFzaCkge1xuICAgICAgICAgICAgdmFyIGljb25DbGFzc2VzQ29weTtcbiAgICAgICAgICAgIHZhciBidXR0b25OYW1lO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpY29uT3ZlcnJpZGVIYXNoID09PSAnb2JqZWN0JyAmJiBpY29uT3ZlcnJpZGVIYXNoKSB7IC8vIG5vbi1udWxsIG9iamVjdFxuICAgICAgICAgICAgICAgIGljb25DbGFzc2VzQ29weSA9IF9fYXNzaWduKHt9LCB0aGlzLmljb25DbGFzc2VzKTtcbiAgICAgICAgICAgICAgICBmb3IgKGJ1dHRvbk5hbWUgaW4gaWNvbk92ZXJyaWRlSGFzaCkge1xuICAgICAgICAgICAgICAgICAgICBpY29uQ2xhc3Nlc0NvcHlbYnV0dG9uTmFtZV0gPSB0aGlzLmFwcGx5SWNvbk92ZXJyaWRlUHJlZml4KGljb25PdmVycmlkZUhhc2hbYnV0dG9uTmFtZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmljb25DbGFzc2VzID0gaWNvbkNsYXNzZXNDb3B5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaWNvbk92ZXJyaWRlSGFzaCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmljb25DbGFzc2VzID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFRoZW1lLnByb3RvdHlwZS5hcHBseUljb25PdmVycmlkZVByZWZpeCA9IGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIHZhciBwcmVmaXggPSB0aGlzLmljb25PdmVycmlkZVByZWZpeDtcbiAgICAgICAgICAgIGlmIChwcmVmaXggJiYgY2xhc3NOYW1lLmluZGV4T2YocHJlZml4KSAhPT0gMCkgeyAvLyBpZiBub3QgYWxyZWFkeSBwcmVzZW50XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lID0gcHJlZml4ICsgY2xhc3NOYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgICAgICAgfTtcbiAgICAgICAgVGhlbWUucHJvdG90eXBlLmdldENsYXNzID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xhc3Nlc1trZXldIHx8ICcnO1xuICAgICAgICB9O1xuICAgICAgICBUaGVtZS5wcm90b3R5cGUuZ2V0SWNvbkNsYXNzID0gZnVuY3Rpb24gKGJ1dHRvbk5hbWUpIHtcbiAgICAgICAgICAgIHZhciBjbGFzc05hbWUgPSB0aGlzLmljb25DbGFzc2VzW2J1dHRvbk5hbWVdO1xuICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmJhc2VJY29uQ2xhc3MgKyAnICcgKyBjbGFzc05hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH07XG4gICAgICAgIFRoZW1lLnByb3RvdHlwZS5nZXRDdXN0b21CdXR0b25JY29uQ2xhc3MgPSBmdW5jdGlvbiAoY3VzdG9tQnV0dG9uUHJvcHMpIHtcbiAgICAgICAgICAgIHZhciBjbGFzc05hbWU7XG4gICAgICAgICAgICBpZiAodGhpcy5pY29uT3ZlcnJpZGVDdXN0b21CdXR0b25PcHRpb24pIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSBjdXN0b21CdXR0b25Qcm9wc1t0aGlzLmljb25PdmVycmlkZUN1c3RvbUJ1dHRvbk9wdGlvbl07XG4gICAgICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5iYXNlSWNvbkNsYXNzICsgJyAnICsgdGhpcy5hcHBseUljb25PdmVycmlkZVByZWZpeChjbGFzc05hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFRoZW1lO1xuICAgIH0oKSk7XG4gICAgVGhlbWUucHJvdG90eXBlLmNsYXNzZXMgPSB7fTtcbiAgICBUaGVtZS5wcm90b3R5cGUuaWNvbkNsYXNzZXMgPSB7fTtcbiAgICBUaGVtZS5wcm90b3R5cGUuYmFzZUljb25DbGFzcyA9ICcnO1xuICAgIFRoZW1lLnByb3RvdHlwZS5pY29uT3ZlcnJpZGVQcmVmaXggPSAnJztcblxuICAgIHZhciBndWlkID0gMDtcbiAgICB2YXIgQ29tcG9uZW50Q29udGV4dCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gQ29tcG9uZW50Q29udGV4dChjYWxlbmRhciwgdGhlbWUsIGRhdGVFbnYsIG9wdGlvbnMsIHZpZXcpIHtcbiAgICAgICAgICAgIHRoaXMuY2FsZW5kYXIgPSBjYWxlbmRhcjtcbiAgICAgICAgICAgIHRoaXMudGhlbWUgPSB0aGVtZTtcbiAgICAgICAgICAgIHRoaXMuZGF0ZUVudiA9IGRhdGVFbnY7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICAgICAgdGhpcy52aWV3ID0gdmlldztcbiAgICAgICAgICAgIHRoaXMuaXNSdGwgPSBvcHRpb25zLmRpciA9PT0gJ3J0bCc7XG4gICAgICAgICAgICB0aGlzLmV2ZW50T3JkZXJTcGVjcyA9IHBhcnNlRmllbGRTcGVjcyhvcHRpb25zLmV2ZW50T3JkZXIpO1xuICAgICAgICAgICAgdGhpcy5uZXh0RGF5VGhyZXNob2xkID0gY3JlYXRlRHVyYXRpb24ob3B0aW9ucy5uZXh0RGF5VGhyZXNob2xkKTtcbiAgICAgICAgfVxuICAgICAgICBDb21wb25lbnRDb250ZXh0LnByb3RvdHlwZS5leHRlbmQgPSBmdW5jdGlvbiAob3B0aW9ucywgdmlldykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21wb25lbnRDb250ZXh0KHRoaXMuY2FsZW5kYXIsIHRoaXMudGhlbWUsIHRoaXMuZGF0ZUVudiwgb3B0aW9ucyB8fCB0aGlzLm9wdGlvbnMsIHZpZXcgfHwgdGhpcy52aWV3KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIENvbXBvbmVudENvbnRleHQ7XG4gICAgfSgpKTtcbiAgICB2YXIgQ29tcG9uZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBDb21wb25lbnQoKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZXJSZW5kZXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy51aWQgPSBTdHJpbmcoZ3VpZCsrKTtcbiAgICAgICAgfVxuICAgICAgICBDb21wb25lbnQuYWRkRXF1YWxpdHlGdW5jcyA9IGZ1bmN0aW9uIChuZXdGdW5jcykge1xuICAgICAgICAgICAgdGhpcy5wcm90b3R5cGUuZXF1YWxpdHlGdW5jcyA9IF9fYXNzaWduKHt9LCB0aGlzLnByb3RvdHlwZS5lcXVhbGl0eUZ1bmNzLCBuZXdGdW5jcyk7XG4gICAgICAgIH07XG4gICAgICAgIENvbXBvbmVudC5wcm90b3R5cGUucmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgICAgICB0aGlzLnJlY2VpdmVDb250ZXh0KGNvbnRleHQpO1xuICAgICAgICAgICAgdmFyIF9hID0gcmVjeWNsZVByb3BzKHRoaXMucHJvcHMgfHwge30sIHByb3BzLCB0aGlzLmVxdWFsaXR5RnVuY3MpLCBhbnlDaGFuZ2VzID0gX2EuYW55Q2hhbmdlcywgY29tYm9Qcm9wcyA9IF9hLmNvbWJvUHJvcHM7XG4gICAgICAgICAgICB0aGlzLnByb3BzID0gY29tYm9Qcm9wcztcbiAgICAgICAgICAgIGlmIChhbnlDaGFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZXZlclJlbmRlcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmVmb3JlVXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyKGNvbWJvUHJvcHMsIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmV2ZXJSZW5kZXJlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFmdGVyVXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5ldmVyUmVuZGVyZWQgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICBDb21wb25lbnQucHJvdG90eXBlLnJlY2VpdmVDb250ZXh0ID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBvbGRDb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgICAgIGlmICghb2xkQ29udGV4dCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlyc3RDb250ZXh0KGNvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBDb21wb25lbnQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChwcm9wcywgY29udGV4dCkge1xuICAgICAgICB9O1xuICAgICAgICBDb21wb25lbnQucHJvdG90eXBlLmZpcnN0Q29udGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIH07XG4gICAgICAgIENvbXBvbmVudC5wcm90b3R5cGUuYmVmb3JlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB9O1xuICAgICAgICBDb21wb25lbnQucHJvdG90eXBlLmFmdGVyVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB9O1xuICAgICAgICAvLyBhZnRlciBkZXN0cm95IGlzIGNhbGxlZCwgdGhpcyBjb21wb25lbnQgd29uJ3QgZXZlciBiZSB1c2VkIGFnYWluXG4gICAgICAgIENvbXBvbmVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIENvbXBvbmVudDtcbiAgICB9KCkpO1xuICAgIENvbXBvbmVudC5wcm90b3R5cGUuZXF1YWxpdHlGdW5jcyA9IHt9O1xuICAgIC8qXG4gICAgUmV1c2VzIG9sZCB2YWx1ZXMgd2hlbiBlcXVhbC4gSWYgYW55dGhpbmcgaXMgdW5lcXVhbCwgcmV0dXJucyBuZXdQcm9wcyBhcy1pcy5cbiAgICBHcmVhdCBmb3IgUHVyZUNvbXBvbmVudCwgYnV0IHdvbid0IGJlIGZlYXNpYmxlIHdpdGggUmVhY3QsIHNvIGp1c3QgZWxpbWluYXRlIGFuZCB1c2UgUmVhY3QncyBET00gZGlmZmluZy5cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHJlY3ljbGVQcm9wcyhvbGRQcm9wcywgbmV3UHJvcHMsIGVxdWFsaXR5RnVuY3MpIHtcbiAgICAgICAgdmFyIGNvbWJvUHJvcHMgPSB7fTsgLy8gc29tZSBvbGQsIHNvbWUgbmV3XG4gICAgICAgIHZhciBhbnlDaGFuZ2VzID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBuZXdQcm9wcykge1xuICAgICAgICAgICAgaWYgKGtleSBpbiBvbGRQcm9wcyAmJiAob2xkUHJvcHNba2V5XSA9PT0gbmV3UHJvcHNba2V5XSB8fFxuICAgICAgICAgICAgICAgIChlcXVhbGl0eUZ1bmNzW2tleV0gJiYgZXF1YWxpdHlGdW5jc1trZXldKG9sZFByb3BzW2tleV0sIG5ld1Byb3BzW2tleV0pKSkpIHtcbiAgICAgICAgICAgICAgICAvLyBlcXVhbCB0byBvbGQ/IHVzZSBvbGQgcHJvcFxuICAgICAgICAgICAgICAgIGNvbWJvUHJvcHNba2V5XSA9IG9sZFByb3BzW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb21ib1Byb3BzW2tleV0gPSBuZXdQcm9wc1trZXldO1xuICAgICAgICAgICAgICAgIGFueUNoYW5nZXMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvbGRQcm9wcykge1xuICAgICAgICAgICAgaWYgKCEoa2V5IGluIG5ld1Byb3BzKSkge1xuICAgICAgICAgICAgICAgIGFueUNoYW5nZXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGFueUNoYW5nZXM6IGFueUNoYW5nZXMsIGNvbWJvUHJvcHM6IGNvbWJvUHJvcHMgfTtcbiAgICB9XG5cbiAgICAvKlxuICAgIFBVUlBPU0VTOlxuICAgIC0gaG9vayB1cCB0byBmZywgZmlsbCwgYW5kIG1pcnJvciByZW5kZXJlcnNcbiAgICAtIGludGVyZmFjZSBmb3IgZHJhZ2dpbmcgYW5kIGhpdHNcbiAgICAqL1xuICAgIHZhciBEYXRlQ29tcG9uZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoRGF0ZUNvbXBvbmVudCwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gRGF0ZUNvbXBvbmVudChlbCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgICAgIF90aGlzLmVsID0gZWw7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgRGF0ZUNvbXBvbmVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgcmVtb3ZlRWxlbWVudCh0aGlzLmVsKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gSGl0IFN5c3RlbVxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBEYXRlQ29tcG9uZW50LnByb3RvdHlwZS5idWlsZFBvc2l0aW9uQ2FjaGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB9O1xuICAgICAgICBEYXRlQ29tcG9uZW50LnByb3RvdHlwZS5xdWVyeUhpdCA9IGZ1bmN0aW9uIChwb3NpdGlvbkxlZnQsIHBvc2l0aW9uVG9wLCBlbFdpZHRoLCBlbEhlaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7IC8vIHRoaXMgc2hvdWxkIGJlIGFic3RyYWN0XG4gICAgICAgIH07XG4gICAgICAgIC8vIFZhbGlkYXRpb25cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgRGF0ZUNvbXBvbmVudC5wcm90b3R5cGUuaXNJbnRlcmFjdGlvblZhbGlkID0gZnVuY3Rpb24gKGludGVyYWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgY2FsZW5kYXIgPSB0aGlzLmNvbnRleHQuY2FsZW5kYXI7XG4gICAgICAgICAgICB2YXIgZGF0ZVByb2ZpbGUgPSB0aGlzLnByb3BzLmRhdGVQcm9maWxlOyAvLyBIQUNLXG4gICAgICAgICAgICB2YXIgaW5zdGFuY2VzID0gaW50ZXJhY3Rpb24ubXV0YXRlZEV2ZW50cy5pbnN0YW5jZXM7XG4gICAgICAgICAgICBpZiAoZGF0ZVByb2ZpbGUpIHsgLy8gSEFDSyBmb3IgRGF5VGlsZVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGluc3RhbmNlSWQgaW4gaW5zdGFuY2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcmFuZ2VDb250YWluc1JhbmdlKGRhdGVQcm9maWxlLnZhbGlkUmFuZ2UsIGluc3RhbmNlc1tpbnN0YW5jZUlkXS5yYW5nZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpc0ludGVyYWN0aW9uVmFsaWQoaW50ZXJhY3Rpb24sIGNhbGVuZGFyKTtcbiAgICAgICAgfTtcbiAgICAgICAgRGF0ZUNvbXBvbmVudC5wcm90b3R5cGUuaXNEYXRlU2VsZWN0aW9uVmFsaWQgPSBmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgY2FsZW5kYXIgPSB0aGlzLmNvbnRleHQuY2FsZW5kYXI7XG4gICAgICAgICAgICB2YXIgZGF0ZVByb2ZpbGUgPSB0aGlzLnByb3BzLmRhdGVQcm9maWxlOyAvLyBIQUNLXG4gICAgICAgICAgICBpZiAoZGF0ZVByb2ZpbGUgJiYgLy8gSEFDSyBmb3IgRGF5VGlsZVxuICAgICAgICAgICAgICAgICFyYW5nZUNvbnRhaW5zUmFuZ2UoZGF0ZVByb2ZpbGUudmFsaWRSYW5nZSwgc2VsZWN0aW9uLnJhbmdlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpc0RhdGVTZWxlY3Rpb25WYWxpZChzZWxlY3Rpb24sIGNhbGVuZGFyKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gUG9pbnRlciBJbnRlcmFjdGlvbiBVdGlsc1xuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBEYXRlQ29tcG9uZW50LnByb3RvdHlwZS5pc1ZhbGlkU2VnRG93bkVsID0gZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXMucHJvcHMuZXZlbnREcmFnICYmIC8vIEhBQ0tcbiAgICAgICAgICAgICAgICAhdGhpcy5wcm9wcy5ldmVudFJlc2l6ZSAmJiAvLyBIQUNLXG4gICAgICAgICAgICAgICAgIWVsZW1lbnRDbG9zZXN0KGVsLCAnLmZjLW1pcnJvcicpICYmXG4gICAgICAgICAgICAgICAgKHRoaXMuaXNQb3BvdmVyKCkgfHwgIXRoaXMuaXNJblBvcG92ZXIoZWwpKTtcbiAgICAgICAgICAgIC8vIF5hYm92ZSBsaW5lIGVuc3VyZXMgd2UgZG9uJ3QgZGV0ZWN0IGEgc2VnIGludGVyYWN0aW9uIHdpdGhpbiBhIG5lc3RlZCBjb21wb25lbnQuXG4gICAgICAgICAgICAvLyBpdCdzIGEgSEFDSyBiZWNhdXNlIGl0IG9ubHkgc3VwcG9ydHMgYSBwb3BvdmVyIGFzIHRoZSBuZXN0ZWQgY29tcG9uZW50LlxuICAgICAgICB9O1xuICAgICAgICBEYXRlQ29tcG9uZW50LnByb3RvdHlwZS5pc1ZhbGlkRGF0ZURvd25FbCA9IGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgdmFyIHNlZ0VsID0gZWxlbWVudENsb3Nlc3QoZWwsIHRoaXMuZmdTZWdTZWxlY3Rvcik7XG4gICAgICAgICAgICByZXR1cm4gKCFzZWdFbCB8fCBzZWdFbC5jbGFzc0xpc3QuY29udGFpbnMoJ2ZjLW1pcnJvcicpKSAmJlxuICAgICAgICAgICAgICAgICFlbGVtZW50Q2xvc2VzdChlbCwgJy5mYy1tb3JlJykgJiYgLy8gYSBcIm1vcmUuLlwiIGxpbmtcbiAgICAgICAgICAgICAgICAhZWxlbWVudENsb3Nlc3QoZWwsICdhW2RhdGEtZ290b10nKSAmJiAvLyBhIGNsaWNrYWJsZSBuYXYgbGlua1xuICAgICAgICAgICAgICAgICF0aGlzLmlzSW5Qb3BvdmVyKGVsKTtcbiAgICAgICAgfTtcbiAgICAgICAgRGF0ZUNvbXBvbmVudC5wcm90b3R5cGUuaXNQb3BvdmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdmYy1wb3BvdmVyJyk7XG4gICAgICAgIH07XG4gICAgICAgIERhdGVDb21wb25lbnQucHJvdG90eXBlLmlzSW5Qb3BvdmVyID0gZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gQm9vbGVhbihlbGVtZW50Q2xvc2VzdChlbCwgJy5mYy1wb3BvdmVyJykpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gRGF0ZUNvbXBvbmVudDtcbiAgICB9KENvbXBvbmVudCkpO1xuICAgIERhdGVDb21wb25lbnQucHJvdG90eXBlLmZnU2VnU2VsZWN0b3IgPSAnLmZjLWV2ZW50LWNvbnRhaW5lciA+IConO1xuICAgIERhdGVDb21wb25lbnQucHJvdG90eXBlLmJnU2VnU2VsZWN0b3IgPSAnLmZjLWJnZXZlbnQ6bm90KC5mYy1ub25idXNpbmVzcyknO1xuXG4gICAgdmFyIHVpZCQxID0gMDtcbiAgICBmdW5jdGlvbiBjcmVhdGVQbHVnaW4oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiBTdHJpbmcodWlkJDErKyksXG4gICAgICAgICAgICBkZXBzOiBpbnB1dC5kZXBzIHx8IFtdLFxuICAgICAgICAgICAgcmVkdWNlcnM6IGlucHV0LnJlZHVjZXJzIHx8IFtdLFxuICAgICAgICAgICAgZXZlbnREZWZQYXJzZXJzOiBpbnB1dC5ldmVudERlZlBhcnNlcnMgfHwgW10sXG4gICAgICAgICAgICBpc0RyYWdnYWJsZVRyYW5zZm9ybWVyczogaW5wdXQuaXNEcmFnZ2FibGVUcmFuc2Zvcm1lcnMgfHwgW10sXG4gICAgICAgICAgICBldmVudERyYWdNdXRhdGlvbk1hc3NhZ2VyczogaW5wdXQuZXZlbnREcmFnTXV0YXRpb25NYXNzYWdlcnMgfHwgW10sXG4gICAgICAgICAgICBldmVudERlZk11dGF0aW9uQXBwbGllcnM6IGlucHV0LmV2ZW50RGVmTXV0YXRpb25BcHBsaWVycyB8fCBbXSxcbiAgICAgICAgICAgIGRhdGVTZWxlY3Rpb25UcmFuc2Zvcm1lcnM6IGlucHV0LmRhdGVTZWxlY3Rpb25UcmFuc2Zvcm1lcnMgfHwgW10sXG4gICAgICAgICAgICBkYXRlUG9pbnRUcmFuc2Zvcm1zOiBpbnB1dC5kYXRlUG9pbnRUcmFuc2Zvcm1zIHx8IFtdLFxuICAgICAgICAgICAgZGF0ZVNwYW5UcmFuc2Zvcm1zOiBpbnB1dC5kYXRlU3BhblRyYW5zZm9ybXMgfHwgW10sXG4gICAgICAgICAgICB2aWV3czogaW5wdXQudmlld3MgfHwge30sXG4gICAgICAgICAgICB2aWV3UHJvcHNUcmFuc2Zvcm1lcnM6IGlucHV0LnZpZXdQcm9wc1RyYW5zZm9ybWVycyB8fCBbXSxcbiAgICAgICAgICAgIGlzUHJvcHNWYWxpZDogaW5wdXQuaXNQcm9wc1ZhbGlkIHx8IG51bGwsXG4gICAgICAgICAgICBleHRlcm5hbERlZlRyYW5zZm9ybXM6IGlucHV0LmV4dGVybmFsRGVmVHJhbnNmb3JtcyB8fCBbXSxcbiAgICAgICAgICAgIGV2ZW50UmVzaXplSm9pblRyYW5zZm9ybXM6IGlucHV0LmV2ZW50UmVzaXplSm9pblRyYW5zZm9ybXMgfHwgW10sXG4gICAgICAgICAgICB2aWV3Q29udGFpbmVyTW9kaWZpZXJzOiBpbnB1dC52aWV3Q29udGFpbmVyTW9kaWZpZXJzIHx8IFtdLFxuICAgICAgICAgICAgZXZlbnREcm9wVHJhbnNmb3JtZXJzOiBpbnB1dC5ldmVudERyb3BUcmFuc2Zvcm1lcnMgfHwgW10sXG4gICAgICAgICAgICBjb21wb25lbnRJbnRlcmFjdGlvbnM6IGlucHV0LmNvbXBvbmVudEludGVyYWN0aW9ucyB8fCBbXSxcbiAgICAgICAgICAgIGNhbGVuZGFySW50ZXJhY3Rpb25zOiBpbnB1dC5jYWxlbmRhckludGVyYWN0aW9ucyB8fCBbXSxcbiAgICAgICAgICAgIHRoZW1lQ2xhc3NlczogaW5wdXQudGhlbWVDbGFzc2VzIHx8IHt9LFxuICAgICAgICAgICAgZXZlbnRTb3VyY2VEZWZzOiBpbnB1dC5ldmVudFNvdXJjZURlZnMgfHwgW10sXG4gICAgICAgICAgICBjbWRGb3JtYXR0ZXI6IGlucHV0LmNtZEZvcm1hdHRlcixcbiAgICAgICAgICAgIHJlY3VycmluZ1R5cGVzOiBpbnB1dC5yZWN1cnJpbmdUeXBlcyB8fCBbXSxcbiAgICAgICAgICAgIG5hbWVkVGltZVpvbmVkSW1wbDogaW5wdXQubmFtZWRUaW1lWm9uZWRJbXBsLFxuICAgICAgICAgICAgZGVmYXVsdFZpZXc6IGlucHV0LmRlZmF1bHRWaWV3IHx8ICcnLFxuICAgICAgICAgICAgZWxlbWVudERyYWdnaW5nSW1wbDogaW5wdXQuZWxlbWVudERyYWdnaW5nSW1wbCxcbiAgICAgICAgICAgIG9wdGlvbkNoYW5nZUhhbmRsZXJzOiBpbnB1dC5vcHRpb25DaGFuZ2VIYW5kbGVycyB8fCB7fVxuICAgICAgICB9O1xuICAgIH1cbiAgICB2YXIgUGx1Z2luU3lzdGVtID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBQbHVnaW5TeXN0ZW0oKSB7XG4gICAgICAgICAgICB0aGlzLmhvb2tzID0ge1xuICAgICAgICAgICAgICAgIHJlZHVjZXJzOiBbXSxcbiAgICAgICAgICAgICAgICBldmVudERlZlBhcnNlcnM6IFtdLFxuICAgICAgICAgICAgICAgIGlzRHJhZ2dhYmxlVHJhbnNmb3JtZXJzOiBbXSxcbiAgICAgICAgICAgICAgICBldmVudERyYWdNdXRhdGlvbk1hc3NhZ2VyczogW10sXG4gICAgICAgICAgICAgICAgZXZlbnREZWZNdXRhdGlvbkFwcGxpZXJzOiBbXSxcbiAgICAgICAgICAgICAgICBkYXRlU2VsZWN0aW9uVHJhbnNmb3JtZXJzOiBbXSxcbiAgICAgICAgICAgICAgICBkYXRlUG9pbnRUcmFuc2Zvcm1zOiBbXSxcbiAgICAgICAgICAgICAgICBkYXRlU3BhblRyYW5zZm9ybXM6IFtdLFxuICAgICAgICAgICAgICAgIHZpZXdzOiB7fSxcbiAgICAgICAgICAgICAgICB2aWV3UHJvcHNUcmFuc2Zvcm1lcnM6IFtdLFxuICAgICAgICAgICAgICAgIGlzUHJvcHNWYWxpZDogbnVsbCxcbiAgICAgICAgICAgICAgICBleHRlcm5hbERlZlRyYW5zZm9ybXM6IFtdLFxuICAgICAgICAgICAgICAgIGV2ZW50UmVzaXplSm9pblRyYW5zZm9ybXM6IFtdLFxuICAgICAgICAgICAgICAgIHZpZXdDb250YWluZXJNb2RpZmllcnM6IFtdLFxuICAgICAgICAgICAgICAgIGV2ZW50RHJvcFRyYW5zZm9ybWVyczogW10sXG4gICAgICAgICAgICAgICAgY29tcG9uZW50SW50ZXJhY3Rpb25zOiBbXSxcbiAgICAgICAgICAgICAgICBjYWxlbmRhckludGVyYWN0aW9uczogW10sXG4gICAgICAgICAgICAgICAgdGhlbWVDbGFzc2VzOiB7fSxcbiAgICAgICAgICAgICAgICBldmVudFNvdXJjZURlZnM6IFtdLFxuICAgICAgICAgICAgICAgIGNtZEZvcm1hdHRlcjogbnVsbCxcbiAgICAgICAgICAgICAgICByZWN1cnJpbmdUeXBlczogW10sXG4gICAgICAgICAgICAgICAgbmFtZWRUaW1lWm9uZWRJbXBsOiBudWxsLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRWaWV3OiAnJyxcbiAgICAgICAgICAgICAgICBlbGVtZW50RHJhZ2dpbmdJbXBsOiBudWxsLFxuICAgICAgICAgICAgICAgIG9wdGlvbkNoYW5nZUhhbmRsZXJzOiB7fVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuYWRkZWRIYXNoID0ge307XG4gICAgICAgIH1cbiAgICAgICAgUGx1Z2luU3lzdGVtLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYWRkZWRIYXNoW3BsdWdpbi5pZF0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZGVkSGFzaFtwbHVnaW4uaWRdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gcGx1Z2luLmRlcHM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXAgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkKGRlcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuaG9va3MgPSBjb21iaW5lSG9va3ModGhpcy5ob29rcywgcGx1Z2luKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFBsdWdpblN5c3RlbTtcbiAgICB9KCkpO1xuICAgIGZ1bmN0aW9uIGNvbWJpbmVIb29rcyhob29rczAsIGhvb2tzMSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVkdWNlcnM6IGhvb2tzMC5yZWR1Y2Vycy5jb25jYXQoaG9va3MxLnJlZHVjZXJzKSxcbiAgICAgICAgICAgIGV2ZW50RGVmUGFyc2VyczogaG9va3MwLmV2ZW50RGVmUGFyc2Vycy5jb25jYXQoaG9va3MxLmV2ZW50RGVmUGFyc2VycyksXG4gICAgICAgICAgICBpc0RyYWdnYWJsZVRyYW5zZm9ybWVyczogaG9va3MwLmlzRHJhZ2dhYmxlVHJhbnNmb3JtZXJzLmNvbmNhdChob29rczEuaXNEcmFnZ2FibGVUcmFuc2Zvcm1lcnMpLFxuICAgICAgICAgICAgZXZlbnREcmFnTXV0YXRpb25NYXNzYWdlcnM6IGhvb2tzMC5ldmVudERyYWdNdXRhdGlvbk1hc3NhZ2Vycy5jb25jYXQoaG9va3MxLmV2ZW50RHJhZ011dGF0aW9uTWFzc2FnZXJzKSxcbiAgICAgICAgICAgIGV2ZW50RGVmTXV0YXRpb25BcHBsaWVyczogaG9va3MwLmV2ZW50RGVmTXV0YXRpb25BcHBsaWVycy5jb25jYXQoaG9va3MxLmV2ZW50RGVmTXV0YXRpb25BcHBsaWVycyksXG4gICAgICAgICAgICBkYXRlU2VsZWN0aW9uVHJhbnNmb3JtZXJzOiBob29rczAuZGF0ZVNlbGVjdGlvblRyYW5zZm9ybWVycy5jb25jYXQoaG9va3MxLmRhdGVTZWxlY3Rpb25UcmFuc2Zvcm1lcnMpLFxuICAgICAgICAgICAgZGF0ZVBvaW50VHJhbnNmb3JtczogaG9va3MwLmRhdGVQb2ludFRyYW5zZm9ybXMuY29uY2F0KGhvb2tzMS5kYXRlUG9pbnRUcmFuc2Zvcm1zKSxcbiAgICAgICAgICAgIGRhdGVTcGFuVHJhbnNmb3JtczogaG9va3MwLmRhdGVTcGFuVHJhbnNmb3Jtcy5jb25jYXQoaG9va3MxLmRhdGVTcGFuVHJhbnNmb3JtcyksXG4gICAgICAgICAgICB2aWV3czogX19hc3NpZ24oe30sIGhvb2tzMC52aWV3cywgaG9va3MxLnZpZXdzKSxcbiAgICAgICAgICAgIHZpZXdQcm9wc1RyYW5zZm9ybWVyczogaG9va3MwLnZpZXdQcm9wc1RyYW5zZm9ybWVycy5jb25jYXQoaG9va3MxLnZpZXdQcm9wc1RyYW5zZm9ybWVycyksXG4gICAgICAgICAgICBpc1Byb3BzVmFsaWQ6IGhvb2tzMS5pc1Byb3BzVmFsaWQgfHwgaG9va3MwLmlzUHJvcHNWYWxpZCxcbiAgICAgICAgICAgIGV4dGVybmFsRGVmVHJhbnNmb3JtczogaG9va3MwLmV4dGVybmFsRGVmVHJhbnNmb3Jtcy5jb25jYXQoaG9va3MxLmV4dGVybmFsRGVmVHJhbnNmb3JtcyksXG4gICAgICAgICAgICBldmVudFJlc2l6ZUpvaW5UcmFuc2Zvcm1zOiBob29rczAuZXZlbnRSZXNpemVKb2luVHJhbnNmb3Jtcy5jb25jYXQoaG9va3MxLmV2ZW50UmVzaXplSm9pblRyYW5zZm9ybXMpLFxuICAgICAgICAgICAgdmlld0NvbnRhaW5lck1vZGlmaWVyczogaG9va3MwLnZpZXdDb250YWluZXJNb2RpZmllcnMuY29uY2F0KGhvb2tzMS52aWV3Q29udGFpbmVyTW9kaWZpZXJzKSxcbiAgICAgICAgICAgIGV2ZW50RHJvcFRyYW5zZm9ybWVyczogaG9va3MwLmV2ZW50RHJvcFRyYW5zZm9ybWVycy5jb25jYXQoaG9va3MxLmV2ZW50RHJvcFRyYW5zZm9ybWVycyksXG4gICAgICAgICAgICBjYWxlbmRhckludGVyYWN0aW9uczogaG9va3MwLmNhbGVuZGFySW50ZXJhY3Rpb25zLmNvbmNhdChob29rczEuY2FsZW5kYXJJbnRlcmFjdGlvbnMpLFxuICAgICAgICAgICAgY29tcG9uZW50SW50ZXJhY3Rpb25zOiBob29rczAuY29tcG9uZW50SW50ZXJhY3Rpb25zLmNvbmNhdChob29rczEuY29tcG9uZW50SW50ZXJhY3Rpb25zKSxcbiAgICAgICAgICAgIHRoZW1lQ2xhc3NlczogX19hc3NpZ24oe30sIGhvb2tzMC50aGVtZUNsYXNzZXMsIGhvb2tzMS50aGVtZUNsYXNzZXMpLFxuICAgICAgICAgICAgZXZlbnRTb3VyY2VEZWZzOiBob29rczAuZXZlbnRTb3VyY2VEZWZzLmNvbmNhdChob29rczEuZXZlbnRTb3VyY2VEZWZzKSxcbiAgICAgICAgICAgIGNtZEZvcm1hdHRlcjogaG9va3MxLmNtZEZvcm1hdHRlciB8fCBob29rczAuY21kRm9ybWF0dGVyLFxuICAgICAgICAgICAgcmVjdXJyaW5nVHlwZXM6IGhvb2tzMC5yZWN1cnJpbmdUeXBlcy5jb25jYXQoaG9va3MxLnJlY3VycmluZ1R5cGVzKSxcbiAgICAgICAgICAgIG5hbWVkVGltZVpvbmVkSW1wbDogaG9va3MxLm5hbWVkVGltZVpvbmVkSW1wbCB8fCBob29rczAubmFtZWRUaW1lWm9uZWRJbXBsLFxuICAgICAgICAgICAgZGVmYXVsdFZpZXc6IGhvb2tzMC5kZWZhdWx0VmlldyB8fCBob29rczEuZGVmYXVsdFZpZXcsXG4gICAgICAgICAgICBlbGVtZW50RHJhZ2dpbmdJbXBsOiBob29rczAuZWxlbWVudERyYWdnaW5nSW1wbCB8fCBob29rczEuZWxlbWVudERyYWdnaW5nSW1wbCxcbiAgICAgICAgICAgIG9wdGlvbkNoYW5nZUhhbmRsZXJzOiBfX2Fzc2lnbih7fSwgaG9va3MwLm9wdGlvbkNoYW5nZUhhbmRsZXJzLCBob29rczEub3B0aW9uQ2hhbmdlSGFuZGxlcnMpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGV2ZW50U291cmNlRGVmID0ge1xuICAgICAgICBpZ25vcmVSYW5nZTogdHJ1ZSxcbiAgICAgICAgcGFyc2VNZXRhOiBmdW5jdGlvbiAocmF3KSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyYXcpKSB7IC8vIHNob3J0IGZvcm1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmF3O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyYXcuZXZlbnRzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByYXcuZXZlbnRzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGZldGNoOiBmdW5jdGlvbiAoYXJnLCBzdWNjZXNzKSB7XG4gICAgICAgICAgICBzdWNjZXNzKHtcbiAgICAgICAgICAgICAgICByYXdFdmVudHM6IGFyZy5ldmVudFNvdXJjZS5tZXRhXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIEFycmF5RXZlbnRTb3VyY2VQbHVnaW4gPSBjcmVhdGVQbHVnaW4oe1xuICAgICAgICBldmVudFNvdXJjZURlZnM6IFtldmVudFNvdXJjZURlZl1cbiAgICB9KTtcblxuICAgIHZhciBldmVudFNvdXJjZURlZiQxID0ge1xuICAgICAgICBwYXJzZU1ldGE6IGZ1bmN0aW9uIChyYXcpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmF3ID09PSAnZnVuY3Rpb24nKSB7IC8vIHNob3J0IGZvcm1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmF3O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHJhdy5ldmVudHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmF3LmV2ZW50cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBmZXRjaDogZnVuY3Rpb24gKGFyZywgc3VjY2VzcywgZmFpbHVyZSkge1xuICAgICAgICAgICAgdmFyIGRhdGVFbnYgPSBhcmcuY2FsZW5kYXIuZGF0ZUVudjtcbiAgICAgICAgICAgIHZhciBmdW5jID0gYXJnLmV2ZW50U291cmNlLm1ldGE7XG4gICAgICAgICAgICB1bnByb21pc2lmeShmdW5jLmJpbmQobnVsbCwge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBkYXRlRW52LnRvRGF0ZShhcmcucmFuZ2Uuc3RhcnQpLFxuICAgICAgICAgICAgICAgIGVuZDogZGF0ZUVudi50b0RhdGUoYXJnLnJhbmdlLmVuZCksXG4gICAgICAgICAgICAgICAgc3RhcnRTdHI6IGRhdGVFbnYuZm9ybWF0SXNvKGFyZy5yYW5nZS5zdGFydCksXG4gICAgICAgICAgICAgICAgZW5kU3RyOiBkYXRlRW52LmZvcm1hdElzbyhhcmcucmFuZ2UuZW5kKSxcbiAgICAgICAgICAgICAgICB0aW1lWm9uZTogZGF0ZUVudi50aW1lWm9uZVxuICAgICAgICAgICAgfSksIGZ1bmN0aW9uIChyYXdFdmVudHMpIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzKHsgcmF3RXZlbnRzOiByYXdFdmVudHMgfSk7IC8vIG5lZWRzIGFuIG9iamVjdCByZXNwb25zZVxuICAgICAgICAgICAgfSwgZmFpbHVyZSAvLyBzZW5kIGVycm9yT2JqIGRpcmVjdGx5IHRvIGZhaWx1cmUgY2FsbGJhY2tcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBGdW5jRXZlbnRTb3VyY2VQbHVnaW4gPSBjcmVhdGVQbHVnaW4oe1xuICAgICAgICBldmVudFNvdXJjZURlZnM6IFtldmVudFNvdXJjZURlZiQxXVxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gcmVxdWVzdEpzb24obWV0aG9kLCB1cmwsIHBhcmFtcywgc3VjY2Vzc0NhbGxiYWNrLCBmYWlsdXJlQ2FsbGJhY2spIHtcbiAgICAgICAgbWV0aG9kID0gbWV0aG9kLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIHZhciBib2R5ID0gbnVsbDtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gJ0dFVCcpIHtcbiAgICAgICAgICAgIHVybCA9IGluamVjdFF1ZXJ5U3RyaW5nUGFyYW1zKHVybCwgcGFyYW1zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGJvZHkgPSBlbmNvZGVQYXJhbXMocGFyYW1zKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcbiAgICAgICAgaWYgKG1ldGhvZCAhPT0gJ0dFVCcpIHtcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID49IDIwMCAmJiB4aHIuc3RhdHVzIDwgNDAwKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcyA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayhyZXMsIHhocik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZmFpbHVyZUNhbGxiYWNrKCdGYWlsdXJlIHBhcnNpbmcgSlNPTicsIHhocik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZmFpbHVyZUNhbGxiYWNrKCdSZXF1ZXN0IGZhaWxlZCcsIHhocik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZmFpbHVyZUNhbGxiYWNrKCdSZXF1ZXN0IGZhaWxlZCcsIHhocik7XG4gICAgICAgIH07XG4gICAgICAgIHhoci5zZW5kKGJvZHkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpbmplY3RRdWVyeVN0cmluZ1BhcmFtcyh1cmwsIHBhcmFtcykge1xuICAgICAgICByZXR1cm4gdXJsICtcbiAgICAgICAgICAgICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgK1xuICAgICAgICAgICAgZW5jb2RlUGFyYW1zKHBhcmFtcyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVuY29kZVBhcmFtcyhwYXJhbXMpIHtcbiAgICAgICAgdmFyIHBhcnRzID0gW107XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgIHBhcnRzLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQocGFyYW1zW2tleV0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFydHMuam9pbignJicpO1xuICAgIH1cblxuICAgIHZhciBldmVudFNvdXJjZURlZiQyID0ge1xuICAgICAgICBwYXJzZU1ldGE6IGZ1bmN0aW9uIChyYXcpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmF3ID09PSAnc3RyaW5nJykgeyAvLyBzaG9ydCBmb3JtXG4gICAgICAgICAgICAgICAgcmF3ID0geyB1cmw6IHJhdyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIXJhdyB8fCB0eXBlb2YgcmF3ICE9PSAnb2JqZWN0JyB8fCAhcmF3LnVybCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IHJhdy51cmwsXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAocmF3Lm1ldGhvZCB8fCAnR0VUJykudG9VcHBlckNhc2UoKSxcbiAgICAgICAgICAgICAgICBleHRyYVBhcmFtczogcmF3LmV4dHJhUGFyYW1zLFxuICAgICAgICAgICAgICAgIHN0YXJ0UGFyYW06IHJhdy5zdGFydFBhcmFtLFxuICAgICAgICAgICAgICAgIGVuZFBhcmFtOiByYXcuZW5kUGFyYW0sXG4gICAgICAgICAgICAgICAgdGltZVpvbmVQYXJhbTogcmF3LnRpbWVab25lUGFyYW1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGZldGNoOiBmdW5jdGlvbiAoYXJnLCBzdWNjZXNzLCBmYWlsdXJlKSB7XG4gICAgICAgICAgICB2YXIgbWV0YSA9IGFyZy5ldmVudFNvdXJjZS5tZXRhO1xuICAgICAgICAgICAgdmFyIHJlcXVlc3RQYXJhbXMgPSBidWlsZFJlcXVlc3RQYXJhbXMobWV0YSwgYXJnLnJhbmdlLCBhcmcuY2FsZW5kYXIpO1xuICAgICAgICAgICAgcmVxdWVzdEpzb24obWV0YS5tZXRob2QsIG1ldGEudXJsLCByZXF1ZXN0UGFyYW1zLCBmdW5jdGlvbiAocmF3RXZlbnRzLCB4aHIpIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzKHsgcmF3RXZlbnRzOiByYXdFdmVudHMsIHhocjogeGhyIH0pO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yTWVzc2FnZSwgeGhyKSB7XG4gICAgICAgICAgICAgICAgZmFpbHVyZSh7IG1lc3NhZ2U6IGVycm9yTWVzc2FnZSwgeGhyOiB4aHIgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIEpzb25GZWVkRXZlbnRTb3VyY2VQbHVnaW4gPSBjcmVhdGVQbHVnaW4oe1xuICAgICAgICBldmVudFNvdXJjZURlZnM6IFtldmVudFNvdXJjZURlZiQyXVxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGJ1aWxkUmVxdWVzdFBhcmFtcyhtZXRhLCByYW5nZSwgY2FsZW5kYXIpIHtcbiAgICAgICAgdmFyIGRhdGVFbnYgPSBjYWxlbmRhci5kYXRlRW52O1xuICAgICAgICB2YXIgc3RhcnRQYXJhbTtcbiAgICAgICAgdmFyIGVuZFBhcmFtO1xuICAgICAgICB2YXIgdGltZVpvbmVQYXJhbTtcbiAgICAgICAgdmFyIGN1c3RvbVJlcXVlc3RQYXJhbXM7XG4gICAgICAgIHZhciBwYXJhbXMgPSB7fTtcbiAgICAgICAgc3RhcnRQYXJhbSA9IG1ldGEuc3RhcnRQYXJhbTtcbiAgICAgICAgaWYgKHN0YXJ0UGFyYW0gPT0gbnVsbCkge1xuICAgICAgICAgICAgc3RhcnRQYXJhbSA9IGNhbGVuZGFyLm9wdCgnc3RhcnRQYXJhbScpO1xuICAgICAgICB9XG4gICAgICAgIGVuZFBhcmFtID0gbWV0YS5lbmRQYXJhbTtcbiAgICAgICAgaWYgKGVuZFBhcmFtID09IG51bGwpIHtcbiAgICAgICAgICAgIGVuZFBhcmFtID0gY2FsZW5kYXIub3B0KCdlbmRQYXJhbScpO1xuICAgICAgICB9XG4gICAgICAgIHRpbWVab25lUGFyYW0gPSBtZXRhLnRpbWVab25lUGFyYW07XG4gICAgICAgIGlmICh0aW1lWm9uZVBhcmFtID09IG51bGwpIHtcbiAgICAgICAgICAgIHRpbWVab25lUGFyYW0gPSBjYWxlbmRhci5vcHQoJ3RpbWVab25lUGFyYW0nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZXRyaWV2ZSBhbnkgb3V0Ym91bmQgR0VUL1BPU1QgZGF0YSBmcm9tIHRoZSBvcHRpb25zXG4gICAgICAgIGlmICh0eXBlb2YgbWV0YS5leHRyYVBhcmFtcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgLy8gc3VwcGxpZWQgYXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBrZXkvdmFsdWUgb2JqZWN0XG4gICAgICAgICAgICBjdXN0b21SZXF1ZXN0UGFyYW1zID0gbWV0YS5leHRyYVBhcmFtcygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gcHJvYmFibHkgc3VwcGxpZWQgYXMgYSBzdHJhaWdodCBrZXkvdmFsdWUgb2JqZWN0XG4gICAgICAgICAgICBjdXN0b21SZXF1ZXN0UGFyYW1zID0gbWV0YS5leHRyYVBhcmFtcyB8fCB7fTtcbiAgICAgICAgfVxuICAgICAgICBfX2Fzc2lnbihwYXJhbXMsIGN1c3RvbVJlcXVlc3RQYXJhbXMpO1xuICAgICAgICBwYXJhbXNbc3RhcnRQYXJhbV0gPSBkYXRlRW52LmZvcm1hdElzbyhyYW5nZS5zdGFydCk7XG4gICAgICAgIHBhcmFtc1tlbmRQYXJhbV0gPSBkYXRlRW52LmZvcm1hdElzbyhyYW5nZS5lbmQpO1xuICAgICAgICBpZiAoZGF0ZUVudi50aW1lWm9uZSAhPT0gJ2xvY2FsJykge1xuICAgICAgICAgICAgcGFyYW1zW3RpbWVab25lUGFyYW1dID0gZGF0ZUVudi50aW1lWm9uZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgIH1cblxuICAgIHZhciByZWN1cnJpbmcgPSB7XG4gICAgICAgIHBhcnNlOiBmdW5jdGlvbiAocmF3RXZlbnQsIGxlZnRvdmVyUHJvcHMsIGRhdGVFbnYpIHtcbiAgICAgICAgICAgIHZhciBjcmVhdGVNYXJrZXIgPSBkYXRlRW52LmNyZWF0ZU1hcmtlci5iaW5kKGRhdGVFbnYpO1xuICAgICAgICAgICAgdmFyIHByb2Nlc3NvcnMgPSB7XG4gICAgICAgICAgICAgICAgZGF5c09mV2VlazogbnVsbCxcbiAgICAgICAgICAgICAgICBzdGFydFRpbWU6IGNyZWF0ZUR1cmF0aW9uLFxuICAgICAgICAgICAgICAgIGVuZFRpbWU6IGNyZWF0ZUR1cmF0aW9uLFxuICAgICAgICAgICAgICAgIHN0YXJ0UmVjdXI6IGNyZWF0ZU1hcmtlcixcbiAgICAgICAgICAgICAgICBlbmRSZWN1cjogY3JlYXRlTWFya2VyXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIHByb3BzID0gcmVmaW5lUHJvcHMocmF3RXZlbnQsIHByb2Nlc3NvcnMsIHt9LCBsZWZ0b3ZlclByb3BzKTtcbiAgICAgICAgICAgIHZhciBhbnlWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvcHNbcHJvcE5hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgYW55VmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYW55VmFsaWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZHVyYXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmICgnZHVyYXRpb24nIGluIGxlZnRvdmVyUHJvcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gPSBjcmVhdGVEdXJhdGlvbihsZWZ0b3ZlclByb3BzLmR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGxlZnRvdmVyUHJvcHMuZHVyYXRpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZHVyYXRpb24gJiYgcHJvcHMuc3RhcnRUaW1lICYmIHByb3BzLmVuZFRpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gPSBzdWJ0cmFjdER1cmF0aW9ucyhwcm9wcy5lbmRUaW1lLCBwcm9wcy5zdGFydFRpbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBhbGxEYXlHdWVzczogQm9vbGVhbighcHJvcHMuc3RhcnRUaW1lICYmICFwcm9wcy5lbmRUaW1lKSxcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICB0eXBlRGF0YTogcHJvcHMgLy8gZG9lc24ndCBuZWVkIGVuZFRpbWUgYW55bW9yZSBidXQgb2ggd2VsbFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgZXhwYW5kOiBmdW5jdGlvbiAodHlwZURhdGEsIGZyYW1pbmdSYW5nZSwgZGF0ZUVudikge1xuICAgICAgICAgICAgdmFyIGNsaXBwZWRGcmFtaW5nUmFuZ2UgPSBpbnRlcnNlY3RSYW5nZXMoZnJhbWluZ1JhbmdlLCB7IHN0YXJ0OiB0eXBlRGF0YS5zdGFydFJlY3VyLCBlbmQ6IHR5cGVEYXRhLmVuZFJlY3VyIH0pO1xuICAgICAgICAgICAgaWYgKGNsaXBwZWRGcmFtaW5nUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhwYW5kUmFuZ2VzKHR5cGVEYXRhLmRheXNPZldlZWssIHR5cGVEYXRhLnN0YXJ0VGltZSwgY2xpcHBlZEZyYW1pbmdSYW5nZSwgZGF0ZUVudik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBTaW1wbGVSZWN1cnJlbmNlUGx1Z2luID0gY3JlYXRlUGx1Z2luKHtcbiAgICAgICAgcmVjdXJyaW5nVHlwZXM6IFtyZWN1cnJpbmddXG4gICAgfSk7XG4gICAgZnVuY3Rpb24gZXhwYW5kUmFuZ2VzKGRheXNPZldlZWssIHN0YXJ0VGltZSwgZnJhbWluZ1JhbmdlLCBkYXRlRW52KSB7XG4gICAgICAgIHZhciBkb3dIYXNoID0gZGF5c09mV2VlayA/IGFycmF5VG9IYXNoKGRheXNPZldlZWspIDogbnVsbDtcbiAgICAgICAgdmFyIGRheU1hcmtlciA9IHN0YXJ0T2ZEYXkoZnJhbWluZ1JhbmdlLnN0YXJ0KTtcbiAgICAgICAgdmFyIGVuZE1hcmtlciA9IGZyYW1pbmdSYW5nZS5lbmQ7XG4gICAgICAgIHZhciBpbnN0YW5jZVN0YXJ0cyA9IFtdO1xuICAgICAgICB3aGlsZSAoZGF5TWFya2VyIDwgZW5kTWFya2VyKSB7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2VTdGFydCBcbiAgICAgICAgICAgIC8vIGlmIGV2ZXJ5ZGF5LCBvciB0aGlzIHBhcnRpY3VsYXIgZGF5LW9mLXdlZWtcbiAgICAgICAgICAgID0gdm9pZCAwO1xuICAgICAgICAgICAgLy8gaWYgZXZlcnlkYXksIG9yIHRoaXMgcGFydGljdWxhciBkYXktb2Ytd2Vla1xuICAgICAgICAgICAgaWYgKCFkb3dIYXNoIHx8IGRvd0hhc2hbZGF5TWFya2VyLmdldFVUQ0RheSgpXSkge1xuICAgICAgICAgICAgICAgIGlmIChzdGFydFRpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VTdGFydCA9IGRhdGVFbnYuYWRkKGRheU1hcmtlciwgc3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlU3RhcnQgPSBkYXlNYXJrZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGluc3RhbmNlU3RhcnRzLnB1c2goaW5zdGFuY2VTdGFydCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkYXlNYXJrZXIgPSBhZGREYXlzKGRheU1hcmtlciwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlU3RhcnRzO1xuICAgIH1cblxuICAgIHZhciBEZWZhdWx0T3B0aW9uQ2hhbmdlSGFuZGxlcnMgPSBjcmVhdGVQbHVnaW4oe1xuICAgICAgICBvcHRpb25DaGFuZ2VIYW5kbGVyczoge1xuICAgICAgICAgICAgZXZlbnRzOiBmdW5jdGlvbiAoZXZlbnRzLCBjYWxlbmRhciwgZGVlcEVxdWFsKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlRXZlbnRTb3VyY2VzKFtldmVudHNdLCBjYWxlbmRhciwgZGVlcEVxdWFsKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBldmVudFNvdXJjZXM6IGhhbmRsZUV2ZW50U291cmNlcyxcbiAgICAgICAgICAgIHBsdWdpbnM6IGhhbmRsZVBsdWdpbnNcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGhhbmRsZUV2ZW50U291cmNlcyhpbnB1dHMsIGNhbGVuZGFyLCBkZWVwRXF1YWwpIHtcbiAgICAgICAgdmFyIHVuZm91bmRTb3VyY2VzID0gaGFzaFZhbHVlc1RvQXJyYXkoY2FsZW5kYXIuc3RhdGUuZXZlbnRTb3VyY2VzKTtcbiAgICAgICAgdmFyIG5ld0lucHV0cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGlucHV0c18xID0gaW5wdXRzOyBfaSA8IGlucHV0c18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGlucHV0ID0gaW5wdXRzXzFbX2ldO1xuICAgICAgICAgICAgdmFyIGlucHV0Rm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdW5mb3VuZFNvdXJjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoZGVlcEVxdWFsKHVuZm91bmRTb3VyY2VzW2ldLl9yYXcsIGlucHV0KSkge1xuICAgICAgICAgICAgICAgICAgICB1bmZvdW5kU291cmNlcy5zcGxpY2UoaSwgMSk7IC8vIGRlbGV0ZVxuICAgICAgICAgICAgICAgICAgICBpbnB1dEZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpbnB1dEZvdW5kKSB7XG4gICAgICAgICAgICAgICAgbmV3SW5wdXRzLnB1c2goaW5wdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIF9hID0gMCwgdW5mb3VuZFNvdXJjZXNfMSA9IHVuZm91bmRTb3VyY2VzOyBfYSA8IHVuZm91bmRTb3VyY2VzXzEubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICB2YXIgdW5mb3VuZFNvdXJjZSA9IHVuZm91bmRTb3VyY2VzXzFbX2FdO1xuICAgICAgICAgICAgY2FsZW5kYXIuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdSRU1PVkVfRVZFTlRfU09VUkNFJyxcbiAgICAgICAgICAgICAgICBzb3VyY2VJZDogdW5mb3VuZFNvdXJjZS5zb3VyY2VJZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBuZXdJbnB1dHNfMSA9IG5ld0lucHV0czsgX2IgPCBuZXdJbnB1dHNfMS5sZW5ndGg7IF9iKyspIHtcbiAgICAgICAgICAgIHZhciBuZXdJbnB1dCA9IG5ld0lucHV0c18xW19iXTtcbiAgICAgICAgICAgIGNhbGVuZGFyLmFkZEV2ZW50U291cmNlKG5ld0lucHV0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBzaG9ydGNvbWluZzogd29uJ3QgcmVtb3ZlIHBsdWdpbnNcbiAgICBmdW5jdGlvbiBoYW5kbGVQbHVnaW5zKGlucHV0cywgY2FsZW5kYXIpIHtcbiAgICAgICAgY2FsZW5kYXIuYWRkUGx1Z2luSW5wdXRzKGlucHV0cyk7IC8vIHdpbGwgZ3JhY2VmdWxseSBoYW5kbGUgZHVwbGljYXRlc1xuICAgIH1cblxuICAgIHZhciBjb25maWcgPSB7fTsgLy8gVE9ETzogbWFrZSB0aGVzZSBvcHRpb25zXG4gICAgdmFyIGdsb2JhbERlZmF1bHRzID0ge1xuICAgICAgICBkZWZhdWx0UmFuZ2VTZXBhcmF0b3I6ICcgLSAnLFxuICAgICAgICB0aXRsZVJhbmdlU2VwYXJhdG9yOiAnIFxcdTIwMTMgJyxcbiAgICAgICAgZGVmYXVsdFRpbWVkRXZlbnREdXJhdGlvbjogJzAxOjAwOjAwJyxcbiAgICAgICAgZGVmYXVsdEFsbERheUV2ZW50RHVyYXRpb246IHsgZGF5OiAxIH0sXG4gICAgICAgIGZvcmNlRXZlbnREdXJhdGlvbjogZmFsc2UsXG4gICAgICAgIG5leHREYXlUaHJlc2hvbGQ6ICcwMDowMDowMCcsXG4gICAgICAgIC8vIGRpc3BsYXlcbiAgICAgICAgY29sdW1uSGVhZGVyOiB0cnVlLFxuICAgICAgICBkZWZhdWx0VmlldzogJycsXG4gICAgICAgIGFzcGVjdFJhdGlvOiAxLjM1LFxuICAgICAgICBoZWFkZXI6IHtcbiAgICAgICAgICAgIGxlZnQ6ICd0aXRsZScsXG4gICAgICAgICAgICBjZW50ZXI6ICcnLFxuICAgICAgICAgICAgcmlnaHQ6ICd0b2RheSBwcmV2LG5leHQnXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWtlbmRzOiB0cnVlLFxuICAgICAgICB3ZWVrTnVtYmVyczogZmFsc2UsXG4gICAgICAgIHdlZWtOdW1iZXJDYWxjdWxhdGlvbjogJ2xvY2FsJyxcbiAgICAgICAgZWRpdGFibGU6IGZhbHNlLFxuICAgICAgICAvLyBub3dJbmRpY2F0b3I6IGZhbHNlLFxuICAgICAgICBzY3JvbGxUaW1lOiAnMDY6MDA6MDAnLFxuICAgICAgICBtaW5UaW1lOiAnMDA6MDA6MDAnLFxuICAgICAgICBtYXhUaW1lOiAnMjQ6MDA6MDAnLFxuICAgICAgICBzaG93Tm9uQ3VycmVudERhdGVzOiB0cnVlLFxuICAgICAgICAvLyBldmVudCBhamF4XG4gICAgICAgIGxhenlGZXRjaGluZzogdHJ1ZSxcbiAgICAgICAgc3RhcnRQYXJhbTogJ3N0YXJ0JyxcbiAgICAgICAgZW5kUGFyYW06ICdlbmQnLFxuICAgICAgICB0aW1lWm9uZVBhcmFtOiAndGltZVpvbmUnLFxuICAgICAgICB0aW1lWm9uZTogJ2xvY2FsJyxcbiAgICAgICAgLy8gYWxsRGF5RGVmYXVsdDogdW5kZWZpbmVkLFxuICAgICAgICAvLyBsb2NhbGVcbiAgICAgICAgbG9jYWxlczogW10sXG4gICAgICAgIGxvY2FsZTogJycsXG4gICAgICAgIC8vIGRpcjogd2lsbCBnZXQgdGhpcyBmcm9tIHRoZSBkZWZhdWx0IGxvY2FsZVxuICAgICAgICAvLyBidXR0b25JY29uczogbnVsbCxcbiAgICAgICAgLy8gYWxsb3dzIHNldHRpbmcgYSBtaW4taGVpZ2h0IHRvIHRoZSBldmVudCBzZWdtZW50IHRvIHByZXZlbnQgc2hvcnQgZXZlbnRzIG92ZXJsYXBwaW5nIGVhY2ggb3RoZXJcbiAgICAgICAgdGltZUdyaWRFdmVudE1pbkhlaWdodDogMCxcbiAgICAgICAgdGhlbWVTeXN0ZW06ICdzdGFuZGFyZCcsXG4gICAgICAgIC8vIGV2ZW50UmVzaXphYmxlRnJvbVN0YXJ0OiBmYWxzZSxcbiAgICAgICAgZHJhZ1JldmVydER1cmF0aW9uOiA1MDAsXG4gICAgICAgIGRyYWdTY3JvbGw6IHRydWUsXG4gICAgICAgIGFsbERheU1haW50YWluRHVyYXRpb246IGZhbHNlLFxuICAgICAgICAvLyBzZWxlY3RhYmxlOiBmYWxzZSxcbiAgICAgICAgdW5zZWxlY3RBdXRvOiB0cnVlLFxuICAgICAgICAvLyBzZWxlY3RNaW5EaXN0YW5jZTogMCxcbiAgICAgICAgZHJvcEFjY2VwdDogJyonLFxuICAgICAgICBldmVudE9yZGVyOiAnc3RhcnQsLWR1cmF0aW9uLGFsbERheSx0aXRsZScsXG4gICAgICAgIC8vIF4gaWYgc3RhcnQgdGllLCBsb25nZXIgZXZlbnRzIGdvIGJlZm9yZSBzaG9ydGVyLiBmaW5hbCB0aWUtYnJlYWtlciBpcyB0aXRsZSB0ZXh0XG4gICAgICAgIC8vIHJlcmVuZGVyRGVsYXk6IG51bGwsXG4gICAgICAgIGV2ZW50TGltaXQ6IGZhbHNlLFxuICAgICAgICBldmVudExpbWl0Q2xpY2s6ICdwb3BvdmVyJyxcbiAgICAgICAgZGF5UG9wb3ZlckZvcm1hdDogeyBtb250aDogJ2xvbmcnLCBkYXk6ICdudW1lcmljJywgeWVhcjogJ251bWVyaWMnIH0sXG4gICAgICAgIGhhbmRsZVdpbmRvd1Jlc2l6ZTogdHJ1ZSxcbiAgICAgICAgd2luZG93UmVzaXplRGVsYXk6IDEwMCxcbiAgICAgICAgbG9uZ1ByZXNzRGVsYXk6IDEwMDAsXG4gICAgICAgIGV2ZW50RHJhZ01pbkRpc3RhbmNlOiA1IC8vIG9ubHkgYXBwbGllcyB0byBtb3VzZVxuICAgIH07XG4gICAgdmFyIHJ0bERlZmF1bHRzID0ge1xuICAgICAgICBoZWFkZXI6IHtcbiAgICAgICAgICAgIGxlZnQ6ICduZXh0LHByZXYgdG9kYXknLFxuICAgICAgICAgICAgY2VudGVyOiAnJyxcbiAgICAgICAgICAgIHJpZ2h0OiAndGl0bGUnXG4gICAgICAgIH0sXG4gICAgICAgIGJ1dHRvbkljb25zOiB7XG4gICAgICAgICAgICAvLyBUT0RPOiBtYWtlIFJUTCBzdXBwb3J0IHRoZSByZXNwb25pYmlsaXR5IG9mIHRoZSB0aGVtZVxuICAgICAgICAgICAgcHJldjogJ2ZjLWljb24tY2hldnJvbi1yaWdodCcsXG4gICAgICAgICAgICBuZXh0OiAnZmMtaWNvbi1jaGV2cm9uLWxlZnQnLFxuICAgICAgICAgICAgcHJldlllYXI6ICdmYy1pY29uLWNoZXZyb25zLXJpZ2h0JyxcbiAgICAgICAgICAgIG5leHRZZWFyOiAnZmMtaWNvbi1jaGV2cm9ucy1sZWZ0J1xuICAgICAgICB9XG4gICAgfTtcbiAgICB2YXIgY29tcGxleE9wdGlvbnMgPSBbXG4gICAgICAgICdoZWFkZXInLFxuICAgICAgICAnZm9vdGVyJyxcbiAgICAgICAgJ2J1dHRvblRleHQnLFxuICAgICAgICAnYnV0dG9uSWNvbnMnXG4gICAgXTtcbiAgICAvLyBNZXJnZXMgYW4gYXJyYXkgb2Ygb3B0aW9uIG9iamVjdHMgaW50byBhIHNpbmdsZSBvYmplY3RcbiAgICBmdW5jdGlvbiBtZXJnZU9wdGlvbnMob3B0aW9uT2Jqcykge1xuICAgICAgICByZXR1cm4gbWVyZ2VQcm9wcyhvcHRpb25PYmpzLCBjb21wbGV4T3B0aW9ucyk7XG4gICAgfVxuICAgIC8vIFRPRE86IG1vdmUgdGhpcyBzdHVmZiB0byBhIFwicGx1Z2luXCItcmVsYXRlZCBmaWxlLi4uXG4gICAgdmFyIElOVEVSTkFMX1BMVUdJTlMgPSBbXG4gICAgICAgIEFycmF5RXZlbnRTb3VyY2VQbHVnaW4sXG4gICAgICAgIEZ1bmNFdmVudFNvdXJjZVBsdWdpbixcbiAgICAgICAgSnNvbkZlZWRFdmVudFNvdXJjZVBsdWdpbixcbiAgICAgICAgU2ltcGxlUmVjdXJyZW5jZVBsdWdpbixcbiAgICAgICAgRGVmYXVsdE9wdGlvbkNoYW5nZUhhbmRsZXJzXG4gICAgXTtcbiAgICBmdW5jdGlvbiByZWZpbmVQbHVnaW5EZWZzKHBsdWdpbklucHV0cykge1xuICAgICAgICB2YXIgcGx1Z2lucyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHBsdWdpbklucHV0c18xID0gcGx1Z2luSW5wdXRzOyBfaSA8IHBsdWdpbklucHV0c18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHBsdWdpbklucHV0ID0gcGx1Z2luSW5wdXRzXzFbX2ldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwbHVnaW5JbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ2xvYmFsTmFtZSA9ICdGdWxsQ2FsZW5kYXInICsgY2FwaXRhbGlzZUZpcnN0TGV0dGVyKHBsdWdpbklucHV0KTtcbiAgICAgICAgICAgICAgICBpZiAoIXdpbmRvd1tnbG9iYWxOYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BsdWdpbiBmaWxlIG5vdCBsb2FkZWQgZm9yICcgKyBwbHVnaW5JbnB1dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwbHVnaW5zLnB1c2god2luZG93W2dsb2JhbE5hbWVdLmRlZmF1bHQpOyAvLyBpcyBhbiBFUzYgbW9kdWxlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGx1Z2lucy5wdXNoKHBsdWdpbklucHV0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gSU5URVJOQUxfUExVR0lOUy5jb25jYXQocGx1Z2lucyk7XG4gICAgfVxuXG4gICAgdmFyIFJBV19FTl9MT0NBTEUgPSB7XG4gICAgICAgIGNvZGU6ICdlbicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCxcbiAgICAgICAgICAgIGRveTogNCAvLyA0IGRheXMgbmVlZCB0byBiZSB3aXRoaW4gdGhlIHllYXIgdG8gYmUgY29uc2lkZXJlZCB0aGUgZmlyc3Qgd2Vla1xuICAgICAgICB9LFxuICAgICAgICBkaXI6ICdsdHInLFxuICAgICAgICBidXR0b25UZXh0OiB7XG4gICAgICAgICAgICBwcmV2OiAncHJldicsXG4gICAgICAgICAgICBuZXh0OiAnbmV4dCcsXG4gICAgICAgICAgICBwcmV2WWVhcjogJ3ByZXYgeWVhcicsXG4gICAgICAgICAgICBuZXh0WWVhcjogJ25leHQgeWVhcicsXG4gICAgICAgICAgICB5ZWFyOiAneWVhcicsXG4gICAgICAgICAgICB0b2RheTogJ3RvZGF5JyxcbiAgICAgICAgICAgIG1vbnRoOiAnbW9udGgnLFxuICAgICAgICAgICAgd2VlazogJ3dlZWsnLFxuICAgICAgICAgICAgZGF5OiAnZGF5JyxcbiAgICAgICAgICAgIGxpc3Q6ICdsaXN0J1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrTGFiZWw6ICdXJyxcbiAgICAgICAgYWxsRGF5VGV4dDogJ2FsbC1kYXknLFxuICAgICAgICBldmVudExpbWl0VGV4dDogJ21vcmUnLFxuICAgICAgICBub0V2ZW50c01lc3NhZ2U6ICdObyBldmVudHMgdG8gZGlzcGxheSdcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHBhcnNlUmF3TG9jYWxlcyhleHBsaWNpdFJhd0xvY2FsZXMpIHtcbiAgICAgICAgdmFyIGRlZmF1bHRDb2RlID0gZXhwbGljaXRSYXdMb2NhbGVzLmxlbmd0aCA+IDAgPyBleHBsaWNpdFJhd0xvY2FsZXNbMF0uY29kZSA6ICdlbic7XG4gICAgICAgIHZhciBnbG9iYWxBcnJheSA9IHdpbmRvd1snRnVsbENhbGVuZGFyTG9jYWxlc0FsbCddIHx8IFtdOyAvLyBmcm9tIGxvY2FsZXMtYWxsLmpzXG4gICAgICAgIHZhciBnbG9iYWxPYmplY3QgPSB3aW5kb3dbJ0Z1bGxDYWxlbmRhckxvY2FsZXMnXSB8fCB7fTsgLy8gZnJvbSBsb2NhbGVzLyouanMuIGtleXMgYXJlIG1lYW5pbmdsZXNzXG4gICAgICAgIHZhciBhbGxSYXdMb2NhbGVzID0gZ2xvYmFsQXJyYXkuY29uY2F0KC8vIGdsb2JhbEFycmF5IGlzIGxvdyBwcmlvXG4gICAgICAgIGhhc2hWYWx1ZXNUb0FycmF5KGdsb2JhbE9iamVjdCksIC8vIG1lZGl1bSBwcmlvXG4gICAgICAgIGV4cGxpY2l0UmF3TG9jYWxlcyAvLyBoaWdoZXN0IHByaW9cbiAgICAgICAgKTtcbiAgICAgICAgdmFyIHJhd0xvY2FsZU1hcCA9IHtcbiAgICAgICAgICAgIGVuOiBSQVdfRU5fTE9DQUxFIC8vIG5lY2Vzc2FyeT9cbiAgICAgICAgfTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBhbGxSYXdMb2NhbGVzXzEgPSBhbGxSYXdMb2NhbGVzOyBfaSA8IGFsbFJhd0xvY2FsZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciByYXdMb2NhbGUgPSBhbGxSYXdMb2NhbGVzXzFbX2ldO1xuICAgICAgICAgICAgcmF3TG9jYWxlTWFwW3Jhd0xvY2FsZS5jb2RlXSA9IHJhd0xvY2FsZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWFwOiByYXdMb2NhbGVNYXAsXG4gICAgICAgICAgICBkZWZhdWx0Q29kZTogZGVmYXVsdENvZGVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYnVpbGRMb2NhbGUoaW5wdXRTaW5ndWxhciwgYXZhaWxhYmxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXRTaW5ndWxhciA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoaW5wdXRTaW5ndWxhcikpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUxvY2FsZShpbnB1dFNpbmd1bGFyLmNvZGUsIFtpbnB1dFNpbmd1bGFyLmNvZGVdLCBpbnB1dFNpbmd1bGFyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBxdWVyeUxvY2FsZShpbnB1dFNpbmd1bGFyLCBhdmFpbGFibGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHF1ZXJ5TG9jYWxlKGNvZGVBcmcsIGF2YWlsYWJsZSkge1xuICAgICAgICB2YXIgY29kZXMgPSBbXS5jb25jYXQoY29kZUFyZyB8fCBbXSk7IC8vIHdpbGwgY29udmVydCB0byBhcnJheVxuICAgICAgICB2YXIgcmF3ID0gcXVlcnlSYXdMb2NhbGUoY29kZXMsIGF2YWlsYWJsZSkgfHwgUkFXX0VOX0xPQ0FMRTtcbiAgICAgICAgcmV0dXJuIHBhcnNlTG9jYWxlKGNvZGVBcmcsIGNvZGVzLCByYXcpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBxdWVyeVJhd0xvY2FsZShjb2RlcywgYXZhaWxhYmxlKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwYXJ0cyA9IGNvZGVzW2ldLnRvTG9jYWxlTG93ZXJDYXNlKCkuc3BsaXQoJy0nKTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSBwYXJ0cy5sZW5ndGg7IGogPiAwOyBqLS0pIHtcbiAgICAgICAgICAgICAgICB2YXIgc2ltcGxlSWQgPSBwYXJ0cy5zbGljZSgwLCBqKS5qb2luKCctJyk7XG4gICAgICAgICAgICAgICAgaWYgKGF2YWlsYWJsZVtzaW1wbGVJZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF2YWlsYWJsZVtzaW1wbGVJZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwYXJzZUxvY2FsZShjb2RlQXJnLCBjb2RlcywgcmF3KSB7XG4gICAgICAgIHZhciBtZXJnZWQgPSBtZXJnZVByb3BzKFtSQVdfRU5fTE9DQUxFLCByYXddLCBbJ2J1dHRvblRleHQnXSk7XG4gICAgICAgIGRlbGV0ZSBtZXJnZWQuY29kZTsgLy8gZG9uJ3Qgd2FudCB0aGlzIHBhcnQgb2YgdGhlIG9wdGlvbnNcbiAgICAgICAgdmFyIHdlZWsgPSBtZXJnZWQud2VlaztcbiAgICAgICAgZGVsZXRlIG1lcmdlZC53ZWVrO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29kZUFyZzogY29kZUFyZyxcbiAgICAgICAgICAgIGNvZGVzOiBjb2RlcyxcbiAgICAgICAgICAgIHdlZWs6IHdlZWssXG4gICAgICAgICAgICBzaW1wbGVOdW1iZXJGb3JtYXQ6IG5ldyBJbnRsLk51bWJlckZvcm1hdChjb2RlQXJnKSxcbiAgICAgICAgICAgIG9wdGlvbnM6IG1lcmdlZFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBPcHRpb25zTWFuYWdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gT3B0aW9uc01hbmFnZXIob3ZlcnJpZGVzKSB7XG4gICAgICAgICAgICB0aGlzLm92ZXJyaWRlcyA9IF9fYXNzaWduKHt9LCBvdmVycmlkZXMpOyAvLyBtYWtlIGEgY29weVxuICAgICAgICAgICAgdGhpcy5keW5hbWljT3ZlcnJpZGVzID0ge307XG4gICAgICAgICAgICB0aGlzLmNvbXB1dGUoKTtcbiAgICAgICAgfVxuICAgICAgICBPcHRpb25zTWFuYWdlci5wcm90b3R5cGUubXV0YXRlID0gZnVuY3Rpb24gKHVwZGF0ZXMsIHJlbW92YWxzLCBpc0R5bmFtaWMpIHtcbiAgICAgICAgICAgIGlmICghT2JqZWN0LmtleXModXBkYXRlcykubGVuZ3RoICYmICFyZW1vdmFscy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgb3ZlcnJpZGVIYXNoID0gaXNEeW5hbWljID8gdGhpcy5keW5hbWljT3ZlcnJpZGVzIDogdGhpcy5vdmVycmlkZXM7XG4gICAgICAgICAgICBfX2Fzc2lnbihvdmVycmlkZUhhc2gsIHVwZGF0ZXMpO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCByZW1vdmFsc18xID0gcmVtb3ZhbHM7IF9pIDwgcmVtb3ZhbHNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcE5hbWUgPSByZW1vdmFsc18xW19pXTtcbiAgICAgICAgICAgICAgICBkZWxldGUgb3ZlcnJpZGVIYXNoW3Byb3BOYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY29tcHV0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBDb21wdXRlcyB0aGUgZmxhdHRlbmVkIG9wdGlvbnMgaGFzaCBmb3IgdGhlIGNhbGVuZGFyIGFuZCBhc3NpZ25zIHRvIGB0aGlzLm9wdGlvbnNgLlxuICAgICAgICAvLyBBc3N1bWVzIHRoaXMub3ZlcnJpZGVzIGFuZCB0aGlzLmR5bmFtaWNPdmVycmlkZXMgaGF2ZSBhbHJlYWR5IGJlZW4gaW5pdGlhbGl6ZWQuXG4gICAgICAgIE9wdGlvbnNNYW5hZ2VyLnByb3RvdHlwZS5jb21wdXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gVE9ETzogbm90IGEgdmVyeSBlZmZpY2llbnQgc3lzdGVtXG4gICAgICAgICAgICB2YXIgbG9jYWxlcyA9IGZpcnN0RGVmaW5lZCgvLyBleHBsaWNpdCBsb2NhbGUgb3B0aW9uIGdpdmVuP1xuICAgICAgICAgICAgdGhpcy5keW5hbWljT3ZlcnJpZGVzLmxvY2FsZXMsIHRoaXMub3ZlcnJpZGVzLmxvY2FsZXMsIGdsb2JhbERlZmF1bHRzLmxvY2FsZXMpO1xuICAgICAgICAgICAgdmFyIGxvY2FsZSA9IGZpcnN0RGVmaW5lZCgvLyBleHBsaWNpdCBsb2NhbGVzIG9wdGlvbiBnaXZlbj9cbiAgICAgICAgICAgIHRoaXMuZHluYW1pY092ZXJyaWRlcy5sb2NhbGUsIHRoaXMub3ZlcnJpZGVzLmxvY2FsZSwgZ2xvYmFsRGVmYXVsdHMubG9jYWxlKTtcbiAgICAgICAgICAgIHZhciBhdmFpbGFibGUgPSBwYXJzZVJhd0xvY2FsZXMobG9jYWxlcyk7XG4gICAgICAgICAgICB2YXIgbG9jYWxlRGVmYXVsdHMgPSBidWlsZExvY2FsZShsb2NhbGUgfHwgYXZhaWxhYmxlLmRlZmF1bHRDb2RlLCBhdmFpbGFibGUubWFwKS5vcHRpb25zO1xuICAgICAgICAgICAgdmFyIGRpciA9IGZpcnN0RGVmaW5lZCgvLyBiYXNlZCBvbiBvcHRpb25zIGNvbXB1dGVkIHNvIGZhciwgaXMgZGlyZWN0aW9uIFJUTD9cbiAgICAgICAgICAgIHRoaXMuZHluYW1pY092ZXJyaWRlcy5kaXIsIHRoaXMub3ZlcnJpZGVzLmRpciwgbG9jYWxlRGVmYXVsdHMuZGlyKTtcbiAgICAgICAgICAgIHZhciBkaXJEZWZhdWx0cyA9IGRpciA9PT0gJ3J0bCcgPyBydGxEZWZhdWx0cyA6IHt9O1xuICAgICAgICAgICAgdGhpcy5kaXJEZWZhdWx0cyA9IGRpckRlZmF1bHRzO1xuICAgICAgICAgICAgdGhpcy5sb2NhbGVEZWZhdWx0cyA9IGxvY2FsZURlZmF1bHRzO1xuICAgICAgICAgICAgdGhpcy5jb21wdXRlZCA9IG1lcmdlT3B0aW9ucyhbXG4gICAgICAgICAgICAgICAgZ2xvYmFsRGVmYXVsdHMsXG4gICAgICAgICAgICAgICAgZGlyRGVmYXVsdHMsXG4gICAgICAgICAgICAgICAgbG9jYWxlRGVmYXVsdHMsXG4gICAgICAgICAgICAgICAgdGhpcy5vdmVycmlkZXMsXG4gICAgICAgICAgICAgICAgdGhpcy5keW5hbWljT3ZlcnJpZGVzXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIE9wdGlvbnNNYW5hZ2VyO1xuICAgIH0oKSk7XG5cbiAgICB2YXIgY2FsZW5kYXJTeXN0ZW1DbGFzc01hcCA9IHt9O1xuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyQ2FsZW5kYXJTeXN0ZW0obmFtZSwgdGhlQ2xhc3MpIHtcbiAgICAgICAgY2FsZW5kYXJTeXN0ZW1DbGFzc01hcFtuYW1lXSA9IHRoZUNsYXNzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVDYWxlbmRhclN5c3RlbShuYW1lKSB7XG4gICAgICAgIHJldHVybiBuZXcgY2FsZW5kYXJTeXN0ZW1DbGFzc01hcFtuYW1lXSgpO1xuICAgIH1cbiAgICB2YXIgR3JlZ29yaWFuQ2FsZW5kYXJTeXN0ZW0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIEdyZWdvcmlhbkNhbGVuZGFyU3lzdGVtKCkge1xuICAgICAgICB9XG4gICAgICAgIEdyZWdvcmlhbkNhbGVuZGFyU3lzdGVtLnByb3RvdHlwZS5nZXRNYXJrZXJZZWFyID0gZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgIHJldHVybiBkLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgICAgIH07XG4gICAgICAgIEdyZWdvcmlhbkNhbGVuZGFyU3lzdGVtLnByb3RvdHlwZS5nZXRNYXJrZXJNb250aCA9IGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICByZXR1cm4gZC5nZXRVVENNb250aCgpO1xuICAgICAgICB9O1xuICAgICAgICBHcmVnb3JpYW5DYWxlbmRhclN5c3RlbS5wcm90b3R5cGUuZ2V0TWFya2VyRGF5ID0gZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgIHJldHVybiBkLmdldFVUQ0RhdGUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgR3JlZ29yaWFuQ2FsZW5kYXJTeXN0ZW0ucHJvdG90eXBlLmFycmF5VG9NYXJrZXIgPSBmdW5jdGlvbiAoYXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXlUb1V0Y0RhdGUoYXJyKTtcbiAgICAgICAgfTtcbiAgICAgICAgR3JlZ29yaWFuQ2FsZW5kYXJTeXN0ZW0ucHJvdG90eXBlLm1hcmtlclRvQXJyYXkgPSBmdW5jdGlvbiAobWFya2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0ZVRvVXRjQXJyYXkobWFya2VyKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIEdyZWdvcmlhbkNhbGVuZGFyU3lzdGVtO1xuICAgIH0oKSk7XG4gICAgcmVnaXN0ZXJDYWxlbmRhclN5c3RlbSgnZ3JlZ29yeScsIEdyZWdvcmlhbkNhbGVuZGFyU3lzdGVtKTtcblxuICAgIHZhciBJU09fUkUgPSAvXlxccyooXFxkezR9KSgtKFxcZHsyfSkoLShcXGR7Mn0pKFtUIF0oXFxkezJ9KTooXFxkezJ9KSg6KFxcZHsyfSkoXFwuKFxcZCspKT8pPyhafCgoWy0rXSkoXFxkezJ9KSg6PyhcXGR7Mn0pKT8pKT8pPyk/KT8kLztcbiAgICBmdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgICAgICAgdmFyIG0gPSBJU09fUkUuZXhlYyhzdHIpO1xuICAgICAgICBpZiAobSkge1xuICAgICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBEYXRlKERhdGUuVVRDKE51bWJlcihtWzFdKSwgbVszXSA/IE51bWJlcihtWzNdKSAtIDEgOiAwLCBOdW1iZXIobVs1XSB8fCAxKSwgTnVtYmVyKG1bN10gfHwgMCksIE51bWJlcihtWzhdIHx8IDApLCBOdW1iZXIobVsxMF0gfHwgMCksIG1bMTJdID8gTnVtYmVyKCcwLicgKyBtWzEyXSkgKiAxMDAwIDogMCkpO1xuICAgICAgICAgICAgaWYgKGlzVmFsaWREYXRlKG1hcmtlcikpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGltZVpvbmVPZmZzZXQgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChtWzEzXSkge1xuICAgICAgICAgICAgICAgICAgICB0aW1lWm9uZU9mZnNldCA9IChtWzE1XSA9PT0gJy0nID8gLTEgOiAxKSAqIChOdW1iZXIobVsxNl0gfHwgMCkgKiA2MCArXG4gICAgICAgICAgICAgICAgICAgICAgICBOdW1iZXIobVsxOF0gfHwgMCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBtYXJrZXI6IG1hcmtlcixcbiAgICAgICAgICAgICAgICAgICAgaXNUaW1lVW5zcGVjaWZpZWQ6ICFtWzZdLFxuICAgICAgICAgICAgICAgICAgICB0aW1lWm9uZU9mZnNldDogdGltZVpvbmVPZmZzZXRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBEYXRlRW52ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBEYXRlRW52KHNldHRpbmdzKSB7XG4gICAgICAgICAgICB2YXIgdGltZVpvbmUgPSB0aGlzLnRpbWVab25lID0gc2V0dGluZ3MudGltZVpvbmU7XG4gICAgICAgICAgICB2YXIgaXNOYW1lZFRpbWVab25lID0gdGltZVpvbmUgIT09ICdsb2NhbCcgJiYgdGltZVpvbmUgIT09ICdVVEMnO1xuICAgICAgICAgICAgaWYgKHNldHRpbmdzLm5hbWVkVGltZVpvbmVJbXBsICYmIGlzTmFtZWRUaW1lWm9uZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubmFtZWRUaW1lWm9uZUltcGwgPSBuZXcgc2V0dGluZ3MubmFtZWRUaW1lWm9uZUltcGwodGltZVpvbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jYW5Db21wdXRlT2Zmc2V0ID0gQm9vbGVhbighaXNOYW1lZFRpbWVab25lIHx8IHRoaXMubmFtZWRUaW1lWm9uZUltcGwpO1xuICAgICAgICAgICAgdGhpcy5jYWxlbmRhclN5c3RlbSA9IGNyZWF0ZUNhbGVuZGFyU3lzdGVtKHNldHRpbmdzLmNhbGVuZGFyU3lzdGVtKTtcbiAgICAgICAgICAgIHRoaXMubG9jYWxlID0gc2V0dGluZ3MubG9jYWxlO1xuICAgICAgICAgICAgdGhpcy53ZWVrRG93ID0gc2V0dGluZ3MubG9jYWxlLndlZWsuZG93O1xuICAgICAgICAgICAgdGhpcy53ZWVrRG95ID0gc2V0dGluZ3MubG9jYWxlLndlZWsuZG95O1xuICAgICAgICAgICAgaWYgKHNldHRpbmdzLndlZWtOdW1iZXJDYWxjdWxhdGlvbiA9PT0gJ0lTTycpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndlZWtEb3cgPSAxO1xuICAgICAgICAgICAgICAgIHRoaXMud2Vla0RveSA9IDQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzLmZpcnN0RGF5ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHRoaXMud2Vla0RvdyA9IHNldHRpbmdzLmZpcnN0RGF5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncy53ZWVrTnVtYmVyQ2FsY3VsYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndlZWtOdW1iZXJGdW5jID0gc2V0dGluZ3Mud2Vla051bWJlckNhbGN1bGF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy53ZWVrTGFiZWwgPSBzZXR0aW5ncy53ZWVrTGFiZWwgIT0gbnVsbCA/IHNldHRpbmdzLndlZWtMYWJlbCA6IHNldHRpbmdzLmxvY2FsZS5vcHRpb25zLndlZWtMYWJlbDtcbiAgICAgICAgICAgIHRoaXMuY21kRm9ybWF0dGVyID0gc2V0dGluZ3MuY21kRm9ybWF0dGVyO1xuICAgICAgICB9XG4gICAgICAgIC8vIENyZWF0aW5nIC8gUGFyc2luZ1xuICAgICAgICBEYXRlRW52LnByb3RvdHlwZS5jcmVhdGVNYXJrZXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHZhciBtZXRhID0gdGhpcy5jcmVhdGVNYXJrZXJNZXRhKGlucHV0KTtcbiAgICAgICAgICAgIGlmIChtZXRhID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWV0YS5tYXJrZXI7XG4gICAgICAgIH07XG4gICAgICAgIERhdGVFbnYucHJvdG90eXBlLmNyZWF0ZU5vd01hcmtlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNhbkNvbXB1dGVPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50aW1lc3RhbXBUb01hcmtlcihuZXcgRGF0ZSgpLnZhbHVlT2YoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBpZiB3ZSBjYW4ndCBjb21wdXRlIHRoZSBjdXJyZW50IGRhdGUgdmFsIGZvciBhIHRpbWV6b25lLFxuICAgICAgICAgICAgICAgIC8vIGJldHRlciB0byBnaXZlIHRoZSBjdXJyZW50IGxvY2FsIGRhdGUgdmFscyB0aGFuIFVUQ1xuICAgICAgICAgICAgICAgIHJldHVybiBhcnJheVRvVXRjRGF0ZShkYXRlVG9Mb2NhbEFycmF5KG5ldyBEYXRlKCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgRGF0ZUVudi5wcm90b3R5cGUuY3JlYXRlTWFya2VyTWV0YSA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZShpbnB1dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbWFya2VyID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyID0gdGhpcy50aW1lc3RhbXBUb01hcmtlcihpbnB1dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpbnB1dCBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IGlucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKGlucHV0KSkge1xuICAgICAgICAgICAgICAgICAgICBtYXJrZXIgPSB0aGlzLnRpbWVzdGFtcFRvTWFya2VyKGlucHV0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgICAgICAgICAgICAgIG1hcmtlciA9IGFycmF5VG9VdGNEYXRlKGlucHV0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXJrZXIgPT09IG51bGwgfHwgIWlzVmFsaWREYXRlKG1hcmtlcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IG1hcmtlcjogbWFya2VyLCBpc1RpbWVVbnNwZWNpZmllZDogZmFsc2UsIGZvcmNlZFR6bzogbnVsbCB9O1xuICAgICAgICB9O1xuICAgICAgICBEYXRlRW52LnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICB2YXIgcGFydHMgPSBwYXJzZShzKTtcbiAgICAgICAgICAgIGlmIChwYXJ0cyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1hcmtlciA9IHBhcnRzLm1hcmtlcjtcbiAgICAgICAgICAgIHZhciBmb3JjZWRUem8gPSBudWxsO1xuICAgICAgICAgICAgaWYgKHBhcnRzLnRpbWVab25lT2Zmc2V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FuQ29tcHV0ZU9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICBtYXJrZXIgPSB0aGlzLnRpbWVzdGFtcFRvTWFya2VyKG1hcmtlci52YWx1ZU9mKCkgLSBwYXJ0cy50aW1lWm9uZU9mZnNldCAqIDYwICogMTAwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmb3JjZWRUem8gPSBwYXJ0cy50aW1lWm9uZU9mZnNldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBtYXJrZXI6IG1hcmtlciwgaXNUaW1lVW5zcGVjaWZpZWQ6IHBhcnRzLmlzVGltZVVuc3BlY2lmaWVkLCBmb3JjZWRUem86IGZvcmNlZFR6byB9O1xuICAgICAgICB9O1xuICAgICAgICAvLyBBY2Nlc3NvcnNcbiAgICAgICAgRGF0ZUVudi5wcm90b3R5cGUuZ2V0WWVhciA9IGZ1bmN0aW9uIChtYXJrZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyU3lzdGVtLmdldE1hcmtlclllYXIobWFya2VyKTtcbiAgICAgICAgfTtcbiAgICAgICAgRGF0ZUVudi5wcm90b3R5cGUuZ2V0TW9udGggPSBmdW5jdGlvbiAobWFya2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJNb250aChtYXJrZXIpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBBZGRpbmcgLyBTdWJ0cmFjdGluZ1xuICAgICAgICBEYXRlRW52LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAobWFya2VyLCBkdXIpIHtcbiAgICAgICAgICAgIHZhciBhID0gdGhpcy5jYWxlbmRhclN5c3RlbS5tYXJrZXJUb0FycmF5KG1hcmtlcik7XG4gICAgICAgICAgICBhWzBdICs9IGR1ci55ZWFycztcbiAgICAgICAgICAgIGFbMV0gKz0gZHVyLm1vbnRocztcbiAgICAgICAgICAgIGFbMl0gKz0gZHVyLmRheXM7XG4gICAgICAgICAgICBhWzZdICs9IGR1ci5taWxsaXNlY29uZHM7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWxlbmRhclN5c3RlbS5hcnJheVRvTWFya2VyKGEpO1xuICAgICAgICB9O1xuICAgICAgICBEYXRlRW52LnByb3RvdHlwZS5zdWJ0cmFjdCA9IGZ1bmN0aW9uIChtYXJrZXIsIGR1cikge1xuICAgICAgICAgICAgdmFyIGEgPSB0aGlzLmNhbGVuZGFyU3lzdGVtLm1hcmtlclRvQXJyYXkobWFya2VyKTtcbiAgICAgICAgICAgIGFbMF0gLT0gZHVyLnllYXJzO1xuICAgICAgICAgICAgYVsxXSAtPSBkdXIubW9udGhzO1xuICAgICAgICAgICAgYVsyXSAtPSBkdXIuZGF5cztcbiAgICAgICAgICAgIGFbNl0gLT0gZHVyLm1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyU3lzdGVtLmFycmF5VG9NYXJrZXIoYSk7XG4gICAgICAgIH07XG4gICAgICAgIERhdGVFbnYucHJvdG90eXBlLmFkZFllYXJzID0gZnVuY3Rpb24gKG1hcmtlciwgbikge1xuICAgICAgICAgICAgdmFyIGEgPSB0aGlzLmNhbGVuZGFyU3lzdGVtLm1hcmtlclRvQXJyYXkobWFya2VyKTtcbiAgICAgICAgICAgIGFbMF0gKz0gbjtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyU3lzdGVtLmFycmF5VG9NYXJrZXIoYSk7XG4gICAgICAgIH07XG4gICAgICAgIERhdGVFbnYucHJvdG90eXBlLmFkZE1vbnRocyA9IGZ1bmN0aW9uIChtYXJrZXIsIG4pIHtcbiAgICAgICAgICAgIHZhciBhID0gdGhpcy5jYWxlbmRhclN5c3RlbS5tYXJrZXJUb0FycmF5KG1hcmtlcik7XG4gICAgICAgICAgICBhWzFdICs9IG47XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWxlbmRhclN5c3RlbS5hcnJheVRvTWFya2VyKGEpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBEaWZmaW5nIFdob2xlIFVuaXRzXG4gICAgICAgIERhdGVFbnYucHJvdG90eXBlLmRpZmZXaG9sZVllYXJzID0gZnVuY3Rpb24gKG0wLCBtMSkge1xuICAgICAgICAgICAgdmFyIGNhbGVuZGFyU3lzdGVtID0gdGhpcy5jYWxlbmRhclN5c3RlbTtcbiAgICAgICAgICAgIGlmICh0aW1lQXNNcyhtMCkgPT09IHRpbWVBc01zKG0xKSAmJlxuICAgICAgICAgICAgICAgIGNhbGVuZGFyU3lzdGVtLmdldE1hcmtlckRheShtMCkgPT09IGNhbGVuZGFyU3lzdGVtLmdldE1hcmtlckRheShtMSkgJiZcbiAgICAgICAgICAgICAgICBjYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJNb250aChtMCkgPT09IGNhbGVuZGFyU3lzdGVtLmdldE1hcmtlck1vbnRoKG0xKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJZZWFyKG0xKSAtIGNhbGVuZGFyU3lzdGVtLmdldE1hcmtlclllYXIobTApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIERhdGVFbnYucHJvdG90eXBlLmRpZmZXaG9sZU1vbnRocyA9IGZ1bmN0aW9uIChtMCwgbTEpIHtcbiAgICAgICAgICAgIHZhciBjYWxlbmRhclN5c3RlbSA9IHRoaXMuY2FsZW5kYXJTeXN0ZW07XG4gICAgICAgICAgICBpZiAodGltZUFzTXMobTApID09PSB0aW1lQXNNcyhtMSkgJiZcbiAgICAgICAgICAgICAgICBjYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJEYXkobTApID09PSBjYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJEYXkobTEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChjYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJNb250aChtMSkgLSBjYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJNb250aChtMCkpICtcbiAgICAgICAgICAgICAgICAgICAgKGNhbGVuZGFyU3lzdGVtLmdldE1hcmtlclllYXIobTEpIC0gY2FsZW5kYXJTeXN0ZW0uZ2V0TWFya2VyWWVhcihtMCkpICogMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gUmFuZ2UgLyBEdXJhdGlvblxuICAgICAgICBEYXRlRW52LnByb3RvdHlwZS5ncmVhdGVzdFdob2xlVW5pdCA9IGZ1bmN0aW9uIChtMCwgbTEpIHtcbiAgICAgICAgICAgIHZhciBuID0gdGhpcy5kaWZmV2hvbGVZZWFycyhtMCwgbTEpO1xuICAgICAgICAgICAgaWYgKG4gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB1bml0OiAneWVhcicsIHZhbHVlOiBuIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuID0gdGhpcy5kaWZmV2hvbGVNb250aHMobTAsIG0xKTtcbiAgICAgICAgICAgIGlmIChuICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdW5pdDogJ21vbnRoJywgdmFsdWU6IG4gfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG4gPSBkaWZmV2hvbGVXZWVrcyhtMCwgbTEpO1xuICAgICAgICAgICAgaWYgKG4gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB1bml0OiAnd2VlaycsIHZhbHVlOiBuIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuID0gZGlmZldob2xlRGF5cyhtMCwgbTEpO1xuICAgICAgICAgICAgaWYgKG4gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB1bml0OiAnZGF5JywgdmFsdWU6IG4gfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG4gPSBkaWZmSG91cnMobTAsIG0xKTtcbiAgICAgICAgICAgIGlmIChpc0ludChuKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHVuaXQ6ICdob3VyJywgdmFsdWU6IG4gfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG4gPSBkaWZmTWludXRlcyhtMCwgbTEpO1xuICAgICAgICAgICAgaWYgKGlzSW50KG4pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdW5pdDogJ21pbnV0ZScsIHZhbHVlOiBuIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuID0gZGlmZlNlY29uZHMobTAsIG0xKTtcbiAgICAgICAgICAgIGlmIChpc0ludChuKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHVuaXQ6ICdzZWNvbmQnLCB2YWx1ZTogbiB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgdW5pdDogJ21pbGxpc2Vjb25kJywgdmFsdWU6IG0xLnZhbHVlT2YoKSAtIG0wLnZhbHVlT2YoKSB9O1xuICAgICAgICB9O1xuICAgICAgICBEYXRlRW52LnByb3RvdHlwZS5jb3VudER1cmF0aW9uc0JldHdlZW4gPSBmdW5jdGlvbiAobTAsIG0xLCBkKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBjYW4gdXNlIGdyZWF0ZXN0V2hvbGVVbml0XG4gICAgICAgICAgICB2YXIgZGlmZjtcbiAgICAgICAgICAgIGlmIChkLnllYXJzKSB7XG4gICAgICAgICAgICAgICAgZGlmZiA9IHRoaXMuZGlmZldob2xlWWVhcnMobTAsIG0xKTtcbiAgICAgICAgICAgICAgICBpZiAoZGlmZiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGlmZiAvIGFzUm91Z2hZZWFycyhkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5tb250aHMpIHtcbiAgICAgICAgICAgICAgICBkaWZmID0gdGhpcy5kaWZmV2hvbGVNb250aHMobTAsIG0xKTtcbiAgICAgICAgICAgICAgICBpZiAoZGlmZiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGlmZiAvIGFzUm91Z2hNb250aHMoZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuZGF5cykge1xuICAgICAgICAgICAgICAgIGRpZmYgPSBkaWZmV2hvbGVEYXlzKG0wLCBtMSk7XG4gICAgICAgICAgICAgICAgaWYgKGRpZmYgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRpZmYgLyBhc1JvdWdoRGF5cyhkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKG0xLnZhbHVlT2YoKSAtIG0wLnZhbHVlT2YoKSkgLyBhc1JvdWdoTXMoZCk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFN0YXJ0LU9mXG4gICAgICAgIERhdGVFbnYucHJvdG90eXBlLnN0YXJ0T2YgPSBmdW5jdGlvbiAobSwgdW5pdCkge1xuICAgICAgICAgICAgaWYgKHVuaXQgPT09ICd5ZWFyJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXJ0T2ZZZWFyKG0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodW5pdCA9PT0gJ21vbnRoJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXJ0T2ZNb250aChtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHVuaXQgPT09ICd3ZWVrJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXJ0T2ZXZWVrKG0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodW5pdCA9PT0gJ2RheScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhcnRPZkRheShtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHVuaXQgPT09ICdob3VyJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGFydE9mSG91cihtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHVuaXQgPT09ICdtaW51dGUnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXJ0T2ZNaW51dGUobSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh1bml0ID09PSAnc2Vjb25kJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGFydE9mU2Vjb25kKG0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBEYXRlRW52LnByb3RvdHlwZS5zdGFydE9mWWVhciA9IGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWxlbmRhclN5c3RlbS5hcnJheVRvTWFya2VyKFtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyU3lzdGVtLmdldE1hcmtlclllYXIobSlcbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9O1xuICAgICAgICBEYXRlRW52LnByb3RvdHlwZS5zdGFydE9mTW9udGggPSBmdW5jdGlvbiAobSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FsZW5kYXJTeXN0ZW0uYXJyYXlUb01hcmtlcihbXG4gICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJZZWFyKG0pLFxuICAgICAgICAgICAgICAgIHRoaXMuY2FsZW5kYXJTeXN0ZW0uZ2V0TWFya2VyTW9udGgobSlcbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9O1xuICAgICAgICBEYXRlRW52LnByb3RvdHlwZS5zdGFydE9mV2VlayA9IGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWxlbmRhclN5c3RlbS5hcnJheVRvTWFya2VyKFtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyU3lzdGVtLmdldE1hcmtlclllYXIobSksXG4gICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJNb250aChtKSxcbiAgICAgICAgICAgICAgICBtLmdldFVUQ0RhdGUoKSAtICgobS5nZXRVVENEYXkoKSAtIHRoaXMud2Vla0RvdyArIDcpICUgNylcbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9O1xuICAgICAgICAvLyBXZWVrIE51bWJlclxuICAgICAgICBEYXRlRW52LnByb3RvdHlwZS5jb21wdXRlV2Vla051bWJlciA9IGZ1bmN0aW9uIChtYXJrZXIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLndlZWtOdW1iZXJGdW5jKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMud2Vla051bWJlckZ1bmModGhpcy50b0RhdGUobWFya2VyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2Vla09mWWVhcihtYXJrZXIsIHRoaXMud2Vla0RvdywgdGhpcy53ZWVrRG95KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gVE9ETzogY2hva2Ugb24gdGltZVpvbmVOYW1lOiBsb25nXG4gICAgICAgIERhdGVFbnYucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChtYXJrZXIsIGZvcm1hdHRlciwgZGF0ZU9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChkYXRlT3B0aW9ucyA9PT0gdm9pZCAwKSB7IGRhdGVPcHRpb25zID0ge307IH1cbiAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZXIuZm9ybWF0KHtcbiAgICAgICAgICAgICAgICBtYXJrZXI6IG1hcmtlcixcbiAgICAgICAgICAgICAgICB0aW1lWm9uZU9mZnNldDogZGF0ZU9wdGlvbnMuZm9yY2VkVHpvICE9IG51bGwgP1xuICAgICAgICAgICAgICAgICAgICBkYXRlT3B0aW9ucy5mb3JjZWRUem8gOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZnNldEZvck1hcmtlcihtYXJrZXIpXG4gICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgfTtcbiAgICAgICAgRGF0ZUVudi5wcm90b3R5cGUuZm9ybWF0UmFuZ2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgZm9ybWF0dGVyLCBkYXRlT3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKGRhdGVPcHRpb25zID09PSB2b2lkIDApIHsgZGF0ZU9wdGlvbnMgPSB7fTsgfVxuICAgICAgICAgICAgaWYgKGRhdGVPcHRpb25zLmlzRW5kRXhjbHVzaXZlKSB7XG4gICAgICAgICAgICAgICAgZW5kID0gYWRkTXMoZW5kLCAtMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0dGVyLmZvcm1hdFJhbmdlKHtcbiAgICAgICAgICAgICAgICBtYXJrZXI6IHN0YXJ0LFxuICAgICAgICAgICAgICAgIHRpbWVab25lT2Zmc2V0OiBkYXRlT3B0aW9ucy5mb3JjZWRTdGFydFR6byAhPSBudWxsID9cbiAgICAgICAgICAgICAgICAgICAgZGF0ZU9wdGlvbnMuZm9yY2VkU3RhcnRUem8gOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZnNldEZvck1hcmtlcihzdGFydClcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBtYXJrZXI6IGVuZCxcbiAgICAgICAgICAgICAgICB0aW1lWm9uZU9mZnNldDogZGF0ZU9wdGlvbnMuZm9yY2VkRW5kVHpvICE9IG51bGwgP1xuICAgICAgICAgICAgICAgICAgICBkYXRlT3B0aW9ucy5mb3JjZWRFbmRUem8gOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZnNldEZvck1hcmtlcihlbmQpXG4gICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgfTtcbiAgICAgICAgRGF0ZUVudi5wcm90b3R5cGUuZm9ybWF0SXNvID0gZnVuY3Rpb24gKG1hcmtlciwgZXh0cmFPcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoZXh0cmFPcHRpb25zID09PSB2b2lkIDApIHsgZXh0cmFPcHRpb25zID0ge307IH1cbiAgICAgICAgICAgIHZhciB0aW1lWm9uZU9mZnNldCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoIWV4dHJhT3B0aW9ucy5vbWl0VGltZVpvbmVPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXh0cmFPcHRpb25zLmZvcmNlZFR6byAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVab25lT2Zmc2V0ID0gZXh0cmFPcHRpb25zLmZvcmNlZFR6bztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVab25lT2Zmc2V0ID0gdGhpcy5vZmZzZXRGb3JNYXJrZXIobWFya2VyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYnVpbGRJc29TdHJpbmcobWFya2VyLCB0aW1lWm9uZU9mZnNldCwgZXh0cmFPcHRpb25zLm9taXRUaW1lKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gVGltZVpvbmVcbiAgICAgICAgRGF0ZUVudi5wcm90b3R5cGUudGltZXN0YW1wVG9NYXJrZXIgPSBmdW5jdGlvbiAobXMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWVab25lID09PSAnbG9jYWwnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5VG9VdGNEYXRlKGRhdGVUb0xvY2FsQXJyYXkobmV3IERhdGUobXMpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnRpbWVab25lID09PSAnVVRDJyB8fCAhdGhpcy5uYW1lZFRpbWVab25lSW1wbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXlUb1V0Y0RhdGUodGhpcy5uYW1lZFRpbWVab25lSW1wbC50aW1lc3RhbXBUb0FycmF5KG1zKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIERhdGVFbnYucHJvdG90eXBlLm9mZnNldEZvck1hcmtlciA9IGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICBpZiAodGhpcy50aW1lWm9uZSA9PT0gJ2xvY2FsJykge1xuICAgICAgICAgICAgICAgIHJldHVybiAtYXJyYXlUb0xvY2FsRGF0ZShkYXRlVG9VdGNBcnJheShtKSkuZ2V0VGltZXpvbmVPZmZzZXQoKTsgLy8gY29udmVydCBcImludmVyc2VcIiBvZmZzZXQgdG8gXCJub3JtYWxcIiBvZmZzZXRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMudGltZVpvbmUgPT09ICdVVEMnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLm5hbWVkVGltZVpvbmVJbXBsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmFtZWRUaW1lWm9uZUltcGwub2Zmc2V0Rm9yQXJyYXkoZGF0ZVRvVXRjQXJyYXkobSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIC8vIENvbnZlcnNpb25cbiAgICAgICAgRGF0ZUVudi5wcm90b3R5cGUudG9EYXRlID0gZnVuY3Rpb24gKG0sIGZvcmNlZFR6bykge1xuICAgICAgICAgICAgaWYgKHRoaXMudGltZVpvbmUgPT09ICdsb2NhbCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXlUb0xvY2FsRGF0ZShkYXRlVG9VdGNBcnJheShtKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnRpbWVab25lID09PSAnVVRDJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShtLnZhbHVlT2YoKSk7IC8vIG1ha2Ugc3VyZSBpdCdzIGEgY29weVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIXRoaXMubmFtZWRUaW1lWm9uZUltcGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUobS52YWx1ZU9mKCkgLSAoZm9yY2VkVHpvIHx8IDApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShtLnZhbHVlT2YoKSAtXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmFtZWRUaW1lWm9uZUltcGwub2Zmc2V0Rm9yQXJyYXkoZGF0ZVRvVXRjQXJyYXkobSkpICogMTAwMCAqIDYwIC8vIGNvbnZlcnQgbWludXRlcyAtPiBtc1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBEYXRlRW52O1xuICAgIH0oKSk7XG5cbiAgICB2YXIgU0lNUExFX1NPVVJDRV9QUk9QUyA9IHtcbiAgICAgICAgaWQ6IFN0cmluZyxcbiAgICAgICAgYWxsRGF5RGVmYXVsdDogQm9vbGVhbixcbiAgICAgICAgZXZlbnREYXRhVHJhbnNmb3JtOiBGdW5jdGlvbixcbiAgICAgICAgc3VjY2VzczogRnVuY3Rpb24sXG4gICAgICAgIGZhaWx1cmU6IEZ1bmN0aW9uXG4gICAgfTtcbiAgICB2YXIgdWlkJDIgPSAwO1xuICAgIGZ1bmN0aW9uIGRvZXNTb3VyY2VOZWVkUmFuZ2UoZXZlbnRTb3VyY2UsIGNhbGVuZGFyKSB7XG4gICAgICAgIHZhciBkZWZzID0gY2FsZW5kYXIucGx1Z2luU3lzdGVtLmhvb2tzLmV2ZW50U291cmNlRGVmcztcbiAgICAgICAgcmV0dXJuICFkZWZzW2V2ZW50U291cmNlLnNvdXJjZURlZklkXS5pZ25vcmVSYW5nZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGFyc2VFdmVudFNvdXJjZShyYXcsIGNhbGVuZGFyKSB7XG4gICAgICAgIHZhciBkZWZzID0gY2FsZW5kYXIucGx1Z2luU3lzdGVtLmhvb2tzLmV2ZW50U291cmNlRGVmcztcbiAgICAgICAgZm9yICh2YXIgaSA9IGRlZnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsgLy8gbGF0ZXItYWRkZWQgcGx1Z2lucyB0YWtlIHByZWNlZGVuY2VcbiAgICAgICAgICAgIHZhciBkZWYgPSBkZWZzW2ldO1xuICAgICAgICAgICAgdmFyIG1ldGEgPSBkZWYucGFyc2VNZXRhKHJhdyk7XG4gICAgICAgICAgICBpZiAobWV0YSkge1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSBwYXJzZUV2ZW50U291cmNlUHJvcHModHlwZW9mIHJhdyA9PT0gJ29iamVjdCcgPyByYXcgOiB7fSwgbWV0YSwgaSwgY2FsZW5kYXIpO1xuICAgICAgICAgICAgICAgIHJlcy5fcmF3ID0gcmF3O1xuICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnNlRXZlbnRTb3VyY2VQcm9wcyhyYXcsIG1ldGEsIHNvdXJjZURlZklkLCBjYWxlbmRhcikge1xuICAgICAgICB2YXIgbGVmdG92ZXJzMCA9IHt9O1xuICAgICAgICB2YXIgcHJvcHMgPSByZWZpbmVQcm9wcyhyYXcsIFNJTVBMRV9TT1VSQ0VfUFJPUFMsIHt9LCBsZWZ0b3ZlcnMwKTtcbiAgICAgICAgdmFyIGxlZnRvdmVyczEgPSB7fTtcbiAgICAgICAgdmFyIHVpID0gcHJvY2Vzc1Vuc2NvcGVkVWlQcm9wcyhsZWZ0b3ZlcnMwLCBjYWxlbmRhciwgbGVmdG92ZXJzMSk7XG4gICAgICAgIHByb3BzLmlzRmV0Y2hpbmcgPSBmYWxzZTtcbiAgICAgICAgcHJvcHMubGF0ZXN0RmV0Y2hJZCA9ICcnO1xuICAgICAgICBwcm9wcy5mZXRjaFJhbmdlID0gbnVsbDtcbiAgICAgICAgcHJvcHMucHVibGljSWQgPSBTdHJpbmcocmF3LmlkIHx8ICcnKTtcbiAgICAgICAgcHJvcHMuc291cmNlSWQgPSBTdHJpbmcodWlkJDIrKyk7XG4gICAgICAgIHByb3BzLnNvdXJjZURlZklkID0gc291cmNlRGVmSWQ7XG4gICAgICAgIHByb3BzLm1ldGEgPSBtZXRhO1xuICAgICAgICBwcm9wcy51aSA9IHVpO1xuICAgICAgICBwcm9wcy5leHRlbmRlZFByb3BzID0gbGVmdG92ZXJzMTtcbiAgICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlZHVjZUV2ZW50U291cmNlcyAoZXZlbnRTb3VyY2VzLCBhY3Rpb24sIGRhdGVQcm9maWxlLCBjYWxlbmRhcikge1xuICAgICAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdBRERfRVZFTlRfU09VUkNFUyc6IC8vIGFscmVhZHkgcGFyc2VkXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFkZFNvdXJjZXMoZXZlbnRTb3VyY2VzLCBhY3Rpb24uc291cmNlcywgZGF0ZVByb2ZpbGUgPyBkYXRlUHJvZmlsZS5hY3RpdmVSYW5nZSA6IG51bGwsIGNhbGVuZGFyKTtcbiAgICAgICAgICAgIGNhc2UgJ1JFTU9WRV9FVkVOVF9TT1VSQ0UnOlxuICAgICAgICAgICAgICAgIHJldHVybiByZW1vdmVTb3VyY2UoZXZlbnRTb3VyY2VzLCBhY3Rpb24uc291cmNlSWQpO1xuICAgICAgICAgICAgY2FzZSAnUFJFVic6IC8vIFRPRE86IGhvdyBkbyB3ZSB0cmFjayBhbGwgYWN0aW9ucyB0aGF0IGFmZmVjdCBkYXRlUHJvZmlsZSA6KFxuICAgICAgICAgICAgY2FzZSAnTkVYVCc6XG4gICAgICAgICAgICBjYXNlICdTRVRfREFURSc6XG4gICAgICAgICAgICBjYXNlICdTRVRfVklFV19UWVBFJzpcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZVByb2ZpbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoRGlydHlTb3VyY2VzKGV2ZW50U291cmNlcywgZGF0ZVByb2ZpbGUuYWN0aXZlUmFuZ2UsIGNhbGVuZGFyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudFNvdXJjZXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnRkVUQ0hfRVZFTlRfU09VUkNFUyc6XG4gICAgICAgICAgICBjYXNlICdDSEFOR0VfVElNRVpPTkUnOlxuICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaFNvdXJjZXNCeUlkcyhldmVudFNvdXJjZXMsIGFjdGlvbi5zb3VyY2VJZHMgP1xuICAgICAgICAgICAgICAgICAgICBhcnJheVRvSGFzaChhY3Rpb24uc291cmNlSWRzKSA6XG4gICAgICAgICAgICAgICAgICAgIGV4Y2x1ZGVTdGF0aWNTb3VyY2VzKGV2ZW50U291cmNlcywgY2FsZW5kYXIpLCBkYXRlUHJvZmlsZSA/IGRhdGVQcm9maWxlLmFjdGl2ZVJhbmdlIDogbnVsbCwgY2FsZW5kYXIpO1xuICAgICAgICAgICAgY2FzZSAnUkVDRUlWRV9FVkVOVFMnOlxuICAgICAgICAgICAgY2FzZSAnUkVDRUlWRV9FVkVOVF9FUlJPUic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY2VpdmVSZXNwb25zZShldmVudFNvdXJjZXMsIGFjdGlvbi5zb3VyY2VJZCwgYWN0aW9uLmZldGNoSWQsIGFjdGlvbi5mZXRjaFJhbmdlKTtcbiAgICAgICAgICAgIGNhc2UgJ1JFTU9WRV9BTExfRVZFTlRfU09VUkNFUyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnRTb3VyY2VzO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciB1aWQkMyA9IDA7XG4gICAgZnVuY3Rpb24gYWRkU291cmNlcyhldmVudFNvdXJjZUhhc2gsIHNvdXJjZXMsIGZldGNoUmFuZ2UsIGNhbGVuZGFyKSB7XG4gICAgICAgIHZhciBoYXNoID0ge307XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgc291cmNlc18xID0gc291cmNlczsgX2kgPCBzb3VyY2VzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gc291cmNlc18xW19pXTtcbiAgICAgICAgICAgIGhhc2hbc291cmNlLnNvdXJjZUlkXSA9IHNvdXJjZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmV0Y2hSYW5nZSkge1xuICAgICAgICAgICAgaGFzaCA9IGZldGNoRGlydHlTb3VyY2VzKGhhc2gsIGZldGNoUmFuZ2UsIGNhbGVuZGFyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX19hc3NpZ24oe30sIGV2ZW50U291cmNlSGFzaCwgaGFzaCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbW92ZVNvdXJjZShldmVudFNvdXJjZUhhc2gsIHNvdXJjZUlkKSB7XG4gICAgICAgIHJldHVybiBmaWx0ZXJIYXNoKGV2ZW50U291cmNlSGFzaCwgZnVuY3Rpb24gKGV2ZW50U291cmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZXZlbnRTb3VyY2Uuc291cmNlSWQgIT09IHNvdXJjZUlkO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmV0Y2hEaXJ0eVNvdXJjZXMoc291cmNlSGFzaCwgZmV0Y2hSYW5nZSwgY2FsZW5kYXIpIHtcbiAgICAgICAgcmV0dXJuIGZldGNoU291cmNlc0J5SWRzKHNvdXJjZUhhc2gsIGZpbHRlckhhc2goc291cmNlSGFzaCwgZnVuY3Rpb24gKGV2ZW50U291cmNlKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNTb3VyY2VEaXJ0eShldmVudFNvdXJjZSwgZmV0Y2hSYW5nZSwgY2FsZW5kYXIpO1xuICAgICAgICB9KSwgZmV0Y2hSYW5nZSwgY2FsZW5kYXIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc1NvdXJjZURpcnR5KGV2ZW50U291cmNlLCBmZXRjaFJhbmdlLCBjYWxlbmRhcikge1xuICAgICAgICBpZiAoIWRvZXNTb3VyY2VOZWVkUmFuZ2UoZXZlbnRTb3VyY2UsIGNhbGVuZGFyKSkge1xuICAgICAgICAgICAgcmV0dXJuICFldmVudFNvdXJjZS5sYXRlc3RGZXRjaElkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICFjYWxlbmRhci5vcHQoJ2xhenlGZXRjaGluZycpIHx8XG4gICAgICAgICAgICAgICAgIWV2ZW50U291cmNlLmZldGNoUmFuZ2UgfHxcbiAgICAgICAgICAgICAgICBldmVudFNvdXJjZS5pc0ZldGNoaW5nIHx8IC8vIGFsd2F5cyBjYW5jZWwgb3V0ZGF0ZWQgaW4tcHJvZ3Jlc3MgZmV0Y2hlc1xuICAgICAgICAgICAgICAgIGZldGNoUmFuZ2Uuc3RhcnQgPCBldmVudFNvdXJjZS5mZXRjaFJhbmdlLnN0YXJ0IHx8XG4gICAgICAgICAgICAgICAgZmV0Y2hSYW5nZS5lbmQgPiBldmVudFNvdXJjZS5mZXRjaFJhbmdlLmVuZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBmZXRjaFNvdXJjZXNCeUlkcyhwcmV2U291cmNlcywgc291cmNlSWRIYXNoLCBmZXRjaFJhbmdlLCBjYWxlbmRhcikge1xuICAgICAgICB2YXIgbmV4dFNvdXJjZXMgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgc291cmNlSWQgaW4gcHJldlNvdXJjZXMpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBwcmV2U291cmNlc1tzb3VyY2VJZF07XG4gICAgICAgICAgICBpZiAoc291cmNlSWRIYXNoW3NvdXJjZUlkXSkge1xuICAgICAgICAgICAgICAgIG5leHRTb3VyY2VzW3NvdXJjZUlkXSA9IGZldGNoU291cmNlKHNvdXJjZSwgZmV0Y2hSYW5nZSwgY2FsZW5kYXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV4dFNvdXJjZXNbc291cmNlSWRdID0gc291cmNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXh0U291cmNlcztcbiAgICB9XG4gICAgZnVuY3Rpb24gZmV0Y2hTb3VyY2UoZXZlbnRTb3VyY2UsIGZldGNoUmFuZ2UsIGNhbGVuZGFyKSB7XG4gICAgICAgIHZhciBzb3VyY2VEZWYgPSBjYWxlbmRhci5wbHVnaW5TeXN0ZW0uaG9va3MuZXZlbnRTb3VyY2VEZWZzW2V2ZW50U291cmNlLnNvdXJjZURlZklkXTtcbiAgICAgICAgdmFyIGZldGNoSWQgPSBTdHJpbmcodWlkJDMrKyk7XG4gICAgICAgIHNvdXJjZURlZi5mZXRjaCh7XG4gICAgICAgICAgICBldmVudFNvdXJjZTogZXZlbnRTb3VyY2UsXG4gICAgICAgICAgICBjYWxlbmRhcjogY2FsZW5kYXIsXG4gICAgICAgICAgICByYW5nZTogZmV0Y2hSYW5nZVxuICAgICAgICB9LCBmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICB2YXIgcmF3RXZlbnRzID0gcmVzLnJhd0V2ZW50cztcbiAgICAgICAgICAgIHZhciBjYWxTdWNjZXNzID0gY2FsZW5kYXIub3B0KCdldmVudFNvdXJjZVN1Y2Nlc3MnKTtcbiAgICAgICAgICAgIHZhciBjYWxTdWNjZXNzUmVzO1xuICAgICAgICAgICAgdmFyIHNvdXJjZVN1Y2Nlc3NSZXM7XG4gICAgICAgICAgICBpZiAoZXZlbnRTb3VyY2Uuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIHNvdXJjZVN1Y2Nlc3NSZXMgPSBldmVudFNvdXJjZS5zdWNjZXNzKHJhd0V2ZW50cywgcmVzLnhocik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FsU3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIGNhbFN1Y2Nlc3NSZXMgPSBjYWxTdWNjZXNzKHJhd0V2ZW50cywgcmVzLnhocik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByYXdFdmVudHMgPSBzb3VyY2VTdWNjZXNzUmVzIHx8IGNhbFN1Y2Nlc3NSZXMgfHwgcmF3RXZlbnRzO1xuICAgICAgICAgICAgY2FsZW5kYXIuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdSRUNFSVZFX0VWRU5UUycsXG4gICAgICAgICAgICAgICAgc291cmNlSWQ6IGV2ZW50U291cmNlLnNvdXJjZUlkLFxuICAgICAgICAgICAgICAgIGZldGNoSWQ6IGZldGNoSWQsXG4gICAgICAgICAgICAgICAgZmV0Y2hSYW5nZTogZmV0Y2hSYW5nZSxcbiAgICAgICAgICAgICAgICByYXdFdmVudHM6IHJhd0V2ZW50c1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgdmFyIGNhbGxGYWlsdXJlID0gY2FsZW5kYXIub3B0KCdldmVudFNvdXJjZUZhaWx1cmUnKTtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihlcnJvci5tZXNzYWdlLCBlcnJvcik7XG4gICAgICAgICAgICBpZiAoZXZlbnRTb3VyY2UuZmFpbHVyZSkge1xuICAgICAgICAgICAgICAgIGV2ZW50U291cmNlLmZhaWx1cmUoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhbGxGYWlsdXJlKSB7XG4gICAgICAgICAgICAgICAgY2FsbEZhaWx1cmUoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsZW5kYXIuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdSRUNFSVZFX0VWRU5UX0VSUk9SJyxcbiAgICAgICAgICAgICAgICBzb3VyY2VJZDogZXZlbnRTb3VyY2Uuc291cmNlSWQsXG4gICAgICAgICAgICAgICAgZmV0Y2hJZDogZmV0Y2hJZCxcbiAgICAgICAgICAgICAgICBmZXRjaFJhbmdlOiBmZXRjaFJhbmdlLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oe30sIGV2ZW50U291cmNlLCB7IGlzRmV0Y2hpbmc6IHRydWUsIGxhdGVzdEZldGNoSWQ6IGZldGNoSWQgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlY2VpdmVSZXNwb25zZShzb3VyY2VIYXNoLCBzb3VyY2VJZCwgZmV0Y2hJZCwgZmV0Y2hSYW5nZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBldmVudFNvdXJjZSA9IHNvdXJjZUhhc2hbc291cmNlSWRdO1xuICAgICAgICBpZiAoZXZlbnRTb3VyY2UgJiYgLy8gbm90IGFscmVhZHkgcmVtb3ZlZFxuICAgICAgICAgICAgZmV0Y2hJZCA9PT0gZXZlbnRTb3VyY2UubGF0ZXN0RmV0Y2hJZCkge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKHt9LCBzb3VyY2VIYXNoLCAoX2EgPSB7fSwgX2Fbc291cmNlSWRdID0gX19hc3NpZ24oe30sIGV2ZW50U291cmNlLCB7IGlzRmV0Y2hpbmc6IGZhbHNlLCBmZXRjaFJhbmdlOiBmZXRjaFJhbmdlIC8vIGFsc28gc2VydmVzIGFzIGEgbWFya2VyIHRoYXQgYXQgbGVhc3Qgb25lIGZldGNoIGhhcyBjb21wbGV0ZWRcbiAgICAgICAgICAgICB9KSwgX2EpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlSGFzaDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZXhjbHVkZVN0YXRpY1NvdXJjZXMoZXZlbnRTb3VyY2VzLCBjYWxlbmRhcikge1xuICAgICAgICByZXR1cm4gZmlsdGVySGFzaChldmVudFNvdXJjZXMsIGZ1bmN0aW9uIChldmVudFNvdXJjZSkge1xuICAgICAgICAgICAgcmV0dXJuIGRvZXNTb3VyY2VOZWVkUmFuZ2UoZXZlbnRTb3VyY2UsIGNhbGVuZGFyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIERhdGVQcm9maWxlR2VuZXJhdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBEYXRlUHJvZmlsZUdlbmVyYXRvcih2aWV3U3BlYywgY2FsZW5kYXIpIHtcbiAgICAgICAgICAgIHRoaXMudmlld1NwZWMgPSB2aWV3U3BlYztcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IHZpZXdTcGVjLm9wdGlvbnM7XG4gICAgICAgICAgICB0aGlzLmRhdGVFbnYgPSBjYWxlbmRhci5kYXRlRW52O1xuICAgICAgICAgICAgdGhpcy5jYWxlbmRhciA9IGNhbGVuZGFyO1xuICAgICAgICAgICAgdGhpcy5pbml0SGlkZGVuRGF5cygpO1xuICAgICAgICB9XG4gICAgICAgIC8qIERhdGUgUmFuZ2UgQ29tcHV0YXRpb25cbiAgICAgICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICAgICAgLy8gQnVpbGRzIGEgc3RydWN0dXJlIHdpdGggaW5mbyBhYm91dCB3aGF0IHRoZSBkYXRlcy9yYW5nZXMgd2lsbCBiZSBmb3IgdGhlIFwicHJldlwiIHZpZXcuXG4gICAgICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5idWlsZFByZXYgPSBmdW5jdGlvbiAoY3VycmVudERhdGVQcm9maWxlLCBjdXJyZW50RGF0ZSkge1xuICAgICAgICAgICAgdmFyIGRhdGVFbnYgPSB0aGlzLmRhdGVFbnY7XG4gICAgICAgICAgICB2YXIgcHJldkRhdGUgPSBkYXRlRW52LnN1YnRyYWN0KGRhdGVFbnYuc3RhcnRPZihjdXJyZW50RGF0ZSwgY3VycmVudERhdGVQcm9maWxlLmN1cnJlbnRSYW5nZVVuaXQpLCAvLyBpbXBvcnRhbnQgZm9yIHN0YXJ0LW9mLW1vbnRoXG4gICAgICAgICAgICBjdXJyZW50RGF0ZVByb2ZpbGUuZGF0ZUluY3JlbWVudCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5idWlsZChwcmV2RGF0ZSwgLTEpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBCdWlsZHMgYSBzdHJ1Y3R1cmUgd2l0aCBpbmZvIGFib3V0IHdoYXQgdGhlIGRhdGVzL3JhbmdlcyB3aWxsIGJlIGZvciB0aGUgXCJuZXh0XCIgdmlldy5cbiAgICAgICAgRGF0ZVByb2ZpbGVHZW5lcmF0b3IucHJvdG90eXBlLmJ1aWxkTmV4dCA9IGZ1bmN0aW9uIChjdXJyZW50RGF0ZVByb2ZpbGUsIGN1cnJlbnREYXRlKSB7XG4gICAgICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMuZGF0ZUVudjtcbiAgICAgICAgICAgIHZhciBuZXh0RGF0ZSA9IGRhdGVFbnYuYWRkKGRhdGVFbnYuc3RhcnRPZihjdXJyZW50RGF0ZSwgY3VycmVudERhdGVQcm9maWxlLmN1cnJlbnRSYW5nZVVuaXQpLCAvLyBpbXBvcnRhbnQgZm9yIHN0YXJ0LW9mLW1vbnRoXG4gICAgICAgICAgICBjdXJyZW50RGF0ZVByb2ZpbGUuZGF0ZUluY3JlbWVudCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5idWlsZChuZXh0RGF0ZSwgMSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIEJ1aWxkcyBhIHN0cnVjdHVyZSBob2xkaW5nIGRhdGVzL3JhbmdlcyBmb3IgcmVuZGVyaW5nIGFyb3VuZCB0aGUgZ2l2ZW4gZGF0ZS5cbiAgICAgICAgLy8gT3B0aW9uYWwgZGlyZWN0aW9uIHBhcmFtIGluZGljYXRlcyB3aGV0aGVyIHRoZSBkYXRlIGlzIGJlaW5nIGluY3JlbWVudGVkL2RlY3JlbWVudGVkXG4gICAgICAgIC8vIGZyb20gaXRzIHByZXZpb3VzIHZhbHVlLiBkZWNyZW1lbnRlZCA9IC0xLCBpbmNyZW1lbnRlZCA9IDEgKGRlZmF1bHQpLlxuICAgICAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbiAoY3VycmVudERhdGUsIGRpcmVjdGlvbiwgZm9yY2VUb1ZhbGlkKSB7XG4gICAgICAgICAgICBpZiAoZm9yY2VUb1ZhbGlkID09PSB2b2lkIDApIHsgZm9yY2VUb1ZhbGlkID0gZmFsc2U7IH1cbiAgICAgICAgICAgIHZhciB2YWxpZFJhbmdlO1xuICAgICAgICAgICAgdmFyIG1pblRpbWUgPSBudWxsO1xuICAgICAgICAgICAgdmFyIG1heFRpbWUgPSBudWxsO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRJbmZvO1xuICAgICAgICAgICAgdmFyIGlzUmFuZ2VBbGxEYXk7XG4gICAgICAgICAgICB2YXIgcmVuZGVyUmFuZ2U7XG4gICAgICAgICAgICB2YXIgYWN0aXZlUmFuZ2U7XG4gICAgICAgICAgICB2YXIgaXNWYWxpZDtcbiAgICAgICAgICAgIHZhbGlkUmFuZ2UgPSB0aGlzLmJ1aWxkVmFsaWRSYW5nZSgpO1xuICAgICAgICAgICAgdmFsaWRSYW5nZSA9IHRoaXMudHJpbUhpZGRlbkRheXModmFsaWRSYW5nZSk7XG4gICAgICAgICAgICBpZiAoZm9yY2VUb1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudERhdGUgPSBjb25zdHJhaW5NYXJrZXJUb1JhbmdlKGN1cnJlbnREYXRlLCB2YWxpZFJhbmdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnRJbmZvID0gdGhpcy5idWlsZEN1cnJlbnRSYW5nZUluZm8oY3VycmVudERhdGUsIGRpcmVjdGlvbik7XG4gICAgICAgICAgICBpc1JhbmdlQWxsRGF5ID0gL14oeWVhcnxtb250aHx3ZWVrfGRheSkkLy50ZXN0KGN1cnJlbnRJbmZvLnVuaXQpO1xuICAgICAgICAgICAgcmVuZGVyUmFuZ2UgPSB0aGlzLmJ1aWxkUmVuZGVyUmFuZ2UodGhpcy50cmltSGlkZGVuRGF5cyhjdXJyZW50SW5mby5yYW5nZSksIGN1cnJlbnRJbmZvLnVuaXQsIGlzUmFuZ2VBbGxEYXkpO1xuICAgICAgICAgICAgcmVuZGVyUmFuZ2UgPSB0aGlzLnRyaW1IaWRkZW5EYXlzKHJlbmRlclJhbmdlKTtcbiAgICAgICAgICAgIGFjdGl2ZVJhbmdlID0gcmVuZGVyUmFuZ2U7XG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5zaG93Tm9uQ3VycmVudERhdGVzKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlUmFuZ2UgPSBpbnRlcnNlY3RSYW5nZXMoYWN0aXZlUmFuZ2UsIGN1cnJlbnRJbmZvLnJhbmdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1pblRpbWUgPSBjcmVhdGVEdXJhdGlvbih0aGlzLm9wdGlvbnMubWluVGltZSk7XG4gICAgICAgICAgICBtYXhUaW1lID0gY3JlYXRlRHVyYXRpb24odGhpcy5vcHRpb25zLm1heFRpbWUpO1xuICAgICAgICAgICAgYWN0aXZlUmFuZ2UgPSB0aGlzLmFkanVzdEFjdGl2ZVJhbmdlKGFjdGl2ZVJhbmdlLCBtaW5UaW1lLCBtYXhUaW1lKTtcbiAgICAgICAgICAgIGFjdGl2ZVJhbmdlID0gaW50ZXJzZWN0UmFuZ2VzKGFjdGl2ZVJhbmdlLCB2YWxpZFJhbmdlKTsgLy8gbWlnaHQgcmV0dXJuIG51bGxcbiAgICAgICAgICAgIC8vIGl0J3MgaW52YWxpZCBpZiB0aGUgb3JpZ2luYWxseSByZXF1ZXN0ZWQgZGF0ZSBpcyBub3QgY29udGFpbmVkLFxuICAgICAgICAgICAgLy8gb3IgaWYgdGhlIHJhbmdlIGlzIGNvbXBsZXRlbHkgb3V0c2lkZSBvZiB0aGUgdmFsaWQgcmFuZ2UuXG4gICAgICAgICAgICBpc1ZhbGlkID0gcmFuZ2VzSW50ZXJzZWN0KGN1cnJlbnRJbmZvLnJhbmdlLCB2YWxpZFJhbmdlKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLy8gY29uc3RyYWludCBmb3Igd2hlcmUgcHJldi9uZXh0IG9wZXJhdGlvbnMgY2FuIGdvIGFuZCB3aGVyZSBldmVudHMgY2FuIGJlIGRyYWdnZWQvcmVzaXplZCB0by5cbiAgICAgICAgICAgICAgICAvLyBhbiBvYmplY3Qgd2l0aCBvcHRpb25hbCBzdGFydCBhbmQgZW5kIHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgICAgdmFsaWRSYW5nZTogdmFsaWRSYW5nZSxcbiAgICAgICAgICAgICAgICAvLyByYW5nZSB0aGUgdmlldyBpcyBmb3JtYWxseSByZXNwb25zaWJsZSBmb3IuXG4gICAgICAgICAgICAgICAgLy8gZm9yIGV4YW1wbGUsIGEgbW9udGggdmlldyBtaWdodCBoYXZlIDFzdC0zMXN0LCBleGNsdWRpbmcgcGFkZGVkIGRhdGVzXG4gICAgICAgICAgICAgICAgY3VycmVudFJhbmdlOiBjdXJyZW50SW5mby5yYW5nZSxcbiAgICAgICAgICAgICAgICAvLyBuYW1lIG9mIGxhcmdlc3QgdW5pdCBiZWluZyBkaXNwbGF5ZWQsIGxpa2UgXCJtb250aFwiIG9yIFwid2Vla1wiXG4gICAgICAgICAgICAgICAgY3VycmVudFJhbmdlVW5pdDogY3VycmVudEluZm8udW5pdCxcbiAgICAgICAgICAgICAgICBpc1JhbmdlQWxsRGF5OiBpc1JhbmdlQWxsRGF5LFxuICAgICAgICAgICAgICAgIC8vIGRhdGVzIHRoYXQgZGlzcGxheSBldmVudHMgYW5kIGFjY2VwdCBkcmFnLW4tZHJvcFxuICAgICAgICAgICAgICAgIC8vIHdpbGwgYmUgYG51bGxgIGlmIG5vIGRhdGVzIGFjY2VwdCBldmVudHNcbiAgICAgICAgICAgICAgICBhY3RpdmVSYW5nZTogYWN0aXZlUmFuZ2UsXG4gICAgICAgICAgICAgICAgLy8gZGF0ZSByYW5nZSB3aXRoIGEgcmVuZGVyZWQgc2tlbGV0b25cbiAgICAgICAgICAgICAgICAvLyBpbmNsdWRlcyBub3QtYWN0aXZlIGRheXMgdGhhdCBuZWVkIHNvbWUgc29ydCBvZiBET01cbiAgICAgICAgICAgICAgICByZW5kZXJSYW5nZTogcmVuZGVyUmFuZ2UsXG4gICAgICAgICAgICAgICAgLy8gRHVyYXRpb24gb2JqZWN0IHRoYXQgZGVub3RlcyB0aGUgZmlyc3QgdmlzaWJsZSB0aW1lIG9mIGFueSBnaXZlbiBkYXlcbiAgICAgICAgICAgICAgICBtaW5UaW1lOiBtaW5UaW1lLFxuICAgICAgICAgICAgICAgIC8vIER1cmF0aW9uIG9iamVjdCB0aGF0IGRlbm90ZXMgdGhlIGV4Y2x1c2l2ZSB2aXNpYmxlIGVuZCB0aW1lIG9mIGFueSBnaXZlbiBkYXlcbiAgICAgICAgICAgICAgICBtYXhUaW1lOiBtYXhUaW1lLFxuICAgICAgICAgICAgICAgIGlzVmFsaWQ6IGlzVmFsaWQsXG4gICAgICAgICAgICAgICAgLy8gaG93IGZhciB0aGUgY3VycmVudCBkYXRlIHdpbGwgbW92ZSBmb3IgYSBwcmV2L25leHQgb3BlcmF0aW9uXG4gICAgICAgICAgICAgICAgZGF0ZUluY3JlbWVudDogdGhpcy5idWlsZERhdGVJbmNyZW1lbnQoY3VycmVudEluZm8uZHVyYXRpb24pXG4gICAgICAgICAgICAgICAgLy8gcGFzcyBhIGZhbGxiYWNrIChtaWdodCBiZSBudWxsKSBeXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAvLyBCdWlsZHMgYW4gb2JqZWN0IHdpdGggb3B0aW9uYWwgc3RhcnQvZW5kIHByb3BlcnRpZXMuXG4gICAgICAgIC8vIEluZGljYXRlcyB0aGUgbWluaW11bS9tYXhpbXVtIGRhdGVzIHRvIGRpc3BsYXkuXG4gICAgICAgIC8vIG5vdCByZXNwb25zaWJsZSBmb3IgdHJpbW1pbmcgaGlkZGVuIGRheXMuXG4gICAgICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5idWlsZFZhbGlkUmFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRSYW5nZU9wdGlvbigndmFsaWRSYW5nZScsIHRoaXMuY2FsZW5kYXIuZ2V0Tm93KCkpIHx8XG4gICAgICAgICAgICAgICAgeyBzdGFydDogbnVsbCwgZW5kOiBudWxsIH07IC8vIGNvbXBsZXRlbHkgb3Blbi1lbmRlZFxuICAgICAgICB9O1xuICAgICAgICAvLyBCdWlsZHMgYSBzdHJ1Y3R1cmUgd2l0aCBpbmZvIGFib3V0IHRoZSBcImN1cnJlbnRcIiByYW5nZSwgdGhlIHJhbmdlIHRoYXQgaXNcbiAgICAgICAgLy8gaGlnaGxpZ2h0ZWQgYXMgYmVpbmcgdGhlIGN1cnJlbnQgbW9udGggZm9yIGV4YW1wbGUuXG4gICAgICAgIC8vIFNlZSBidWlsZCgpIGZvciBhIGRlc2NyaXB0aW9uIG9mIGBkaXJlY3Rpb25gLlxuICAgICAgICAvLyBHdWFyYW50ZWVkIHRvIGhhdmUgYHJhbmdlYCBhbmQgYHVuaXRgIHByb3BlcnRpZXMuIGBkdXJhdGlvbmAgaXMgb3B0aW9uYWwuXG4gICAgICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5idWlsZEN1cnJlbnRSYW5nZUluZm8gPSBmdW5jdGlvbiAoZGF0ZSwgZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLCB2aWV3U3BlYyA9IF9hLnZpZXdTcGVjLCBkYXRlRW52ID0gX2EuZGF0ZUVudjtcbiAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB2YXIgdW5pdCA9IG51bGw7XG4gICAgICAgICAgICB2YXIgcmFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgdmFyIGRheUNvdW50O1xuICAgICAgICAgICAgaWYgKHZpZXdTcGVjLmR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb24gPSB2aWV3U3BlYy5kdXJhdGlvbjtcbiAgICAgICAgICAgICAgICB1bml0ID0gdmlld1NwZWMuZHVyYXRpb25Vbml0O1xuICAgICAgICAgICAgICAgIHJhbmdlID0gdGhpcy5idWlsZFJhbmdlRnJvbUR1cmF0aW9uKGRhdGUsIGRpcmVjdGlvbiwgZHVyYXRpb24sIHVuaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKGRheUNvdW50ID0gdGhpcy5vcHRpb25zLmRheUNvdW50KSkge1xuICAgICAgICAgICAgICAgIHVuaXQgPSAnZGF5JztcbiAgICAgICAgICAgICAgICByYW5nZSA9IHRoaXMuYnVpbGRSYW5nZUZyb21EYXlDb3VudChkYXRlLCBkaXJlY3Rpb24sIGRheUNvdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKChyYW5nZSA9IHRoaXMuYnVpbGRDdXN0b21WaXNpYmxlUmFuZ2UoZGF0ZSkpKSB7XG4gICAgICAgICAgICAgICAgdW5pdCA9IGRhdGVFbnYuZ3JlYXRlc3RXaG9sZVVuaXQocmFuZ2Uuc3RhcnQsIHJhbmdlLmVuZCkudW5pdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gdGhpcy5nZXRGYWxsYmFja0R1cmF0aW9uKCk7XG4gICAgICAgICAgICAgICAgdW5pdCA9IGdyZWF0ZXN0RHVyYXRpb25EZW5vbWluYXRvcihkdXJhdGlvbikudW5pdDtcbiAgICAgICAgICAgICAgICByYW5nZSA9IHRoaXMuYnVpbGRSYW5nZUZyb21EdXJhdGlvbihkYXRlLCBkaXJlY3Rpb24sIGR1cmF0aW9uLCB1bml0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IGR1cmF0aW9uOiBkdXJhdGlvbiwgdW5pdDogdW5pdCwgcmFuZ2U6IHJhbmdlIH07XG4gICAgICAgIH07XG4gICAgICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5nZXRGYWxsYmFja0R1cmF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHsgZGF5OiAxIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvLyBSZXR1cm5zIGEgbmV3IGFjdGl2ZVJhbmdlIHRvIGhhdmUgdGltZSB2YWx1ZXMgKHVuLWFtYmlndWF0ZSlcbiAgICAgICAgLy8gbWluVGltZSBvciBtYXhUaW1lIGNhdXNlcyB0aGUgcmFuZ2UgdG8gZXhwYW5kLlxuICAgICAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuYWRqdXN0QWN0aXZlUmFuZ2UgPSBmdW5jdGlvbiAocmFuZ2UsIG1pblRpbWUsIG1heFRpbWUpIHtcbiAgICAgICAgICAgIHZhciBkYXRlRW52ID0gdGhpcy5kYXRlRW52O1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gcmFuZ2Uuc3RhcnQ7XG4gICAgICAgICAgICB2YXIgZW5kID0gcmFuZ2UuZW5kO1xuICAgICAgICAgICAgaWYgKHRoaXMudmlld1NwZWMuY2xhc3MucHJvdG90eXBlLnVzZXNNaW5NYXhUaW1lKSB7XG4gICAgICAgICAgICAgICAgLy8gZXhwYW5kIGFjdGl2ZSByYW5nZSBpZiBtaW5UaW1lIGlzIG5lZ2F0aXZlICh3aHkgbm90IHdoZW4gcG9zaXRpdmU/KVxuICAgICAgICAgICAgICAgIGlmIChhc1JvdWdoRGF5cyhtaW5UaW1lKSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBzdGFydE9mRGF5KHN0YXJ0KTsgLy8gbmVjZXNzYXJ5P1xuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IGRhdGVFbnYuYWRkKHN0YXJ0LCBtaW5UaW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZXhwYW5kIGFjdGl2ZSByYW5nZSBpZiBtYXhUaW1lIGlzIGJleW9uZCBvbmUgZGF5ICh3aHkgbm90IHdoZW4gcG9zaXRpdmU/KVxuICAgICAgICAgICAgICAgIGlmIChhc1JvdWdoRGF5cyhtYXhUaW1lKSA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gc3RhcnRPZkRheShlbmQpOyAvLyBuZWNlc3Nhcnk/XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IGFkZERheXMoZW5kLCAtMSk7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IGRhdGVFbnYuYWRkKGVuZCwgbWF4VGltZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCB9O1xuICAgICAgICB9O1xuICAgICAgICAvLyBCdWlsZHMgdGhlIFwiY3VycmVudFwiIHJhbmdlIHdoZW4gaXQgaXMgc3BlY2lmaWVkIGFzIGFuIGV4cGxpY2l0IGR1cmF0aW9uLlxuICAgICAgICAvLyBgdW5pdGAgaXMgdGhlIGFscmVhZHktY29tcHV0ZWQgZ3JlYXRlc3REdXJhdGlvbkRlbm9taW5hdG9yIHVuaXQgb2YgZHVyYXRpb24uXG4gICAgICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5idWlsZFJhbmdlRnJvbUR1cmF0aW9uID0gZnVuY3Rpb24gKGRhdGUsIGRpcmVjdGlvbiwgZHVyYXRpb24sIHVuaXQpIHtcbiAgICAgICAgICAgIHZhciBkYXRlRW52ID0gdGhpcy5kYXRlRW52O1xuICAgICAgICAgICAgdmFyIGFsaWdubWVudCA9IHRoaXMub3B0aW9ucy5kYXRlQWxpZ25tZW50O1xuICAgICAgICAgICAgdmFyIGRhdGVJbmNyZW1lbnRJbnB1dDtcbiAgICAgICAgICAgIHZhciBkYXRlSW5jcmVtZW50RHVyYXRpb247XG4gICAgICAgICAgICB2YXIgc3RhcnQ7XG4gICAgICAgICAgICB2YXIgZW5kO1xuICAgICAgICAgICAgdmFyIHJlcztcbiAgICAgICAgICAgIC8vIGNvbXB1dGUgd2hhdCB0aGUgYWxpZ25tZW50IHNob3VsZCBiZVxuICAgICAgICAgICAgaWYgKCFhbGlnbm1lbnQpIHtcbiAgICAgICAgICAgICAgICBkYXRlSW5jcmVtZW50SW5wdXQgPSB0aGlzLm9wdGlvbnMuZGF0ZUluY3JlbWVudDtcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZUluY3JlbWVudElucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGVJbmNyZW1lbnREdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uKGRhdGVJbmNyZW1lbnRJbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHVzZSB0aGUgc21hbGxlciBvZiB0aGUgdHdvIHVuaXRzXG4gICAgICAgICAgICAgICAgICAgIGlmIChhc1JvdWdoTXMoZGF0ZUluY3JlbWVudER1cmF0aW9uKSA8IGFzUm91Z2hNcyhkdXJhdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWdubWVudCA9IGdyZWF0ZXN0RHVyYXRpb25EZW5vbWluYXRvcihkYXRlSW5jcmVtZW50RHVyYXRpb24sICFnZXRXZWVrc0Zyb21JbnB1dChkYXRlSW5jcmVtZW50SW5wdXQpKS51bml0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50ID0gdW5pdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50ID0gdW5pdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZiB0aGUgdmlldyBkaXNwbGF5cyBhIHNpbmdsZSBkYXkgb3Igc21hbGxlclxuICAgICAgICAgICAgaWYgKGFzUm91Z2hEYXlzKGR1cmF0aW9uKSA8PSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNIaWRkZW5EYXkoc3RhcnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gdGhpcy5za2lwSGlkZGVuRGF5cyhzdGFydCwgZGlyZWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBzdGFydE9mRGF5KHN0YXJ0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBjb21wdXRlUmVzKCkge1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gZGF0ZUVudi5zdGFydE9mKGRhdGUsIGFsaWdubWVudCk7XG4gICAgICAgICAgICAgICAgZW5kID0gZGF0ZUVudi5hZGQoc3RhcnQsIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICByZXMgPSB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbXB1dGVSZXMoKTtcbiAgICAgICAgICAgIC8vIGlmIHJhbmdlIGlzIGNvbXBsZXRlbHkgZW52ZWxvcGVkIGJ5IGhpZGRlbiBkYXlzLCBnbyBwYXN0IHRoZSBoaWRkZW4gZGF5c1xuICAgICAgICAgICAgaWYgKCF0aGlzLnRyaW1IaWRkZW5EYXlzKHJlcykpIHtcbiAgICAgICAgICAgICAgICBkYXRlID0gdGhpcy5za2lwSGlkZGVuRGF5cyhkYXRlLCBkaXJlY3Rpb24pO1xuICAgICAgICAgICAgICAgIGNvbXB1dGVSZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH07XG4gICAgICAgIC8vIEJ1aWxkcyB0aGUgXCJjdXJyZW50XCIgcmFuZ2Ugd2hlbiBhIGRheUNvdW50IGlzIHNwZWNpZmllZC5cbiAgICAgICAgRGF0ZVByb2ZpbGVHZW5lcmF0b3IucHJvdG90eXBlLmJ1aWxkUmFuZ2VGcm9tRGF5Q291bnQgPSBmdW5jdGlvbiAoZGF0ZSwgZGlyZWN0aW9uLCBkYXlDb3VudCkge1xuICAgICAgICAgICAgdmFyIGRhdGVFbnYgPSB0aGlzLmRhdGVFbnY7XG4gICAgICAgICAgICB2YXIgY3VzdG9tQWxpZ25tZW50ID0gdGhpcy5vcHRpb25zLmRhdGVBbGlnbm1lbnQ7XG4gICAgICAgICAgICB2YXIgcnVubmluZ0NvdW50ID0gMDtcbiAgICAgICAgICAgIHZhciBzdGFydCA9IGRhdGU7XG4gICAgICAgICAgICB2YXIgZW5kO1xuICAgICAgICAgICAgaWYgKGN1c3RvbUFsaWdubWVudCkge1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gZGF0ZUVudi5zdGFydE9mKHN0YXJ0LCBjdXN0b21BbGlnbm1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhcnQgPSBzdGFydE9mRGF5KHN0YXJ0KTtcbiAgICAgICAgICAgIHN0YXJ0ID0gdGhpcy5za2lwSGlkZGVuRGF5cyhzdGFydCwgZGlyZWN0aW9uKTtcbiAgICAgICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGVuZCA9IGFkZERheXMoZW5kLCAxKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNIaWRkZW5EYXkoZW5kKSkge1xuICAgICAgICAgICAgICAgICAgICBydW5uaW5nQ291bnQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IHdoaWxlIChydW5uaW5nQ291bnQgPCBkYXlDb3VudCk7XG4gICAgICAgICAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kIH07XG4gICAgICAgIH07XG4gICAgICAgIC8vIEJ1aWxkcyBhIG5vcm1hbGl6ZWQgcmFuZ2Ugb2JqZWN0IGZvciB0aGUgXCJ2aXNpYmxlXCIgcmFuZ2UsXG4gICAgICAgIC8vIHdoaWNoIGlzIGEgd2F5IHRvIGRlZmluZSB0aGUgY3VycmVudFJhbmdlIGFuZCBhY3RpdmVSYW5nZSBhdCB0aGUgc2FtZSB0aW1lLlxuICAgICAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuYnVpbGRDdXN0b21WaXNpYmxlUmFuZ2UgPSBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICAgICAgdmFyIGRhdGVFbnYgPSB0aGlzLmRhdGVFbnY7XG4gICAgICAgICAgICB2YXIgdmlzaWJsZVJhbmdlID0gdGhpcy5nZXRSYW5nZU9wdGlvbigndmlzaWJsZVJhbmdlJywgZGF0ZUVudi50b0RhdGUoZGF0ZSkpO1xuICAgICAgICAgICAgaWYgKHZpc2libGVSYW5nZSAmJiAodmlzaWJsZVJhbmdlLnN0YXJ0ID09IG51bGwgfHwgdmlzaWJsZVJhbmdlLmVuZCA9PSBudWxsKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZpc2libGVSYW5nZTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQ29tcHV0ZXMgdGhlIHJhbmdlIHRoYXQgd2lsbCByZXByZXNlbnQgdGhlIGVsZW1lbnQvY2VsbHMgZm9yICpyZW5kZXJpbmcqLFxuICAgICAgICAvLyBidXQgd2hpY2ggbWF5IGhhdmUgdm9pZGVkIGRheXMvdGltZXMuXG4gICAgICAgIC8vIG5vdCByZXNwb25zaWJsZSBmb3IgdHJpbW1pbmcgaGlkZGVuIGRheXMuXG4gICAgICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5idWlsZFJlbmRlclJhbmdlID0gZnVuY3Rpb24gKGN1cnJlbnRSYW5nZSwgY3VycmVudFJhbmdlVW5pdCwgaXNSYW5nZUFsbERheSkge1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRSYW5nZTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgZHVyYXRpb24gdmFsdWUgdGhhdCBzaG91bGQgYmUgYWRkZWQvc3Vic3RyYWN0ZWQgdG8gdGhlIGN1cnJlbnQgZGF0ZVxuICAgICAgICAvLyB3aGVuIGEgcHJldi9uZXh0IG9wZXJhdGlvbiBoYXBwZW5zLlxuICAgICAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuYnVpbGREYXRlSW5jcmVtZW50ID0gZnVuY3Rpb24gKGZhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgZGF0ZUluY3JlbWVudElucHV0ID0gdGhpcy5vcHRpb25zLmRhdGVJbmNyZW1lbnQ7XG4gICAgICAgICAgICB2YXIgY3VzdG9tQWxpZ25tZW50O1xuICAgICAgICAgICAgaWYgKGRhdGVJbmNyZW1lbnRJbnB1dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbihkYXRlSW5jcmVtZW50SW5wdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKGN1c3RvbUFsaWdubWVudCA9IHRoaXMub3B0aW9ucy5kYXRlQWxpZ25tZW50KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbigxLCBjdXN0b21BbGlnbm1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZmFsbGJhY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsbGJhY2s7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oeyBkYXlzOiAxIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBBcmd1bWVudHMgYWZ0ZXIgbmFtZSB3aWxsIGJlIGZvcndhcmRlZCB0byBhIGh5cG90aGV0aWNhbCBmdW5jdGlvbiB2YWx1ZVxuICAgICAgICAvLyBXQVJOSU5HOiBwYXNzZWQtaW4gYXJndW1lbnRzIHdpbGwgYmUgZ2l2ZW4gdG8gZ2VuZXJhdG9yIGZ1bmN0aW9ucyBhcy1pcyBhbmQgY2FuIGNhdXNlIHNpZGUtZWZmZWN0cy5cbiAgICAgICAgLy8gQWx3YXlzIGNsb25lIHlvdXIgb2JqZWN0cyBpZiB5b3UgZmVhciBtdXRhdGlvbi5cbiAgICAgICAgRGF0ZVByb2ZpbGVHZW5lcmF0b3IucHJvdG90eXBlLmdldFJhbmdlT3B0aW9uID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIHZhciBvdGhlckFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgb3RoZXJBcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHZhbCA9IHRoaXMub3B0aW9uc1tuYW1lXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdmFsID0gdmFsLmFwcGx5KG51bGwsIG90aGVyQXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgICAgICAgdmFsID0gcGFyc2VSYW5nZSh2YWwsIHRoaXMuZGF0ZUVudik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgICAgICAgdmFsID0gY29tcHV0ZVZpc2libGVEYXlSYW5nZSh2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgfTtcbiAgICAgICAgLyogSGlkZGVuIERheXNcbiAgICAgICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICAgICAgLy8gSW5pdGlhbGl6ZXMgaW50ZXJuYWwgdmFyaWFibGVzIHJlbGF0ZWQgdG8gY2FsY3VsYXRpbmcgaGlkZGVuIGRheXMtb2Ytd2Vla1xuICAgICAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuaW5pdEhpZGRlbkRheXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaGlkZGVuRGF5cyA9IHRoaXMub3B0aW9ucy5oaWRkZW5EYXlzIHx8IFtdOyAvLyBhcnJheSBvZiBkYXktb2Ytd2VlayBpbmRpY2VzIHRoYXQgYXJlIGhpZGRlblxuICAgICAgICAgICAgdmFyIGlzSGlkZGVuRGF5SGFzaCA9IFtdOyAvLyBpcyB0aGUgZGF5LW9mLXdlZWsgaGlkZGVuPyAoaGFzaCB3aXRoIGRheS1vZi13ZWVrLWluZGV4IC0+IGJvb2wpXG4gICAgICAgICAgICB2YXIgZGF5Q250ID0gMDtcbiAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy53ZWVrZW5kcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBoaWRkZW5EYXlzLnB1c2goMCwgNik7IC8vIDA9c3VuZGF5LCA2PXNhdHVyZGF5XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoaXNIaWRkZW5EYXlIYXNoW2ldID0gaGlkZGVuRGF5cy5pbmRleE9mKGkpICE9PSAtMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF5Q250Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFkYXlDbnQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgaGlkZGVuRGF5cycpOyAvLyBhbGwgZGF5cyB3ZXJlIGhpZGRlbj8gYmFkLlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pc0hpZGRlbkRheUhhc2ggPSBpc0hpZGRlbkRheUhhc2g7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFJlbW92ZSBkYXlzIGZyb20gdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIHRoZSByYW5nZSB0aGF0IGFyZSBjb21wdXRlZCBhcyBoaWRkZW4uXG4gICAgICAgIC8vIElmIHRoZSB3aG9sZSByYW5nZSBpcyB0cmltbWVkIG9mZiwgcmV0dXJucyBudWxsXG4gICAgICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS50cmltSGlkZGVuRGF5cyA9IGZ1bmN0aW9uIChyYW5nZSkge1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gcmFuZ2Uuc3RhcnQ7XG4gICAgICAgICAgICB2YXIgZW5kID0gcmFuZ2UuZW5kO1xuICAgICAgICAgICAgaWYgKHN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSB0aGlzLnNraXBIaWRkZW5EYXlzKHN0YXJ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbmQpIHtcbiAgICAgICAgICAgICAgICBlbmQgPSB0aGlzLnNraXBIaWRkZW5EYXlzKGVuZCwgLTEsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXJ0ID09IG51bGwgfHwgZW5kID09IG51bGwgfHwgc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gSXMgdGhlIGN1cnJlbnQgZGF5IGhpZGRlbj9cbiAgICAgICAgLy8gYGRheWAgaXMgYSBkYXktb2Ytd2VlayBpbmRleCAoMC02KSwgb3IgYSBEYXRlICh1c2VkIGZvciBVVEMpXG4gICAgICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5pc0hpZGRlbkRheSA9IGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgICAgICAgIGlmIChkYXkgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICAgICAgZGF5ID0gZGF5LmdldFVUQ0RheSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNIaWRkZW5EYXlIYXNoW2RheV07XG4gICAgICAgIH07XG4gICAgICAgIC8vIEluY3JlbWVudGluZyB0aGUgY3VycmVudCBkYXkgdW50aWwgaXQgaXMgbm8gbG9uZ2VyIGEgaGlkZGVuIGRheSwgcmV0dXJuaW5nIGEgY29weS5cbiAgICAgICAgLy8gRE9FUyBOT1QgQ09OU0lERVIgdmFsaWRSYW5nZSFcbiAgICAgICAgLy8gSWYgdGhlIGluaXRpYWwgdmFsdWUgb2YgYGRhdGVgIGlzIG5vdCBhIGhpZGRlbiBkYXksIGRvbid0IGRvIGFueXRoaW5nLlxuICAgICAgICAvLyBQYXNzIGBpc0V4Y2x1c2l2ZWAgYXMgYHRydWVgIGlmIHlvdSBhcmUgZGVhbGluZyB3aXRoIGFuIGVuZCBkYXRlLlxuICAgICAgICAvLyBgaW5jYCBkZWZhdWx0cyB0byBgMWAgKGluY3JlbWVudCBvbmUgZGF5IGZvcndhcmQgZWFjaCB0aW1lKVxuICAgICAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuc2tpcEhpZGRlbkRheXMgPSBmdW5jdGlvbiAoZGF0ZSwgaW5jLCBpc0V4Y2x1c2l2ZSkge1xuICAgICAgICAgICAgaWYgKGluYyA9PT0gdm9pZCAwKSB7IGluYyA9IDE7IH1cbiAgICAgICAgICAgIGlmIChpc0V4Y2x1c2l2ZSA9PT0gdm9pZCAwKSB7IGlzRXhjbHVzaXZlID0gZmFsc2U7IH1cbiAgICAgICAgICAgIHdoaWxlICh0aGlzLmlzSGlkZGVuRGF5SGFzaFsoZGF0ZS5nZXRVVENEYXkoKSArIChpc0V4Y2x1c2l2ZSA/IGluYyA6IDApICsgNykgJSA3XSkge1xuICAgICAgICAgICAgICAgIGRhdGUgPSBhZGREYXlzKGRhdGUsIGluYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIERhdGVQcm9maWxlR2VuZXJhdG9yO1xuICAgIH0oKSk7XG4gICAgLy8gVE9ETzogZmluZCBhIHdheSB0byBhdm9pZCBjb21wYXJpbmcgRGF0ZVByb2ZpbGVzLiBpdCdzIHRlZGlvdXNcbiAgICBmdW5jdGlvbiBpc0RhdGVQcm9maWxlc0VxdWFsKHAwLCBwMSkge1xuICAgICAgICByZXR1cm4gcmFuZ2VzRXF1YWwocDAudmFsaWRSYW5nZSwgcDEudmFsaWRSYW5nZSkgJiZcbiAgICAgICAgICAgIHJhbmdlc0VxdWFsKHAwLmFjdGl2ZVJhbmdlLCBwMS5hY3RpdmVSYW5nZSkgJiZcbiAgICAgICAgICAgIHJhbmdlc0VxdWFsKHAwLnJlbmRlclJhbmdlLCBwMS5yZW5kZXJSYW5nZSkgJiZcbiAgICAgICAgICAgIGR1cmF0aW9uc0VxdWFsKHAwLm1pblRpbWUsIHAxLm1pblRpbWUpICYmXG4gICAgICAgICAgICBkdXJhdGlvbnNFcXVhbChwMC5tYXhUaW1lLCBwMS5tYXhUaW1lKTtcbiAgICAgICAgLypcbiAgICAgICAgVE9ETzogY29tcGFyZSBtb3JlP1xuICAgICAgICAgIGN1cnJlbnRSYW5nZTogRGF0ZVJhbmdlXG4gICAgICAgICAgY3VycmVudFJhbmdlVW5pdDogc3RyaW5nXG4gICAgICAgICAgaXNSYW5nZUFsbERheTogYm9vbGVhblxuICAgICAgICAgIGlzVmFsaWQ6IGJvb2xlYW5cbiAgICAgICAgICBkYXRlSW5jcmVtZW50OiBEdXJhdGlvblxuICAgICAgICAqL1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlZHVjZSAoc3RhdGUsIGFjdGlvbiwgY2FsZW5kYXIpIHtcbiAgICAgICAgdmFyIHZpZXdUeXBlID0gcmVkdWNlVmlld1R5cGUoc3RhdGUudmlld1R5cGUsIGFjdGlvbik7XG4gICAgICAgIHZhciBkYXRlUHJvZmlsZSA9IHJlZHVjZURhdGVQcm9maWxlKHN0YXRlLmRhdGVQcm9maWxlLCBhY3Rpb24sIHN0YXRlLmN1cnJlbnREYXRlLCB2aWV3VHlwZSwgY2FsZW5kYXIpO1xuICAgICAgICB2YXIgZXZlbnRTb3VyY2VzID0gcmVkdWNlRXZlbnRTb3VyY2VzKHN0YXRlLmV2ZW50U291cmNlcywgYWN0aW9uLCBkYXRlUHJvZmlsZSwgY2FsZW5kYXIpO1xuICAgICAgICB2YXIgbmV4dFN0YXRlID0gX19hc3NpZ24oe30sIHN0YXRlLCB7IHZpZXdUeXBlOiB2aWV3VHlwZSxcbiAgICAgICAgICAgIGRhdGVQcm9maWxlOiBkYXRlUHJvZmlsZSwgY3VycmVudERhdGU6IHJlZHVjZUN1cnJlbnREYXRlKHN0YXRlLmN1cnJlbnREYXRlLCBhY3Rpb24sIGRhdGVQcm9maWxlKSwgZXZlbnRTb3VyY2VzOiBldmVudFNvdXJjZXMsIGV2ZW50U3RvcmU6IHJlZHVjZUV2ZW50U3RvcmUoc3RhdGUuZXZlbnRTdG9yZSwgYWN0aW9uLCBldmVudFNvdXJjZXMsIGRhdGVQcm9maWxlLCBjYWxlbmRhciksIGRhdGVTZWxlY3Rpb246IHJlZHVjZURhdGVTZWxlY3Rpb24oc3RhdGUuZGF0ZVNlbGVjdGlvbiwgYWN0aW9uLCBjYWxlbmRhciksIGV2ZW50U2VsZWN0aW9uOiByZWR1Y2VTZWxlY3RlZEV2ZW50KHN0YXRlLmV2ZW50U2VsZWN0aW9uLCBhY3Rpb24pLCBldmVudERyYWc6IHJlZHVjZUV2ZW50RHJhZyhzdGF0ZS5ldmVudERyYWcsIGFjdGlvbiwgZXZlbnRTb3VyY2VzLCBjYWxlbmRhciksIGV2ZW50UmVzaXplOiByZWR1Y2VFdmVudFJlc2l6ZShzdGF0ZS5ldmVudFJlc2l6ZSwgYWN0aW9uLCBldmVudFNvdXJjZXMsIGNhbGVuZGFyKSwgZXZlbnRTb3VyY2VMb2FkaW5nTGV2ZWw6IGNvbXB1dGVMb2FkaW5nTGV2ZWwoZXZlbnRTb3VyY2VzKSwgbG9hZGluZ0xldmVsOiBjb21wdXRlTG9hZGluZ0xldmVsKGV2ZW50U291cmNlcykgfSk7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBjYWxlbmRhci5wbHVnaW5TeXN0ZW0uaG9va3MucmVkdWNlcnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgcmVkdWNlckZ1bmMgPSBfYVtfaV07XG4gICAgICAgICAgICBuZXh0U3RhdGUgPSByZWR1Y2VyRnVuYyhuZXh0U3RhdGUsIGFjdGlvbiwgY2FsZW5kYXIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGFjdGlvbi50eXBlLCBuZXh0U3RhdGUpXG4gICAgICAgIHJldHVybiBuZXh0U3RhdGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlZHVjZVZpZXdUeXBlKGN1cnJlbnRWaWV3VHlwZSwgYWN0aW9uKSB7XG4gICAgICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ1NFVF9WSUVXX1RZUEUnOlxuICAgICAgICAgICAgICAgIHJldHVybiBhY3Rpb24udmlld1R5cGU7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50Vmlld1R5cGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcmVkdWNlRGF0ZVByb2ZpbGUoY3VycmVudERhdGVQcm9maWxlLCBhY3Rpb24sIGN1cnJlbnREYXRlLCB2aWV3VHlwZSwgY2FsZW5kYXIpIHtcbiAgICAgICAgdmFyIG5ld0RhdGVQcm9maWxlO1xuICAgICAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdQUkVWJzpcbiAgICAgICAgICAgICAgICBuZXdEYXRlUHJvZmlsZSA9IGNhbGVuZGFyLmRhdGVQcm9maWxlR2VuZXJhdG9yc1t2aWV3VHlwZV0uYnVpbGRQcmV2KGN1cnJlbnREYXRlUHJvZmlsZSwgY3VycmVudERhdGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnTkVYVCc6XG4gICAgICAgICAgICAgICAgbmV3RGF0ZVByb2ZpbGUgPSBjYWxlbmRhci5kYXRlUHJvZmlsZUdlbmVyYXRvcnNbdmlld1R5cGVdLmJ1aWxkTmV4dChjdXJyZW50RGF0ZVByb2ZpbGUsIGN1cnJlbnREYXRlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ1NFVF9EQVRFJzpcbiAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnREYXRlUHJvZmlsZS5hY3RpdmVSYW5nZSB8fFxuICAgICAgICAgICAgICAgICAgICAhcmFuZ2VDb250YWluc01hcmtlcihjdXJyZW50RGF0ZVByb2ZpbGUuY3VycmVudFJhbmdlLCBhY3Rpb24uZGF0ZU1hcmtlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3RGF0ZVByb2ZpbGUgPSBjYWxlbmRhci5kYXRlUHJvZmlsZUdlbmVyYXRvcnNbdmlld1R5cGVdLmJ1aWxkKGFjdGlvbi5kYXRlTWFya2VyLCB1bmRlZmluZWQsIHRydWUgLy8gZm9yY2VUb1ZhbGlkXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnU0VUX1ZJRVdfVFlQRSc6XG4gICAgICAgICAgICAgICAgdmFyIGdlbmVyYXRvciA9IGNhbGVuZGFyLmRhdGVQcm9maWxlR2VuZXJhdG9yc1t2aWV3VHlwZV07XG4gICAgICAgICAgICAgICAgaWYgKCFnZW5lcmF0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHZpZXdUeXBlID9cbiAgICAgICAgICAgICAgICAgICAgICAgICdUaGUgRnVsbENhbGVuZGFyIHZpZXcgXCInICsgdmlld1R5cGUgKyAnXCIgZG9lcyBub3QgZXhpc3QuIE1ha2Ugc3VyZSB5b3VyIHBsdWdpbnMgYXJlIGxvYWRlZCBjb3JyZWN0bHkuJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAnTm8gYXZhaWxhYmxlIEZ1bGxDYWxlbmRhciB2aWV3IHBsdWdpbnMuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5ld0RhdGVQcm9maWxlID0gZ2VuZXJhdG9yLmJ1aWxkKGFjdGlvbi5kYXRlTWFya2VyIHx8IGN1cnJlbnREYXRlLCB1bmRlZmluZWQsIHRydWUgLy8gZm9yY2VUb1ZhbGlkXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3RGF0ZVByb2ZpbGUgJiZcbiAgICAgICAgICAgIG5ld0RhdGVQcm9maWxlLmlzVmFsaWQgJiZcbiAgICAgICAgICAgICEoY3VycmVudERhdGVQcm9maWxlICYmIGlzRGF0ZVByb2ZpbGVzRXF1YWwoY3VycmVudERhdGVQcm9maWxlLCBuZXdEYXRlUHJvZmlsZSkpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3RGF0ZVByb2ZpbGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudERhdGVQcm9maWxlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlZHVjZUN1cnJlbnREYXRlKGN1cnJlbnREYXRlLCBhY3Rpb24sIGRhdGVQcm9maWxlKSB7XG4gICAgICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ1BSRVYnOlxuICAgICAgICAgICAgY2FzZSAnTkVYVCc6XG4gICAgICAgICAgICAgICAgaWYgKCFyYW5nZUNvbnRhaW5zTWFya2VyKGRhdGVQcm9maWxlLmN1cnJlbnRSYW5nZSwgY3VycmVudERhdGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRlUHJvZmlsZS5jdXJyZW50UmFuZ2Uuc3RhcnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudERhdGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnU0VUX0RBVEUnOlxuICAgICAgICAgICAgY2FzZSAnU0VUX1ZJRVdfVFlQRSc6XG4gICAgICAgICAgICAgICAgdmFyIG5ld0RhdGUgPSBhY3Rpb24uZGF0ZU1hcmtlciB8fCBjdXJyZW50RGF0ZTtcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZVByb2ZpbGUuYWN0aXZlUmFuZ2UgJiYgIXJhbmdlQ29udGFpbnNNYXJrZXIoZGF0ZVByb2ZpbGUuYWN0aXZlUmFuZ2UsIG5ld0RhdGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRlUHJvZmlsZS5jdXJyZW50UmFuZ2Uuc3RhcnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3RGF0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50RGF0ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiByZWR1Y2VEYXRlU2VsZWN0aW9uKGN1cnJlbnRTZWxlY3Rpb24sIGFjdGlvbiwgY2FsZW5kYXIpIHtcbiAgICAgICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnU0VMRUNUX0RBVEVTJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uLnNlbGVjdGlvbjtcbiAgICAgICAgICAgIGNhc2UgJ1VOU0VMRUNUX0RBVEVTJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRTZWxlY3Rpb247XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcmVkdWNlU2VsZWN0ZWRFdmVudChjdXJyZW50SW5zdGFuY2VJZCwgYWN0aW9uKSB7XG4gICAgICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ1NFTEVDVF9FVkVOVCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvbi5ldmVudEluc3RhbmNlSWQ7XG4gICAgICAgICAgICBjYXNlICdVTlNFTEVDVF9FVkVOVCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudEluc3RhbmNlSWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcmVkdWNlRXZlbnREcmFnKGN1cnJlbnREcmFnLCBhY3Rpb24sIHNvdXJjZXMsIGNhbGVuZGFyKSB7XG4gICAgICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ1NFVF9FVkVOVF9EUkFHJzpcbiAgICAgICAgICAgICAgICB2YXIgbmV3RHJhZyA9IGFjdGlvbi5zdGF0ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBhZmZlY3RlZEV2ZW50czogbmV3RHJhZy5hZmZlY3RlZEV2ZW50cyxcbiAgICAgICAgICAgICAgICAgICAgbXV0YXRlZEV2ZW50czogbmV3RHJhZy5tdXRhdGVkRXZlbnRzLFxuICAgICAgICAgICAgICAgICAgICBpc0V2ZW50OiBuZXdEcmFnLmlzRXZlbnQsXG4gICAgICAgICAgICAgICAgICAgIG9yaWdTZWc6IG5ld0RyYWcub3JpZ1NlZ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlICdVTlNFVF9FVkVOVF9EUkFHJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnREcmFnO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlZHVjZUV2ZW50UmVzaXplKGN1cnJlbnRSZXNpemUsIGFjdGlvbiwgc291cmNlcywgY2FsZW5kYXIpIHtcbiAgICAgICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnU0VUX0VWRU5UX1JFU0laRSc6XG4gICAgICAgICAgICAgICAgdmFyIG5ld1Jlc2l6ZSA9IGFjdGlvbi5zdGF0ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBhZmZlY3RlZEV2ZW50czogbmV3UmVzaXplLmFmZmVjdGVkRXZlbnRzLFxuICAgICAgICAgICAgICAgICAgICBtdXRhdGVkRXZlbnRzOiBuZXdSZXNpemUubXV0YXRlZEV2ZW50cyxcbiAgICAgICAgICAgICAgICAgICAgaXNFdmVudDogbmV3UmVzaXplLmlzRXZlbnQsXG4gICAgICAgICAgICAgICAgICAgIG9yaWdTZWc6IG5ld1Jlc2l6ZS5vcmlnU2VnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgJ1VOU0VUX0VWRU5UX1JFU0laRSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50UmVzaXplO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbXB1dGVMb2FkaW5nTGV2ZWwoZXZlbnRTb3VyY2VzKSB7XG4gICAgICAgIHZhciBjbnQgPSAwO1xuICAgICAgICBmb3IgKHZhciBzb3VyY2VJZCBpbiBldmVudFNvdXJjZXMpIHtcbiAgICAgICAgICAgIGlmIChldmVudFNvdXJjZXNbc291cmNlSWRdLmlzRmV0Y2hpbmcpIHtcbiAgICAgICAgICAgICAgICBjbnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY250O1xuICAgIH1cblxuICAgIHZhciBTVEFOREFSRF9QUk9QUyA9IHtcbiAgICAgICAgc3RhcnQ6IG51bGwsXG4gICAgICAgIGVuZDogbnVsbCxcbiAgICAgICAgYWxsRGF5OiBCb29sZWFuXG4gICAgfTtcbiAgICBmdW5jdGlvbiBwYXJzZURhdGVTcGFuKHJhdywgZGF0ZUVudiwgZGVmYXVsdER1cmF0aW9uKSB7XG4gICAgICAgIHZhciBzcGFuID0gcGFyc2VPcGVuRGF0ZVNwYW4ocmF3LCBkYXRlRW52KTtcbiAgICAgICAgdmFyIHJhbmdlID0gc3Bhbi5yYW5nZTtcbiAgICAgICAgaWYgKCFyYW5nZS5zdGFydCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyYW5nZS5lbmQpIHtcbiAgICAgICAgICAgIGlmIChkZWZhdWx0RHVyYXRpb24gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmFuZ2UuZW5kID0gZGF0ZUVudi5hZGQocmFuZ2Uuc3RhcnQsIGRlZmF1bHREdXJhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNwYW47XG4gICAgfVxuICAgIC8qXG4gICAgVE9ETzogc29tZWhvdyBjb21iaW5lIHdpdGggcGFyc2VSYW5nZT9cbiAgICBXaWxsIHJldHVybiBudWxsIGlmIHRoZSBzdGFydC9lbmQgcHJvcHMgd2VyZSBwcmVzZW50IGJ1dCBwYXJzZWQgaW52YWxpZGx5LlxuICAgICovXG4gICAgZnVuY3Rpb24gcGFyc2VPcGVuRGF0ZVNwYW4ocmF3LCBkYXRlRW52KSB7XG4gICAgICAgIHZhciBsZWZ0b3ZlcnMgPSB7fTtcbiAgICAgICAgdmFyIHN0YW5kYXJkUHJvcHMgPSByZWZpbmVQcm9wcyhyYXcsIFNUQU5EQVJEX1BST1BTLCB7fSwgbGVmdG92ZXJzKTtcbiAgICAgICAgdmFyIHN0YXJ0TWV0YSA9IHN0YW5kYXJkUHJvcHMuc3RhcnQgPyBkYXRlRW52LmNyZWF0ZU1hcmtlck1ldGEoc3RhbmRhcmRQcm9wcy5zdGFydCkgOiBudWxsO1xuICAgICAgICB2YXIgZW5kTWV0YSA9IHN0YW5kYXJkUHJvcHMuZW5kID8gZGF0ZUVudi5jcmVhdGVNYXJrZXJNZXRhKHN0YW5kYXJkUHJvcHMuZW5kKSA6IG51bGw7XG4gICAgICAgIHZhciBhbGxEYXkgPSBzdGFuZGFyZFByb3BzLmFsbERheTtcbiAgICAgICAgaWYgKGFsbERheSA9PSBudWxsKSB7XG4gICAgICAgICAgICBhbGxEYXkgPSAoc3RhcnRNZXRhICYmIHN0YXJ0TWV0YS5pc1RpbWVVbnNwZWNpZmllZCkgJiZcbiAgICAgICAgICAgICAgICAoIWVuZE1ldGEgfHwgZW5kTWV0YS5pc1RpbWVVbnNwZWNpZmllZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdXNlIHRoaXMgbGVmdG92ZXIgb2JqZWN0IGFzIHRoZSBzZWxlY3Rpb24gb2JqZWN0XG4gICAgICAgIGxlZnRvdmVycy5yYW5nZSA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiBzdGFydE1ldGEgPyBzdGFydE1ldGEubWFya2VyIDogbnVsbCxcbiAgICAgICAgICAgIGVuZDogZW5kTWV0YSA/IGVuZE1ldGEubWFya2VyIDogbnVsbFxuICAgICAgICB9O1xuICAgICAgICBsZWZ0b3ZlcnMuYWxsRGF5ID0gYWxsRGF5O1xuICAgICAgICByZXR1cm4gbGVmdG92ZXJzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0RhdGVTcGFuc0VxdWFsKHNwYW4wLCBzcGFuMSkge1xuICAgICAgICByZXR1cm4gcmFuZ2VzRXF1YWwoc3BhbjAucmFuZ2UsIHNwYW4xLnJhbmdlKSAmJlxuICAgICAgICAgICAgc3BhbjAuYWxsRGF5ID09PSBzcGFuMS5hbGxEYXkgJiZcbiAgICAgICAgICAgIGlzU3BhblByb3BzRXF1YWwoc3BhbjAsIHNwYW4xKTtcbiAgICB9XG4gICAgLy8gdGhlIE5PTi1EQVRFLVJFTEFURUQgcHJvcHNcbiAgICBmdW5jdGlvbiBpc1NwYW5Qcm9wc0VxdWFsKHNwYW4wLCBzcGFuMSkge1xuICAgICAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBzcGFuMSkge1xuICAgICAgICAgICAgaWYgKHByb3BOYW1lICE9PSAncmFuZ2UnICYmIHByb3BOYW1lICE9PSAnYWxsRGF5Jykge1xuICAgICAgICAgICAgICAgIGlmIChzcGFuMFtwcm9wTmFtZV0gIT09IHNwYW4xW3Byb3BOYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGFyZSB0aGVyZSBhbnkgcHJvcHMgdGhhdCBzcGFuMCBoYXMgdGhhdCBzcGFuMSBET0VTTidUIGhhdmU/XG4gICAgICAgIC8vIGJvdGggaGF2ZSByYW5nZS9hbGxEYXksIHNvIG5vIG5lZWQgdG8gc3BlY2lhbC1jYXNlLlxuICAgICAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBzcGFuMCkge1xuICAgICAgICAgICAgaWYgKCEocHJvcE5hbWUgaW4gc3BhbjEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBidWlsZERhdGVTcGFuQXBpKHNwYW4sIGRhdGVFbnYpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXJ0OiBkYXRlRW52LnRvRGF0ZShzcGFuLnJhbmdlLnN0YXJ0KSxcbiAgICAgICAgICAgIGVuZDogZGF0ZUVudi50b0RhdGUoc3Bhbi5yYW5nZS5lbmQpLFxuICAgICAgICAgICAgc3RhcnRTdHI6IGRhdGVFbnYuZm9ybWF0SXNvKHNwYW4ucmFuZ2Uuc3RhcnQsIHsgb21pdFRpbWU6IHNwYW4uYWxsRGF5IH0pLFxuICAgICAgICAgICAgZW5kU3RyOiBkYXRlRW52LmZvcm1hdElzbyhzcGFuLnJhbmdlLmVuZCwgeyBvbWl0VGltZTogc3Bhbi5hbGxEYXkgfSksXG4gICAgICAgICAgICBhbGxEYXk6IHNwYW4uYWxsRGF5XG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ1aWxkRGF0ZVBvaW50QXBpKHNwYW4sIGRhdGVFbnYpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGU6IGRhdGVFbnYudG9EYXRlKHNwYW4ucmFuZ2Uuc3RhcnQpLFxuICAgICAgICAgICAgZGF0ZVN0cjogZGF0ZUVudi5mb3JtYXRJc28oc3Bhbi5yYW5nZS5zdGFydCwgeyBvbWl0VGltZTogc3Bhbi5hbGxEYXkgfSksXG4gICAgICAgICAgICBhbGxEYXk6IHNwYW4uYWxsRGF5XG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZhYnJpY2F0ZUV2ZW50UmFuZ2UoZGF0ZVNwYW4sIGV2ZW50VWlCYXNlcywgY2FsZW5kYXIpIHtcbiAgICAgICAgdmFyIGRlZiA9IHBhcnNlRXZlbnREZWYoeyBlZGl0YWJsZTogZmFsc2UgfSwgJycsIC8vIHNvdXJjZUlkXG4gICAgICAgIGRhdGVTcGFuLmFsbERheSwgdHJ1ZSwgLy8gaGFzRW5kXG4gICAgICAgIGNhbGVuZGFyKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRlZjogZGVmLFxuICAgICAgICAgICAgdWk6IGNvbXBpbGVFdmVudFVpKGRlZiwgZXZlbnRVaUJhc2VzKSxcbiAgICAgICAgICAgIGluc3RhbmNlOiBjcmVhdGVFdmVudEluc3RhbmNlKGRlZi5kZWZJZCwgZGF0ZVNwYW4ucmFuZ2UpLFxuICAgICAgICAgICAgcmFuZ2U6IGRhdGVTcGFuLnJhbmdlLFxuICAgICAgICAgICAgaXNTdGFydDogdHJ1ZSxcbiAgICAgICAgICAgIGlzRW5kOiB0cnVlXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcGlsZVZpZXdEZWZzKGRlZmF1bHRDb25maWdzLCBvdmVycmlkZUNvbmZpZ3MpIHtcbiAgICAgICAgdmFyIGhhc2ggPSB7fTtcbiAgICAgICAgdmFyIHZpZXdUeXBlO1xuICAgICAgICBmb3IgKHZpZXdUeXBlIGluIGRlZmF1bHRDb25maWdzKSB7XG4gICAgICAgICAgICBlbnN1cmVWaWV3RGVmKHZpZXdUeXBlLCBoYXNoLCBkZWZhdWx0Q29uZmlncywgb3ZlcnJpZGVDb25maWdzKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZpZXdUeXBlIGluIG92ZXJyaWRlQ29uZmlncykge1xuICAgICAgICAgICAgZW5zdXJlVmlld0RlZih2aWV3VHlwZSwgaGFzaCwgZGVmYXVsdENvbmZpZ3MsIG92ZXJyaWRlQ29uZmlncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVuc3VyZVZpZXdEZWYodmlld1R5cGUsIGhhc2gsIGRlZmF1bHRDb25maWdzLCBvdmVycmlkZUNvbmZpZ3MpIHtcbiAgICAgICAgaWYgKGhhc2hbdmlld1R5cGVdKSB7XG4gICAgICAgICAgICByZXR1cm4gaGFzaFt2aWV3VHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZpZXdEZWYgPSBidWlsZFZpZXdEZWYodmlld1R5cGUsIGhhc2gsIGRlZmF1bHRDb25maWdzLCBvdmVycmlkZUNvbmZpZ3MpO1xuICAgICAgICBpZiAodmlld0RlZikge1xuICAgICAgICAgICAgaGFzaFt2aWV3VHlwZV0gPSB2aWV3RGVmO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2aWV3RGVmO1xuICAgIH1cbiAgICBmdW5jdGlvbiBidWlsZFZpZXdEZWYodmlld1R5cGUsIGhhc2gsIGRlZmF1bHRDb25maWdzLCBvdmVycmlkZUNvbmZpZ3MpIHtcbiAgICAgICAgdmFyIGRlZmF1bHRDb25maWcgPSBkZWZhdWx0Q29uZmlnc1t2aWV3VHlwZV07XG4gICAgICAgIHZhciBvdmVycmlkZUNvbmZpZyA9IG92ZXJyaWRlQ29uZmlnc1t2aWV3VHlwZV07XG4gICAgICAgIHZhciBxdWVyeVByb3AgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIChkZWZhdWx0Q29uZmlnICYmIGRlZmF1bHRDb25maWdbbmFtZV0gIT09IG51bGwpID8gZGVmYXVsdENvbmZpZ1tuYW1lXSA6XG4gICAgICAgICAgICAgICAgKChvdmVycmlkZUNvbmZpZyAmJiBvdmVycmlkZUNvbmZpZ1tuYW1lXSAhPT0gbnVsbCkgPyBvdmVycmlkZUNvbmZpZ1tuYW1lXSA6IG51bGwpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgdGhlQ2xhc3MgPSBxdWVyeVByb3AoJ2NsYXNzJyk7XG4gICAgICAgIHZhciBzdXBlclR5cGUgPSBxdWVyeVByb3AoJ3N1cGVyVHlwZScpO1xuICAgICAgICBpZiAoIXN1cGVyVHlwZSAmJiB0aGVDbGFzcykge1xuICAgICAgICAgICAgc3VwZXJUeXBlID1cbiAgICAgICAgICAgICAgICBmaW5kVmlld05hbWVCeVN1YmNsYXNzKHRoZUNsYXNzLCBvdmVycmlkZUNvbmZpZ3MpIHx8XG4gICAgICAgICAgICAgICAgICAgIGZpbmRWaWV3TmFtZUJ5U3ViY2xhc3ModGhlQ2xhc3MsIGRlZmF1bHRDb25maWdzKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3VwZXJEZWYgPSBudWxsO1xuICAgICAgICBpZiAoc3VwZXJUeXBlKSB7XG4gICAgICAgICAgICBpZiAoc3VwZXJUeXBlID09PSB2aWV3VHlwZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FuXFwndCBoYXZlIGEgY3VzdG9tIHZpZXcgdHlwZSB0aGF0IHJlZmVyZW5jZXMgaXRzZWxmJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdXBlckRlZiA9IGVuc3VyZVZpZXdEZWYoc3VwZXJUeXBlLCBoYXNoLCBkZWZhdWx0Q29uZmlncywgb3ZlcnJpZGVDb25maWdzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoZUNsYXNzICYmIHN1cGVyRGVmKSB7XG4gICAgICAgICAgICB0aGVDbGFzcyA9IHN1cGVyRGVmLmNsYXNzO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhlQ2xhc3MpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsOyAvLyBkb24ndCB0aHJvdyBhIHdhcm5pbmcsIG1pZ2h0IGJlIHNldHRpbmdzIGZvciBhIHNpbmdsZS11bml0IHZpZXdcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogdmlld1R5cGUsXG4gICAgICAgICAgICBjbGFzczogdGhlQ2xhc3MsXG4gICAgICAgICAgICBkZWZhdWx0czogX19hc3NpZ24oe30sIChzdXBlckRlZiA/IHN1cGVyRGVmLmRlZmF1bHRzIDoge30pLCAoZGVmYXVsdENvbmZpZyA/IGRlZmF1bHRDb25maWcub3B0aW9ucyA6IHt9KSksXG4gICAgICAgICAgICBvdmVycmlkZXM6IF9fYXNzaWduKHt9LCAoc3VwZXJEZWYgPyBzdXBlckRlZi5vdmVycmlkZXMgOiB7fSksIChvdmVycmlkZUNvbmZpZyA/IG92ZXJyaWRlQ29uZmlnLm9wdGlvbnMgOiB7fSkpXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZpbmRWaWV3TmFtZUJ5U3ViY2xhc3Modmlld1N1YmNsYXNzLCBjb25maWdzKSB7XG4gICAgICAgIHZhciBzdXBlclByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZpZXdTdWJjbGFzcy5wcm90b3R5cGUpO1xuICAgICAgICBmb3IgKHZhciB2aWV3VHlwZSBpbiBjb25maWdzKSB7XG4gICAgICAgICAgICB2YXIgcGFyc2VkID0gY29uZmlnc1t2aWV3VHlwZV07XG4gICAgICAgICAgICAvLyBuZWVkIERJUkVDVCBzdWJjbGFzcywgc28gaW5zdGFuY2VvZiB3b24ndCBkbyBpdFxuICAgICAgICAgICAgaWYgKHBhcnNlZC5jbGFzcyAmJiBwYXJzZWQuY2xhc3MucHJvdG90eXBlID09PSBzdXBlclByb3RvKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpZXdUeXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZVZpZXdDb25maWdzKGlucHV0cykge1xuICAgICAgICByZXR1cm4gbWFwSGFzaChpbnB1dHMsIHBhcnNlVmlld0NvbmZpZyk7XG4gICAgfVxuICAgIHZhciBWSUVXX0RFRl9QUk9QUyA9IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICBjbGFzczogbnVsbFxuICAgIH07XG4gICAgZnVuY3Rpb24gcGFyc2VWaWV3Q29uZmlnKGlucHV0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGlucHV0ID0geyBjbGFzczogaW5wdXQgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3B0aW9ucyA9IHt9O1xuICAgICAgICB2YXIgcHJvcHMgPSByZWZpbmVQcm9wcyhpbnB1dCwgVklFV19ERUZfUFJPUFMsIHt9LCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN1cGVyVHlwZTogcHJvcHMudHlwZSxcbiAgICAgICAgICAgIGNsYXNzOiBwcm9wcy5jbGFzcyxcbiAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBidWlsZFZpZXdTcGVjcyhkZWZhdWx0SW5wdXRzLCBvcHRpb25zTWFuYWdlcikge1xuICAgICAgICB2YXIgZGVmYXVsdENvbmZpZ3MgPSBwYXJzZVZpZXdDb25maWdzKGRlZmF1bHRJbnB1dHMpO1xuICAgICAgICB2YXIgb3ZlcnJpZGVDb25maWdzID0gcGFyc2VWaWV3Q29uZmlncyhvcHRpb25zTWFuYWdlci5vdmVycmlkZXMudmlld3MpO1xuICAgICAgICB2YXIgdmlld0RlZnMgPSBjb21waWxlVmlld0RlZnMoZGVmYXVsdENvbmZpZ3MsIG92ZXJyaWRlQ29uZmlncyk7XG4gICAgICAgIHJldHVybiBtYXBIYXNoKHZpZXdEZWZzLCBmdW5jdGlvbiAodmlld0RlZikge1xuICAgICAgICAgICAgcmV0dXJuIGJ1aWxkVmlld1NwZWModmlld0RlZiwgb3ZlcnJpZGVDb25maWdzLCBvcHRpb25zTWFuYWdlcik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBidWlsZFZpZXdTcGVjKHZpZXdEZWYsIG92ZXJyaWRlQ29uZmlncywgb3B0aW9uc01hbmFnZXIpIHtcbiAgICAgICAgdmFyIGR1cmF0aW9uSW5wdXQgPSB2aWV3RGVmLm92ZXJyaWRlcy5kdXJhdGlvbiB8fFxuICAgICAgICAgICAgdmlld0RlZi5kZWZhdWx0cy5kdXJhdGlvbiB8fFxuICAgICAgICAgICAgb3B0aW9uc01hbmFnZXIuZHluYW1pY092ZXJyaWRlcy5kdXJhdGlvbiB8fFxuICAgICAgICAgICAgb3B0aW9uc01hbmFnZXIub3ZlcnJpZGVzLmR1cmF0aW9uO1xuICAgICAgICB2YXIgZHVyYXRpb24gPSBudWxsO1xuICAgICAgICB2YXIgZHVyYXRpb25Vbml0ID0gJyc7XG4gICAgICAgIHZhciBzaW5nbGVVbml0ID0gJyc7XG4gICAgICAgIHZhciBzaW5nbGVVbml0T3ZlcnJpZGVzID0ge307XG4gICAgICAgIGlmIChkdXJhdGlvbklucHV0KSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uKGR1cmF0aW9uSW5wdXQpO1xuICAgICAgICAgICAgaWYgKGR1cmF0aW9uKSB7IC8vIHZhbGlkP1xuICAgICAgICAgICAgICAgIHZhciBkZW5vbSA9IGdyZWF0ZXN0RHVyYXRpb25EZW5vbWluYXRvcihkdXJhdGlvbiwgIWdldFdlZWtzRnJvbUlucHV0KGR1cmF0aW9uSW5wdXQpKTtcbiAgICAgICAgICAgICAgICBkdXJhdGlvblVuaXQgPSBkZW5vbS51bml0O1xuICAgICAgICAgICAgICAgIGlmIChkZW5vbS52YWx1ZSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBzaW5nbGVVbml0ID0gZHVyYXRpb25Vbml0O1xuICAgICAgICAgICAgICAgICAgICBzaW5nbGVVbml0T3ZlcnJpZGVzID0gb3ZlcnJpZGVDb25maWdzW2R1cmF0aW9uVW5pdF0gPyBvdmVycmlkZUNvbmZpZ3NbZHVyYXRpb25Vbml0XS5vcHRpb25zIDoge307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBxdWVyeUJ1dHRvblRleHQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgdmFyIGJ1dHRvblRleHRNYXAgPSBvcHRpb25zLmJ1dHRvblRleHQgfHwge307XG4gICAgICAgICAgICB2YXIgYnV0dG9uVGV4dEtleSA9IHZpZXdEZWYuZGVmYXVsdHMuYnV0dG9uVGV4dEtleTtcbiAgICAgICAgICAgIGlmIChidXR0b25UZXh0S2V5ICE9IG51bGwgJiYgYnV0dG9uVGV4dE1hcFtidXR0b25UZXh0S2V5XSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1dHRvblRleHRNYXBbYnV0dG9uVGV4dEtleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnV0dG9uVGV4dE1hcFt2aWV3RGVmLnR5cGVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYnV0dG9uVGV4dE1hcFt2aWV3RGVmLnR5cGVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1dHRvblRleHRNYXBbc2luZ2xlVW5pdF0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBidXR0b25UZXh0TWFwW3NpbmdsZVVuaXRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogdmlld0RlZi50eXBlLFxuICAgICAgICAgICAgY2xhc3M6IHZpZXdEZWYuY2xhc3MsXG4gICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgICAgICBkdXJhdGlvblVuaXQ6IGR1cmF0aW9uVW5pdCxcbiAgICAgICAgICAgIHNpbmdsZVVuaXQ6IHNpbmdsZVVuaXQsXG4gICAgICAgICAgICBvcHRpb25zOiBfX2Fzc2lnbih7fSwgZ2xvYmFsRGVmYXVsdHMsIHZpZXdEZWYuZGVmYXVsdHMsIG9wdGlvbnNNYW5hZ2VyLmRpckRlZmF1bHRzLCBvcHRpb25zTWFuYWdlci5sb2NhbGVEZWZhdWx0cywgb3B0aW9uc01hbmFnZXIub3ZlcnJpZGVzLCBzaW5nbGVVbml0T3ZlcnJpZGVzLCB2aWV3RGVmLm92ZXJyaWRlcywgb3B0aW9uc01hbmFnZXIuZHluYW1pY092ZXJyaWRlcyksXG4gICAgICAgICAgICBidXR0b25UZXh0T3ZlcnJpZGU6IHF1ZXJ5QnV0dG9uVGV4dChvcHRpb25zTWFuYWdlci5keW5hbWljT3ZlcnJpZGVzKSB8fFxuICAgICAgICAgICAgICAgIHF1ZXJ5QnV0dG9uVGV4dChvcHRpb25zTWFuYWdlci5vdmVycmlkZXMpIHx8IC8vIGNvbnN0cnVjdG9yLXNwZWNpZmllZCBidXR0b25UZXh0IGxvb2t1cCBoYXNoIHRha2VzIHByZWNlZGVuY2VcbiAgICAgICAgICAgICAgICB2aWV3RGVmLm92ZXJyaWRlcy5idXR0b25UZXh0LFxuICAgICAgICAgICAgYnV0dG9uVGV4dERlZmF1bHQ6IHF1ZXJ5QnV0dG9uVGV4dChvcHRpb25zTWFuYWdlci5sb2NhbGVEZWZhdWx0cykgfHxcbiAgICAgICAgICAgICAgICBxdWVyeUJ1dHRvblRleHQob3B0aW9uc01hbmFnZXIuZGlyRGVmYXVsdHMpIHx8XG4gICAgICAgICAgICAgICAgdmlld0RlZi5kZWZhdWx0cy5idXR0b25UZXh0IHx8XG4gICAgICAgICAgICAgICAgcXVlcnlCdXR0b25UZXh0KGdsb2JhbERlZmF1bHRzKSB8fFxuICAgICAgICAgICAgICAgIHZpZXdEZWYudHlwZSAvLyBmYWxsIGJhY2sgdG8gZ2l2ZW4gdmlldyBuYW1lXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIFRvb2xiYXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhUb29sYmFyLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBUb29sYmFyKGV4dHJhQ2xhc3NOYW1lKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICAgICAgX3RoaXMuX3JlbmRlckxheW91dCA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMucmVuZGVyTGF5b3V0LCBfdGhpcy51bnJlbmRlckxheW91dCk7XG4gICAgICAgICAgICBfdGhpcy5fdXBkYXRlVGl0bGUgPSBtZW1vaXplUmVuZGVyaW5nKF90aGlzLnVwZGF0ZVRpdGxlLCBudWxsLCBbX3RoaXMuX3JlbmRlckxheW91dF0pO1xuICAgICAgICAgICAgX3RoaXMuX3VwZGF0ZUFjdGl2ZUJ1dHRvbiA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMudXBkYXRlQWN0aXZlQnV0dG9uLCBudWxsLCBbX3RoaXMuX3JlbmRlckxheW91dF0pO1xuICAgICAgICAgICAgX3RoaXMuX3VwZGF0ZVRvZGF5ID0gbWVtb2l6ZVJlbmRlcmluZyhfdGhpcy51cGRhdGVUb2RheSwgbnVsbCwgW190aGlzLl9yZW5kZXJMYXlvdXRdKTtcbiAgICAgICAgICAgIF90aGlzLl91cGRhdGVQcmV2ID0gbWVtb2l6ZVJlbmRlcmluZyhfdGhpcy51cGRhdGVQcmV2LCBudWxsLCBbX3RoaXMuX3JlbmRlckxheW91dF0pO1xuICAgICAgICAgICAgX3RoaXMuX3VwZGF0ZU5leHQgPSBtZW1vaXplUmVuZGVyaW5nKF90aGlzLnVwZGF0ZU5leHQsIG51bGwsIFtfdGhpcy5fcmVuZGVyTGF5b3V0XSk7XG4gICAgICAgICAgICBfdGhpcy5lbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAnZmMtdG9vbGJhciAnICsgZXh0cmFDbGFzc05hbWUgfSk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgVG9vbGJhci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyTGF5b3V0LnVucmVuZGVyKCk7IC8vIHNob3VsZCB1bnJlbmRlciBldmVyeXRoaW5nIGVsc2VcbiAgICAgICAgICAgIHJlbW92ZUVsZW1lbnQodGhpcy5lbCk7XG4gICAgICAgIH07XG4gICAgICAgIFRvb2xiYXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyTGF5b3V0KHByb3BzLmxheW91dCk7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVUaXRsZShwcm9wcy50aXRsZSk7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVBY3RpdmVCdXR0b24ocHJvcHMuYWN0aXZlQnV0dG9uKTtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVRvZGF5KHByb3BzLmlzVG9kYXlFbmFibGVkKTtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVByZXYocHJvcHMuaXNQcmV2RW5hYmxlZCk7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVOZXh0KHByb3BzLmlzTmV4dEVuYWJsZWQpO1xuICAgICAgICB9O1xuICAgICAgICBUb29sYmFyLnByb3RvdHlwZS5yZW5kZXJMYXlvdXQgPSBmdW5jdGlvbiAobGF5b3V0KSB7XG4gICAgICAgICAgICB2YXIgZWwgPSB0aGlzLmVsO1xuICAgICAgICAgICAgdGhpcy52aWV3c1dpdGhCdXR0b25zID0gW107XG4gICAgICAgICAgICBhcHBlbmRUb0VsZW1lbnQoZWwsIHRoaXMucmVuZGVyU2VjdGlvbignbGVmdCcsIGxheW91dC5sZWZ0KSk7XG4gICAgICAgICAgICBhcHBlbmRUb0VsZW1lbnQoZWwsIHRoaXMucmVuZGVyU2VjdGlvbignY2VudGVyJywgbGF5b3V0LmNlbnRlcikpO1xuICAgICAgICAgICAgYXBwZW5kVG9FbGVtZW50KGVsLCB0aGlzLnJlbmRlclNlY3Rpb24oJ3JpZ2h0JywgbGF5b3V0LnJpZ2h0KSk7XG4gICAgICAgIH07XG4gICAgICAgIFRvb2xiYXIucHJvdG90eXBlLnVucmVuZGVyTGF5b3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5lbC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgfTtcbiAgICAgICAgVG9vbGJhci5wcm90b3R5cGUucmVuZGVyU2VjdGlvbiA9IGZ1bmN0aW9uIChwb3NpdGlvbiwgYnV0dG9uU3RyKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5jb250ZXh0LCB0aGVtZSA9IF9hLnRoZW1lLCBjYWxlbmRhciA9IF9hLmNhbGVuZGFyO1xuICAgICAgICAgICAgdmFyIG9wdGlvbnNNYW5hZ2VyID0gY2FsZW5kYXIub3B0aW9uc01hbmFnZXI7XG4gICAgICAgICAgICB2YXIgdmlld1NwZWNzID0gY2FsZW5kYXIudmlld1NwZWNzO1xuICAgICAgICAgICAgdmFyIHNlY3Rpb25FbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAnZmMtJyArIHBvc2l0aW9uIH0pO1xuICAgICAgICAgICAgdmFyIGNhbGVuZGFyQ3VzdG9tQnV0dG9ucyA9IG9wdGlvbnNNYW5hZ2VyLmNvbXB1dGVkLmN1c3RvbUJ1dHRvbnMgfHwge307XG4gICAgICAgICAgICB2YXIgY2FsZW5kYXJCdXR0b25UZXh0T3ZlcnJpZGVzID0gb3B0aW9uc01hbmFnZXIub3ZlcnJpZGVzLmJ1dHRvblRleHQgfHwge307XG4gICAgICAgICAgICB2YXIgY2FsZW5kYXJCdXR0b25UZXh0ID0gb3B0aW9uc01hbmFnZXIuY29tcHV0ZWQuYnV0dG9uVGV4dCB8fCB7fTtcbiAgICAgICAgICAgIGlmIChidXR0b25TdHIpIHtcbiAgICAgICAgICAgICAgICBidXR0b25TdHIuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChidXR0b25Hcm91cFN0ciwgaSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXBDaGlsZHJlbiA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaXNPbmx5QnV0dG9ucyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBncm91cEVsO1xuICAgICAgICAgICAgICAgICAgICBidXR0b25Hcm91cFN0ci5zcGxpdCgnLCcpLmZvckVhY2goZnVuY3Rpb24gKGJ1dHRvbk5hbWUsIGopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXN0b21CdXR0b25Qcm9wcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2aWV3U3BlYztcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidXR0b25DbGljaztcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidXR0b25JY29uOyAvLyBvbmx5IG9uZSBvZiB0aGVzZSB3aWxsIGJlIHNldFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1dHRvblRleHQ7IC8vIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnV0dG9uSW5uZXJIdG1sO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1dHRvbkNsYXNzZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnV0dG9uRWw7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnV0dG9uQXJpYUF0dHI7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnV0dG9uTmFtZSA9PT0gJ3RpdGxlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwQ2hpbGRyZW4ucHVzaChodG1sVG9FbGVtZW50KCc8aDI+Jm5ic3A7PC9oMj4nKSk7IC8vIHdlIGFsd2F5cyB3YW50IGl0IHRvIHRha2UgdXAgaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNPbmx5QnV0dG9ucyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChjdXN0b21CdXR0b25Qcm9wcyA9IGNhbGVuZGFyQ3VzdG9tQnV0dG9uc1tidXR0b25OYW1lXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uQ2xpY2sgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXN0b21CdXR0b25Qcm9wcy5jbGljaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUJ1dHRvblByb3BzLmNsaWNrLmNhbGwoYnV0dG9uRWwsIGV2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGJ1dHRvbkljb24gPSB0aGVtZS5nZXRDdXN0b21CdXR0b25JY29uQ2xhc3MoY3VzdG9tQnV0dG9uUHJvcHMpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGJ1dHRvbkljb24gPSB0aGVtZS5nZXRJY29uQ2xhc3MoYnV0dG9uTmFtZSkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYnV0dG9uVGV4dCA9IGN1c3RvbUJ1dHRvblByb3BzLnRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgodmlld1NwZWMgPSB2aWV3U3BlY3NbYnV0dG9uTmFtZV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnZpZXdzV2l0aEJ1dHRvbnMucHVzaChidXR0b25OYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxlbmRhci5jaGFuZ2VWaWV3KGJ1dHRvbk5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYnV0dG9uVGV4dCA9IHZpZXdTcGVjLmJ1dHRvblRleHRPdmVycmlkZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChidXR0b25JY29uID0gdGhlbWUuZ2V0SWNvbkNsYXNzKGJ1dHRvbk5hbWUpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGJ1dHRvblRleHQgPSB2aWV3U3BlYy5idXR0b25UZXh0RGVmYXVsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNhbGVuZGFyW2J1dHRvbk5hbWVdKSB7IC8vIGEgY2FsZW5kYXIgbWV0aG9kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbkNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXJbYnV0dG9uTmFtZV0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGJ1dHRvblRleHQgPSBjYWxlbmRhckJ1dHRvblRleHRPdmVycmlkZXNbYnV0dG9uTmFtZV0pIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYnV0dG9uSWNvbiA9IHRoZW1lLmdldEljb25DbGFzcyhidXR0b25OYW1lKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChidXR0b25UZXh0ID0gY2FsZW5kYXJCdXR0b25UZXh0W2J1dHRvbk5hbWVdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICBeIGV2ZXJ5dGhpbmcgZWxzZSBpcyBjb25zaWRlcmVkIGRlZmF1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbkNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbkNsYXNzZXMgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZmMtJyArIGJ1dHRvbk5hbWUgKyAnLWJ1dHRvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVtZS5nZXRDbGFzcygnYnV0dG9uJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvblRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbklubmVySHRtbCA9IGh0bWxFc2NhcGUoYnV0dG9uVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25BcmlhQXR0ciA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbkljb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbklubmVySHRtbCA9IFwiPHNwYW4gY2xhc3M9J1wiICsgYnV0dG9uSWNvbiArIFwiJz48L3NwYW4+XCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25BcmlhQXR0ciA9ICcgYXJpYS1sYWJlbD1cIicgKyBidXR0b25OYW1lICsgJ1wiJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25FbCA9IGh0bWxUb0VsZW1lbnQoLy8gdHlwZT1cImJ1dHRvblwiIHNvIHRoYXQgaXQgZG9lc24ndCBzdWJtaXQgYSBmb3JtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cIicgKyBidXR0b25DbGFzc2VzLmpvaW4oJyAnKSArICdcIicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uQXJpYUF0dHIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJz4nICsgYnV0dG9uSW5uZXJIdG1sICsgJzwvYnV0dG9uPicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b25FbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGJ1dHRvbkNsaWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBDaGlsZHJlbi5wdXNoKGJ1dHRvbkVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ3JvdXBDaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnV0dG9uR3JvdXBDbGFzc05hbWUgPSB0aGVtZS5nZXRDbGFzcygnYnV0dG9uR3JvdXAnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc09ubHlCdXR0b25zICYmIGJ1dHRvbkdyb3VwQ2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBFbC5jbGFzc0xpc3QuYWRkKGJ1dHRvbkdyb3VwQ2xhc3NOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZFRvRWxlbWVudChncm91cEVsLCBncm91cENoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb25FbC5hcHBlbmRDaGlsZChncm91cEVsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZFRvRWxlbWVudChzZWN0aW9uRWwsIGdyb3VwQ2hpbGRyZW4pOyAvLyAxIG9yIDAgY2hpbGRyZW5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNlY3Rpb25FbDtcbiAgICAgICAgfTtcbiAgICAgICAgVG9vbGJhci5wcm90b3R5cGUudXBkYXRlVG9kYXkgPSBmdW5jdGlvbiAoaXNUb2RheUVuYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlQnV0dG9uRW5hYmxlZCgndG9kYXknLCBpc1RvZGF5RW5hYmxlZCk7XG4gICAgICAgIH07XG4gICAgICAgIFRvb2xiYXIucHJvdG90eXBlLnVwZGF0ZVByZXYgPSBmdW5jdGlvbiAoaXNQcmV2RW5hYmxlZCkge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVCdXR0b25FbmFibGVkKCdwcmV2JywgaXNQcmV2RW5hYmxlZCk7XG4gICAgICAgIH07XG4gICAgICAgIFRvb2xiYXIucHJvdG90eXBlLnVwZGF0ZU5leHQgPSBmdW5jdGlvbiAoaXNOZXh0RW5hYmxlZCkge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVCdXR0b25FbmFibGVkKCduZXh0JywgaXNOZXh0RW5hYmxlZCk7XG4gICAgICAgIH07XG4gICAgICAgIFRvb2xiYXIucHJvdG90eXBlLnVwZGF0ZVRpdGxlID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgICAgICAgIGZpbmRFbGVtZW50cyh0aGlzLmVsLCAnaDInKS5mb3JFYWNoKGZ1bmN0aW9uICh0aXRsZUVsKSB7XG4gICAgICAgICAgICAgICAgdGl0bGVFbC5pbm5lclRleHQgPSB0ZXh0O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIFRvb2xiYXIucHJvdG90eXBlLnVwZGF0ZUFjdGl2ZUJ1dHRvbiA9IGZ1bmN0aW9uIChidXR0b25OYW1lKSB7XG4gICAgICAgICAgICB2YXIgdGhlbWUgPSB0aGlzLmNvbnRleHQudGhlbWU7XG4gICAgICAgICAgICB2YXIgY2xhc3NOYW1lID0gdGhlbWUuZ2V0Q2xhc3MoJ2J1dHRvbkFjdGl2ZScpO1xuICAgICAgICAgICAgZmluZEVsZW1lbnRzKHRoaXMuZWwsICdidXR0b24nKS5mb3JFYWNoKGZ1bmN0aW9uIChidXR0b25FbCkge1xuICAgICAgICAgICAgICAgIGlmIChidXR0b25OYW1lICYmIGJ1dHRvbkVsLmNsYXNzTGlzdC5jb250YWlucygnZmMtJyArIGJ1dHRvbk5hbWUgKyAnLWJ1dHRvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbkVsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbkVsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgVG9vbGJhci5wcm90b3R5cGUudG9nZ2xlQnV0dG9uRW5hYmxlZCA9IGZ1bmN0aW9uIChidXR0b25OYW1lLCBib29sKSB7XG4gICAgICAgICAgICBmaW5kRWxlbWVudHModGhpcy5lbCwgJy5mYy0nICsgYnV0dG9uTmFtZSArICctYnV0dG9uJykuZm9yRWFjaChmdW5jdGlvbiAoYnV0dG9uRWwpIHtcbiAgICAgICAgICAgICAgICBidXR0b25FbC5kaXNhYmxlZCA9ICFib29sO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBUb29sYmFyO1xuICAgIH0oQ29tcG9uZW50KSk7XG5cbiAgICB2YXIgQ2FsZW5kYXJDb21wb25lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhDYWxlbmRhckNvbXBvbmVudCwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gQ2FsZW5kYXJDb21wb25lbnQoZWwpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgICAgICBfdGhpcy5lbENsYXNzTmFtZXMgPSBbXTtcbiAgICAgICAgICAgIF90aGlzLnJlbmRlclNrZWxldG9uID0gbWVtb2l6ZVJlbmRlcmluZyhfdGhpcy5fcmVuZGVyU2tlbGV0b24sIF90aGlzLl91bnJlbmRlclNrZWxldG9uKTtcbiAgICAgICAgICAgIF90aGlzLnJlbmRlclRvb2xiYXJzID0gbWVtb2l6ZVJlbmRlcmluZyhfdGhpcy5fcmVuZGVyVG9vbGJhcnMsIF90aGlzLl91bnJlbmRlclRvb2xiYXJzLCBbX3RoaXMucmVuZGVyU2tlbGV0b25dKTtcbiAgICAgICAgICAgIF90aGlzLmJ1aWxkQ29tcG9uZW50Q29udGV4dCA9IG1lbW9pemUoYnVpbGRDb21wb25lbnRDb250ZXh0KTtcbiAgICAgICAgICAgIF90aGlzLmJ1aWxkVmlld1Byb3BUcmFuc2Zvcm1lcnMgPSBtZW1vaXplKGJ1aWxkVmlld1Byb3BUcmFuc2Zvcm1lcnMpO1xuICAgICAgICAgICAgX3RoaXMuZWwgPSBlbDtcbiAgICAgICAgICAgIF90aGlzLmNvbXB1dGVUaXRsZSA9IG1lbW9pemUoY29tcHV0ZVRpdGxlKTtcbiAgICAgICAgICAgIF90aGlzLnBhcnNlQnVzaW5lc3NIb3VycyA9IG1lbW9pemUoZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlQnVzaW5lc3NIb3VycyhpbnB1dCwgX3RoaXMuY29udGV4dC5jYWxlbmRhcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuICAgICAgICBDYWxlbmRhckNvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgICAgICB0aGlzLmZyZWV6ZUhlaWdodCgpO1xuICAgICAgICAgICAgdmFyIHRpdGxlID0gdGhpcy5jb21wdXRlVGl0bGUocHJvcHMuZGF0ZVByb2ZpbGUsIHByb3BzLnZpZXdTcGVjLm9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJTa2VsZXRvbihjb250ZXh0KTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyVG9vbGJhcnMocHJvcHMudmlld1NwZWMsIHByb3BzLmRhdGVQcm9maWxlLCBwcm9wcy5jdXJyZW50RGF0ZSwgdGl0bGUpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJWaWV3KHByb3BzLCB0aXRsZSk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNpemUoKTtcbiAgICAgICAgICAgIHRoaXMudGhhd0hlaWdodCgpO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhckNvbXBvbmVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhlYWRlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmZvb3Rlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9vdGVyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVuZGVyU2tlbGV0b24udW5yZW5kZXIoKTsgLy8gd2lsbCBjYWxsIGRlc3Ryb3lWaWV3XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXJDb21wb25lbnQucHJvdG90eXBlLl9yZW5kZXJTa2VsZXRvbiA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUVsQ2xhc3NOYW1lcyhjb250ZXh0KTtcbiAgICAgICAgICAgIHByZXBlbmRUb0VsZW1lbnQodGhpcy5lbCwgdGhpcy5jb250ZW50RWwgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogJ2ZjLXZpZXctY29udGFpbmVyJyB9KSk7XG4gICAgICAgICAgICB2YXIgY2FsZW5kYXIgPSBjb250ZXh0LmNhbGVuZGFyO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGNhbGVuZGFyLnBsdWdpblN5c3RlbS5ob29rcy52aWV3Q29udGFpbmVyTW9kaWZpZXJzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBtb2RpZnlWaWV3Q29udGFpbmVyID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgIG1vZGlmeVZpZXdDb250YWluZXIodGhpcy5jb250ZW50RWwsIGNhbGVuZGFyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXJDb21wb25lbnQucHJvdG90eXBlLl91bnJlbmRlclNrZWxldG9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gd2VpcmQgdG8gaGF2ZSB0aGlzIGhlcmVcbiAgICAgICAgICAgIGlmICh0aGlzLnZpZXcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNhdmVkU2Nyb2xsID0gdGhpcy52aWV3LnF1ZXJ5U2Nyb2xsKCk7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVtb3ZlRWxlbWVudCh0aGlzLmNvbnRlbnRFbCk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUVsQ2xhc3NOYW1lcygpO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhckNvbXBvbmVudC5wcm90b3R5cGUucmVtb3ZlRWxDbGFzc05hbWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNsYXNzTGlzdCA9IHRoaXMuZWwuY2xhc3NMaXN0O1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuZWxDbGFzc05hbWVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBjbGFzc05hbWUgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lbENsYXNzTmFtZXMgPSBbXTtcbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXJDb21wb25lbnQucHJvdG90eXBlLnVwZGF0ZUVsQ2xhc3NOYW1lcyA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUVsQ2xhc3NOYW1lcygpO1xuICAgICAgICAgICAgdmFyIHRoZW1lID0gY29udGV4dC50aGVtZSwgb3B0aW9ucyA9IGNvbnRleHQub3B0aW9ucztcbiAgICAgICAgICAgIHRoaXMuZWxDbGFzc05hbWVzID0gW1xuICAgICAgICAgICAgICAgICdmYycsXG4gICAgICAgICAgICAgICAgJ2ZjLScgKyBvcHRpb25zLmRpcixcbiAgICAgICAgICAgICAgICB0aGVtZS5nZXRDbGFzcygnd2lkZ2V0JylcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICB2YXIgY2xhc3NMaXN0ID0gdGhpcy5lbC5jbGFzc0xpc3Q7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5lbENsYXNzTmFtZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNsYXNzTmFtZSA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICBjbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyQ29tcG9uZW50LnByb3RvdHlwZS5fcmVuZGVyVG9vbGJhcnMgPSBmdW5jdGlvbiAodmlld1NwZWMsIGRhdGVQcm9maWxlLCBjdXJyZW50RGF0ZSwgdGl0bGUpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIGNvbnRleHQgPSBfYS5jb250ZXh0LCBoZWFkZXIgPSBfYS5oZWFkZXIsIGZvb3RlciA9IF9hLmZvb3RlcjtcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gY29udGV4dC5vcHRpb25zLCBjYWxlbmRhciA9IGNvbnRleHQuY2FsZW5kYXI7XG4gICAgICAgICAgICB2YXIgaGVhZGVyTGF5b3V0ID0gb3B0aW9ucy5oZWFkZXI7XG4gICAgICAgICAgICB2YXIgZm9vdGVyTGF5b3V0ID0gb3B0aW9ucy5mb290ZXI7XG4gICAgICAgICAgICB2YXIgZGF0ZVByb2ZpbGVHZW5lcmF0b3IgPSB0aGlzLnByb3BzLmRhdGVQcm9maWxlR2VuZXJhdG9yO1xuICAgICAgICAgICAgdmFyIG5vdyA9IGNhbGVuZGFyLmdldE5vdygpO1xuICAgICAgICAgICAgdmFyIHRvZGF5SW5mbyA9IGRhdGVQcm9maWxlR2VuZXJhdG9yLmJ1aWxkKG5vdyk7XG4gICAgICAgICAgICB2YXIgcHJldkluZm8gPSBkYXRlUHJvZmlsZUdlbmVyYXRvci5idWlsZFByZXYoZGF0ZVByb2ZpbGUsIGN1cnJlbnREYXRlKTtcbiAgICAgICAgICAgIHZhciBuZXh0SW5mbyA9IGRhdGVQcm9maWxlR2VuZXJhdG9yLmJ1aWxkTmV4dChkYXRlUHJvZmlsZSwgY3VycmVudERhdGUpO1xuICAgICAgICAgICAgdmFyIHRvb2xiYXJQcm9wcyA9IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUsXG4gICAgICAgICAgICAgICAgYWN0aXZlQnV0dG9uOiB2aWV3U3BlYy50eXBlLFxuICAgICAgICAgICAgICAgIGlzVG9kYXlFbmFibGVkOiB0b2RheUluZm8uaXNWYWxpZCAmJiAhcmFuZ2VDb250YWluc01hcmtlcihkYXRlUHJvZmlsZS5jdXJyZW50UmFuZ2UsIG5vdyksXG4gICAgICAgICAgICAgICAgaXNQcmV2RW5hYmxlZDogcHJldkluZm8uaXNWYWxpZCxcbiAgICAgICAgICAgICAgICBpc05leHRFbmFibGVkOiBuZXh0SW5mby5pc1ZhbGlkXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGhlYWRlckxheW91dCkge1xuICAgICAgICAgICAgICAgIGlmICghaGVhZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlciA9IHRoaXMuaGVhZGVyID0gbmV3IFRvb2xiYXIoJ2ZjLWhlYWRlci10b29sYmFyJyk7XG4gICAgICAgICAgICAgICAgICAgIHByZXBlbmRUb0VsZW1lbnQodGhpcy5lbCwgaGVhZGVyLmVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGVhZGVyLnJlY2VpdmVQcm9wcyhfX2Fzc2lnbih7IGxheW91dDogaGVhZGVyTGF5b3V0IH0sIHRvb2xiYXJQcm9wcyksIGNvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaGVhZGVyKSB7XG4gICAgICAgICAgICAgICAgaGVhZGVyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICBoZWFkZXIgPSB0aGlzLmhlYWRlciA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZm9vdGVyTGF5b3V0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFmb290ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9vdGVyID0gdGhpcy5mb290ZXIgPSBuZXcgVG9vbGJhcignZmMtZm9vdGVyLXRvb2xiYXInKTtcbiAgICAgICAgICAgICAgICAgICAgYXBwZW5kVG9FbGVtZW50KHRoaXMuZWwsIGZvb3Rlci5lbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvb3Rlci5yZWNlaXZlUHJvcHMoX19hc3NpZ24oeyBsYXlvdXQ6IGZvb3RlckxheW91dCB9LCB0b29sYmFyUHJvcHMpLCBjb250ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGZvb3Rlcikge1xuICAgICAgICAgICAgICAgIGZvb3Rlci5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgZm9vdGVyID0gdGhpcy5mb290ZXIgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhckNvbXBvbmVudC5wcm90b3R5cGUuX3VucmVuZGVyVG9vbGJhcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5oZWFkZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhlYWRlci5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5oZWFkZXIgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuZm9vdGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb290ZXIuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuZm9vdGVyID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXJDb21wb25lbnQucHJvdG90eXBlLnJlbmRlclZpZXcgPSBmdW5jdGlvbiAocHJvcHMsIHRpdGxlKSB7XG4gICAgICAgICAgICB2YXIgdmlldyA9IHRoaXMudmlldztcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMuY29udGV4dCwgY2FsZW5kYXIgPSBfYS5jYWxlbmRhciwgb3B0aW9ucyA9IF9hLm9wdGlvbnM7XG4gICAgICAgICAgICB2YXIgdmlld1NwZWMgPSBwcm9wcy52aWV3U3BlYywgZGF0ZVByb2ZpbGVHZW5lcmF0b3IgPSBwcm9wcy5kYXRlUHJvZmlsZUdlbmVyYXRvcjtcbiAgICAgICAgICAgIGlmICghdmlldyB8fCB2aWV3LnZpZXdTcGVjICE9PSB2aWV3U3BlYykge1xuICAgICAgICAgICAgICAgIGlmICh2aWV3KSB7XG4gICAgICAgICAgICAgICAgICAgIHZpZXcuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2aWV3ID0gdGhpcy52aWV3ID0gbmV3IHZpZXdTcGVjWydjbGFzcyddKHZpZXdTcGVjLCB0aGlzLmNvbnRlbnRFbCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2F2ZWRTY3JvbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmlldy5hZGRTY3JvbGwodGhpcy5zYXZlZFNjcm9sbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZWRTY3JvbGwgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZpZXcudGl0bGUgPSB0aXRsZTsgLy8gZm9yIHRoZSBBUElcbiAgICAgICAgICAgIHZhciB2aWV3UHJvcHMgPSB7XG4gICAgICAgICAgICAgICAgZGF0ZVByb2ZpbGVHZW5lcmF0b3I6IGRhdGVQcm9maWxlR2VuZXJhdG9yLFxuICAgICAgICAgICAgICAgIGRhdGVQcm9maWxlOiBwcm9wcy5kYXRlUHJvZmlsZSxcbiAgICAgICAgICAgICAgICBidXNpbmVzc0hvdXJzOiB0aGlzLnBhcnNlQnVzaW5lc3NIb3Vycyh2aWV3U3BlYy5vcHRpb25zLmJ1c2luZXNzSG91cnMpLFxuICAgICAgICAgICAgICAgIGV2ZW50U3RvcmU6IHByb3BzLmV2ZW50U3RvcmUsXG4gICAgICAgICAgICAgICAgZXZlbnRVaUJhc2VzOiBwcm9wcy5ldmVudFVpQmFzZXMsXG4gICAgICAgICAgICAgICAgZGF0ZVNlbGVjdGlvbjogcHJvcHMuZGF0ZVNlbGVjdGlvbixcbiAgICAgICAgICAgICAgICBldmVudFNlbGVjdGlvbjogcHJvcHMuZXZlbnRTZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgZXZlbnREcmFnOiBwcm9wcy5ldmVudERyYWcsXG4gICAgICAgICAgICAgICAgZXZlbnRSZXNpemU6IHByb3BzLmV2ZW50UmVzaXplXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIHRyYW5zZm9ybWVycyA9IHRoaXMuYnVpbGRWaWV3UHJvcFRyYW5zZm9ybWVycyhjYWxlbmRhci5wbHVnaW5TeXN0ZW0uaG9va3Mudmlld1Byb3BzVHJhbnNmb3JtZXJzKTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgdHJhbnNmb3JtZXJzXzEgPSB0cmFuc2Zvcm1lcnM7IF9pIDwgdHJhbnNmb3JtZXJzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRyYW5zZm9ybWVyID0gdHJhbnNmb3JtZXJzXzFbX2ldO1xuICAgICAgICAgICAgICAgIF9fYXNzaWduKHZpZXdQcm9wcywgdHJhbnNmb3JtZXIudHJhbnNmb3JtKHZpZXdQcm9wcywgdmlld1NwZWMsIHByb3BzLCBvcHRpb25zKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2aWV3LnJlY2VpdmVQcm9wcyh2aWV3UHJvcHMsIHRoaXMuYnVpbGRDb21wb25lbnRDb250ZXh0KHRoaXMuY29udGV4dCwgdmlld1NwZWMsIHZpZXcpKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gU2l6aW5nXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIENhbGVuZGFyQ29tcG9uZW50LnByb3RvdHlwZS51cGRhdGVTaXplID0gZnVuY3Rpb24gKGlzUmVzaXplKSB7XG4gICAgICAgICAgICBpZiAoaXNSZXNpemUgPT09IHZvaWQgMCkgeyBpc1Jlc2l6ZSA9IGZhbHNlOyB9XG4gICAgICAgICAgICB2YXIgdmlldyA9IHRoaXMudmlldztcbiAgICAgICAgICAgIGlmICghdmlldykge1xuICAgICAgICAgICAgICAgIHJldHVybjsgLy8gd2h5P1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzUmVzaXplIHx8IHRoaXMuaXNIZWlnaHRBdXRvID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXB1dGVIZWlnaHRWYXJzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2aWV3LnVwZGF0ZVNpemUoaXNSZXNpemUsIHRoaXMudmlld0hlaWdodCwgdGhpcy5pc0hlaWdodEF1dG8pO1xuICAgICAgICAgICAgdmlldy51cGRhdGVOb3dJbmRpY2F0b3IoKTsgLy8gd2UgbmVlZCB0byBndWFyYW50ZWUgdGhpcyB3aWxsIHJ1biBhZnRlciB1cGRhdGVTaXplXG4gICAgICAgICAgICB2aWV3LnBvcFNjcm9sbChpc1Jlc2l6ZSk7XG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyQ29tcG9uZW50LnByb3RvdHlwZS5jb21wdXRlSGVpZ2h0VmFycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjYWxlbmRhciA9IHRoaXMuY29udGV4dC5jYWxlbmRhcjsgLy8geXVjay4gbmVlZCB0byBoYW5kbGUgZHluYW1pYyBvcHRpb25zXG4gICAgICAgICAgICB2YXIgaGVpZ2h0SW5wdXQgPSBjYWxlbmRhci5vcHQoJ2hlaWdodCcpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnRIZWlnaHRJbnB1dCA9IGNhbGVuZGFyLm9wdCgnY29udGVudEhlaWdodCcpO1xuICAgICAgICAgICAgdGhpcy5pc0hlaWdodEF1dG8gPSBoZWlnaHRJbnB1dCA9PT0gJ2F1dG8nIHx8IGNvbnRlbnRIZWlnaHRJbnB1dCA9PT0gJ2F1dG8nO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50SGVpZ2h0SW5wdXQgPT09ICdudW1iZXInKSB7IC8vIGV4aXN0cyBhbmQgbm90ICdhdXRvJ1xuICAgICAgICAgICAgICAgIHRoaXMudmlld0hlaWdodCA9IGNvbnRlbnRIZWlnaHRJbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBjb250ZW50SGVpZ2h0SW5wdXQgPT09ICdmdW5jdGlvbicpIHsgLy8gZXhpc3RzIGFuZCBpcyBhIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3SGVpZ2h0ID0gY29udGVudEhlaWdodElucHV0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgaGVpZ2h0SW5wdXQgPT09ICdudW1iZXInKSB7IC8vIGV4aXN0cyBhbmQgbm90ICdhdXRvJ1xuICAgICAgICAgICAgICAgIHRoaXMudmlld0hlaWdodCA9IGhlaWdodElucHV0IC0gdGhpcy5xdWVyeVRvb2xiYXJzSGVpZ2h0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgaGVpZ2h0SW5wdXQgPT09ICdmdW5jdGlvbicpIHsgLy8gZXhpc3RzIGFuZCBpcyBhIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3SGVpZ2h0ID0gaGVpZ2h0SW5wdXQoKSAtIHRoaXMucXVlcnlUb29sYmFyc0hlaWdodCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaGVpZ2h0SW5wdXQgPT09ICdwYXJlbnQnKSB7IC8vIHNldCB0byBoZWlnaHQgb2YgcGFyZW50IGVsZW1lbnRcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50RWwgPSB0aGlzLmVsLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3SGVpZ2h0ID0gcGFyZW50RWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IC0gdGhpcy5xdWVyeVRvb2xiYXJzSGVpZ2h0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdIZWlnaHQgPSBNYXRoLnJvdW5kKHRoaXMuY29udGVudEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIC9cbiAgICAgICAgICAgICAgICAgICAgTWF0aC5tYXgoY2FsZW5kYXIub3B0KCdhc3BlY3RSYXRpbycpLCAuNSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhckNvbXBvbmVudC5wcm90b3R5cGUucXVlcnlUb29sYmFyc0hlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBoZWlnaHQgPSAwO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGVhZGVyKSB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ICs9IGNvbXB1dGVIZWlnaHRBbmRNYXJnaW5zKHRoaXMuaGVhZGVyLmVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmZvb3Rlcikge1xuICAgICAgICAgICAgICAgIGhlaWdodCArPSBjb21wdXRlSGVpZ2h0QW5kTWFyZ2lucyh0aGlzLmZvb3Rlci5lbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaGVpZ2h0O1xuICAgICAgICB9O1xuICAgICAgICAvLyBIZWlnaHQgXCJGcmVlemluZ1wiXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIENhbGVuZGFyQ29tcG9uZW50LnByb3RvdHlwZS5mcmVlemVIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBhcHBseVN0eWxlKHRoaXMuZWwsIHtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyQ29tcG9uZW50LnByb3RvdHlwZS50aGF3SGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYXBwbHlTdHlsZSh0aGlzLmVsLCB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnJyxcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogJydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gQ2FsZW5kYXJDb21wb25lbnQ7XG4gICAgfShDb21wb25lbnQpKTtcbiAgICAvLyBUaXRsZSBhbmQgRGF0ZSBGb3JtYXR0aW5nXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBDb21wdXRlcyB3aGF0IHRoZSB0aXRsZSBhdCB0aGUgdG9wIG9mIHRoZSBjYWxlbmRhciBzaG91bGQgYmUgZm9yIHRoaXMgdmlld1xuICAgIGZ1bmN0aW9uIGNvbXB1dGVUaXRsZShkYXRlUHJvZmlsZSwgdmlld09wdGlvbnMpIHtcbiAgICAgICAgdmFyIHJhbmdlO1xuICAgICAgICAvLyBmb3Igdmlld3MgdGhhdCBzcGFuIGEgbGFyZ2UgdW5pdCBvZiB0aW1lLCBzaG93IHRoZSBwcm9wZXIgaW50ZXJ2YWwsIGlnbm9yaW5nIHN0cmF5IGRheXMgYmVmb3JlIGFuZCBhZnRlclxuICAgICAgICBpZiAoL14oeWVhcnxtb250aCkkLy50ZXN0KGRhdGVQcm9maWxlLmN1cnJlbnRSYW5nZVVuaXQpKSB7XG4gICAgICAgICAgICByYW5nZSA9IGRhdGVQcm9maWxlLmN1cnJlbnRSYW5nZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHsgLy8gZm9yIGRheSB1bml0cyBvciBzbWFsbGVyLCB1c2UgdGhlIGFjdHVhbCBkYXkgcmFuZ2VcbiAgICAgICAgICAgIHJhbmdlID0gZGF0ZVByb2ZpbGUuYWN0aXZlUmFuZ2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5kYXRlRW52LmZvcm1hdFJhbmdlKHJhbmdlLnN0YXJ0LCByYW5nZS5lbmQsIGNyZWF0ZUZvcm1hdHRlcih2aWV3T3B0aW9ucy50aXRsZUZvcm1hdCB8fCBjb21wdXRlVGl0bGVGb3JtYXQoZGF0ZVByb2ZpbGUpLCB2aWV3T3B0aW9ucy50aXRsZVJhbmdlU2VwYXJhdG9yKSwgeyBpc0VuZEV4Y2x1c2l2ZTogZGF0ZVByb2ZpbGUuaXNSYW5nZUFsbERheSB9KTtcbiAgICB9XG4gICAgLy8gR2VuZXJhdGVzIHRoZSBmb3JtYXQgc3RyaW5nIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIHRpdGxlIGZvciB0aGUgY3VycmVudCBkYXRlIHJhbmdlLlxuICAgIC8vIEF0dGVtcHRzIHRvIGNvbXB1dGUgdGhlIG1vc3QgYXBwcm9wcmlhdGUgZm9ybWF0IGlmIG5vdCBleHBsaWNpdGx5IHNwZWNpZmllZCB3aXRoIGB0aXRsZUZvcm1hdGAuXG4gICAgZnVuY3Rpb24gY29tcHV0ZVRpdGxlRm9ybWF0KGRhdGVQcm9maWxlKSB7XG4gICAgICAgIHZhciBjdXJyZW50UmFuZ2VVbml0ID0gZGF0ZVByb2ZpbGUuY3VycmVudFJhbmdlVW5pdDtcbiAgICAgICAgaWYgKGN1cnJlbnRSYW5nZVVuaXQgPT09ICd5ZWFyJykge1xuICAgICAgICAgICAgcmV0dXJuIHsgeWVhcjogJ251bWVyaWMnIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY3VycmVudFJhbmdlVW5pdCA9PT0gJ21vbnRoJykge1xuICAgICAgICAgICAgcmV0dXJuIHsgeWVhcjogJ251bWVyaWMnLCBtb250aDogJ2xvbmcnIH07IC8vIGxpa2UgXCJTZXB0ZW1iZXIgMjAxNFwiXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgZGF5cyA9IGRpZmZXaG9sZURheXMoZGF0ZVByb2ZpbGUuY3VycmVudFJhbmdlLnN0YXJ0LCBkYXRlUHJvZmlsZS5jdXJyZW50UmFuZ2UuZW5kKTtcbiAgICAgICAgICAgIGlmIChkYXlzICE9PSBudWxsICYmIGRheXMgPiAxKSB7XG4gICAgICAgICAgICAgICAgLy8gbXVsdGktZGF5IHJhbmdlLiBzaG9ydGVyLCBsaWtlIFwiU2VwIDkgLSAxMCAyMDE0XCJcbiAgICAgICAgICAgICAgICByZXR1cm4geyB5ZWFyOiAnbnVtZXJpYycsIG1vbnRoOiAnc2hvcnQnLCBkYXk6ICdudW1lcmljJyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gb25lIGRheS4gbG9uZ2VyLCBsaWtlIFwiU2VwdGVtYmVyIDkgMjAxNFwiXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgeWVhcjogJ251bWVyaWMnLCBtb250aDogJ2xvbmcnLCBkYXk6ICdudW1lcmljJyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGJ1aWxkIGEgY29udGV4dCBzY29wZWQgdG8gdGhlIHZpZXdcbiAgICBmdW5jdGlvbiBidWlsZENvbXBvbmVudENvbnRleHQoY29udGV4dCwgdmlld1NwZWMsIHZpZXcpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQuZXh0ZW5kKHZpZXdTcGVjLm9wdGlvbnMsIHZpZXcpO1xuICAgIH1cbiAgICAvLyBQbHVnaW5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGZ1bmN0aW9uIGJ1aWxkVmlld1Byb3BUcmFuc2Zvcm1lcnModGhlQ2xhc3Nlcykge1xuICAgICAgICByZXR1cm4gdGhlQ2xhc3Nlcy5tYXAoZnVuY3Rpb24gKHRoZUNsYXNzKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IHRoZUNsYXNzKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBJbnRlcmFjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gSW50ZXJhY3Rpb24oc2V0dGluZ3MpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50ID0gc2V0dGluZ3MuY29tcG9uZW50O1xuICAgICAgICB9XG4gICAgICAgIEludGVyYWN0aW9uLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gSW50ZXJhY3Rpb247XG4gICAgfSgpKTtcbiAgICBmdW5jdGlvbiBwYXJzZUludGVyYWN0aW9uU2V0dGluZ3MoY29tcG9uZW50LCBpbnB1dCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29tcG9uZW50OiBjb21wb25lbnQsXG4gICAgICAgICAgICBlbDogaW5wdXQuZWwsXG4gICAgICAgICAgICB1c2VFdmVudENlbnRlcjogaW5wdXQudXNlRXZlbnRDZW50ZXIgIT0gbnVsbCA/IGlucHV0LnVzZUV2ZW50Q2VudGVyIDogdHJ1ZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBpbnRlcmFjdGlvblNldHRpbmdzVG9TdG9yZShzZXR0aW5ncykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiBfYSA9IHt9LFxuICAgICAgICAgICAgX2Fbc2V0dGluZ3MuY29tcG9uZW50LnVpZF0gPSBzZXR0aW5ncyxcbiAgICAgICAgICAgIF9hO1xuICAgIH1cbiAgICAvLyBnbG9iYWwgc3RhdGVcbiAgICB2YXIgaW50ZXJhY3Rpb25TZXR0aW5nc1N0b3JlID0ge307XG5cbiAgICAvKlxuICAgIERldGVjdHMgd2hlbiB0aGUgdXNlciBjbGlja3Mgb24gYW4gZXZlbnQgd2l0aGluIGEgRGF0ZUNvbXBvbmVudFxuICAgICovXG4gICAgdmFyIEV2ZW50Q2xpY2tpbmcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhFdmVudENsaWNraW5nLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBFdmVudENsaWNraW5nKHNldHRpbmdzKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzZXR0aW5ncykgfHwgdGhpcztcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZVNlZ0NsaWNrID0gZnVuY3Rpb24gKGV2LCBzZWdFbCkge1xuICAgICAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSBfdGhpcy5jb21wb25lbnQ7XG4gICAgICAgICAgICAgICAgdmFyIF9hID0gY29tcG9uZW50LmNvbnRleHQsIGNhbGVuZGFyID0gX2EuY2FsZW5kYXIsIHZpZXcgPSBfYS52aWV3O1xuICAgICAgICAgICAgICAgIHZhciBzZWcgPSBnZXRFbFNlZyhzZWdFbCk7XG4gICAgICAgICAgICAgICAgaWYgKHNlZyAmJiAvLyBtaWdodCBiZSB0aGUgPGRpdj4gc3Vycm91bmRpbmcgdGhlIG1vcmUgbGlua1xuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuaXNWYWxpZFNlZ0Rvd25FbChldi50YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG91ciB3YXkgdG8gc2ltdWxhdGUgYSBsaW5rIGNsaWNrIGZvciBlbGVtZW50cyB0aGF0IGNhbid0IGJlIDxhPiB0YWdzXG4gICAgICAgICAgICAgICAgICAgIC8vIGdyYWIgYmVmb3JlIHRyaWdnZXIgZmlyZWQgaW4gY2FzZSB0cmlnZ2VyIHRyYXNoZXMgRE9NIHRocnUgcmVyZW5kZXJpbmdcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhc1VybENvbnRhaW5lciA9IGVsZW1lbnRDbG9zZXN0KGV2LnRhcmdldCwgJy5mYy1oYXMtdXJsJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBoYXNVcmxDb250YWluZXIgPyBoYXNVcmxDb250YWluZXIucXVlcnlTZWxlY3RvcignYVtocmVmXScpLmhyZWYgOiAnJztcbiAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXIucHVibGljbHlUcmlnZ2VyKCdldmVudENsaWNrJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsOiBzZWdFbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogbmV3IEV2ZW50QXBpKGNvbXBvbmVudC5jb250ZXh0LmNhbGVuZGFyLCBzZWcuZXZlbnRSYW5nZS5kZWYsIHNlZy5ldmVudFJhbmdlLmluc3RhbmNlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc0V2ZW50OiBldixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3OiB2aWV3XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAodXJsICYmICFldi5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gc2V0dGluZ3MuY29tcG9uZW50O1xuICAgICAgICAgICAgX3RoaXMuZGVzdHJveSA9IGxpc3RlbkJ5U2VsZWN0b3IoY29tcG9uZW50LmVsLCAnY2xpY2snLCBjb21wb25lbnQuZmdTZWdTZWxlY3RvciArICcsJyArIGNvbXBvbmVudC5iZ1NlZ1NlbGVjdG9yLCBfdGhpcy5oYW5kbGVTZWdDbGljayk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEV2ZW50Q2xpY2tpbmc7XG4gICAgfShJbnRlcmFjdGlvbikpO1xuXG4gICAgLypcbiAgICBUcmlnZ2VycyBldmVudHMgYW5kIGFkZHMvcmVtb3ZlcyBjb3JlIGNsYXNzTmFtZXMgd2hlbiB0aGUgdXNlcidzIHBvaW50ZXJcbiAgICBlbnRlcnMvbGVhdmVzIGV2ZW50LWVsZW1lbnRzIG9mIGEgY29tcG9uZW50LlxuICAgICovXG4gICAgdmFyIEV2ZW50SG92ZXJpbmcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhFdmVudEhvdmVyaW5nLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBFdmVudEhvdmVyaW5nKHNldHRpbmdzKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzZXR0aW5ncykgfHwgdGhpcztcbiAgICAgICAgICAgIC8vIGZvciBzaW11bGF0aW5nIGFuIGV2ZW50TW91c2VMZWF2ZSB3aGVuIHRoZSBldmVudCBlbCBpcyBkZXN0cm95ZWQgd2hpbGUgbW91c2UgaXMgb3ZlciBpdFxuICAgICAgICAgICAgX3RoaXMuaGFuZGxlRXZlbnRFbFJlbW92ZSA9IGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgICAgIGlmIChlbCA9PT0gX3RoaXMuY3VycmVudFNlZ0VsKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmhhbmRsZVNlZ0xlYXZlKG51bGwsIF90aGlzLmN1cnJlbnRTZWdFbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZVNlZ0VudGVyID0gZnVuY3Rpb24gKGV2LCBzZWdFbCkge1xuICAgICAgICAgICAgICAgIGlmIChnZXRFbFNlZyhzZWdFbCkpIHsgLy8gVE9ETzogYmV0dGVyIHdheSB0byBtYWtlIHN1cmUgbm90IGhvdmVyaW5nIG92ZXIgbW9yZSsgbGluayBvciBpdHMgd3JhcHBlclxuICAgICAgICAgICAgICAgICAgICBzZWdFbC5jbGFzc0xpc3QuYWRkKCdmYy1hbGxvdy1tb3VzZS1yZXNpemUnKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3VycmVudFNlZ0VsID0gc2VnRWw7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnRyaWdnZXJFdmVudCgnZXZlbnRNb3VzZUVudGVyJywgZXYsIHNlZ0VsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlU2VnTGVhdmUgPSBmdW5jdGlvbiAoZXYsIHNlZ0VsKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmN1cnJlbnRTZWdFbCkge1xuICAgICAgICAgICAgICAgICAgICBzZWdFbC5jbGFzc0xpc3QucmVtb3ZlKCdmYy1hbGxvdy1tb3VzZS1yZXNpemUnKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3VycmVudFNlZ0VsID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudHJpZ2dlckV2ZW50KCdldmVudE1vdXNlTGVhdmUnLCBldiwgc2VnRWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gc2V0dGluZ3MuY29tcG9uZW50O1xuICAgICAgICAgICAgX3RoaXMucmVtb3ZlSG92ZXJMaXN0ZW5lcnMgPSBsaXN0ZW5Ub0hvdmVyQnlTZWxlY3Rvcihjb21wb25lbnQuZWwsIGNvbXBvbmVudC5mZ1NlZ1NlbGVjdG9yICsgJywnICsgY29tcG9uZW50LmJnU2VnU2VsZWN0b3IsIF90aGlzLmhhbmRsZVNlZ0VudGVyLCBfdGhpcy5oYW5kbGVTZWdMZWF2ZSk7XG4gICAgICAgICAgICAvLyBob3cgdG8gbWFrZSBzdXJlIGNvbXBvbmVudCBhbHJlYWR5IGhhcyBjb250ZXh0P1xuICAgICAgICAgICAgY29tcG9uZW50LmNvbnRleHQuY2FsZW5kYXIub24oJ2V2ZW50RWxSZW1vdmUnLCBfdGhpcy5oYW5kbGVFdmVudEVsUmVtb3ZlKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuICAgICAgICBFdmVudEhvdmVyaW5nLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVIb3Zlckxpc3RlbmVycygpO1xuICAgICAgICAgICAgdGhpcy5jb21wb25lbnQuY29udGV4dC5jYWxlbmRhci5vZmYoJ2V2ZW50RWxSZW1vdmUnLCB0aGlzLmhhbmRsZUV2ZW50RWxSZW1vdmUpO1xuICAgICAgICB9O1xuICAgICAgICBFdmVudEhvdmVyaW5nLnByb3RvdHlwZS50cmlnZ2VyRXZlbnQgPSBmdW5jdGlvbiAocHVibGljRXZOYW1lLCBldiwgc2VnRWwpIHtcbiAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudDtcbiAgICAgICAgICAgIHZhciBfYSA9IGNvbXBvbmVudC5jb250ZXh0LCBjYWxlbmRhciA9IF9hLmNhbGVuZGFyLCB2aWV3ID0gX2EudmlldztcbiAgICAgICAgICAgIHZhciBzZWcgPSBnZXRFbFNlZyhzZWdFbCk7XG4gICAgICAgICAgICBpZiAoIWV2IHx8IGNvbXBvbmVudC5pc1ZhbGlkU2VnRG93bkVsKGV2LnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICBjYWxlbmRhci5wdWJsaWNseVRyaWdnZXIocHVibGljRXZOYW1lLCBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsOiBzZWdFbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBuZXcgRXZlbnRBcGkoY2FsZW5kYXIsIHNlZy5ldmVudFJhbmdlLmRlZiwgc2VnLmV2ZW50UmFuZ2UuaW5zdGFuY2UpLFxuICAgICAgICAgICAgICAgICAgICAgICAganNFdmVudDogZXYsXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3OiB2aWV3XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIEV2ZW50SG92ZXJpbmc7XG4gICAgfShJbnRlcmFjdGlvbikpO1xuXG4gICAgdmFyIFN0YW5kYXJkVGhlbWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhTdGFuZGFyZFRoZW1lLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBTdGFuZGFyZFRoZW1lKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTdGFuZGFyZFRoZW1lO1xuICAgIH0oVGhlbWUpKTtcbiAgICBTdGFuZGFyZFRoZW1lLnByb3RvdHlwZS5jbGFzc2VzID0ge1xuICAgICAgICB3aWRnZXQ6ICdmYy11bnRoZW1lZCcsXG4gICAgICAgIHdpZGdldEhlYWRlcjogJ2ZjLXdpZGdldC1oZWFkZXInLFxuICAgICAgICB3aWRnZXRDb250ZW50OiAnZmMtd2lkZ2V0LWNvbnRlbnQnLFxuICAgICAgICBidXR0b25Hcm91cDogJ2ZjLWJ1dHRvbi1ncm91cCcsXG4gICAgICAgIGJ1dHRvbjogJ2ZjLWJ1dHRvbiBmYy1idXR0b24tcHJpbWFyeScsXG4gICAgICAgIGJ1dHRvbkFjdGl2ZTogJ2ZjLWJ1dHRvbi1hY3RpdmUnLFxuICAgICAgICBwb3BvdmVySGVhZGVyOiAnZmMtd2lkZ2V0LWhlYWRlcicsXG4gICAgICAgIHBvcG92ZXJDb250ZW50OiAnZmMtd2lkZ2V0LWNvbnRlbnQnLFxuICAgICAgICAvLyBkYXkgZ3JpZFxuICAgICAgICBoZWFkZXJSb3c6ICdmYy13aWRnZXQtaGVhZGVyJyxcbiAgICAgICAgZGF5Um93OiAnZmMtd2lkZ2V0LWNvbnRlbnQnLFxuICAgICAgICAvLyBsaXN0IHZpZXdcbiAgICAgICAgbGlzdFZpZXc6ICdmYy13aWRnZXQtY29udGVudCdcbiAgICB9O1xuICAgIFN0YW5kYXJkVGhlbWUucHJvdG90eXBlLmJhc2VJY29uQ2xhc3MgPSAnZmMtaWNvbic7XG4gICAgU3RhbmRhcmRUaGVtZS5wcm90b3R5cGUuaWNvbkNsYXNzZXMgPSB7XG4gICAgICAgIGNsb3NlOiAnZmMtaWNvbi14JyxcbiAgICAgICAgcHJldjogJ2ZjLWljb24tY2hldnJvbi1sZWZ0JyxcbiAgICAgICAgbmV4dDogJ2ZjLWljb24tY2hldnJvbi1yaWdodCcsXG4gICAgICAgIHByZXZZZWFyOiAnZmMtaWNvbi1jaGV2cm9ucy1sZWZ0JyxcbiAgICAgICAgbmV4dFllYXI6ICdmYy1pY29uLWNoZXZyb25zLXJpZ2h0J1xuICAgIH07XG4gICAgU3RhbmRhcmRUaGVtZS5wcm90b3R5cGUuaWNvbk92ZXJyaWRlT3B0aW9uID0gJ2J1dHRvbkljb25zJztcbiAgICBTdGFuZGFyZFRoZW1lLnByb3RvdHlwZS5pY29uT3ZlcnJpZGVDdXN0b21CdXR0b25PcHRpb24gPSAnaWNvbic7XG4gICAgU3RhbmRhcmRUaGVtZS5wcm90b3R5cGUuaWNvbk92ZXJyaWRlUHJlZml4ID0gJ2ZjLWljb24tJztcblxuICAgIHZhciBDYWxlbmRhciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gQ2FsZW5kYXIoZWwsIG92ZXJyaWRlcykge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHRoaXMuYnVpbGRDb21wb25lbnRDb250ZXh0ID0gbWVtb2l6ZShidWlsZENvbXBvbmVudENvbnRleHQkMSk7XG4gICAgICAgICAgICB0aGlzLnBhcnNlUmF3TG9jYWxlcyA9IG1lbW9pemUocGFyc2VSYXdMb2NhbGVzKTtcbiAgICAgICAgICAgIHRoaXMuYnVpbGRMb2NhbGUgPSBtZW1vaXplKGJ1aWxkTG9jYWxlKTtcbiAgICAgICAgICAgIHRoaXMuYnVpbGREYXRlRW52ID0gbWVtb2l6ZShidWlsZERhdGVFbnYpO1xuICAgICAgICAgICAgdGhpcy5idWlsZFRoZW1lID0gbWVtb2l6ZShidWlsZFRoZW1lKTtcbiAgICAgICAgICAgIHRoaXMuYnVpbGRFdmVudFVpU2luZ2xlQmFzZSA9IG1lbW9pemUodGhpcy5fYnVpbGRFdmVudFVpU2luZ2xlQmFzZSk7XG4gICAgICAgICAgICB0aGlzLmJ1aWxkU2VsZWN0aW9uQ29uZmlnID0gbWVtb2l6ZSh0aGlzLl9idWlsZFNlbGVjdGlvbkNvbmZpZyk7XG4gICAgICAgICAgICB0aGlzLmJ1aWxkRXZlbnRVaUJ5U291cmNlID0gbWVtb2l6ZU91dHB1dChidWlsZEV2ZW50VWlCeVNvdXJjZSwgaXNQcm9wc0VxdWFsKTtcbiAgICAgICAgICAgIHRoaXMuYnVpbGRFdmVudFVpQmFzZXMgPSBtZW1vaXplKGJ1aWxkRXZlbnRVaUJhc2VzKTtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJhY3Rpb25zU3RvcmUgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uUXVldWUgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuaXNSZWR1Y2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gaXNEaXNwbGF5aW5nOiBib29sZWFuID0gZmFsc2UgLy8gaW5zdGFsbGVkIGluIERPTT8gYWNjZXB0aW5nIHJlbmRlcnM/XG4gICAgICAgICAgICB0aGlzLm5lZWRzUmVyZW5kZXIgPSBmYWxzZTsgLy8gbmVlZHMgYSByZW5kZXI/XG4gICAgICAgICAgICB0aGlzLmlzUmVuZGVyaW5nID0gZmFsc2U7IC8vIGN1cnJlbnRseSBpbiB0aGUgZXhlY3V0ZVJlbmRlciBmdW5jdGlvbj9cbiAgICAgICAgICAgIHRoaXMucmVuZGVyaW5nUGF1c2VEZXB0aCA9IDA7XG4gICAgICAgICAgICB0aGlzLmJ1aWxkRGVsYXllZFJlcmVuZGVyID0gbWVtb2l6ZShidWlsZERlbGF5ZWRSZXJlbmRlcik7XG4gICAgICAgICAgICB0aGlzLmFmdGVyU2l6aW5nVHJpZ2dlcnMgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuaXNWaWV3VXBkYXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5pc0RhdGVzVXBkYXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5pc0V2ZW50c1VwZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZWwgPSBlbDtcbiAgICAgICAgICAgIHRoaXMub3B0aW9uc01hbmFnZXIgPSBuZXcgT3B0aW9uc01hbmFnZXIob3ZlcnJpZGVzIHx8IHt9KTtcbiAgICAgICAgICAgIHRoaXMucGx1Z2luU3lzdGVtID0gbmV3IFBsdWdpblN5c3RlbSgpO1xuICAgICAgICAgICAgLy8gb25seSBkbyBvbmNlLiBkb24ndCBkbyBpbiBoYW5kbGVPcHRpb25zLiBiZWNhdXNlIGNhbid0IHJlbW92ZSBwbHVnaW5zXG4gICAgICAgICAgICB0aGlzLmFkZFBsdWdpbklucHV0cyh0aGlzLm9wdGlvbnNNYW5hZ2VyLmNvbXB1dGVkLnBsdWdpbnMgfHwgW10pO1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVPcHRpb25zKHRoaXMub3B0aW9uc01hbmFnZXIuY29tcHV0ZWQpO1xuICAgICAgICAgICAgdGhpcy5wdWJsaWNseVRyaWdnZXIoJ19pbml0Jyk7IC8vIGZvciB0ZXN0c1xuICAgICAgICAgICAgdGhpcy5oeWRyYXRlKCk7XG4gICAgICAgICAgICB0aGlzLmNhbGVuZGFySW50ZXJhY3Rpb25zID0gdGhpcy5wbHVnaW5TeXN0ZW0uaG9va3MuY2FsZW5kYXJJbnRlcmFjdGlvbnNcbiAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChjYWxlbmRhckludGVyYWN0aW9uQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGNhbGVuZGFySW50ZXJhY3Rpb25DbGFzcyhfdGhpcyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUuYWRkUGx1Z2luSW5wdXRzID0gZnVuY3Rpb24gKHBsdWdpbklucHV0cykge1xuICAgICAgICAgICAgdmFyIHBsdWdpbkRlZnMgPSByZWZpbmVQbHVnaW5EZWZzKHBsdWdpbklucHV0cyk7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHBsdWdpbkRlZnNfMSA9IHBsdWdpbkRlZnM7IF9pIDwgcGx1Z2luRGVmc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBwbHVnaW5EZWYgPSBwbHVnaW5EZWZzXzFbX2ldO1xuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luU3lzdGVtLmFkZChwbHVnaW5EZWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ2FsZW5kYXIucHJvdG90eXBlLCBcInZpZXdcIiwge1xuICAgICAgICAgICAgLy8gcHVibGljIEFQSVxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50ID8gdGhpcy5jb21wb25lbnQudmlldyA6IG51bGw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gUHVibGljIEFQSSBmb3IgcmVuZGVyaW5nXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIENhbGVuZGFyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuY29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21wb25lbnQgPSBuZXcgQ2FsZW5kYXJDb21wb25lbnQodGhpcy5lbCk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJhYmxlRXZlbnRTdG9yZSA9IGNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuYmluZEhhbmRsZXJzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5leGVjdXRlUmVuZGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlcXVlc3RSZXJlbmRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMudW5iaW5kSGFuZGxlcnMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudC5kZXN0cm95KCk7IC8vIGRvbid0IG51bGwtb3V0LiBpbiBjYXNlIEFQSSBuZWVkcyBhY2Nlc3NcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudCA9IG51bGw7IC8vIHVtbSA/Pz9cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5jYWxlbmRhckludGVyYWN0aW9uczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGludGVyYWN0aW9uID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbi5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucHVibGljbHlUcmlnZ2VyKCdfZGVzdHJveWVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIEhhbmRsZXJzXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIENhbGVuZGFyLnByb3RvdHlwZS5iaW5kSGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgLy8gZXZlbnQgZGVsZWdhdGlvbiBmb3IgbmF2IGxpbmtzXG4gICAgICAgICAgICB0aGlzLnJlbW92ZU5hdkxpbmtMaXN0ZW5lciA9IGxpc3RlbkJ5U2VsZWN0b3IodGhpcy5lbCwgJ2NsaWNrJywgJ2FbZGF0YS1nb3RvXScsIGZ1bmN0aW9uIChldiwgYW5jaG9yRWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ290b09wdGlvbnMgPSBhbmNob3JFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZ290bycpO1xuICAgICAgICAgICAgICAgIGdvdG9PcHRpb25zID0gZ290b09wdGlvbnMgPyBKU09OLnBhcnNlKGdvdG9PcHRpb25zKSA6IHt9O1xuICAgICAgICAgICAgICAgIHZhciBkYXRlRW52ID0gX3RoaXMuZGF0ZUVudjtcbiAgICAgICAgICAgICAgICB2YXIgZGF0ZU1hcmtlciA9IGRhdGVFbnYuY3JlYXRlTWFya2VyKGdvdG9PcHRpb25zLmRhdGUpO1xuICAgICAgICAgICAgICAgIHZhciB2aWV3VHlwZSA9IGdvdG9PcHRpb25zLnR5cGU7XG4gICAgICAgICAgICAgICAgLy8gcHJvcGVydHkgbGlrZSBcIm5hdkxpbmtEYXlDbGlja1wiLiBtaWdodCBiZSBhIHN0cmluZyBvciBhIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgdmFyIGN1c3RvbUFjdGlvbiA9IF90aGlzLnZpZXdPcHQoJ25hdkxpbmsnICsgY2FwaXRhbGlzZUZpcnN0TGV0dGVyKHZpZXdUeXBlKSArICdDbGljaycpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VzdG9tQWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1c3RvbUFjdGlvbihkYXRlRW52LnRvRGF0ZShkYXRlTWFya2VyKSwgZXYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXN0b21BY3Rpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3VHlwZSA9IGN1c3RvbUFjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy56b29tVG8oZGF0ZU1hcmtlciwgdmlld1R5cGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0KCdoYW5kbGVXaW5kb3dSZXNpemUnKSkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLndpbmRvd1Jlc2l6ZVByb3h5ID0gZGVib3VuY2UoLy8gcHJldmVudHMgcmFwaWQgY2FsbHNcbiAgICAgICAgICAgICAgICB0aGlzLndpbmRvd1Jlc2l6ZS5iaW5kKHRoaXMpLCB0aGlzLm9wdCgnd2luZG93UmVzaXplRGVsYXknKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUudW5iaW5kSGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZU5hdkxpbmtMaXN0ZW5lcigpO1xuICAgICAgICAgICAgaWYgKHRoaXMud2luZG93UmVzaXplUHJveHkpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy53aW5kb3dSZXNpemVQcm94eSk7XG4gICAgICAgICAgICAgICAgdGhpcy53aW5kb3dSZXNpemVQcm94eSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIERpc3BhdGNoZXJcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLmh5ZHJhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMuYnVpbGRJbml0aWFsU3RhdGUoKTtcbiAgICAgICAgICAgIHZhciByYXdTb3VyY2VzID0gdGhpcy5vcHQoJ2V2ZW50U291cmNlcycpIHx8IFtdO1xuICAgICAgICAgICAgdmFyIHNpbmdsZVJhd1NvdXJjZSA9IHRoaXMub3B0KCdldmVudHMnKTtcbiAgICAgICAgICAgIHZhciBzb3VyY2VzID0gW107IC8vIHBhcnNlZFxuICAgICAgICAgICAgaWYgKHNpbmdsZVJhd1NvdXJjZSkge1xuICAgICAgICAgICAgICAgIHJhd1NvdXJjZXMudW5zaGlmdChzaW5nbGVSYXdTb3VyY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCByYXdTb3VyY2VzXzEgPSByYXdTb3VyY2VzOyBfaSA8IHJhd1NvdXJjZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcmF3U291cmNlID0gcmF3U291cmNlc18xW19pXTtcbiAgICAgICAgICAgICAgICB2YXIgc291cmNlID0gcGFyc2VFdmVudFNvdXJjZShyYXdTb3VyY2UsIHRoaXMpO1xuICAgICAgICAgICAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlcy5wdXNoKHNvdXJjZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5iYXRjaFJlbmRlcmluZyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZGlzcGF0Y2goeyB0eXBlOiAnSU5JVCcgfSk7IC8vIHBhc3MgaW4gc291cmNlcyBoZXJlP1xuICAgICAgICAgICAgICAgIF90aGlzLmRpc3BhdGNoKHsgdHlwZTogJ0FERF9FVkVOVF9TT1VSQ0VTJywgc291cmNlczogc291cmNlcyB9KTtcbiAgICAgICAgICAgICAgICBfdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdTRVRfVklFV19UWVBFJyxcbiAgICAgICAgICAgICAgICAgICAgdmlld1R5cGU6IF90aGlzLm9wdCgnZGVmYXVsdFZpZXcnKSB8fCBfdGhpcy5wbHVnaW5TeXN0ZW0uaG9va3MuZGVmYXVsdFZpZXdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUuYnVpbGRJbml0aWFsU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBudWxsLFxuICAgICAgICAgICAgICAgIGxvYWRpbmdMZXZlbDogMCxcbiAgICAgICAgICAgICAgICBldmVudFNvdXJjZUxvYWRpbmdMZXZlbDogMCxcbiAgICAgICAgICAgICAgICBjdXJyZW50RGF0ZTogdGhpcy5nZXRJbml0aWFsRGF0ZSgpLFxuICAgICAgICAgICAgICAgIGRhdGVQcm9maWxlOiBudWxsLFxuICAgICAgICAgICAgICAgIGV2ZW50U291cmNlczoge30sXG4gICAgICAgICAgICAgICAgZXZlbnRTdG9yZTogY3JlYXRlRW1wdHlFdmVudFN0b3JlKCksXG4gICAgICAgICAgICAgICAgZGF0ZVNlbGVjdGlvbjogbnVsbCxcbiAgICAgICAgICAgICAgICBldmVudFNlbGVjdGlvbjogJycsXG4gICAgICAgICAgICAgICAgZXZlbnREcmFnOiBudWxsLFxuICAgICAgICAgICAgICAgIGV2ZW50UmVzaXplOiBudWxsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmFjdGlvblF1ZXVlLnB1c2goYWN0aW9uKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1JlZHVjaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1JlZHVjaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgb2xkU3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLmFjdGlvblF1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5yZWR1Y2UodGhpcy5zdGF0ZSwgdGhpcy5hY3Rpb25RdWV1ZS5zaGlmdCgpLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIG5ld1N0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzUmVkdWNpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoIW9sZFN0YXRlLmxvYWRpbmdMZXZlbCAmJiBuZXdTdGF0ZS5sb2FkaW5nTGV2ZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wdWJsaWNseVRyaWdnZXIoJ2xvYWRpbmcnLCBbdHJ1ZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChvbGRTdGF0ZS5sb2FkaW5nTGV2ZWwgJiYgIW5ld1N0YXRlLmxvYWRpbmdMZXZlbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnB1YmxpY2x5VHJpZ2dlcignbG9hZGluZycsIFtmYWxzZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdmlldyA9IHRoaXMuY29tcG9uZW50ICYmIHRoaXMuY29tcG9uZW50LnZpZXc7XG4gICAgICAgICAgICAgICAgaWYgKG9sZFN0YXRlLmV2ZW50U3RvcmUgIT09IG5ld1N0YXRlLmV2ZW50U3RvcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZFN0YXRlLmV2ZW50U3RvcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNFdmVudHNVcGRhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob2xkU3RhdGUuZGF0ZVByb2ZpbGUgIT09IG5ld1N0YXRlLmRhdGVQcm9maWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvbGRTdGF0ZS5kYXRlUHJvZmlsZSAmJiB2aWV3KSB7IC8vIHdoeSB3b3VsZCB2aWV3IGJlIG51bGwhP1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wdWJsaWNseVRyaWdnZXIoJ2RhdGVzRGVzdHJveScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXc6IHZpZXcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsOiB2aWV3LmVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0RhdGVzVXBkYXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvbGRTdGF0ZS52aWV3VHlwZSAhPT0gbmV3U3RhdGUudmlld1R5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZFN0YXRlLnZpZXdUeXBlICYmIHZpZXcpIHsgLy8gd2h5IHdvdWxkIHZpZXcgYmUgbnVsbCE/XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnB1YmxpY2x5VHJpZ2dlcigndmlld1NrZWxldG9uRGVzdHJveScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXc6IHZpZXcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsOiB2aWV3LmVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1ZpZXdVcGRhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0UmVyZW5kZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLnJlZHVjZSA9IGZ1bmN0aW9uIChzdGF0ZSwgYWN0aW9uLCBjYWxlbmRhcikge1xuICAgICAgICAgICAgcmV0dXJuIHJlZHVjZShzdGF0ZSwgYWN0aW9uLCBjYWxlbmRhcik7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFJlbmRlciBRdWV1ZVxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUucmVxdWVzdFJlcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5uZWVkc1JlcmVuZGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuZGVsYXllZFJlcmVuZGVyKCk7IC8vIHdpbGwgY2FsbCBhIGRlYm91bmNlZC12ZXJzaW9uIG9mIHRyeVJlcmVuZGVyXG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyLnByb3RvdHlwZS50cnlSZXJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbXBvbmVudCAmJiAvLyBtdXN0IGJlIGFjY2VwdGluZyByZW5kZXJzXG4gICAgICAgICAgICAgICAgdGhpcy5uZWVkc1JlcmVuZGVyICYmIC8vIGluZGljYXRlcyB0aGF0IGEgcmVyZW5kZXIgd2FzIHJlcXVlc3RlZFxuICAgICAgICAgICAgICAgICF0aGlzLnJlbmRlcmluZ1BhdXNlRGVwdGggJiYgLy8gbm90IHBhdXNlZFxuICAgICAgICAgICAgICAgICF0aGlzLmlzUmVuZGVyaW5nIC8vIG5vdCBjdXJyZW50bHkgaW4gdGhlIHJlbmRlciBsb29wXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV4ZWN1dGVSZW5kZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLmJhdGNoUmVuZGVyaW5nID0gZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyaW5nUGF1c2VEZXB0aCsrO1xuICAgICAgICAgICAgZnVuYygpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJpbmdQYXVzZURlcHRoLS07XG4gICAgICAgICAgICBpZiAodGhpcy5uZWVkc1JlcmVuZGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0UmVyZW5kZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gUmVuZGVyaW5nXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIENhbGVuZGFyLnByb3RvdHlwZS5leGVjdXRlUmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gY2xlYXIgdGhlc2UgQkVGT1JFIHRoZSByZW5kZXIgc28gdGhhdCBuZXcgdmFsdWVzIHdpbGwgYWNjdW11bGF0ZSBkdXJpbmcgcmVuZGVyXG4gICAgICAgICAgICB0aGlzLm5lZWRzUmVyZW5kZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuaXNSZW5kZXJpbmcgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJDb21wb25lbnQoKTtcbiAgICAgICAgICAgIHRoaXMuaXNSZW5kZXJpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIHJlY2VpdmVkIGEgcmVyZW5kZXIgcmVxdWVzdCB3aGlsZSByZW5kZXJpbmdcbiAgICAgICAgICAgIGlmICh0aGlzLm5lZWRzUmVyZW5kZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlbGF5ZWRSZXJlbmRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKlxuICAgICAgICBkb24ndCBjYWxsIHRoaXMgZGlyZWN0bHkuIHVzZSBleGVjdXRlUmVuZGVyIGluc3RlYWRcbiAgICAgICAgKi9cbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLnJlbmRlckNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIHN0YXRlID0gX2Euc3RhdGUsIGNvbXBvbmVudCA9IF9hLmNvbXBvbmVudDtcbiAgICAgICAgICAgIHZhciB2aWV3VHlwZSA9IHN0YXRlLnZpZXdUeXBlO1xuICAgICAgICAgICAgdmFyIHZpZXdTcGVjID0gdGhpcy52aWV3U3BlY3Nbdmlld1R5cGVdO1xuICAgICAgICAgICAgaWYgKCF2aWV3U3BlYykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlZpZXcgdHlwZSBcXFwiXCIgKyB2aWV3VHlwZSArIFwiXFxcIiBpcyBub3QgdmFsaWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBpZiBldmVudCBzb3VyY2VzIGFyZSBzdGlsbCBsb2FkaW5nIGFuZCBwcm9ncmVzc2l2ZSByZW5kZXJpbmcgaGFzbid0IGJlZW4gZW5hYmxlZCxcbiAgICAgICAgICAgIC8vIGtlZXAgcmVuZGVyaW5nIHRoZSBsYXN0IGZ1bGx5IGxvYWRlZCBzZXQgb2YgZXZlbnRzXG4gICAgICAgICAgICB2YXIgcmVuZGVyYWJsZUV2ZW50U3RvcmUgPSB0aGlzLnJlbmRlcmFibGVFdmVudFN0b3JlID1cbiAgICAgICAgICAgICAgICAoc3RhdGUuZXZlbnRTb3VyY2VMb2FkaW5nTGV2ZWwgJiYgIXRoaXMub3B0KCdwcm9ncmVzc2l2ZUV2ZW50UmVuZGVyaW5nJykpID9cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJhYmxlRXZlbnRTdG9yZSA6XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmV2ZW50U3RvcmU7XG4gICAgICAgICAgICB2YXIgZXZlbnRVaVNpbmdsZUJhc2UgPSB0aGlzLmJ1aWxkRXZlbnRVaVNpbmdsZUJhc2Uodmlld1NwZWMub3B0aW9ucyk7XG4gICAgICAgICAgICB2YXIgZXZlbnRVaUJ5U291cmNlID0gdGhpcy5idWlsZEV2ZW50VWlCeVNvdXJjZShzdGF0ZS5ldmVudFNvdXJjZXMpO1xuICAgICAgICAgICAgdmFyIGV2ZW50VWlCYXNlcyA9IHRoaXMuZXZlbnRVaUJhc2VzID0gdGhpcy5idWlsZEV2ZW50VWlCYXNlcyhyZW5kZXJhYmxlRXZlbnRTdG9yZS5kZWZzLCBldmVudFVpU2luZ2xlQmFzZSwgZXZlbnRVaUJ5U291cmNlKTtcbiAgICAgICAgICAgIGNvbXBvbmVudC5yZWNlaXZlUHJvcHMoX19hc3NpZ24oe30sIHN0YXRlLCB7IHZpZXdTcGVjOiB2aWV3U3BlYywgZGF0ZVByb2ZpbGVHZW5lcmF0b3I6IHRoaXMuZGF0ZVByb2ZpbGVHZW5lcmF0b3JzW3ZpZXdUeXBlXSwgZGF0ZVByb2ZpbGU6IHN0YXRlLmRhdGVQcm9maWxlLCBldmVudFN0b3JlOiByZW5kZXJhYmxlRXZlbnRTdG9yZSwgZXZlbnRVaUJhc2VzOiBldmVudFVpQmFzZXMsIGRhdGVTZWxlY3Rpb246IHN0YXRlLmRhdGVTZWxlY3Rpb24sIGV2ZW50U2VsZWN0aW9uOiBzdGF0ZS5ldmVudFNlbGVjdGlvbiwgZXZlbnREcmFnOiBzdGF0ZS5ldmVudERyYWcsIGV2ZW50UmVzaXplOiBzdGF0ZS5ldmVudFJlc2l6ZSB9KSwgdGhpcy5idWlsZENvbXBvbmVudENvbnRleHQodGhpcy50aGVtZSwgdGhpcy5kYXRlRW52LCB0aGlzLm9wdGlvbnNNYW5hZ2VyLmNvbXB1dGVkKSk7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1ZpZXdVcGRhdGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1ZpZXdVcGRhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5wdWJsaWNseVRyaWdnZXIoJ3ZpZXdTa2VsZXRvblJlbmRlcicsIFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlldzogY29tcG9uZW50LnZpZXcsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbDogY29tcG9uZW50LnZpZXcuZWxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuaXNEYXRlc1VwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzRGF0ZXNVcGRhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5wdWJsaWNseVRyaWdnZXIoJ2RhdGVzUmVuZGVyJywgW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3OiBjb21wb25lbnQudmlldyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsOiBjb21wb25lbnQudmlldy5lbFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5pc0V2ZW50c1VwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzRXZlbnRzVXBkYXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZWxlYXNlQWZ0ZXJTaXppbmdUcmlnZ2VycygpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBPcHRpb25zXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIENhbGVuZGFyLnByb3RvdHlwZS5zZXRPcHRpb24gPSBmdW5jdGlvbiAobmFtZSwgdmFsKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICB0aGlzLm11dGF0ZU9wdGlvbnMoKF9hID0ge30sIF9hW25hbWVdID0gdmFsLCBfYSksIFtdLCB0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLmdldE9wdGlvbiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zTWFuYWdlci5jb21wdXRlZFtuYW1lXTtcbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLm9wdCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zTWFuYWdlci5jb21wdXRlZFtuYW1lXTtcbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLnZpZXdPcHQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlld09wdHMoKVtuYW1lXTtcbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLnZpZXdPcHRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlld1NwZWNzW3RoaXMuc3RhdGUudmlld1R5cGVdLm9wdGlvbnM7XG4gICAgICAgIH07XG4gICAgICAgIC8qXG4gICAgICAgIGhhbmRsZXMgb3B0aW9uIGNoYW5nZXMgKGxpa2UgYSBkaWZmKVxuICAgICAgICAqL1xuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUubXV0YXRlT3B0aW9ucyA9IGZ1bmN0aW9uICh1cGRhdGVzLCByZW1vdmFscywgaXNEeW5hbWljLCBkZWVwRXF1YWwpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgY2hhbmdlSGFuZGxlcnMgPSB0aGlzLnBsdWdpblN5c3RlbS5ob29rcy5vcHRpb25DaGFuZ2VIYW5kbGVycztcbiAgICAgICAgICAgIHZhciBub3JtYWxVcGRhdGVzID0ge307XG4gICAgICAgICAgICB2YXIgc3BlY2lhbFVwZGF0ZXMgPSB7fTtcbiAgICAgICAgICAgIHZhciBvbGREYXRlRW52ID0gdGhpcy5kYXRlRW52OyAvLyBkbyB0aGlzIGJlZm9yZSBoYW5kbGVPcHRpb25zXG4gICAgICAgICAgICB2YXIgaXNUaW1lWm9uZURpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgaXNTaXplRGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBhbnlEaWZmaWN1bHRPcHRpb25zID0gQm9vbGVhbihyZW1vdmFscy5sZW5ndGgpO1xuICAgICAgICAgICAgZm9yICh2YXIgbmFtZV8xIGluIHVwZGF0ZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hhbmdlSGFuZGxlcnNbbmFtZV8xXSkge1xuICAgICAgICAgICAgICAgICAgICBzcGVjaWFsVXBkYXRlc1tuYW1lXzFdID0gdXBkYXRlc1tuYW1lXzFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsVXBkYXRlc1tuYW1lXzFdID0gdXBkYXRlc1tuYW1lXzFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIG5hbWVfMiBpbiBub3JtYWxVcGRhdGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKC9eKGhlaWdodHxjb250ZW50SGVpZ2h0fGFzcGVjdFJhdGlvKSQvLnRlc3QobmFtZV8yKSkge1xuICAgICAgICAgICAgICAgICAgICBpc1NpemVEaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKC9eKGRlZmF1bHREYXRlfGRlZmF1bHRWaWV3KSQvLnRlc3QobmFtZV8yKSkgO1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhbnlEaWZmaWN1bHRPcHRpb25zID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWVfMiA9PT0gJ3RpbWVab25lJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNUaW1lWm9uZURpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMub3B0aW9uc01hbmFnZXIubXV0YXRlKG5vcm1hbFVwZGF0ZXMsIHJlbW92YWxzLCBpc0R5bmFtaWMpO1xuICAgICAgICAgICAgaWYgKGFueURpZmZpY3VsdE9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZU9wdGlvbnModGhpcy5vcHRpb25zTWFuYWdlci5jb21wdXRlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmJhdGNoUmVuZGVyaW5nKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoYW55RGlmZmljdWx0T3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNUaW1lWm9uZURpcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0NIQU5HRV9USU1FWk9ORScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkRGF0ZUVudjogb2xkRGF0ZUVudlxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLyogSEFDS1xuICAgICAgICAgICAgICAgICAgICBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzIGNhbGxpbmcgdGhpcy5yZXF1ZXN0UmVyZW5kZXIoKVxuICAgICAgICAgICAgICAgICAgICBidXQgcmVjb21wdXRlcyB0aGUgc3RhdGUncyBkYXRlUHJvZmlsZVxuICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnU0VUX1ZJRVdfVFlQRScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3VHlwZTogX3RoaXMuc3RhdGUudmlld1R5cGVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzU2l6ZURpcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnVwZGF0ZVNpemUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gc3BlY2lhbCB1cGRhdGVzXG4gICAgICAgICAgICAgICAgaWYgKGRlZXBFcXVhbCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuYW1lXzMgaW4gc3BlY2lhbFVwZGF0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZUhhbmRsZXJzW25hbWVfM10oc3BlY2lhbFVwZGF0ZXNbbmFtZV8zXSwgX3RoaXMsIGRlZXBFcXVhbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLypcbiAgICAgICAgcmVidWlsZHMgdGhpbmdzIGJhc2VkIG9mZiBvZiBhIGNvbXBsZXRlIHNldCBvZiByZWZpbmVkIG9wdGlvbnNcbiAgICAgICAgKi9cbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLmhhbmRsZU9wdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHZhciBwbHVnaW5Ib29rcyA9IHRoaXMucGx1Z2luU3lzdGVtLmhvb2tzO1xuICAgICAgICAgICAgdGhpcy5kZWZhdWx0QWxsRGF5RXZlbnREdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uKG9wdGlvbnMuZGVmYXVsdEFsbERheUV2ZW50RHVyYXRpb24pO1xuICAgICAgICAgICAgdGhpcy5kZWZhdWx0VGltZWRFdmVudER1cmF0aW9uID0gY3JlYXRlRHVyYXRpb24ob3B0aW9ucy5kZWZhdWx0VGltZWRFdmVudER1cmF0aW9uKTtcbiAgICAgICAgICAgIHRoaXMuZGVsYXllZFJlcmVuZGVyID0gdGhpcy5idWlsZERlbGF5ZWRSZXJlbmRlcihvcHRpb25zLnJlcmVuZGVyRGVsYXkpO1xuICAgICAgICAgICAgdGhpcy50aGVtZSA9IHRoaXMuYnVpbGRUaGVtZShvcHRpb25zKTtcbiAgICAgICAgICAgIHZhciBhdmFpbGFibGUgPSB0aGlzLnBhcnNlUmF3TG9jYWxlcyhvcHRpb25zLmxvY2FsZXMpO1xuICAgICAgICAgICAgdGhpcy5hdmFpbGFibGVSYXdMb2NhbGVzID0gYXZhaWxhYmxlLm1hcDtcbiAgICAgICAgICAgIHZhciBsb2NhbGUgPSB0aGlzLmJ1aWxkTG9jYWxlKG9wdGlvbnMubG9jYWxlIHx8IGF2YWlsYWJsZS5kZWZhdWx0Q29kZSwgYXZhaWxhYmxlLm1hcCk7XG4gICAgICAgICAgICB0aGlzLmRhdGVFbnYgPSB0aGlzLmJ1aWxkRGF0ZUVudihsb2NhbGUsIG9wdGlvbnMudGltZVpvbmUsIHBsdWdpbkhvb2tzLm5hbWVkVGltZVpvbmVkSW1wbCwgb3B0aW9ucy5maXJzdERheSwgb3B0aW9ucy53ZWVrTnVtYmVyQ2FsY3VsYXRpb24sIG9wdGlvbnMud2Vla0xhYmVsLCBwbHVnaW5Ib29rcy5jbWRGb3JtYXR0ZXIpO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25Db25maWcgPSB0aGlzLmJ1aWxkU2VsZWN0aW9uQ29uZmlnKG9wdGlvbnMpOyAvLyBuZWVkcyBkYXRlRW52LiBkbyBhZnRlciA6KFxuICAgICAgICAgICAgLy8gaW5lZmZlY2llbnQgdG8gZG8gZXZlcnkgdGltZT9cbiAgICAgICAgICAgIHRoaXMudmlld1NwZWNzID0gYnVpbGRWaWV3U3BlY3MocGx1Z2luSG9va3Mudmlld3MsIHRoaXMub3B0aW9uc01hbmFnZXIpO1xuICAgICAgICAgICAgLy8gaW5lZmZlY2llbnQgdG8gZG8gZXZlcnkgdGltZT9cbiAgICAgICAgICAgIHRoaXMuZGF0ZVByb2ZpbGVHZW5lcmF0b3JzID0gbWFwSGFzaCh0aGlzLnZpZXdTcGVjcywgZnVuY3Rpb24gKHZpZXdTcGVjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB2aWV3U3BlYy5jbGFzcy5wcm90b3R5cGUuZGF0ZVByb2ZpbGVHZW5lcmF0b3JDbGFzcyh2aWV3U3BlYywgX3RoaXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyLnByb3RvdHlwZS5nZXRBdmFpbGFibGVMb2NhbGVDb2RlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmF2YWlsYWJsZVJhd0xvY2FsZXMpO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUuX2J1aWxkU2VsZWN0aW9uQ29uZmlnID0gZnVuY3Rpb24gKHJhd09wdHMpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9jZXNzU2NvcGVkVWlQcm9wcygnc2VsZWN0JywgcmF3T3B0cywgdGhpcyk7XG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyLnByb3RvdHlwZS5fYnVpbGRFdmVudFVpU2luZ2xlQmFzZSA9IGZ1bmN0aW9uIChyYXdPcHRzKSB7XG4gICAgICAgICAgICBpZiAocmF3T3B0cy5lZGl0YWJsZSkgeyAvLyBzbyAnZWRpdGFibGUnIGFmZmVjdGVkIGV2ZW50c1xuICAgICAgICAgICAgICAgIHJhd09wdHMgPSBfX2Fzc2lnbih7fSwgcmF3T3B0cywgeyBldmVudEVkaXRhYmxlOiB0cnVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NTY29wZWRVaVByb3BzKCdldmVudCcsIHJhd09wdHMsIHRoaXMpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBUcmlnZ2VyXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIENhbGVuZGFyLnByb3RvdHlwZS5oYXNQdWJsaWNIYW5kbGVycyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oYXNIYW5kbGVycyhuYW1lKSB8fFxuICAgICAgICAgICAgICAgIHRoaXMub3B0KG5hbWUpOyAvLyBoYW5kbGVyIHNwZWNpZmllZCBpbiBvcHRpb25zXG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyLnByb3RvdHlwZS5wdWJsaWNseVRyaWdnZXIgPSBmdW5jdGlvbiAobmFtZSwgYXJncykge1xuICAgICAgICAgICAgdmFyIG9wdEhhbmRsZXIgPSB0aGlzLm9wdChuYW1lKTtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcldpdGgobmFtZSwgdGhpcywgYXJncyk7XG4gICAgICAgICAgICBpZiAob3B0SGFuZGxlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRIYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUucHVibGljbHlUcmlnZ2VyQWZ0ZXJTaXppbmcgPSBmdW5jdGlvbiAobmFtZSwgYXJncykge1xuICAgICAgICAgICAgdmFyIGFmdGVyU2l6aW5nVHJpZ2dlcnMgPSB0aGlzLmFmdGVyU2l6aW5nVHJpZ2dlcnM7XG4gICAgICAgICAgICAoYWZ0ZXJTaXppbmdUcmlnZ2Vyc1tuYW1lXSB8fCAoYWZ0ZXJTaXppbmdUcmlnZ2Vyc1tuYW1lXSA9IFtdKSkucHVzaChhcmdzKTtcbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLnJlbGVhc2VBZnRlclNpemluZ1RyaWdnZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFmdGVyU2l6aW5nVHJpZ2dlcnMgPSB0aGlzLmFmdGVyU2l6aW5nVHJpZ2dlcnM7XG4gICAgICAgICAgICBmb3IgKHZhciBuYW1lXzQgaW4gYWZ0ZXJTaXppbmdUcmlnZ2Vycykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBhZnRlclNpemluZ1RyaWdnZXJzW25hbWVfNF07IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnB1YmxpY2x5VHJpZ2dlcihuYW1lXzQsIGFyZ3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJTaXppbmdUcmlnZ2VycyA9IHt9O1xuICAgICAgICB9O1xuICAgICAgICAvLyBWaWV3XG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIFJldHVybnMgYSBib29sZWFuIGFib3V0IHdoZXRoZXIgdGhlIHZpZXcgaXMgb2theSB0byBpbnN0YW50aWF0ZSBhdCBzb21lIHBvaW50XG4gICAgICAgIENhbGVuZGFyLnByb3RvdHlwZS5pc1ZhbGlkVmlld1R5cGUgPSBmdW5jdGlvbiAodmlld1R5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBCb29sZWFuKHRoaXMudmlld1NwZWNzW3ZpZXdUeXBlXSk7XG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyLnByb3RvdHlwZS5jaGFuZ2VWaWV3ID0gZnVuY3Rpb24gKHZpZXdUeXBlLCBkYXRlT3JSYW5nZSkge1xuICAgICAgICAgICAgdmFyIGRhdGVNYXJrZXIgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGRhdGVPclJhbmdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGVPclJhbmdlLnN0YXJ0ICYmIGRhdGVPclJhbmdlLmVuZCkgeyAvLyBhIHJhbmdlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uc01hbmFnZXIubXV0YXRlKHsgdmlzaWJsZVJhbmdlOiBkYXRlT3JSYW5nZSB9LCBbXSk7IC8vIHdpbGwgbm90IHJlcmVuZGVyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlT3B0aW9ucyh0aGlzLm9wdGlvbnNNYW5hZ2VyLmNvbXB1dGVkKTsgLy8gLi4uYnV0IHl1Y2tcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7IC8vIGEgZGF0ZVxuICAgICAgICAgICAgICAgICAgICBkYXRlTWFya2VyID0gdGhpcy5kYXRlRW52LmNyZWF0ZU1hcmtlcihkYXRlT3JSYW5nZSk7IC8vIGp1c3QgbGlrZSBnb3RvRGF0ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudW5zZWxlY3QoKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdTRVRfVklFV19UWVBFJyxcbiAgICAgICAgICAgICAgICB2aWV3VHlwZTogdmlld1R5cGUsXG4gICAgICAgICAgICAgICAgZGF0ZU1hcmtlcjogZGF0ZU1hcmtlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIEZvcmNlcyBuYXZpZ2F0aW9uIHRvIGEgdmlldyBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gICAgICAgIC8vIGB2aWV3VHlwZWAgY2FuIGJlIGEgc3BlY2lmaWMgdmlldyBuYW1lIG9yIGEgZ2VuZXJpYyBvbmUgbGlrZSBcIndlZWtcIiBvciBcImRheVwiLlxuICAgICAgICAvLyBuZWVkcyB0byBjaGFuZ2VcbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLnpvb21UbyA9IGZ1bmN0aW9uIChkYXRlTWFya2VyLCB2aWV3VHlwZSkge1xuICAgICAgICAgICAgdmFyIHNwZWM7XG4gICAgICAgICAgICB2aWV3VHlwZSA9IHZpZXdUeXBlIHx8ICdkYXknOyAvLyBkYXkgaXMgZGVmYXVsdCB6b29tXG4gICAgICAgICAgICBzcGVjID0gdGhpcy52aWV3U3BlY3Nbdmlld1R5cGVdIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRVbml0Vmlld1NwZWModmlld1R5cGUpO1xuICAgICAgICAgICAgdGhpcy51bnNlbGVjdCgpO1xuICAgICAgICAgICAgaWYgKHNwZWMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1NFVF9WSUVXX1RZUEUnLFxuICAgICAgICAgICAgICAgICAgICB2aWV3VHlwZTogc3BlYy50eXBlLFxuICAgICAgICAgICAgICAgICAgICBkYXRlTWFya2VyOiBkYXRlTWFya2VyXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1NFVF9EQVRFJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0ZU1hcmtlcjogZGF0ZU1hcmtlclxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBHaXZlbiBhIGR1cmF0aW9uIHNpbmd1bGFyIHVuaXQsIGxpa2UgXCJ3ZWVrXCIgb3IgXCJkYXlcIiwgZmluZHMgYSBtYXRjaGluZyB2aWV3IHNwZWMuXG4gICAgICAgIC8vIFByZWZlcmVuY2UgaXMgZ2l2ZW4gdG8gdmlld3MgdGhhdCBoYXZlIGNvcnJlc3BvbmRpbmcgYnV0dG9ucy5cbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLmdldFVuaXRWaWV3U3BlYyA9IGZ1bmN0aW9uICh1bml0KSB7XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gdGhpcy5jb21wb25lbnQ7XG4gICAgICAgICAgICB2YXIgdmlld1R5cGVzID0gW107XG4gICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgIHZhciBzcGVjO1xuICAgICAgICAgICAgLy8gcHV0IHZpZXdzIHRoYXQgaGF2ZSBidXR0b25zIGZpcnN0LiB0aGVyZSB3aWxsIGJlIGR1cGxpY2F0ZXMsIGJ1dCBvaFxuICAgICAgICAgICAgaWYgKGNvbXBvbmVudC5oZWFkZXIpIHtcbiAgICAgICAgICAgICAgICB2aWV3VHlwZXMucHVzaC5hcHBseSh2aWV3VHlwZXMsIGNvbXBvbmVudC5oZWFkZXIudmlld3NXaXRoQnV0dG9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29tcG9uZW50LmZvb3Rlcikge1xuICAgICAgICAgICAgICAgIHZpZXdUeXBlcy5wdXNoLmFwcGx5KHZpZXdUeXBlcywgY29tcG9uZW50LmZvb3Rlci52aWV3c1dpdGhCdXR0b25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIHZpZXdUeXBlIGluIHRoaXMudmlld1NwZWNzKSB7XG4gICAgICAgICAgICAgICAgdmlld1R5cGVzLnB1c2godmlld1R5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHZpZXdUeXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHNwZWMgPSB0aGlzLnZpZXdTcGVjc1t2aWV3VHlwZXNbaV1dO1xuICAgICAgICAgICAgICAgIGlmIChzcGVjKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzcGVjLnNpbmdsZVVuaXQgPT09IHVuaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzcGVjO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBDdXJyZW50IERhdGVcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLmdldEluaXRpYWxEYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGRlZmF1bHREYXRlSW5wdXQgPSB0aGlzLm9wdCgnZGVmYXVsdERhdGUnKTtcbiAgICAgICAgICAgIC8vIGNvbXB1dGUgdGhlIGluaXRpYWwgYW1iaWctdGltZXpvbmUgZGF0ZVxuICAgICAgICAgICAgaWYgKGRlZmF1bHREYXRlSW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGVFbnYuY3JlYXRlTWFya2VyKGRlZmF1bHREYXRlSW5wdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Tm93KCk7IC8vIGdldE5vdyBhbHJlYWR5IHJldHVybnMgdW56b25lZFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUucHJldiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMudW5zZWxlY3QoKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goeyB0eXBlOiAnUFJFVicgfSk7XG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy51bnNlbGVjdCgpO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7IHR5cGU6ICdORVhUJyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLnByZXZZZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy51bnNlbGVjdCgpO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ1NFVF9EQVRFJyxcbiAgICAgICAgICAgICAgICBkYXRlTWFya2VyOiB0aGlzLmRhdGVFbnYuYWRkWWVhcnModGhpcy5zdGF0ZS5jdXJyZW50RGF0ZSwgLTEpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLm5leHRZZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy51bnNlbGVjdCgpO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ1NFVF9EQVRFJyxcbiAgICAgICAgICAgICAgICBkYXRlTWFya2VyOiB0aGlzLmRhdGVFbnYuYWRkWWVhcnModGhpcy5zdGF0ZS5jdXJyZW50RGF0ZSwgMSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUudG9kYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnVuc2VsZWN0KCk7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnU0VUX0RBVEUnLFxuICAgICAgICAgICAgICAgIGRhdGVNYXJrZXI6IHRoaXMuZ2V0Tm93KClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUuZ290b0RhdGUgPSBmdW5jdGlvbiAoem9uZWREYXRlSW5wdXQpIHtcbiAgICAgICAgICAgIHRoaXMudW5zZWxlY3QoKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdTRVRfREFURScsXG4gICAgICAgICAgICAgICAgZGF0ZU1hcmtlcjogdGhpcy5kYXRlRW52LmNyZWF0ZU1hcmtlcih6b25lZERhdGVJbnB1dClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUuaW5jcmVtZW50RGF0ZSA9IGZ1bmN0aW9uIChkZWx0YUlucHV0KSB7XG4gICAgICAgICAgICB2YXIgZGVsdGEgPSBjcmVhdGVEdXJhdGlvbihkZWx0YUlucHV0KTtcbiAgICAgICAgICAgIGlmIChkZWx0YSkgeyAvLyBlbHNlLCB3YXJuIGFib3V0IGludmFsaWQgaW5wdXQ/XG4gICAgICAgICAgICAgICAgdGhpcy51bnNlbGVjdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnU0VUX0RBVEUnLFxuICAgICAgICAgICAgICAgICAgICBkYXRlTWFya2VyOiB0aGlzLmRhdGVFbnYuYWRkKHRoaXMuc3RhdGUuY3VycmVudERhdGUsIGRlbHRhKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBmb3IgZXh0ZXJuYWwgQVBJXG4gICAgICAgIENhbGVuZGFyLnByb3RvdHlwZS5nZXREYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZUVudi50b0RhdGUodGhpcy5zdGF0ZS5jdXJyZW50RGF0ZSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIERhdGUgRm9ybWF0dGluZyBVdGlsc1xuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUuZm9ybWF0RGF0ZSA9IGZ1bmN0aW9uIChkLCBmb3JtYXR0ZXIpIHtcbiAgICAgICAgICAgIHZhciBkYXRlRW52ID0gdGhpcy5kYXRlRW52O1xuICAgICAgICAgICAgcmV0dXJuIGRhdGVFbnYuZm9ybWF0KGRhdGVFbnYuY3JlYXRlTWFya2VyKGQpLCBjcmVhdGVGb3JtYXR0ZXIoZm9ybWF0dGVyKSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIGBzZXR0aW5nc2AgaXMgZm9yIGZvcm1hdHRlciBBTkQgaXNFbmRFeGNsdXNpdmVcbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLmZvcm1hdFJhbmdlID0gZnVuY3Rpb24gKGQwLCBkMSwgc2V0dGluZ3MpIHtcbiAgICAgICAgICAgIHZhciBkYXRlRW52ID0gdGhpcy5kYXRlRW52O1xuICAgICAgICAgICAgcmV0dXJuIGRhdGVFbnYuZm9ybWF0UmFuZ2UoZGF0ZUVudi5jcmVhdGVNYXJrZXIoZDApLCBkYXRlRW52LmNyZWF0ZU1hcmtlcihkMSksIGNyZWF0ZUZvcm1hdHRlcihzZXR0aW5ncywgdGhpcy5vcHQoJ2RlZmF1bHRSYW5nZVNlcGFyYXRvcicpKSwgc2V0dGluZ3MpO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUuZm9ybWF0SXNvID0gZnVuY3Rpb24gKGQsIG9taXRUaW1lKSB7XG4gICAgICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMuZGF0ZUVudjtcbiAgICAgICAgICAgIHJldHVybiBkYXRlRW52LmZvcm1hdElzbyhkYXRlRW52LmNyZWF0ZU1hcmtlcihkKSwgeyBvbWl0VGltZTogb21pdFRpbWUgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFNpemluZ1xuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUud2luZG93UmVzaXplID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNIYW5kbGluZ1dpbmRvd1Jlc2l6ZSAmJlxuICAgICAgICAgICAgICAgIHRoaXMuY29tcG9uZW50ICYmIC8vIHdoeT9cbiAgICAgICAgICAgICAgICBldi50YXJnZXQgPT09IHdpbmRvdyAvLyBub3QgYSBqcXVpIHJlc2l6ZSBldmVudFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0hhbmRsaW5nV2luZG93UmVzaXplID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVNpemUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnB1YmxpY2x5VHJpZ2dlcignd2luZG93UmVzaXplJywgW3RoaXMudmlld10pO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNIYW5kbGluZ1dpbmRvd1Jlc2l6ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUudXBkYXRlU2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbXBvbmVudCkgeyAvLyB3aGVuP1xuICAgICAgICAgICAgICAgIHRoaXMuY29tcG9uZW50LnVwZGF0ZVNpemUodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIENvbXBvbmVudCBSZWdpc3RyYXRpb25cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLnJlZ2lzdGVySW50ZXJhY3RpdmVDb21wb25lbnQgPSBmdW5jdGlvbiAoY29tcG9uZW50LCBzZXR0aW5nc0lucHV0KSB7XG4gICAgICAgICAgICB2YXIgc2V0dGluZ3MgPSBwYXJzZUludGVyYWN0aW9uU2V0dGluZ3MoY29tcG9uZW50LCBzZXR0aW5nc0lucHV0KTtcbiAgICAgICAgICAgIHZhciBERUZBVUxUX0lOVEVSQUNUSU9OUyA9IFtcbiAgICAgICAgICAgICAgICBFdmVudENsaWNraW5nLFxuICAgICAgICAgICAgICAgIEV2ZW50SG92ZXJpbmdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICB2YXIgaW50ZXJhY3Rpb25DbGFzc2VzID0gREVGQVVMVF9JTlRFUkFDVElPTlMuY29uY2F0KHRoaXMucGx1Z2luU3lzdGVtLmhvb2tzLmNvbXBvbmVudEludGVyYWN0aW9ucyk7XG4gICAgICAgICAgICB2YXIgaW50ZXJhY3Rpb25zID0gaW50ZXJhY3Rpb25DbGFzc2VzLm1hcChmdW5jdGlvbiAoaW50ZXJhY3Rpb25DbGFzcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgaW50ZXJhY3Rpb25DbGFzcyhzZXR0aW5ncyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJhY3Rpb25zU3RvcmVbY29tcG9uZW50LnVpZF0gPSBpbnRlcmFjdGlvbnM7XG4gICAgICAgICAgICBpbnRlcmFjdGlvblNldHRpbmdzU3RvcmVbY29tcG9uZW50LnVpZF0gPSBzZXR0aW5ncztcbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLnVucmVnaXN0ZXJJbnRlcmFjdGl2ZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChjb21wb25lbnQpIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLmludGVyYWN0aW9uc1N0b3JlW2NvbXBvbmVudC51aWRdOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBsaXN0ZW5lciA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5pbnRlcmFjdGlvbnNTdG9yZVtjb21wb25lbnQudWlkXTtcbiAgICAgICAgICAgIGRlbGV0ZSBpbnRlcmFjdGlvblNldHRpbmdzU3RvcmVbY29tcG9uZW50LnVpZF07XG4gICAgICAgIH07XG4gICAgICAgIC8vIERhdGUgU2VsZWN0aW9uIC8gRXZlbnQgU2VsZWN0aW9uIC8gRGF5Q2xpY2tcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gdGhpcyBwdWJsaWMgbWV0aG9kIHJlY2VpdmVzIHN0YXJ0L2VuZCBkYXRlcyBpbiBhbnkgZm9ybWF0LCB3aXRoIGFueSB0aW1lem9uZVxuICAgICAgICAvLyBOT1RFOiBhcmdzIHdlcmUgY2hhbmdlZCBmcm9tIHYzXG4gICAgICAgIENhbGVuZGFyLnByb3RvdHlwZS5zZWxlY3QgPSBmdW5jdGlvbiAoZGF0ZU9yT2JqLCBlbmREYXRlKSB7XG4gICAgICAgICAgICB2YXIgc2VsZWN0aW9uSW5wdXQ7XG4gICAgICAgICAgICBpZiAoZW5kRGF0ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGVPck9iai5zdGFydCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbklucHV0ID0gZGF0ZU9yT2JqO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uSW5wdXQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogZGF0ZU9yT2JqLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBudWxsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uSW5wdXQgPSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBkYXRlT3JPYmosXG4gICAgICAgICAgICAgICAgICAgIGVuZDogZW5kRGF0ZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc2VsZWN0aW9uID0gcGFyc2VEYXRlU3BhbihzZWxlY3Rpb25JbnB1dCwgdGhpcy5kYXRlRW52LCBjcmVhdGVEdXJhdGlvbih7IGRheXM6IDEgfSkgLy8gVE9ETzogY2FjaGUgdGhpcz9cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoc2VsZWN0aW9uKSB7IC8vIHRocm93IHBhcnNlIGVycm9yIG90aGVyd2lzZT9cbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHsgdHlwZTogJ1NFTEVDVF9EQVRFUycsIHNlbGVjdGlvbjogc2VsZWN0aW9uIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlckRhdGVTZWxlY3Qoc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gcHVibGljIG1ldGhvZFxuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUudW5zZWxlY3QgPSBmdW5jdGlvbiAocGV2KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5kYXRlU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7IHR5cGU6ICdVTlNFTEVDVF9EQVRFUycgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyRGF0ZVVuc2VsZWN0KHBldik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyLnByb3RvdHlwZS50cmlnZ2VyRGF0ZVNlbGVjdCA9IGZ1bmN0aW9uIChzZWxlY3Rpb24sIHBldikge1xuICAgICAgICAgICAgdmFyIGFyZyA9IF9fYXNzaWduKHt9LCB0aGlzLmJ1aWxkRGF0ZVNwYW5BcGkoc2VsZWN0aW9uKSwgeyBqc0V2ZW50OiBwZXYgPyBwZXYub3JpZ0V2ZW50IDogbnVsbCwgdmlldzogdGhpcy52aWV3IH0pO1xuICAgICAgICAgICAgdGhpcy5wdWJsaWNseVRyaWdnZXIoJ3NlbGVjdCcsIFthcmddKTtcbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLnRyaWdnZXJEYXRlVW5zZWxlY3QgPSBmdW5jdGlvbiAocGV2KSB7XG4gICAgICAgICAgICB0aGlzLnB1YmxpY2x5VHJpZ2dlcigndW5zZWxlY3QnLCBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBqc0V2ZW50OiBwZXYgPyBwZXYub3JpZ0V2ZW50IDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdmlldzogdGhpcy52aWV3XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFRPRE86IHJlY2VpdmUgcGV2P1xuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUudHJpZ2dlckRhdGVDbGljayA9IGZ1bmN0aW9uIChkYXRlU3BhbiwgZGF5RWwsIHZpZXcsIGV2KSB7XG4gICAgICAgICAgICB2YXIgYXJnID0gX19hc3NpZ24oe30sIHRoaXMuYnVpbGREYXRlUG9pbnRBcGkoZGF0ZVNwYW4pLCB7IGRheUVsOiBkYXlFbCwganNFdmVudDogZXYsIC8vIElzIHRoaXMgYWx3YXlzIGEgbW91c2UgZXZlbnQ/IFNlZSAjNDY1NVxuICAgICAgICAgICAgICAgIHZpZXc6IHZpZXcgfSk7XG4gICAgICAgICAgICB0aGlzLnB1YmxpY2x5VHJpZ2dlcignZGF0ZUNsaWNrJywgW2FyZ10pO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUuYnVpbGREYXRlUG9pbnRBcGkgPSBmdW5jdGlvbiAoZGF0ZVNwYW4pIHtcbiAgICAgICAgICAgIHZhciBwcm9wcyA9IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMucGx1Z2luU3lzdGVtLmhvb2tzLmRhdGVQb2ludFRyYW5zZm9ybXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRyYW5zZm9ybSA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICBfX2Fzc2lnbihwcm9wcywgdHJhbnNmb3JtKGRhdGVTcGFuLCB0aGlzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfX2Fzc2lnbihwcm9wcywgYnVpbGREYXRlUG9pbnRBcGkoZGF0ZVNwYW4sIHRoaXMuZGF0ZUVudikpO1xuICAgICAgICAgICAgcmV0dXJuIHByb3BzO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUuYnVpbGREYXRlU3BhbkFwaSA9IGZ1bmN0aW9uIChkYXRlU3Bhbikge1xuICAgICAgICAgICAgdmFyIHByb3BzID0ge307XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5wbHVnaW5TeXN0ZW0uaG9va3MuZGF0ZVNwYW5UcmFuc2Zvcm1zOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciB0cmFuc2Zvcm0gPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgX19hc3NpZ24ocHJvcHMsIHRyYW5zZm9ybShkYXRlU3BhbiwgdGhpcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX19hc3NpZ24ocHJvcHMsIGJ1aWxkRGF0ZVNwYW5BcGkoZGF0ZVNwYW4sIHRoaXMuZGF0ZUVudikpO1xuICAgICAgICAgICAgcmV0dXJuIHByb3BzO1xuICAgICAgICB9O1xuICAgICAgICAvLyBEYXRlIFV0aWxzXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIFJldHVybnMgYSBEYXRlTWFya2VyIGZvciB0aGUgY3VycmVudCBkYXRlLCBhcyBkZWZpbmVkIGJ5IHRoZSBjbGllbnQncyBjb21wdXRlciBvciBmcm9tIHRoZSBgbm93YCBvcHRpb25cbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLmdldE5vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBub3cgPSB0aGlzLm9wdCgnbm93Jyk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5vdyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIG5vdyA9IG5vdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vdyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZUVudi5jcmVhdGVOb3dNYXJrZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGVFbnYuY3JlYXRlTWFya2VyKG5vdyk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIEV2ZW50LURhdGUgVXRpbGl0aWVzXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIEdpdmVuIGFuIGV2ZW50J3MgYWxsRGF5IHN0YXR1cyBhbmQgc3RhcnQgZGF0ZSwgcmV0dXJuIHdoYXQgaXRzIGZhbGxiYWNrIGVuZCBkYXRlIHNob3VsZCBiZS5cbiAgICAgICAgLy8gVE9ETzogcmVuYW1lIHRvIGNvbXB1dGVEZWZhdWx0RXZlbnRFbmRcbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLmdldERlZmF1bHRFdmVudEVuZCA9IGZ1bmN0aW9uIChhbGxEYXksIG1hcmtlcikge1xuICAgICAgICAgICAgdmFyIGVuZCA9IG1hcmtlcjtcbiAgICAgICAgICAgIGlmIChhbGxEYXkpIHtcbiAgICAgICAgICAgICAgICBlbmQgPSBzdGFydE9mRGF5KGVuZCk7XG4gICAgICAgICAgICAgICAgZW5kID0gdGhpcy5kYXRlRW52LmFkZChlbmQsIHRoaXMuZGVmYXVsdEFsbERheUV2ZW50RHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZW5kID0gdGhpcy5kYXRlRW52LmFkZChlbmQsIHRoaXMuZGVmYXVsdFRpbWVkRXZlbnREdXJhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZW5kO1xuICAgICAgICB9O1xuICAgICAgICAvLyBQdWJsaWMgRXZlbnRzIEFQSVxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUuYWRkRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnRJbnB1dCwgc291cmNlSW5wdXQpIHtcbiAgICAgICAgICAgIGlmIChldmVudElucHV0IGluc3RhbmNlb2YgRXZlbnRBcGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVmID0gZXZlbnRJbnB1dC5fZGVmO1xuICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGV2ZW50SW5wdXQuX2luc3RhbmNlO1xuICAgICAgICAgICAgICAgIC8vIG5vdCBhbHJlYWR5IHByZXNlbnQ/IGRvbid0IHdhbnQgdG8gYWRkIGFuIG9sZCBzbmFwc2hvdFxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5zdGF0ZS5ldmVudFN0b3JlLmRlZnNbZGVmLmRlZklkXSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdBRERfRVZFTlRTJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U3RvcmU6IGV2ZW50VHVwbGVUb1N0b3JlKHsgZGVmOiBkZWYsIGluc3RhbmNlOiBpbnN0YW5jZSB9KSAvLyBUT0RPOiBiZXR0ZXIgdXRpbCBmb3IgdHdvIGFyZ3M/XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnRJbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzb3VyY2VJZDtcbiAgICAgICAgICAgIGlmIChzb3VyY2VJbnB1dCBpbnN0YW5jZW9mIEV2ZW50U291cmNlQXBpKSB7XG4gICAgICAgICAgICAgICAgc291cmNlSWQgPSBzb3VyY2VJbnB1dC5pbnRlcm5hbEV2ZW50U291cmNlLnNvdXJjZUlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc291cmNlSW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZhciBzb3VyY2VBcGkgPSB0aGlzLmdldEV2ZW50U291cmNlQnlJZChzb3VyY2VJbnB1dCk7IC8vIFRPRE86IHVzZSBhbiBpbnRlcm5hbCBmdW5jdGlvblxuICAgICAgICAgICAgICAgIGlmICghc291cmNlQXBpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignQ291bGQgbm90IGZpbmQgYW4gZXZlbnQgc291cmNlIHdpdGggSUQgXCInICsgc291cmNlSW5wdXQgKyAnXCInKTsgLy8gVE9ETzogdGVzdFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUlkID0gc291cmNlQXBpLmludGVybmFsRXZlbnRTb3VyY2Uuc291cmNlSWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHR1cGxlID0gcGFyc2VFdmVudChldmVudElucHV0LCBzb3VyY2VJZCwgdGhpcyk7XG4gICAgICAgICAgICBpZiAodHVwbGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0FERF9FVkVOVFMnLFxuICAgICAgICAgICAgICAgICAgICBldmVudFN0b3JlOiBldmVudFR1cGxlVG9TdG9yZSh0dXBsZSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEV2ZW50QXBpKHRoaXMsIHR1cGxlLmRlZiwgdHVwbGUuZGVmLnJlY3VycmluZ0RlZiA/IG51bGwgOiB0dXBsZS5pbnN0YW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gVE9ETzogb3B0aW1pemVcbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLmdldEV2ZW50QnlJZCA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5zdGF0ZS5ldmVudFN0b3JlLCBkZWZzID0gX2EuZGVmcywgaW5zdGFuY2VzID0gX2EuaW5zdGFuY2VzO1xuICAgICAgICAgICAgaWQgPSBTdHJpbmcoaWQpO1xuICAgICAgICAgICAgZm9yICh2YXIgZGVmSWQgaW4gZGVmcykge1xuICAgICAgICAgICAgICAgIHZhciBkZWYgPSBkZWZzW2RlZklkXTtcbiAgICAgICAgICAgICAgICBpZiAoZGVmLnB1YmxpY0lkID09PSBpZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVmLnJlY3VycmluZ0RlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFdmVudEFwaSh0aGlzLCBkZWYsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaW5zdGFuY2VJZCBpbiBpbnN0YW5jZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBpbnN0YW5jZXNbaW5zdGFuY2VJZF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLmRlZklkID09PSBkZWYuZGVmSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFdmVudEFwaSh0aGlzLCBkZWYsIGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLmdldEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMuc3RhdGUuZXZlbnRTdG9yZSwgZGVmcyA9IF9hLmRlZnMsIGluc3RhbmNlcyA9IF9hLmluc3RhbmNlcztcbiAgICAgICAgICAgIHZhciBldmVudEFwaXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGlkIGluIGluc3RhbmNlcykge1xuICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGluc3RhbmNlc1tpZF07XG4gICAgICAgICAgICAgICAgdmFyIGRlZiA9IGRlZnNbaW5zdGFuY2UuZGVmSWRdO1xuICAgICAgICAgICAgICAgIGV2ZW50QXBpcy5wdXNoKG5ldyBFdmVudEFwaSh0aGlzLCBkZWYsIGluc3RhbmNlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZXZlbnRBcGlzO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUucmVtb3ZlQWxsRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7IHR5cGU6ICdSRU1PVkVfQUxMX0VWRU5UUycgfSk7XG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyLnByb3RvdHlwZS5yZXJlbmRlckV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goeyB0eXBlOiAnUkVTRVRfRVZFTlRTJyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gUHVibGljIEV2ZW50IFNvdXJjZXMgQVBJXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIENhbGVuZGFyLnByb3RvdHlwZS5nZXRFdmVudFNvdXJjZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc291cmNlSGFzaCA9IHRoaXMuc3RhdGUuZXZlbnRTb3VyY2VzO1xuICAgICAgICAgICAgdmFyIHNvdXJjZUFwaXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGludGVybmFsSWQgaW4gc291cmNlSGFzaCkge1xuICAgICAgICAgICAgICAgIHNvdXJjZUFwaXMucHVzaChuZXcgRXZlbnRTb3VyY2VBcGkodGhpcywgc291cmNlSGFzaFtpbnRlcm5hbElkXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZUFwaXM7XG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyLnByb3RvdHlwZS5nZXRFdmVudFNvdXJjZUJ5SWQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2VIYXNoID0gdGhpcy5zdGF0ZS5ldmVudFNvdXJjZXM7XG4gICAgICAgICAgICBpZCA9IFN0cmluZyhpZCk7XG4gICAgICAgICAgICBmb3IgKHZhciBzb3VyY2VJZCBpbiBzb3VyY2VIYXNoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZUhhc2hbc291cmNlSWRdLnB1YmxpY0lkID09PSBpZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEV2ZW50U291cmNlQXBpKHRoaXMsIHNvdXJjZUhhc2hbc291cmNlSWRdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLmFkZEV2ZW50U291cmNlID0gZnVuY3Rpb24gKHNvdXJjZUlucHV0KSB7XG4gICAgICAgICAgICBpZiAoc291cmNlSW5wdXQgaW5zdGFuY2VvZiBFdmVudFNvdXJjZUFwaSkge1xuICAgICAgICAgICAgICAgIC8vIG5vdCBhbHJlYWR5IHByZXNlbnQ/IGRvbid0IHdhbnQgdG8gYWRkIGFuIG9sZCBzbmFwc2hvdFxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5zdGF0ZS5ldmVudFNvdXJjZXNbc291cmNlSW5wdXQuaW50ZXJuYWxFdmVudFNvdXJjZS5zb3VyY2VJZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnQUREX0VWRU5UX1NPVVJDRVMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlczogW3NvdXJjZUlucHV0LmludGVybmFsRXZlbnRTb3VyY2VdXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc291cmNlSW5wdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZXZlbnRTb3VyY2UgPSBwYXJzZUV2ZW50U291cmNlKHNvdXJjZUlucHV0LCB0aGlzKTtcbiAgICAgICAgICAgIGlmIChldmVudFNvdXJjZSkgeyAvLyBUT0RPOiBlcnJvciBvdGhlcndpc2U/XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7IHR5cGU6ICdBRERfRVZFTlRfU09VUkNFUycsIHNvdXJjZXM6IFtldmVudFNvdXJjZV0gfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFdmVudFNvdXJjZUFwaSh0aGlzLCBldmVudFNvdXJjZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLnJlbW92ZUFsbEV2ZW50U291cmNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goeyB0eXBlOiAnUkVNT1ZFX0FMTF9FVkVOVF9TT1VSQ0VTJyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLnJlZmV0Y2hFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHsgdHlwZTogJ0ZFVENIX0VWRU5UX1NPVVJDRVMnIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvLyBTY3JvbGxcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLnNjcm9sbFRvVGltZSA9IGZ1bmN0aW9uICh0aW1lSW5wdXQpIHtcbiAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uKHRpbWVJbnB1dCk7XG4gICAgICAgICAgICBpZiAoZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudC52aWV3LnNjcm9sbFRvRHVyYXRpb24oZHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gQ2FsZW5kYXI7XG4gICAgfSgpKTtcbiAgICBFbWl0dGVyTWl4aW4ubWl4SW50byhDYWxlbmRhcik7XG4gICAgLy8gZm9yIG1lbW9pemVyc1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgZnVuY3Rpb24gYnVpbGRDb21wb25lbnRDb250ZXh0JDEodGhlbWUsIGRhdGVFbnYsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb21wb25lbnRDb250ZXh0KHRoaXMsIHRoZW1lLCBkYXRlRW52LCBvcHRpb25zLCBudWxsKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYnVpbGREYXRlRW52KGxvY2FsZSwgdGltZVpvbmUsIG5hbWVkVGltZVpvbmVJbXBsLCBmaXJzdERheSwgd2Vla051bWJlckNhbGN1bGF0aW9uLCB3ZWVrTGFiZWwsIGNtZEZvcm1hdHRlcikge1xuICAgICAgICByZXR1cm4gbmV3IERhdGVFbnYoe1xuICAgICAgICAgICAgY2FsZW5kYXJTeXN0ZW06ICdncmVnb3J5JyxcbiAgICAgICAgICAgIHRpbWVab25lOiB0aW1lWm9uZSxcbiAgICAgICAgICAgIG5hbWVkVGltZVpvbmVJbXBsOiBuYW1lZFRpbWVab25lSW1wbCxcbiAgICAgICAgICAgIGxvY2FsZTogbG9jYWxlLFxuICAgICAgICAgICAgd2Vla051bWJlckNhbGN1bGF0aW9uOiB3ZWVrTnVtYmVyQ2FsY3VsYXRpb24sXG4gICAgICAgICAgICBmaXJzdERheTogZmlyc3REYXksXG4gICAgICAgICAgICB3ZWVrTGFiZWw6IHdlZWtMYWJlbCxcbiAgICAgICAgICAgIGNtZEZvcm1hdHRlcjogY21kRm9ybWF0dGVyXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBidWlsZFRoZW1lKGNhbGVuZGFyT3B0aW9ucykge1xuICAgICAgICB2YXIgdGhlbWVDbGFzcyA9IHRoaXMucGx1Z2luU3lzdGVtLmhvb2tzLnRoZW1lQ2xhc3Nlc1tjYWxlbmRhck9wdGlvbnMudGhlbWVTeXN0ZW1dIHx8IFN0YW5kYXJkVGhlbWU7XG4gICAgICAgIHJldHVybiBuZXcgdGhlbWVDbGFzcyhjYWxlbmRhck9wdGlvbnMpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBidWlsZERlbGF5ZWRSZXJlbmRlcih3YWl0KSB7XG4gICAgICAgIHZhciBmdW5jID0gdGhpcy50cnlSZXJlbmRlci5iaW5kKHRoaXMpO1xuICAgICAgICBpZiAod2FpdCAhPSBudWxsKSB7XG4gICAgICAgICAgICBmdW5jID0gZGVib3VuY2UoZnVuYywgd2FpdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ1aWxkRXZlbnRVaUJ5U291cmNlKGV2ZW50U291cmNlcykge1xuICAgICAgICByZXR1cm4gbWFwSGFzaChldmVudFNvdXJjZXMsIGZ1bmN0aW9uIChldmVudFNvdXJjZSkge1xuICAgICAgICAgICAgcmV0dXJuIGV2ZW50U291cmNlLnVpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYnVpbGRFdmVudFVpQmFzZXMoZXZlbnREZWZzLCBldmVudFVpU2luZ2xlQmFzZSwgZXZlbnRVaUJ5U291cmNlKSB7XG4gICAgICAgIHZhciBldmVudFVpQmFzZXMgPSB7ICcnOiBldmVudFVpU2luZ2xlQmFzZSB9O1xuICAgICAgICBmb3IgKHZhciBkZWZJZCBpbiBldmVudERlZnMpIHtcbiAgICAgICAgICAgIHZhciBkZWYgPSBldmVudERlZnNbZGVmSWRdO1xuICAgICAgICAgICAgaWYgKGRlZi5zb3VyY2VJZCAmJiBldmVudFVpQnlTb3VyY2VbZGVmLnNvdXJjZUlkXSkge1xuICAgICAgICAgICAgICAgIGV2ZW50VWlCYXNlc1tkZWZJZF0gPSBldmVudFVpQnlTb3VyY2VbZGVmLnNvdXJjZUlkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXZlbnRVaUJhc2VzO1xuICAgIH1cblxuICAgIHZhciBWaWV3ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoVmlldywgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gVmlldyh2aWV3U3BlYywgcGFyZW50RWwpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAnZmMtdmlldyBmYy0nICsgdmlld1NwZWMudHlwZSArICctdmlldycgfSkpIHx8IHRoaXM7XG4gICAgICAgICAgICBfdGhpcy5yZW5kZXJEYXRlc01lbSA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMucmVuZGVyRGF0ZXNXcmFwLCBfdGhpcy51bnJlbmRlckRhdGVzV3JhcCk7XG4gICAgICAgICAgICBfdGhpcy5yZW5kZXJCdXNpbmVzc0hvdXJzTWVtID0gbWVtb2l6ZVJlbmRlcmluZyhfdGhpcy5yZW5kZXJCdXNpbmVzc0hvdXJzLCBfdGhpcy51bnJlbmRlckJ1c2luZXNzSG91cnMsIFtfdGhpcy5yZW5kZXJEYXRlc01lbV0pO1xuICAgICAgICAgICAgX3RoaXMucmVuZGVyRGF0ZVNlbGVjdGlvbk1lbSA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMucmVuZGVyRGF0ZVNlbGVjdGlvbldyYXAsIF90aGlzLnVucmVuZGVyRGF0ZVNlbGVjdGlvbldyYXAsIFtfdGhpcy5yZW5kZXJEYXRlc01lbV0pO1xuICAgICAgICAgICAgX3RoaXMucmVuZGVyRXZlbnRzTWVtID0gbWVtb2l6ZVJlbmRlcmluZyhfdGhpcy5yZW5kZXJFdmVudHMsIF90aGlzLnVucmVuZGVyRXZlbnRzLCBbX3RoaXMucmVuZGVyRGF0ZXNNZW1dKTtcbiAgICAgICAgICAgIF90aGlzLnJlbmRlckV2ZW50U2VsZWN0aW9uTWVtID0gbWVtb2l6ZVJlbmRlcmluZyhfdGhpcy5yZW5kZXJFdmVudFNlbGVjdGlvbldyYXAsIF90aGlzLnVucmVuZGVyRXZlbnRTZWxlY3Rpb25XcmFwLCBbX3RoaXMucmVuZGVyRXZlbnRzTWVtXSk7XG4gICAgICAgICAgICBfdGhpcy5yZW5kZXJFdmVudERyYWdNZW0gPSBtZW1vaXplUmVuZGVyaW5nKF90aGlzLnJlbmRlckV2ZW50RHJhZ1dyYXAsIF90aGlzLnVucmVuZGVyRXZlbnREcmFnV3JhcCwgW190aGlzLnJlbmRlckRhdGVzTWVtXSk7XG4gICAgICAgICAgICBfdGhpcy5yZW5kZXJFdmVudFJlc2l6ZU1lbSA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMucmVuZGVyRXZlbnRSZXNpemVXcmFwLCBfdGhpcy51bnJlbmRlckV2ZW50UmVzaXplV3JhcCwgW190aGlzLnJlbmRlckRhdGVzTWVtXSk7XG4gICAgICAgICAgICBfdGhpcy52aWV3U3BlYyA9IHZpZXdTcGVjO1xuICAgICAgICAgICAgX3RoaXMudHlwZSA9IHZpZXdTcGVjLnR5cGU7XG4gICAgICAgICAgICBwYXJlbnRFbC5hcHBlbmRDaGlsZChfdGhpcy5lbCk7XG4gICAgICAgICAgICBfdGhpcy5pbml0aWFsaXplKCk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgVmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgfTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZpZXcucHJvdG90eXBlLCBcImFjdGl2ZVN0YXJ0XCIsIHtcbiAgICAgICAgICAgIC8vIERhdGUgU2V0dGluZy9VbnNldHRpbmdcbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0LmRhdGVFbnYudG9EYXRlKHRoaXMucHJvcHMuZGF0ZVByb2ZpbGUuYWN0aXZlUmFuZ2Uuc3RhcnQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWaWV3LnByb3RvdHlwZSwgXCJhY3RpdmVFbmRcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC5kYXRlRW52LnRvRGF0ZSh0aGlzLnByb3BzLmRhdGVQcm9maWxlLmFjdGl2ZVJhbmdlLmVuZCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZpZXcucHJvdG90eXBlLCBcImN1cnJlbnRTdGFydFwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0LmRhdGVFbnYudG9EYXRlKHRoaXMucHJvcHMuZGF0ZVByb2ZpbGUuY3VycmVudFJhbmdlLnN0YXJ0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVmlldy5wcm90b3R5cGUsIFwiY3VycmVudEVuZFwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0LmRhdGVFbnYudG9EYXRlKHRoaXMucHJvcHMuZGF0ZVByb2ZpbGUuY3VycmVudFJhbmdlLmVuZCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gR2VuZXJhbCBSZW5kZXJpbmdcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgVmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckRhdGVzTWVtKHByb3BzLmRhdGVQcm9maWxlKTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyQnVzaW5lc3NIb3Vyc01lbShwcm9wcy5idXNpbmVzc0hvdXJzKTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyRGF0ZVNlbGVjdGlvbk1lbShwcm9wcy5kYXRlU2VsZWN0aW9uKTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyRXZlbnRzTWVtKHByb3BzLmV2ZW50U3RvcmUpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJFdmVudFNlbGVjdGlvbk1lbShwcm9wcy5ldmVudFNlbGVjdGlvbik7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckV2ZW50RHJhZ01lbShwcm9wcy5ldmVudERyYWcpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJFdmVudFJlc2l6ZU1lbShwcm9wcy5ldmVudFJlc2l6ZSk7XG4gICAgICAgIH07XG4gICAgICAgIFZpZXcucHJvdG90eXBlLmJlZm9yZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkU2Nyb2xsKHRoaXMucXVlcnlTY3JvbGwoKSk7XG4gICAgICAgIH07XG4gICAgICAgIFZpZXcucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyRGF0ZXNNZW0udW5yZW5kZXIoKTsgLy8gc2hvdWxkIHVucmVuZGVyIGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICB9O1xuICAgICAgICAvLyBTaXppbmdcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgVmlldy5wcm90b3R5cGUudXBkYXRlU2l6ZSA9IGZ1bmN0aW9uIChpc1Jlc2l6ZSwgdmlld0hlaWdodCwgaXNBdXRvKSB7XG4gICAgICAgICAgICB2YXIgY2FsZW5kYXIgPSB0aGlzLmNvbnRleHQuY2FsZW5kYXI7XG4gICAgICAgICAgICBpZiAoaXNSZXNpemUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFNjcm9sbCh0aGlzLnF1ZXJ5U2Nyb2xsKCkpOyAvLyBOT1RFOiBzYW1lIGNvZGUgYXMgaW4gYmVmb3JlVXBkYXRlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNSZXNpemUgfHwgLy8gSEFDS1MuLi5cbiAgICAgICAgICAgICAgICBjYWxlbmRhci5pc1ZpZXdVcGRhdGVkIHx8XG4gICAgICAgICAgICAgICAgY2FsZW5kYXIuaXNEYXRlc1VwZGF0ZWQgfHxcbiAgICAgICAgICAgICAgICBjYWxlbmRhci5pc0V2ZW50c1VwZGF0ZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBzb3J0IG9mIHRoZSBjYXRjaC1hbGwgc2l6aW5nXG4gICAgICAgICAgICAgICAgLy8gYW55dGhpbmcgdGhhdCBtaWdodCBjYXVzZSBkaW1lbnNpb24gY2hhbmdlc1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQmFzZVNpemUoaXNSZXNpemUsIHZpZXdIZWlnaHQsIGlzQXV0byk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBOT1RFOiBwb3BTY3JvbGwgaXMgY2FsbGVkIGJ5IENhbGVuZGFyQ29tcG9uZW50XG4gICAgICAgIH07XG4gICAgICAgIFZpZXcucHJvdG90eXBlLnVwZGF0ZUJhc2VTaXplID0gZnVuY3Rpb24gKGlzUmVzaXplLCB2aWV3SGVpZ2h0LCBpc0F1dG8pIHtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gRGF0ZSBSZW5kZXJpbmdcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgVmlldy5wcm90b3R5cGUucmVuZGVyRGF0ZXNXcmFwID0gZnVuY3Rpb24gKGRhdGVQcm9maWxlKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckRhdGVzKGRhdGVQcm9maWxlKTtcbiAgICAgICAgICAgIHRoaXMuYWRkU2Nyb2xsKHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogY3JlYXRlRHVyYXRpb24odGhpcy5jb250ZXh0Lm9wdGlvbnMuc2Nyb2xsVGltZSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBWaWV3LnByb3RvdHlwZS51bnJlbmRlckRhdGVzV3JhcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcE5vd0luZGljYXRvcigpO1xuICAgICAgICAgICAgdGhpcy51bnJlbmRlckRhdGVzKCk7XG4gICAgICAgIH07XG4gICAgICAgIFZpZXcucHJvdG90eXBlLnJlbmRlckRhdGVzID0gZnVuY3Rpb24gKGRhdGVQcm9maWxlKSB7IH07XG4gICAgICAgIFZpZXcucHJvdG90eXBlLnVucmVuZGVyRGF0ZXMgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgICAgIC8vIEJ1c2luZXNzIEhvdXJzXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIFZpZXcucHJvdG90eXBlLnJlbmRlckJ1c2luZXNzSG91cnMgPSBmdW5jdGlvbiAoYnVzaW5lc3NIb3VycykgeyB9O1xuICAgICAgICBWaWV3LnByb3RvdHlwZS51bnJlbmRlckJ1c2luZXNzSG91cnMgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgICAgIC8vIERhdGUgU2VsZWN0aW9uXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIFZpZXcucHJvdG90eXBlLnJlbmRlckRhdGVTZWxlY3Rpb25XcmFwID0gZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuICAgICAgICAgICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyRGF0ZVNlbGVjdGlvbihzZWxlY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBWaWV3LnByb3RvdHlwZS51bnJlbmRlckRhdGVTZWxlY3Rpb25XcmFwID0gZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuICAgICAgICAgICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMudW5yZW5kZXJEYXRlU2VsZWN0aW9uKHNlbGVjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFZpZXcucHJvdG90eXBlLnJlbmRlckRhdGVTZWxlY3Rpb24gPSBmdW5jdGlvbiAoc2VsZWN0aW9uKSB7IH07XG4gICAgICAgIFZpZXcucHJvdG90eXBlLnVucmVuZGVyRGF0ZVNlbGVjdGlvbiA9IGZ1bmN0aW9uIChzZWxlY3Rpb24pIHsgfTtcbiAgICAgICAgLy8gRXZlbnQgUmVuZGVyaW5nXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIFZpZXcucHJvdG90eXBlLnJlbmRlckV2ZW50cyA9IGZ1bmN0aW9uIChldmVudFN0b3JlKSB7IH07XG4gICAgICAgIFZpZXcucHJvdG90eXBlLnVucmVuZGVyRXZlbnRzID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgICAgICAvLyB1dGlsIGZvciBzdWJjbGFzc2VzXG4gICAgICAgIFZpZXcucHJvdG90eXBlLnNsaWNlRXZlbnRzID0gZnVuY3Rpb24gKGV2ZW50U3RvcmUsIGFsbERheSkge1xuICAgICAgICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgICAgIHJldHVybiBzbGljZUV2ZW50U3RvcmUoZXZlbnRTdG9yZSwgcHJvcHMuZXZlbnRVaUJhc2VzLCBwcm9wcy5kYXRlUHJvZmlsZS5hY3RpdmVSYW5nZSwgYWxsRGF5ID8gdGhpcy5jb250ZXh0Lm5leHREYXlUaHJlc2hvbGQgOiBudWxsKS5mZztcbiAgICAgICAgfTtcbiAgICAgICAgLy8gRXZlbnQgU2VsZWN0aW9uXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIFZpZXcucHJvdG90eXBlLnJlbmRlckV2ZW50U2VsZWN0aW9uV3JhcCA9IGZ1bmN0aW9uIChpbnN0YW5jZUlkKSB7XG4gICAgICAgICAgICBpZiAoaW5zdGFuY2VJZCkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyRXZlbnRTZWxlY3Rpb24oaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFZpZXcucHJvdG90eXBlLnVucmVuZGVyRXZlbnRTZWxlY3Rpb25XcmFwID0gZnVuY3Rpb24gKGluc3RhbmNlSWQpIHtcbiAgICAgICAgICAgIGlmIChpbnN0YW5jZUlkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bnJlbmRlckV2ZW50U2VsZWN0aW9uKGluc3RhbmNlSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBWaWV3LnByb3RvdHlwZS5yZW5kZXJFdmVudFNlbGVjdGlvbiA9IGZ1bmN0aW9uIChpbnN0YW5jZUlkKSB7IH07XG4gICAgICAgIFZpZXcucHJvdG90eXBlLnVucmVuZGVyRXZlbnRTZWxlY3Rpb24gPSBmdW5jdGlvbiAoaW5zdGFuY2VJZCkgeyB9O1xuICAgICAgICAvLyBFdmVudCBEcmFnXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIFZpZXcucHJvdG90eXBlLnJlbmRlckV2ZW50RHJhZ1dyYXAgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyRXZlbnREcmFnKHN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgVmlldy5wcm90b3R5cGUudW5yZW5kZXJFdmVudERyYWdXcmFwID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVucmVuZGVyRXZlbnREcmFnKHN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgVmlldy5wcm90b3R5cGUucmVuZGVyRXZlbnREcmFnID0gZnVuY3Rpb24gKHN0YXRlKSB7IH07XG4gICAgICAgIFZpZXcucHJvdG90eXBlLnVucmVuZGVyRXZlbnREcmFnID0gZnVuY3Rpb24gKHN0YXRlKSB7IH07XG4gICAgICAgIC8vIEV2ZW50IFJlc2l6ZVxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBWaWV3LnByb3RvdHlwZS5yZW5kZXJFdmVudFJlc2l6ZVdyYXAgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyRXZlbnRSZXNpemUoc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBWaWV3LnByb3RvdHlwZS51bnJlbmRlckV2ZW50UmVzaXplV3JhcCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bnJlbmRlckV2ZW50UmVzaXplKHN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgVmlldy5wcm90b3R5cGUucmVuZGVyRXZlbnRSZXNpemUgPSBmdW5jdGlvbiAoc3RhdGUpIHsgfTtcbiAgICAgICAgVmlldy5wcm90b3R5cGUudW5yZW5kZXJFdmVudFJlc2l6ZSA9IGZ1bmN0aW9uIChzdGF0ZSkgeyB9O1xuICAgICAgICAvKiBOb3cgSW5kaWNhdG9yXG4gICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gICAgICAgIC8vIEltbWVkaWF0ZWx5IHJlbmRlciB0aGUgY3VycmVudCB0aW1lIGluZGljYXRvciBhbmQgYmVnaW5zIHJlLXJlbmRlcmluZyBpdCBhdCBhbiBpbnRlcnZhbCxcbiAgICAgICAgLy8gd2hpY2ggaXMgZGVmaW5lZCBieSB0aGlzLmdldE5vd0luZGljYXRvclVuaXQoKS5cbiAgICAgICAgLy8gVE9ETzogc29tZWhvdyBkbyB0aGlzIGZvciB0aGUgY3VycmVudCB3aG9sZSBkYXkncyBiYWNrZ3JvdW5kIHRvb1xuICAgICAgICAvLyBVU0FHRTogbXVzdCBiZSBjYWxsZWQgbWFudWFsbHkgZnJvbSBzdWJjbGFzc2VzJyByZW5kZXIgbWV0aG9kcyEgZG9uJ3QgbmVlZCB0byBjYWxsIHN0b3BOb3dJbmRpY2F0b3IgdGhvXG4gICAgICAgIFZpZXcucHJvdG90eXBlLnN0YXJ0Tm93SW5kaWNhdG9yID0gZnVuY3Rpb24gKGRhdGVQcm9maWxlLCBkYXRlUHJvZmlsZUdlbmVyYXRvcikge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMuY29udGV4dCwgY2FsZW5kYXIgPSBfYS5jYWxlbmRhciwgZGF0ZUVudiA9IF9hLmRhdGVFbnYsIG9wdGlvbnMgPSBfYS5vcHRpb25zO1xuICAgICAgICAgICAgdmFyIHVuaXQ7XG4gICAgICAgICAgICB2YXIgdXBkYXRlO1xuICAgICAgICAgICAgdmFyIGRlbGF5OyAvLyBtcyB3YWl0IHZhbHVlXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5ub3dJbmRpY2F0b3IgJiYgIXRoaXMuaW5pdGlhbE5vd0RhdGUpIHtcbiAgICAgICAgICAgICAgICB1bml0ID0gdGhpcy5nZXROb3dJbmRpY2F0b3JVbml0KGRhdGVQcm9maWxlLCBkYXRlUHJvZmlsZUdlbmVyYXRvcik7XG4gICAgICAgICAgICAgICAgaWYgKHVuaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlID0gdGhpcy51cGRhdGVOb3dJbmRpY2F0b3IuYmluZCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbml0aWFsTm93RGF0ZSA9IGNhbGVuZGFyLmdldE5vdygpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluaXRpYWxOb3dRdWVyaWVkTXMgPSBuZXcgRGF0ZSgpLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2FpdCB1bnRpbCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBuZXh0IGludGVydmFsXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5ID0gZGF0ZUVudi5hZGQoZGF0ZUVudi5zdGFydE9mKHRoaXMuaW5pdGlhbE5vd0RhdGUsIHVuaXQpLCBjcmVhdGVEdXJhdGlvbigxLCB1bml0KSkudmFsdWVPZigpIC0gdGhpcy5pbml0aWFsTm93RGF0ZS52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IG1heWJlIGFsd2F5cyB1c2Ugc2V0VGltZW91dCwgd2FpdGluZyB1bnRpbCBzdGFydCBvZiBuZXh0IHVuaXRcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3dJbmRpY2F0b3JUaW1lb3V0SUQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm5vd0luZGljYXRvclRpbWVvdXRJRCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1bml0ID09PSAnc2Vjb25kJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5ID0gMTAwMDsgLy8gZXZlcnkgc2Vjb25kXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxheSA9IDEwMDAgKiA2MDsgLy8gb3RoZXJ3aXNlLCBldmVyeSBtaW51dGVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm5vd0luZGljYXRvckludGVydmFsSUQgPSBzZXRJbnRlcnZhbCh1cGRhdGUsIGRlbGF5KTsgLy8gdXBkYXRlIGV2ZXJ5IGludGVydmFsXG4gICAgICAgICAgICAgICAgICAgIH0sIGRlbGF5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gcmVuZGVyaW5nIHdpbGwgYmUgaW5pdGlhdGVkIGluIHVwZGF0ZVNpemVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gcmVyZW5kZXJzIHRoZSBub3cgaW5kaWNhdG9yLCBjb21wdXRpbmcgdGhlIG5ldyBjdXJyZW50IHRpbWUgZnJvbSB0aGUgYW1vdW50IG9mIHRpbWUgdGhhdCBoYXMgcGFzc2VkXG4gICAgICAgIC8vIHNpbmNlIHRoZSBpbml0aWFsIGdldE5vdyBjYWxsLlxuICAgICAgICBWaWV3LnByb3RvdHlwZS51cGRhdGVOb3dJbmRpY2F0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5kYXRlUHJvZmlsZSAmJiAvLyBhIHdheSB0byBkZXRlcm1pbmUgaWYgZGF0ZXMgd2VyZSByZW5kZXJlZCB5ZXRcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRpYWxOb3dEYXRlIC8vIGFjdGl2YXRlZCBiZWZvcmU/XG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVucmVuZGVyTm93SW5kaWNhdG9yKCk7IC8vIHdvbid0IHVucmVuZGVyIGlmIHVubmVjZXNzYXJ5XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJOb3dJbmRpY2F0b3IoYWRkTXModGhpcy5pbml0aWFsTm93RGF0ZSwgbmV3IERhdGUoKS52YWx1ZU9mKCkgLSB0aGlzLmluaXRpYWxOb3dRdWVyaWVkTXMpKTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzTm93SW5kaWNhdG9yUmVuZGVyZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBJbW1lZGlhdGVseSB1bnJlbmRlcnMgdGhlIHZpZXcncyBjdXJyZW50IHRpbWUgaW5kaWNhdG9yIGFuZCBzdG9wcyBhbnkgcmUtcmVuZGVyaW5nIHRpbWVycy5cbiAgICAgICAgLy8gV29uJ3QgY2F1c2Ugc2lkZSBlZmZlY3RzIGlmIGluZGljYXRvciBpc24ndCByZW5kZXJlZC5cbiAgICAgICAgVmlldy5wcm90b3R5cGUuc3RvcE5vd0luZGljYXRvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm5vd0luZGljYXRvclRpbWVvdXRJRCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLm5vd0luZGljYXRvclRpbWVvdXRJRCk7XG4gICAgICAgICAgICAgICAgdGhpcy5ub3dJbmRpY2F0b3JUaW1lb3V0SUQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubm93SW5kaWNhdG9ySW50ZXJ2YWxJRCkge1xuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5ub3dJbmRpY2F0b3JJbnRlcnZhbElEKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5vd0luZGljYXRvckludGVydmFsSUQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuaXNOb3dJbmRpY2F0b3JSZW5kZXJlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMudW5yZW5kZXJOb3dJbmRpY2F0b3IoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzTm93SW5kaWNhdG9yUmVuZGVyZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgVmlldy5wcm90b3R5cGUuZ2V0Tm93SW5kaWNhdG9yVW5pdCA9IGZ1bmN0aW9uIChkYXRlUHJvZmlsZSwgZGF0ZVByb2ZpbGVHZW5lcmF0b3IpIHtcbiAgICAgICAgICAgIC8vIHN1YmNsYXNzZXMgc2hvdWxkIGltcGxlbWVudFxuICAgICAgICB9O1xuICAgICAgICAvLyBSZW5kZXJzIGEgY3VycmVudCB0aW1lIGluZGljYXRvciBhdCB0aGUgZ2l2ZW4gZGF0ZXRpbWVcbiAgICAgICAgVmlldy5wcm90b3R5cGUucmVuZGVyTm93SW5kaWNhdG9yID0gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgICAgIC8vIFNVQkNMQVNTRVMgTVVTVCBQQVNTIFRPIENISUxEUkVOIVxuICAgICAgICB9O1xuICAgICAgICAvLyBVbmRvZXMgdGhlIHJlbmRlcmluZyBhY3Rpb25zIGZyb20gcmVuZGVyTm93SW5kaWNhdG9yXG4gICAgICAgIFZpZXcucHJvdG90eXBlLnVucmVuZGVyTm93SW5kaWNhdG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gU1VCQ0xBU1NFUyBNVVNUIFBBU1MgVE8gQ0hJTERSRU4hXG4gICAgICAgIH07XG4gICAgICAgIC8qIFNjcm9sbGVyXG4gICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gICAgICAgIFZpZXcucHJvdG90eXBlLmFkZFNjcm9sbCA9IGZ1bmN0aW9uIChzY3JvbGwsIGlzRm9yY2VkKSB7XG4gICAgICAgICAgICBpZiAoaXNGb3JjZWQpIHtcbiAgICAgICAgICAgICAgICBzY3JvbGwuaXNGb3JjZWQgPSBpc0ZvcmNlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9fYXNzaWduKHRoaXMucXVldWVkU2Nyb2xsIHx8ICh0aGlzLnF1ZXVlZFNjcm9sbCA9IHt9KSwgc2Nyb2xsKTtcbiAgICAgICAgfTtcbiAgICAgICAgVmlldy5wcm90b3R5cGUucG9wU2Nyb2xsID0gZnVuY3Rpb24gKGlzUmVzaXplKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5UXVldWVkU2Nyb2xsKGlzUmVzaXplKTtcbiAgICAgICAgICAgIHRoaXMucXVldWVkU2Nyb2xsID0gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgVmlldy5wcm90b3R5cGUuYXBwbHlRdWV1ZWRTY3JvbGwgPSBmdW5jdGlvbiAoaXNSZXNpemUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnF1ZXVlZFNjcm9sbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlTY3JvbGwodGhpcy5xdWV1ZWRTY3JvbGwsIGlzUmVzaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgVmlldy5wcm90b3R5cGUucXVlcnlTY3JvbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2Nyb2xsID0ge307XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5kYXRlUHJvZmlsZSkgeyAvLyBkYXRlcyByZW5kZXJlZCB5ZXQ/XG4gICAgICAgICAgICAgICAgX19hc3NpZ24oc2Nyb2xsLCB0aGlzLnF1ZXJ5RGF0ZVNjcm9sbCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzY3JvbGw7XG4gICAgICAgIH07XG4gICAgICAgIFZpZXcucHJvdG90eXBlLmFwcGx5U2Nyb2xsID0gZnVuY3Rpb24gKHNjcm9sbCwgaXNSZXNpemUpIHtcbiAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IHNjcm9sbC5kdXJhdGlvbiwgaXNGb3JjZWQgPSBzY3JvbGwuaXNGb3JjZWQ7XG4gICAgICAgICAgICBpZiAoZHVyYXRpb24gIT0gbnVsbCAmJiAhaXNGb3JjZWQpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgc2Nyb2xsLmR1cmF0aW9uO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmRhdGVQcm9maWxlKSB7IC8vIGRhdGVzIHJlbmRlcmVkIHlldD9cbiAgICAgICAgICAgICAgICAgICAgX19hc3NpZ24oc2Nyb2xsLCB0aGlzLmNvbXB1dGVEYXRlU2Nyb2xsKGR1cmF0aW9uKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMuZGF0ZVByb2ZpbGUpIHsgLy8gZGF0ZXMgcmVuZGVyZWQgeWV0P1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlEYXRlU2Nyb2xsKHNjcm9sbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFZpZXcucHJvdG90eXBlLmNvbXB1dGVEYXRlU2Nyb2xsID0gZnVuY3Rpb24gKGR1cmF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4ge307IC8vIHN1YmNsYXNzZXMgbXVzdCBpbXBsZW1lbnRcbiAgICAgICAgfTtcbiAgICAgICAgVmlldy5wcm90b3R5cGUucXVlcnlEYXRlU2Nyb2xsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHt9OyAvLyBzdWJjbGFzc2VzIG11c3QgaW1wbGVtZW50XG4gICAgICAgIH07XG4gICAgICAgIFZpZXcucHJvdG90eXBlLmFwcGx5RGF0ZVNjcm9sbCA9IGZ1bmN0aW9uIChzY3JvbGwpIHtcbiAgICAgICAgICAgIC8vIHN1YmNsYXNzZXMgbXVzdCBpbXBsZW1lbnRcbiAgICAgICAgfTtcbiAgICAgICAgLy8gZm9yIEFQSVxuICAgICAgICBWaWV3LnByb3RvdHlwZS5zY3JvbGxUb0R1cmF0aW9uID0gZnVuY3Rpb24gKGR1cmF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5U2Nyb2xsKHsgZHVyYXRpb246IGR1cmF0aW9uIH0sIGZhbHNlKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFZpZXc7XG4gICAgfShEYXRlQ29tcG9uZW50KSk7XG4gICAgRW1pdHRlck1peGluLm1peEludG8oVmlldyk7XG4gICAgVmlldy5wcm90b3R5cGUudXNlc01pbk1heFRpbWUgPSBmYWxzZTtcbiAgICBWaWV3LnByb3RvdHlwZS5kYXRlUHJvZmlsZUdlbmVyYXRvckNsYXNzID0gRGF0ZVByb2ZpbGVHZW5lcmF0b3I7XG5cbiAgICB2YXIgRmdFdmVudFJlbmRlcmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBGZ0V2ZW50UmVuZGVyZXIoKSB7XG4gICAgICAgICAgICB0aGlzLnNlZ3MgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuaXNTaXplRGlydHkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLnJlbmRlclNlZ3MgPSBmdW5jdGlvbiAoY29udGV4dCwgc2VncywgbWlycm9ySW5mbykge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgICAgIHRoaXMucmFuZ2VVcGRhdGVkKCk7IC8vIGNhbGxlZCB0b28gZnJlcXVlbnRseSA6KFxuICAgICAgICAgICAgLy8gcmVuZGVyIGFuIGAuZWxgIG9uIGVhY2ggc2VnXG4gICAgICAgICAgICAvLyByZXR1cm5zIGEgc3Vic2V0IG9mIHRoZSBzZWdzLiBzZWdzIHRoYXQgd2VyZSBhY3R1YWxseSByZW5kZXJlZFxuICAgICAgICAgICAgc2VncyA9IHRoaXMucmVuZGVyU2VnRWxzKHNlZ3MsIG1pcnJvckluZm8pO1xuICAgICAgICAgICAgdGhpcy5zZWdzID0gc2VncztcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoU2VncyhzZWdzLCBtaXJyb3JJbmZvKTtcbiAgICAgICAgICAgIHRoaXMuaXNTaXplRGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgdHJpZ2dlclJlbmRlcmVkU2Vncyh0aGlzLmNvbnRleHQsIHRoaXMuc2VncywgQm9vbGVhbihtaXJyb3JJbmZvKSk7XG4gICAgICAgIH07XG4gICAgICAgIEZnRXZlbnRSZW5kZXJlci5wcm90b3R5cGUudW5yZW5kZXIgPSBmdW5jdGlvbiAoY29udGV4dCwgX3NlZ3MsIG1pcnJvckluZm8pIHtcbiAgICAgICAgICAgIHRyaWdnZXJXaWxsUmVtb3ZlU2Vncyh0aGlzLmNvbnRleHQsIHRoaXMuc2VncywgQm9vbGVhbihtaXJyb3JJbmZvKSk7XG4gICAgICAgICAgICB0aGlzLmRldGFjaFNlZ3ModGhpcy5zZWdzKTtcbiAgICAgICAgICAgIHRoaXMuc2VncyA9IFtdO1xuICAgICAgICB9O1xuICAgICAgICAvLyBVcGRhdGVzIHZhbHVlcyB0aGF0IHJlbHkgb24gb3B0aW9ucyBhbmQgYWxzbyByZWxhdGUgdG8gcmFuZ2VcbiAgICAgICAgRmdFdmVudFJlbmRlcmVyLnByb3RvdHlwZS5yYW5nZVVwZGF0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMuY29udGV4dC5vcHRpb25zO1xuICAgICAgICAgICAgdmFyIGRpc3BsYXlFdmVudFRpbWU7XG4gICAgICAgICAgICB2YXIgZGlzcGxheUV2ZW50RW5kO1xuICAgICAgICAgICAgdGhpcy5ldmVudFRpbWVGb3JtYXQgPSBjcmVhdGVGb3JtYXR0ZXIob3B0aW9ucy5ldmVudFRpbWVGb3JtYXQgfHwgdGhpcy5jb21wdXRlRXZlbnRUaW1lRm9ybWF0KCksIG9wdGlvbnMuZGVmYXVsdFJhbmdlU2VwYXJhdG9yKTtcbiAgICAgICAgICAgIGRpc3BsYXlFdmVudFRpbWUgPSBvcHRpb25zLmRpc3BsYXlFdmVudFRpbWU7XG4gICAgICAgICAgICBpZiAoZGlzcGxheUV2ZW50VGltZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheUV2ZW50VGltZSA9IHRoaXMuY29tcHV0ZURpc3BsYXlFdmVudFRpbWUoKTsgLy8gbWlnaHQgYmUgYmFzZWQgb2ZmIG9mIHJhbmdlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXNwbGF5RXZlbnRFbmQgPSBvcHRpb25zLmRpc3BsYXlFdmVudEVuZDtcbiAgICAgICAgICAgIGlmIChkaXNwbGF5RXZlbnRFbmQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRpc3BsYXlFdmVudEVuZCA9IHRoaXMuY29tcHV0ZURpc3BsYXlFdmVudEVuZCgpOyAvLyBtaWdodCBiZSBiYXNlZCBvZmYgb2YgcmFuZ2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGlzcGxheUV2ZW50VGltZSA9IGRpc3BsYXlFdmVudFRpbWU7XG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlFdmVudEVuZCA9IGRpc3BsYXlFdmVudEVuZDtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gUmVuZGVycyBhbmQgYXNzaWducyBhbiBgZWxgIHByb3BlcnR5IGZvciBlYWNoIGZvcmVncm91bmQgZXZlbnQgc2VnbWVudC5cbiAgICAgICAgLy8gT25seSByZXR1cm5zIHNlZ21lbnRzIHRoYXQgc3VjY2Vzc2Z1bGx5IHJlbmRlcmVkLlxuICAgICAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLnJlbmRlclNlZ0VscyA9IGZ1bmN0aW9uIChzZWdzLCBtaXJyb3JJbmZvKSB7XG4gICAgICAgICAgICB2YXIgaHRtbCA9ICcnO1xuICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICBpZiAoc2Vncy5sZW5ndGgpIHsgLy8gZG9uJ3QgYnVpbGQgYW4gZW1wdHkgaHRtbCBzdHJpbmdcbiAgICAgICAgICAgICAgICAvLyBidWlsZCBhIGxhcmdlIGNvbmNhdGVuYXRpb24gb2YgZXZlbnQgc2VnbWVudCBIVE1MXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNlZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaHRtbCArPSB0aGlzLnJlbmRlclNlZ0h0bWwoc2Vnc1tpXSwgbWlycm9ySW5mbyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEdyYWIgaW5kaXZpZHVhbCBlbGVtZW50cyBmcm9tIHRoZSBjb21iaW5lZCBIVE1MIHN0cmluZy4gVXNlIGVhY2ggYXMgdGhlIGRlZmF1bHQgcmVuZGVyaW5nLlxuICAgICAgICAgICAgICAgIC8vIFRoZW4sIGNvbXB1dGUgdGhlICdlbCcgZm9yIGVhY2ggc2VnbWVudC4gQW4gZWwgbWlnaHQgYmUgbnVsbCBpZiB0aGUgZXZlbnRSZW5kZXIgY2FsbGJhY2sgcmV0dXJuZWQgZmFsc2UuXG4gICAgICAgICAgICAgICAgaHRtbFRvRWxlbWVudHMoaHRtbCkuZm9yRWFjaChmdW5jdGlvbiAoZWwsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlZyA9IHNlZ3NbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VnLmVsID0gZWw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzZWdzID0gZmlsdGVyU2Vnc1ZpYUVscyh0aGlzLmNvbnRleHQsIHNlZ3MsIEJvb2xlYW4obWlycm9ySW5mbykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNlZ3M7XG4gICAgICAgIH07XG4gICAgICAgIC8vIEdlbmVyaWMgdXRpbGl0eSBmb3IgZ2VuZXJhdGluZyB0aGUgSFRNTCBjbGFzc05hbWVzIGZvciBhbiBldmVudCBzZWdtZW50J3MgZWxlbWVudFxuICAgICAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLmdldFNlZ0NsYXNzZXMgPSBmdW5jdGlvbiAoc2VnLCBpc0RyYWdnYWJsZSwgaXNSZXNpemFibGUsIG1pcnJvckluZm8pIHtcbiAgICAgICAgICAgIHZhciBjbGFzc2VzID0gW1xuICAgICAgICAgICAgICAgICdmYy1ldmVudCcsXG4gICAgICAgICAgICAgICAgc2VnLmlzU3RhcnQgPyAnZmMtc3RhcnQnIDogJ2ZjLW5vdC1zdGFydCcsXG4gICAgICAgICAgICAgICAgc2VnLmlzRW5kID8gJ2ZjLWVuZCcgOiAnZmMtbm90LWVuZCdcbiAgICAgICAgICAgIF0uY29uY2F0KHNlZy5ldmVudFJhbmdlLnVpLmNsYXNzTmFtZXMpO1xuICAgICAgICAgICAgaWYgKGlzRHJhZ2dhYmxlKSB7XG4gICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCdmYy1kcmFnZ2FibGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1Jlc2l6YWJsZSkge1xuICAgICAgICAgICAgICAgIGNsYXNzZXMucHVzaCgnZmMtcmVzaXphYmxlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWlycm9ySW5mbykge1xuICAgICAgICAgICAgICAgIGNsYXNzZXMucHVzaCgnZmMtbWlycm9yJyk7XG4gICAgICAgICAgICAgICAgaWYgKG1pcnJvckluZm8uaXNEcmFnZ2luZykge1xuICAgICAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2ZjLWRyYWdnaW5nJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtaXJyb3JJbmZvLmlzUmVzaXppbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCdmYy1yZXNpemluZycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjbGFzc2VzO1xuICAgICAgICB9O1xuICAgICAgICAvLyBDb21wdXRlIHRoZSB0ZXh0IHRoYXQgc2hvdWxkIGJlIGRpc3BsYXllZCBvbiBhbiBldmVudCdzIGVsZW1lbnQuXG4gICAgICAgIC8vIGByYW5nZWAgY2FuIGJlIHRoZSBFdmVudCBvYmplY3QgaXRzZWxmLCBvciBzb21ldGhpbmcgcmFuZ2UtbGlrZSwgd2l0aCBhdCBsZWFzdCBhIGBzdGFydGAuXG4gICAgICAgIC8vIElmIGV2ZW50IHRpbWVzIGFyZSBkaXNhYmxlZCwgb3IgdGhlIGV2ZW50IGhhcyBubyB0aW1lLCB3aWxsIHJldHVybiBhIGJsYW5rIHN0cmluZy5cbiAgICAgICAgLy8gSWYgbm90IHNwZWNpZmllZCwgZm9ybWF0dGVyIHdpbGwgZGVmYXVsdCB0byB0aGUgZXZlbnRUaW1lRm9ybWF0IHNldHRpbmcsXG4gICAgICAgIC8vIGFuZCBkaXNwbGF5RW5kIHdpbGwgZGVmYXVsdCB0byB0aGUgZGlzcGxheUV2ZW50RW5kIHNldHRpbmcuXG4gICAgICAgIEZnRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuZ2V0VGltZVRleHQgPSBmdW5jdGlvbiAoZXZlbnRSYW5nZSwgZm9ybWF0dGVyLCBkaXNwbGF5RW5kKSB7XG4gICAgICAgICAgICB2YXIgZGVmID0gZXZlbnRSYW5nZS5kZWYsIGluc3RhbmNlID0gZXZlbnRSYW5nZS5pbnN0YW5jZTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRUaW1lVGV4dChpbnN0YW5jZS5yYW5nZS5zdGFydCwgZGVmLmhhc0VuZCA/IGluc3RhbmNlLnJhbmdlLmVuZCA6IG51bGwsIGRlZi5hbGxEYXksIGZvcm1hdHRlciwgZGlzcGxheUVuZCwgaW5zdGFuY2UuZm9yY2VkU3RhcnRUem8sIGluc3RhbmNlLmZvcmNlZEVuZFR6byk7XG4gICAgICAgIH07XG4gICAgICAgIEZnRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuX2dldFRpbWVUZXh0ID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQsIGFsbERheSwgZm9ybWF0dGVyLCBkaXNwbGF5RW5kLCBmb3JjZWRTdGFydFR6bywgZm9yY2VkRW5kVHpvKSB7XG4gICAgICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMuY29udGV4dC5kYXRlRW52O1xuICAgICAgICAgICAgaWYgKGZvcm1hdHRlciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0dGVyID0gdGhpcy5ldmVudFRpbWVGb3JtYXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGlzcGxheUVuZCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheUVuZCA9IHRoaXMuZGlzcGxheUV2ZW50RW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuZGlzcGxheUV2ZW50VGltZSAmJiAhYWxsRGF5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGRpc3BsYXlFbmQgJiYgZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRlRW52LmZvcm1hdFJhbmdlKHN0YXJ0LCBlbmQsIGZvcm1hdHRlciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yY2VkU3RhcnRUem86IGZvcmNlZFN0YXJ0VHpvLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yY2VkRW5kVHpvOiBmb3JjZWRFbmRUem9cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZUVudi5mb3JtYXQoc3RhcnQsIGZvcm1hdHRlciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yY2VkVHpvOiBmb3JjZWRTdGFydFR6b1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH07XG4gICAgICAgIEZnRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuY29tcHV0ZUV2ZW50VGltZUZvcm1hdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaG91cjogJ251bWVyaWMnLFxuICAgICAgICAgICAgICAgIG1pbnV0ZTogJzItZGlnaXQnLFxuICAgICAgICAgICAgICAgIG9taXRaZXJvTWludXRlOiB0cnVlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLmNvbXB1dGVEaXNwbGF5RXZlbnRUaW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIEZnRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuY29tcHV0ZURpc3BsYXlFdmVudEVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICAvLyBVdGlsaXR5IGZvciBnZW5lcmF0aW5nIGV2ZW50IHNraW4tcmVsYXRlZCBDU1MgcHJvcGVydGllc1xuICAgICAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLmdldFNraW5Dc3MgPSBmdW5jdGlvbiAodWkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtY29sb3InOiB1aS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgJ2JvcmRlci1jb2xvcic6IHVpLmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgICAgIGNvbG9yOiB1aS50ZXh0Q29sb3JcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIEZnRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuc29ydEV2ZW50U2VncyA9IGZ1bmN0aW9uIChzZWdzKSB7XG4gICAgICAgICAgICB2YXIgc3BlY3MgPSB0aGlzLmNvbnRleHQuZXZlbnRPcmRlclNwZWNzO1xuICAgICAgICAgICAgdmFyIG9ianMgPSBzZWdzLm1hcChidWlsZFNlZ0NvbXBhcmVPYmopO1xuICAgICAgICAgICAgb2Jqcy5zb3J0KGZ1bmN0aW9uIChvYmowLCBvYmoxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBhcmVCeUZpZWxkU3BlY3Mob2JqMCwgb2JqMSwgc3BlY3MpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gb2Jqcy5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYy5fc2VnO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIEZnRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuY29tcHV0ZVNpemVzID0gZnVuY3Rpb24gKGZvcmNlKSB7XG4gICAgICAgICAgICBpZiAoZm9yY2UgfHwgdGhpcy5pc1NpemVEaXJ0eSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29tcHV0ZVNlZ1NpemVzKHRoaXMuc2Vncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIEZnRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuYXNzaWduU2l6ZXMgPSBmdW5jdGlvbiAoZm9yY2UpIHtcbiAgICAgICAgICAgIGlmIChmb3JjZSB8fCB0aGlzLmlzU2l6ZURpcnR5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hc3NpZ25TZWdTaXplcyh0aGlzLnNlZ3MpO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNTaXplRGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgRmdFdmVudFJlbmRlcmVyLnByb3RvdHlwZS5jb21wdXRlU2VnU2l6ZXMgPSBmdW5jdGlvbiAoc2Vncykge1xuICAgICAgICB9O1xuICAgICAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLmFzc2lnblNlZ1NpemVzID0gZnVuY3Rpb24gKHNlZ3MpIHtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gTWFuaXB1bGF0aW9uIG9uIHJlbmRlcmVkIHNlZ3NcbiAgICAgICAgRmdFdmVudFJlbmRlcmVyLnByb3RvdHlwZS5oaWRlQnlIYXNoID0gZnVuY3Rpb24gKGhhc2gpIHtcbiAgICAgICAgICAgIGlmIChoYXNoKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuc2VnczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlZyA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc2hbc2VnLmV2ZW50UmFuZ2UuaW5zdGFuY2UuaW5zdGFuY2VJZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlZy5lbC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIEZnRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuc2hvd0J5SGFzaCA9IGZ1bmN0aW9uIChoYXNoKSB7XG4gICAgICAgICAgICBpZiAoaGFzaCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLnNlZ3M7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWcgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNoW3NlZy5ldmVudFJhbmdlLmluc3RhbmNlLmluc3RhbmNlSWRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWcuZWwuc3R5bGUudmlzaWJpbGl0eSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBGZ0V2ZW50UmVuZGVyZXIucHJvdG90eXBlLnNlbGVjdEJ5SW5zdGFuY2VJZCA9IGZ1bmN0aW9uIChpbnN0YW5jZUlkKSB7XG4gICAgICAgICAgICBpZiAoaW5zdGFuY2VJZCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLnNlZ3M7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWcgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBldmVudEluc3RhbmNlID0gc2VnLmV2ZW50UmFuZ2UuaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudEluc3RhbmNlICYmIGV2ZW50SW5zdGFuY2UuaW5zdGFuY2VJZCA9PT0gaW5zdGFuY2VJZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgc2VnLmVsIC8vIG5lY2Vzc2FyeT9cbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWcuZWwuY2xhc3NMaXN0LmFkZCgnZmMtc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgRmdFdmVudFJlbmRlcmVyLnByb3RvdHlwZS51bnNlbGVjdEJ5SW5zdGFuY2VJZCA9IGZ1bmN0aW9uIChpbnN0YW5jZUlkKSB7XG4gICAgICAgICAgICBpZiAoaW5zdGFuY2VJZCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLnNlZ3M7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWcgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWcuZWwpIHsgLy8gbmVjZXNzYXJ5P1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VnLmVsLmNsYXNzTGlzdC5yZW1vdmUoJ2ZjLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBGZ0V2ZW50UmVuZGVyZXI7XG4gICAgfSgpKTtcbiAgICAvLyByZXR1cm5zIGEgb2JqZWN0IHdpdGggYWxsIHByaW1pdGl2ZSBwcm9wcyB0aGF0IGNhbiBiZSBjb21wYXJlZFxuICAgIGZ1bmN0aW9uIGJ1aWxkU2VnQ29tcGFyZU9iaihzZWcpIHtcbiAgICAgICAgdmFyIGV2ZW50RGVmID0gc2VnLmV2ZW50UmFuZ2UuZGVmO1xuICAgICAgICB2YXIgcmFuZ2UgPSBzZWcuZXZlbnRSYW5nZS5pbnN0YW5jZS5yYW5nZTtcbiAgICAgICAgdmFyIHN0YXJ0ID0gcmFuZ2Uuc3RhcnQgPyByYW5nZS5zdGFydC52YWx1ZU9mKCkgOiAwOyAvLyBUT0RPOiBiZXR0ZXIgc3VwcG9ydCBmb3Igb3Blbi1yYW5nZSBldmVudHNcbiAgICAgICAgdmFyIGVuZCA9IHJhbmdlLmVuZCA/IHJhbmdlLmVuZC52YWx1ZU9mKCkgOiAwOyAvLyBcIlxuICAgICAgICByZXR1cm4gX19hc3NpZ24oe30sIGV2ZW50RGVmLmV4dGVuZGVkUHJvcHMsIGV2ZW50RGVmLCB7IGlkOiBldmVudERlZi5wdWJsaWNJZCwgc3RhcnQ6IHN0YXJ0LFxuICAgICAgICAgICAgZW5kOiBlbmQsIGR1cmF0aW9uOiBlbmQgLSBzdGFydCwgYWxsRGF5OiBOdW1iZXIoZXZlbnREZWYuYWxsRGF5KSwgX3NlZzogc2VnIC8vIGZvciBsYXRlciByZXRyaWV2YWxcbiAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qXG4gICAgVE9ETzogd2hlbiByZWZhY3RvcmluZyB0aGlzIGNsYXNzLCBtYWtlIGEgbmV3IEZpbGxSZW5kZXJlciBpbnN0YW5jZSBmb3IgZWFjaCBgdHlwZWBcbiAgICAqL1xuICAgIHZhciBGaWxsUmVuZGVyZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIEZpbGxSZW5kZXJlcigpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsbFNlZ1RhZyA9ICdkaXYnO1xuICAgICAgICAgICAgdGhpcy5kaXJ0eVNpemVGbGFncyA9IHt9O1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbHNCeVR5cGUgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuc2Vnc0J5VHlwZSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIEZpbGxSZW5kZXJlci5wcm90b3R5cGUuZ2V0U2Vnc0J5VHlwZSA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZWdzQnlUeXBlW3R5cGVdIHx8IFtdO1xuICAgICAgICB9O1xuICAgICAgICBGaWxsUmVuZGVyZXIucHJvdG90eXBlLnJlbmRlclNlZ3MgPSBmdW5jdGlvbiAodHlwZSwgY29udGV4dCwgc2Vncykge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgICAgIHZhciByZW5kZXJlZFNlZ3MgPSB0aGlzLnJlbmRlclNlZ0Vscyh0eXBlLCBzZWdzKTsgLy8gYXNzaWduZXMgYC5lbGAgdG8gZWFjaCBzZWcuIHJldHVybnMgc3VjY2Vzc2Z1bGx5IHJlbmRlcmVkIHNlZ3NcbiAgICAgICAgICAgIHZhciBjb250YWluZXJFbHMgPSB0aGlzLmF0dGFjaFNlZ3ModHlwZSwgcmVuZGVyZWRTZWdzKTtcbiAgICAgICAgICAgIGlmIChjb250YWluZXJFbHMpIHtcbiAgICAgICAgICAgICAgICAoX2EgPSAodGhpcy5jb250YWluZXJFbHNCeVR5cGVbdHlwZV0gfHwgKHRoaXMuY29udGFpbmVyRWxzQnlUeXBlW3R5cGVdID0gW10pKSkucHVzaC5hcHBseShfYSwgY29udGFpbmVyRWxzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2Vnc0J5VHlwZVt0eXBlXSA9IHJlbmRlcmVkU2VncztcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnYmdFdmVudCcpIHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyUmVuZGVyZWRTZWdzKGNvbnRleHQsIHJlbmRlcmVkU2VncywgZmFsc2UpOyAvLyBpc01pcnJvcj1mYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kaXJ0eVNpemVGbGFnc1t0eXBlXSA9IHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFVucmVuZGVycyBhIHNwZWNpZmljIHR5cGUgb2YgZmlsbCB0aGF0IGlzIGN1cnJlbnRseSByZW5kZXJlZCBvbiB0aGUgZ3JpZFxuICAgICAgICBGaWxsUmVuZGVyZXIucHJvdG90eXBlLnVucmVuZGVyID0gZnVuY3Rpb24gKHR5cGUsIGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBzZWdzID0gdGhpcy5zZWdzQnlUeXBlW3R5cGVdO1xuICAgICAgICAgICAgaWYgKHNlZ3MpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2JnRXZlbnQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJXaWxsUmVtb3ZlU2Vncyhjb250ZXh0LCBzZWdzLCBmYWxzZSk7IC8vIGlzTWlycm9yPWZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZGV0YWNoU2Vncyh0eXBlLCBzZWdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gUmVuZGVycyBhbmQgYXNzaWducyBhbiBgZWxgIHByb3BlcnR5IGZvciBlYWNoIGZpbGwgc2VnbWVudC4gR2VuZXJpYyBlbm91Z2ggdG8gd29yayB3aXRoIGRpZmZlcmVudCB0eXBlcy5cbiAgICAgICAgLy8gT25seSByZXR1cm5zIHNlZ21lbnRzIHRoYXQgc3VjY2Vzc2Z1bGx5IHJlbmRlcmVkLlxuICAgICAgICBGaWxsUmVuZGVyZXIucHJvdG90eXBlLnJlbmRlclNlZ0VscyA9IGZ1bmN0aW9uICh0eXBlLCBzZWdzKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGh0bWwgPSAnJztcbiAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgaWYgKHNlZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgLy8gYnVpbGQgYSBsYXJnZSBjb25jYXRlbmF0aW9uIG9mIHNlZ21lbnQgSFRNTFxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzZWdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gdGhpcy5yZW5kZXJTZWdIdG1sKHR5cGUsIHNlZ3NbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBHcmFiIGluZGl2aWR1YWwgZWxlbWVudHMgZnJvbSB0aGUgY29tYmluZWQgSFRNTCBzdHJpbmcuIFVzZSBlYWNoIGFzIHRoZSBkZWZhdWx0IHJlbmRlcmluZy5cbiAgICAgICAgICAgICAgICAvLyBUaGVuLCBjb21wdXRlIHRoZSAnZWwnIGZvciBlYWNoIHNlZ21lbnQuXG4gICAgICAgICAgICAgICAgaHRtbFRvRWxlbWVudHMoaHRtbCkuZm9yRWFjaChmdW5jdGlvbiAoZWwsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlZyA9IHNlZ3NbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VnLmVsID0gZWw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2JnRXZlbnQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlZ3MgPSBmaWx0ZXJTZWdzVmlhRWxzKHRoaXMuY29udGV4dCwgc2VncywgZmFsc2UgLy8gaXNNaXJyb3IuIGJhY2tncm91bmQgZXZlbnRzIGNhbiBuZXZlciBiZSBtaXJyb3IgZWxlbWVudHNcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gY29ycmVjdCBlbGVtZW50IHR5cGU/ICh3b3VsZCBiZSBiYWQgaWYgYSBub24tVEQgd2VyZSBpbnNlcnRlZCBpbnRvIGEgdGFibGUgZm9yIGV4YW1wbGUpXG4gICAgICAgICAgICAgICAgc2VncyA9IHNlZ3MuZmlsdGVyKGZ1bmN0aW9uIChzZWcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRNYXRjaGVzKHNlZy5lbCwgX3RoaXMuZmlsbFNlZ1RhZyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2VncztcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQnVpbGRzIHRoZSBIVE1MIG5lZWRlZCBmb3Igb25lIGZpbGwgc2VnbWVudC4gR2VuZXJpYyBlbm91Z2ggdG8gd29yayB3aXRoIGRpZmZlcmVudCB0eXBlcy5cbiAgICAgICAgRmlsbFJlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXJTZWdIdG1sID0gZnVuY3Rpb24gKHR5cGUsIHNlZykge1xuICAgICAgICAgICAgdmFyIGNzcyA9IG51bGw7XG4gICAgICAgICAgICB2YXIgY2xhc3NOYW1lcyA9IFtdO1xuICAgICAgICAgICAgaWYgKHR5cGUgIT09ICdoaWdobGlnaHQnICYmIHR5cGUgIT09ICdidXNpbmVzc0hvdXJzJykge1xuICAgICAgICAgICAgICAgIGNzcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtY29sb3InOiBzZWcuZXZlbnRSYW5nZS51aS5iYWNrZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGUgIT09ICdoaWdobGlnaHQnKSB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXMuY29uY2F0KHNlZy5ldmVudFJhbmdlLnVpLmNsYXNzTmFtZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdidXNpbmVzc0hvdXJzJykge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZXMucHVzaCgnZmMtYmdldmVudCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lcy5wdXNoKCdmYy0nICsgdHlwZS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnPCcgKyB0aGlzLmZpbGxTZWdUYWcgK1xuICAgICAgICAgICAgICAgIChjbGFzc05hbWVzLmxlbmd0aCA/ICcgY2xhc3M9XCInICsgY2xhc3NOYW1lcy5qb2luKCcgJykgKyAnXCInIDogJycpICtcbiAgICAgICAgICAgICAgICAoY3NzID8gJyBzdHlsZT1cIicgKyBjc3NUb1N0cihjc3MpICsgJ1wiJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgJz48LycgKyB0aGlzLmZpbGxTZWdUYWcgKyAnPic7XG4gICAgICAgIH07XG4gICAgICAgIEZpbGxSZW5kZXJlci5wcm90b3R5cGUuZGV0YWNoU2VncyA9IGZ1bmN0aW9uICh0eXBlLCBzZWdzKSB7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyRWxzID0gdGhpcy5jb250YWluZXJFbHNCeVR5cGVbdHlwZV07XG4gICAgICAgICAgICBpZiAoY29udGFpbmVyRWxzKSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyRWxzLmZvckVhY2gocmVtb3ZlRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuY29udGFpbmVyRWxzQnlUeXBlW3R5cGVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBGaWxsUmVuZGVyZXIucHJvdG90eXBlLmNvbXB1dGVTaXplcyA9IGZ1bmN0aW9uIChmb3JjZSkge1xuICAgICAgICAgICAgZm9yICh2YXIgdHlwZSBpbiB0aGlzLnNlZ3NCeVR5cGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZm9yY2UgfHwgdGhpcy5kaXJ0eVNpemVGbGFnc1t0eXBlXSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXB1dGVTZWdTaXplcyh0aGlzLnNlZ3NCeVR5cGVbdHlwZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgRmlsbFJlbmRlcmVyLnByb3RvdHlwZS5hc3NpZ25TaXplcyA9IGZ1bmN0aW9uIChmb3JjZSkge1xuICAgICAgICAgICAgZm9yICh2YXIgdHlwZSBpbiB0aGlzLnNlZ3NCeVR5cGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZm9yY2UgfHwgdGhpcy5kaXJ0eVNpemVGbGFnc1t0eXBlXSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFzc2lnblNlZ1NpemVzKHRoaXMuc2Vnc0J5VHlwZVt0eXBlXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kaXJ0eVNpemVGbGFncyA9IHt9O1xuICAgICAgICB9O1xuICAgICAgICBGaWxsUmVuZGVyZXIucHJvdG90eXBlLmNvbXB1dGVTZWdTaXplcyA9IGZ1bmN0aW9uIChzZWdzKSB7XG4gICAgICAgIH07XG4gICAgICAgIEZpbGxSZW5kZXJlci5wcm90b3R5cGUuYXNzaWduU2VnU2l6ZXMgPSBmdW5jdGlvbiAoc2Vncykge1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gRmlsbFJlbmRlcmVyO1xuICAgIH0oKSk7XG5cbiAgICB2YXIgTmFtZWRUaW1lWm9uZUltcGwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIE5hbWVkVGltZVpvbmVJbXBsKHRpbWVab25lTmFtZSkge1xuICAgICAgICAgICAgdGhpcy50aW1lWm9uZU5hbWUgPSB0aW1lWm9uZU5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE5hbWVkVGltZVpvbmVJbXBsO1xuICAgIH0oKSk7XG5cbiAgICAvKlxuICAgIEFuIGFic3RyYWN0aW9uIGZvciBhIGRyYWdnaW5nIGludGVyYWN0aW9uIG9yaWdpbmF0aW5nIG9uIGFuIGV2ZW50LlxuICAgIERvZXMgaGlnaGVyLWxldmVsIHRoaW5ncyB0aGFuIFBvaW50ZXJEcmFnZ2VyLCBzdWNoIGFzIHBvc3NpYmx5OlxuICAgIC0gYSBcIm1pcnJvclwiIHRoYXQgbW92ZXMgd2l0aCB0aGUgcG9pbnRlclxuICAgIC0gYSBtaW5pbXVtIG51bWJlciBvZiBwaXhlbHMgb3Igb3RoZXIgY3JpdGVyaWEgZm9yIGEgdHJ1ZSBkcmFnIHRvIGJlZ2luXG5cbiAgICBzdWJjbGFzc2VzIG11c3QgZW1pdDpcbiAgICAtIHBvaW50ZXJkb3duXG4gICAgLSBkcmFnc3RhcnRcbiAgICAtIGRyYWdtb3ZlXG4gICAgLSBwb2ludGVydXBcbiAgICAtIGRyYWdlbmRcbiAgICAqL1xuICAgIHZhciBFbGVtZW50RHJhZ2dpbmcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIEVsZW1lbnREcmFnZ2luZyhlbCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyID0gbmV3IEVtaXR0ZXJNaXhpbigpO1xuICAgICAgICB9XG4gICAgICAgIEVsZW1lbnREcmFnZ2luZy5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgfTtcbiAgICAgICAgRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5zZXRNaXJyb3JJc1Zpc2libGUgPSBmdW5jdGlvbiAoYm9vbCkge1xuICAgICAgICAgICAgLy8gb3B0aW9uYWwgaWYgc3ViY2xhc3MgZG9lc24ndCB3YW50IHRvIHN1cHBvcnQgYSBtaXJyb3JcbiAgICAgICAgfTtcbiAgICAgICAgRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5zZXRNaXJyb3JOZWVkc1JldmVydCA9IGZ1bmN0aW9uIChib29sKSB7XG4gICAgICAgICAgICAvLyBvcHRpb25hbCBpZiBzdWJjbGFzcyBkb2Vzbid0IHdhbnQgdG8gc3VwcG9ydCBhIG1pcnJvclxuICAgICAgICB9O1xuICAgICAgICBFbGVtZW50RHJhZ2dpbmcucHJvdG90eXBlLnNldEF1dG9TY3JvbGxFbmFibGVkID0gZnVuY3Rpb24gKGJvb2wpIHtcbiAgICAgICAgICAgIC8vIG9wdGlvbmFsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBFbGVtZW50RHJhZ2dpbmc7XG4gICAgfSgpKTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZUlucHV0LCBzZXR0aW5ncykge1xuICAgICAgICBpZiAoc2V0dGluZ3MgPT09IHZvaWQgMCkgeyBzZXR0aW5ncyA9IHt9OyB9XG4gICAgICAgIHZhciBkYXRlRW52ID0gYnVpbGREYXRlRW52JDEoc2V0dGluZ3MpO1xuICAgICAgICB2YXIgZm9ybWF0dGVyID0gY3JlYXRlRm9ybWF0dGVyKHNldHRpbmdzKTtcbiAgICAgICAgdmFyIGRhdGVNZXRhID0gZGF0ZUVudi5jcmVhdGVNYXJrZXJNZXRhKGRhdGVJbnB1dCk7XG4gICAgICAgIGlmICghZGF0ZU1ldGEpIHsgLy8gVE9ETzogd2FybmluZz9cbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0ZUVudi5mb3JtYXQoZGF0ZU1ldGEubWFya2VyLCBmb3JtYXR0ZXIsIHtcbiAgICAgICAgICAgIGZvcmNlZFR6bzogZGF0ZU1ldGEuZm9yY2VkVHpvXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb3JtYXRSYW5nZShzdGFydElucHV0LCBlbmRJbnB1dCwgc2V0dGluZ3MgLy8gbWl4dHVyZSBvZiBlbnYgYW5kIGZvcm1hdHRlciBzZXR0aW5nc1xuICAgICkge1xuICAgICAgICB2YXIgZGF0ZUVudiA9IGJ1aWxkRGF0ZUVudiQxKHR5cGVvZiBzZXR0aW5ncyA9PT0gJ29iamVjdCcgJiYgc2V0dGluZ3MgPyBzZXR0aW5ncyA6IHt9KTsgLy8gcGFzcyBpbiBpZiBub24tbnVsbCBvYmplY3RcbiAgICAgICAgdmFyIGZvcm1hdHRlciA9IGNyZWF0ZUZvcm1hdHRlcihzZXR0aW5ncywgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdFJhbmdlU2VwYXJhdG9yKTtcbiAgICAgICAgdmFyIHN0YXJ0TWV0YSA9IGRhdGVFbnYuY3JlYXRlTWFya2VyTWV0YShzdGFydElucHV0KTtcbiAgICAgICAgdmFyIGVuZE1ldGEgPSBkYXRlRW52LmNyZWF0ZU1hcmtlck1ldGEoZW5kSW5wdXQpO1xuICAgICAgICBpZiAoIXN0YXJ0TWV0YSB8fCAhZW5kTWV0YSkgeyAvLyBUT0RPOiB3YXJuaW5nP1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRlRW52LmZvcm1hdFJhbmdlKHN0YXJ0TWV0YS5tYXJrZXIsIGVuZE1ldGEubWFya2VyLCBmb3JtYXR0ZXIsIHtcbiAgICAgICAgICAgIGZvcmNlZFN0YXJ0VHpvOiBzdGFydE1ldGEuZm9yY2VkVHpvLFxuICAgICAgICAgICAgZm9yY2VkRW5kVHpvOiBlbmRNZXRhLmZvcmNlZFR6byxcbiAgICAgICAgICAgIGlzRW5kRXhjbHVzaXZlOiBzZXR0aW5ncy5pc0VuZEV4Y2x1c2l2ZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gVE9ETzogbW9yZSBEUlkgYW5kIG9wdGltaXplZFxuICAgIGZ1bmN0aW9uIGJ1aWxkRGF0ZUVudiQxKHNldHRpbmdzKSB7XG4gICAgICAgIHZhciBsb2NhbGUgPSBidWlsZExvY2FsZShzZXR0aW5ncy5sb2NhbGUgfHwgJ2VuJywgcGFyc2VSYXdMb2NhbGVzKFtdKS5tYXApOyAvLyBUT0RPOiBkb24ndCBoYXJkY29kZSAnZW4nIGV2ZXJ5d2hlcmVcbiAgICAgICAgLy8gZW5zdXJlIHJlcXVpcmVkIHNldHRpbmdzXG4gICAgICAgIHNldHRpbmdzID0gX19hc3NpZ24oeyB0aW1lWm9uZTogZ2xvYmFsRGVmYXVsdHMudGltZVpvbmUsIGNhbGVuZGFyU3lzdGVtOiAnZ3JlZ29yeScgfSwgc2V0dGluZ3MsIHsgbG9jYWxlOiBsb2NhbGUgfSk7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZUVudihzZXR0aW5ncyk7XG4gICAgfVxuXG4gICAgdmFyIERSQUdfTUVUQV9QUk9QUyA9IHtcbiAgICAgICAgc3RhcnRUaW1lOiBjcmVhdGVEdXJhdGlvbixcbiAgICAgICAgZHVyYXRpb246IGNyZWF0ZUR1cmF0aW9uLFxuICAgICAgICBjcmVhdGU6IEJvb2xlYW4sXG4gICAgICAgIHNvdXJjZUlkOiBTdHJpbmdcbiAgICB9O1xuICAgIHZhciBEUkFHX01FVEFfREVGQVVMVFMgPSB7XG4gICAgICAgIGNyZWF0ZTogdHJ1ZVxuICAgIH07XG4gICAgZnVuY3Rpb24gcGFyc2VEcmFnTWV0YShyYXcpIHtcbiAgICAgICAgdmFyIGxlZnRvdmVyUHJvcHMgPSB7fTtcbiAgICAgICAgdmFyIHJlZmluZWQgPSByZWZpbmVQcm9wcyhyYXcsIERSQUdfTUVUQV9QUk9QUywgRFJBR19NRVRBX0RFRkFVTFRTLCBsZWZ0b3ZlclByb3BzKTtcbiAgICAgICAgcmVmaW5lZC5sZWZ0b3ZlclByb3BzID0gbGVmdG92ZXJQcm9wcztcbiAgICAgICAgcmV0dXJuIHJlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gQ29tcHV0ZXMgYSBkZWZhdWx0IGNvbHVtbiBoZWFkZXIgZm9ybWF0dGluZyBzdHJpbmcgaWYgYGNvbEZvcm1hdGAgaXMgbm90IGV4cGxpY2l0bHkgZGVmaW5lZFxuICAgIGZ1bmN0aW9uIGNvbXB1dGVGYWxsYmFja0hlYWRlckZvcm1hdChkYXRlc1JlcERpc3RpbmN0RGF5cywgZGF5Q250KSB7XG4gICAgICAgIC8vIGlmIG1vcmUgdGhhbiBvbmUgd2VlayByb3csIG9yIGlmIHRoZXJlIGFyZSBhIGxvdCBvZiBjb2x1bW5zIHdpdGggbm90IG11Y2ggc3BhY2UsXG4gICAgICAgIC8vIHB1dCBqdXN0IHRoZSBkYXkgbnVtYmVycyB3aWxsIGJlIGluIGVhY2ggY2VsbFxuICAgICAgICBpZiAoIWRhdGVzUmVwRGlzdGluY3REYXlzIHx8IGRheUNudCA+IDEwKSB7XG4gICAgICAgICAgICByZXR1cm4geyB3ZWVrZGF5OiAnc2hvcnQnIH07IC8vIFwiU2F0XCJcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkYXlDbnQgPiAxKSB7XG4gICAgICAgICAgICByZXR1cm4geyB3ZWVrZGF5OiAnc2hvcnQnLCBtb250aDogJ251bWVyaWMnLCBkYXk6ICdudW1lcmljJywgb21pdENvbW1hczogdHJ1ZSB9OyAvLyBcIlNhdCAxMS8xMlwiXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4geyB3ZWVrZGF5OiAnbG9uZycgfTsgLy8gXCJTYXR1cmRheVwiXG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcmVuZGVyRGF0ZUNlbGwoZGF0ZU1hcmtlciwgZGF0ZVByb2ZpbGUsIGRhdGVzUmVwRGlzdGluY3REYXlzLCBjb2xDbnQsIGNvbEhlYWRGb3JtYXQsIGNvbnRleHQsIGNvbHNwYW4sIG90aGVyQXR0cnMpIHtcbiAgICAgICAgdmFyIGRhdGVFbnYgPSBjb250ZXh0LmRhdGVFbnYsIHRoZW1lID0gY29udGV4dC50aGVtZSwgb3B0aW9ucyA9IGNvbnRleHQub3B0aW9ucztcbiAgICAgICAgdmFyIGlzRGF0ZVZhbGlkID0gcmFuZ2VDb250YWluc01hcmtlcihkYXRlUHJvZmlsZS5hY3RpdmVSYW5nZSwgZGF0ZU1hcmtlcik7IC8vIFRPRE86IGNhbGxlZCB0b28gZnJlcXVlbnRseS4gY2FjaGUgc29tZWhvdy5cbiAgICAgICAgdmFyIGNsYXNzTmFtZXMgPSBbXG4gICAgICAgICAgICAnZmMtZGF5LWhlYWRlcicsXG4gICAgICAgICAgICB0aGVtZS5nZXRDbGFzcygnd2lkZ2V0SGVhZGVyJylcbiAgICAgICAgXTtcbiAgICAgICAgdmFyIGlubmVySHRtbDtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmNvbHVtbkhlYWRlckh0bWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGlubmVySHRtbCA9IG9wdGlvbnMuY29sdW1uSGVhZGVySHRtbChkYXRlRW52LnRvRGF0ZShkYXRlTWFya2VyKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuY29sdW1uSGVhZGVyVGV4dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgaW5uZXJIdG1sID0gaHRtbEVzY2FwZShvcHRpb25zLmNvbHVtbkhlYWRlclRleHQoZGF0ZUVudi50b0RhdGUoZGF0ZU1hcmtlcikpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlubmVySHRtbCA9IGh0bWxFc2NhcGUoZGF0ZUVudi5mb3JtYXQoZGF0ZU1hcmtlciwgY29sSGVhZEZvcm1hdCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIG9ubHkgb25lIHJvdyBvZiBkYXlzLCB0aGUgY2xhc3NOYW1lcyBvbiB0aGUgaGVhZGVyIGNhbiByZXByZXNlbnQgdGhlIHNwZWNpZmljIGRheXMgYmVuZWF0aFxuICAgICAgICBpZiAoZGF0ZXNSZXBEaXN0aW5jdERheXMpIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMgPSBjbGFzc05hbWVzLmNvbmNhdChcbiAgICAgICAgICAgIC8vIGluY2x1ZGVzIHRoZSBkYXktb2Ytd2VlayBjbGFzc1xuICAgICAgICAgICAgLy8gbm9UaGVtZUhpZ2hsaWdodD10cnVlIChkb24ndCBoaWdobGlnaHQgdGhlIGhlYWRlcilcbiAgICAgICAgICAgIGdldERheUNsYXNzZXMoZGF0ZU1hcmtlciwgZGF0ZVByb2ZpbGUsIGNvbnRleHQsIHRydWUpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMucHVzaCgnZmMtJyArIERBWV9JRFNbZGF0ZU1hcmtlci5nZXRVVENEYXkoKV0pOyAvLyBvbmx5IGFkZCB0aGUgZGF5LW9mLXdlZWsgY2xhc3NcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJycgK1xuICAgICAgICAgICAgJzx0aCBjbGFzcz1cIicgKyBjbGFzc05hbWVzLmpvaW4oJyAnKSArICdcIicgK1xuICAgICAgICAgICAgKChpc0RhdGVWYWxpZCAmJiBkYXRlc1JlcERpc3RpbmN0RGF5cykgP1xuICAgICAgICAgICAgICAgICcgZGF0YS1kYXRlPVwiJyArIGRhdGVFbnYuZm9ybWF0SXNvKGRhdGVNYXJrZXIsIHsgb21pdFRpbWU6IHRydWUgfSkgKyAnXCInIDpcbiAgICAgICAgICAgICAgICAnJykgK1xuICAgICAgICAgICAgKGNvbHNwYW4gPiAxID9cbiAgICAgICAgICAgICAgICAnIGNvbHNwYW49XCInICsgY29sc3BhbiArICdcIicgOlxuICAgICAgICAgICAgICAgICcnKSArXG4gICAgICAgICAgICAob3RoZXJBdHRycyA/XG4gICAgICAgICAgICAgICAgJyAnICsgb3RoZXJBdHRycyA6XG4gICAgICAgICAgICAgICAgJycpICtcbiAgICAgICAgICAgICc+JyArXG4gICAgICAgICAgICAoaXNEYXRlVmFsaWQgP1xuICAgICAgICAgICAgICAgIC8vIGRvbid0IG1ha2UgYSBsaW5rIGlmIHRoZSBoZWFkaW5nIGNvdWxkIHJlcHJlc2VudCBtdWx0aXBsZSBkYXlzLCBvciBpZiB0aGVyZSdzIG9ubHkgb25lIGRheSAoZm9yY2VPZmYpXG4gICAgICAgICAgICAgICAgYnVpbGRHb3RvQW5jaG9ySHRtbChvcHRpb25zLCBkYXRlRW52LCB7IGRhdGU6IGRhdGVNYXJrZXIsIGZvcmNlT2ZmOiAhZGF0ZXNSZXBEaXN0aW5jdERheXMgfHwgY29sQ250ID09PSAxIH0sIGlubmVySHRtbCkgOlxuICAgICAgICAgICAgICAgIC8vIGlmIG5vdCB2YWxpZCwgZGlzcGxheSB0ZXh0LCBidXQgbm8gbGlua1xuICAgICAgICAgICAgICAgIGlubmVySHRtbCkgK1xuICAgICAgICAgICAgJzwvdGg+JztcbiAgICB9XG5cbiAgICB2YXIgRGF5SGVhZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoRGF5SGVhZGVyLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBEYXlIZWFkZXIocGFyZW50RWwpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgICAgICBfdGhpcy5yZW5kZXJTa2VsZXRvbiA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMuX3JlbmRlclNrZWxldG9uLCBfdGhpcy5fdW5yZW5kZXJTa2VsZXRvbik7XG4gICAgICAgICAgICBfdGhpcy5wYXJlbnRFbCA9IHBhcmVudEVsO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICB9XG4gICAgICAgIERheUhlYWRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgICAgICB2YXIgZGF0ZXMgPSBwcm9wcy5kYXRlcywgZGF0ZXNSZXBEaXN0aW5jdERheXMgPSBwcm9wcy5kYXRlc1JlcERpc3RpbmN0RGF5cztcbiAgICAgICAgICAgIHZhciBwYXJ0cyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJTa2VsZXRvbihjb250ZXh0KTtcbiAgICAgICAgICAgIGlmIChwcm9wcy5yZW5kZXJJbnRyb0h0bWwpIHtcbiAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKHByb3BzLnJlbmRlckludHJvSHRtbCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjb2xIZWFkRm9ybWF0ID0gY3JlYXRlRm9ybWF0dGVyKGNvbnRleHQub3B0aW9ucy5jb2x1bW5IZWFkZXJGb3JtYXQgfHxcbiAgICAgICAgICAgICAgICBjb21wdXRlRmFsbGJhY2tIZWFkZXJGb3JtYXQoZGF0ZXNSZXBEaXN0aW5jdERheXMsIGRhdGVzLmxlbmd0aCkpO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBkYXRlc18xID0gZGF0ZXM7IF9pIDwgZGF0ZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0ZSA9IGRhdGVzXzFbX2ldO1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2gocmVuZGVyRGF0ZUNlbGwoZGF0ZSwgcHJvcHMuZGF0ZVByb2ZpbGUsIGRhdGVzUmVwRGlzdGluY3REYXlzLCBkYXRlcy5sZW5ndGgsIGNvbEhlYWRGb3JtYXQsIGNvbnRleHQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb250ZXh0LmlzUnRsKSB7XG4gICAgICAgICAgICAgICAgcGFydHMucmV2ZXJzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy50aGVhZC5pbm5lckhUTUwgPSAnPHRyPicgKyBwYXJ0cy5qb2luKCcnKSArICc8L3RyPic7XG4gICAgICAgIH07XG4gICAgICAgIERheUhlYWRlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJTa2VsZXRvbi51bnJlbmRlcigpO1xuICAgICAgICB9O1xuICAgICAgICBEYXlIZWFkZXIucHJvdG90eXBlLl9yZW5kZXJTa2VsZXRvbiA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICB2YXIgdGhlbWUgPSBjb250ZXh0LnRoZW1lO1xuICAgICAgICAgICAgdmFyIHBhcmVudEVsID0gdGhpcy5wYXJlbnRFbDtcbiAgICAgICAgICAgIHBhcmVudEVsLmlubmVySFRNTCA9ICcnOyAvLyBiZWNhdXNlIG1pZ2h0IGJlIG5ic3BcbiAgICAgICAgICAgIHBhcmVudEVsLmFwcGVuZENoaWxkKHRoaXMuZWwgPSBodG1sVG9FbGVtZW50KCc8ZGl2IGNsYXNzPVwiZmMtcm93ICcgKyB0aGVtZS5nZXRDbGFzcygnaGVhZGVyUm93JykgKyAnXCI+JyArXG4gICAgICAgICAgICAgICAgJzx0YWJsZSBjbGFzcz1cIicgKyB0aGVtZS5nZXRDbGFzcygndGFibGVHcmlkJykgKyAnXCI+JyArXG4gICAgICAgICAgICAgICAgJzx0aGVhZD48L3RoZWFkPicgK1xuICAgICAgICAgICAgICAgICc8L3RhYmxlPicgK1xuICAgICAgICAgICAgICAgICc8L2Rpdj4nKSk7XG4gICAgICAgICAgICB0aGlzLnRoZWFkID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yKCd0aGVhZCcpO1xuICAgICAgICB9O1xuICAgICAgICBEYXlIZWFkZXIucHJvdG90eXBlLl91bnJlbmRlclNrZWxldG9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmVtb3ZlRWxlbWVudCh0aGlzLmVsKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIERheUhlYWRlcjtcbiAgICB9KENvbXBvbmVudCkpO1xuXG4gICAgdmFyIERheVNlcmllcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gRGF5U2VyaWVzKHJhbmdlLCBkYXRlUHJvZmlsZUdlbmVyYXRvcikge1xuICAgICAgICAgICAgdmFyIGRhdGUgPSByYW5nZS5zdGFydDtcbiAgICAgICAgICAgIHZhciBlbmQgPSByYW5nZS5lbmQ7XG4gICAgICAgICAgICB2YXIgaW5kaWNlcyA9IFtdO1xuICAgICAgICAgICAgdmFyIGRhdGVzID0gW107XG4gICAgICAgICAgICB2YXIgZGF5SW5kZXggPSAtMTtcbiAgICAgICAgICAgIHdoaWxlIChkYXRlIDwgZW5kKSB7IC8vIGxvb3AgZWFjaCBkYXkgZnJvbSBzdGFydCB0byBlbmRcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZVByb2ZpbGVHZW5lcmF0b3IuaXNIaWRkZW5EYXkoZGF0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kaWNlcy5wdXNoKGRheUluZGV4ICsgMC41KTsgLy8gbWFyayB0aGF0IGl0J3MgYmV0d2VlbiBpbmRpY2VzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkYXlJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICBpbmRpY2VzLnB1c2goZGF5SW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBkYXRlcy5wdXNoKGRhdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkYXRlID0gYWRkRGF5cyhkYXRlLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGF0ZXMgPSBkYXRlcztcbiAgICAgICAgICAgIHRoaXMuaW5kaWNlcyA9IGluZGljZXM7XG4gICAgICAgICAgICB0aGlzLmNudCA9IGRhdGVzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBEYXlTZXJpZXMucHJvdG90eXBlLnNsaWNlUmFuZ2UgPSBmdW5jdGlvbiAocmFuZ2UpIHtcbiAgICAgICAgICAgIHZhciBmaXJzdEluZGV4ID0gdGhpcy5nZXREYXRlRGF5SW5kZXgocmFuZ2Uuc3RhcnQpOyAvLyBpbmNsdXNpdmUgZmlyc3QgaW5kZXhcbiAgICAgICAgICAgIHZhciBsYXN0SW5kZXggPSB0aGlzLmdldERhdGVEYXlJbmRleChhZGREYXlzKHJhbmdlLmVuZCwgLTEpKTsgLy8gaW5jbHVzaXZlIGxhc3QgaW5kZXhcbiAgICAgICAgICAgIHZhciBjbGlwcGVkRmlyc3RJbmRleCA9IE1hdGgubWF4KDAsIGZpcnN0SW5kZXgpO1xuICAgICAgICAgICAgdmFyIGNsaXBwZWRMYXN0SW5kZXggPSBNYXRoLm1pbih0aGlzLmNudCAtIDEsIGxhc3RJbmRleCk7XG4gICAgICAgICAgICAvLyBkZWFsIHdpdGggaW4tYmV0d2VlbiBpbmRpY2VzXG4gICAgICAgICAgICBjbGlwcGVkRmlyc3RJbmRleCA9IE1hdGguY2VpbChjbGlwcGVkRmlyc3RJbmRleCk7IC8vIGluLWJldHdlZW4gc3RhcnRzIHJvdW5kIHRvIG5leHQgY2VsbFxuICAgICAgICAgICAgY2xpcHBlZExhc3RJbmRleCA9IE1hdGguZmxvb3IoY2xpcHBlZExhc3RJbmRleCk7IC8vIGluLWJldHdlZW4gZW5kcyByb3VuZCB0byBwcmV2IGNlbGxcbiAgICAgICAgICAgIGlmIChjbGlwcGVkRmlyc3RJbmRleCA8PSBjbGlwcGVkTGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RJbmRleDogY2xpcHBlZEZpcnN0SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIGxhc3RJbmRleDogY2xpcHBlZExhc3RJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgaXNTdGFydDogZmlyc3RJbmRleCA9PT0gY2xpcHBlZEZpcnN0SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIGlzRW5kOiBsYXN0SW5kZXggPT09IGNsaXBwZWRMYXN0SW5kZXhcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIEdpdmVuIGEgZGF0ZSwgcmV0dXJucyBpdHMgY2hyb25vbG9jaWFsIGNlbGwtaW5kZXggZnJvbSB0aGUgZmlyc3QgY2VsbCBvZiB0aGUgZ3JpZC5cbiAgICAgICAgLy8gSWYgdGhlIGRhdGUgbGllcyBiZXR3ZWVuIGNlbGxzIChiZWNhdXNlIG9mIGhpZGRlbkRheXMpLCByZXR1cm5zIGEgZmxvYXRpbmctcG9pbnQgdmFsdWUgYmV0d2VlbiBvZmZzZXRzLlxuICAgICAgICAvLyBJZiBiZWZvcmUgdGhlIGZpcnN0IG9mZnNldCwgcmV0dXJucyBhIG5lZ2F0aXZlIG51bWJlci5cbiAgICAgICAgLy8gSWYgYWZ0ZXIgdGhlIGxhc3Qgb2Zmc2V0LCByZXR1cm5zIGFuIG9mZnNldCBwYXN0IHRoZSBsYXN0IGNlbGwgb2Zmc2V0LlxuICAgICAgICAvLyBPbmx5IHdvcmtzIGZvciAqc3RhcnQqIGRhdGVzIG9mIGNlbGxzLiBXaWxsIG5vdCB3b3JrIGZvciBleGNsdXNpdmUgZW5kIGRhdGVzIGZvciBjZWxscy5cbiAgICAgICAgRGF5U2VyaWVzLnByb3RvdHlwZS5nZXREYXRlRGF5SW5kZXggPSBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICAgICAgdmFyIGluZGljZXMgPSB0aGlzLmluZGljZXM7XG4gICAgICAgICAgICB2YXIgZGF5T2Zmc2V0ID0gTWF0aC5mbG9vcihkaWZmRGF5cyh0aGlzLmRhdGVzWzBdLCBkYXRlKSk7XG4gICAgICAgICAgICBpZiAoZGF5T2Zmc2V0IDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbmRpY2VzWzBdIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRheU9mZnNldCA+PSBpbmRpY2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbmRpY2VzW2luZGljZXMubGVuZ3RoIC0gMV0gKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGljZXNbZGF5T2Zmc2V0XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIERheVNlcmllcztcbiAgICB9KCkpO1xuXG4gICAgdmFyIERheVRhYmxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBEYXlUYWJsZShkYXlTZXJpZXMsIGJyZWFrT25XZWVrcykge1xuICAgICAgICAgICAgdmFyIGRhdGVzID0gZGF5U2VyaWVzLmRhdGVzO1xuICAgICAgICAgICAgdmFyIGRheXNQZXJSb3c7XG4gICAgICAgICAgICB2YXIgZmlyc3REYXk7XG4gICAgICAgICAgICB2YXIgcm93Q250O1xuICAgICAgICAgICAgaWYgKGJyZWFrT25XZWVrcykge1xuICAgICAgICAgICAgICAgIC8vIGNvdW50IGNvbHVtbnMgdW50aWwgdGhlIGRheS1vZi13ZWVrIHJlcGVhdHNcbiAgICAgICAgICAgICAgICBmaXJzdERheSA9IGRhdGVzWzBdLmdldFVUQ0RheSgpO1xuICAgICAgICAgICAgICAgIGZvciAoZGF5c1BlclJvdyA9IDE7IGRheXNQZXJSb3cgPCBkYXRlcy5sZW5ndGg7IGRheXNQZXJSb3crKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0ZXNbZGF5c1BlclJvd10uZ2V0VVRDRGF5KCkgPT09IGZpcnN0RGF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByb3dDbnQgPSBNYXRoLmNlaWwoZGF0ZXMubGVuZ3RoIC8gZGF5c1BlclJvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByb3dDbnQgPSAxO1xuICAgICAgICAgICAgICAgIGRheXNQZXJSb3cgPSBkYXRlcy5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJvd0NudCA9IHJvd0NudDtcbiAgICAgICAgICAgIHRoaXMuY29sQ250ID0gZGF5c1BlclJvdztcbiAgICAgICAgICAgIHRoaXMuZGF5U2VyaWVzID0gZGF5U2VyaWVzO1xuICAgICAgICAgICAgdGhpcy5jZWxscyA9IHRoaXMuYnVpbGRDZWxscygpO1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJEYXRlcyA9IHRoaXMuYnVpbGRIZWFkZXJEYXRlcygpO1xuICAgICAgICB9XG4gICAgICAgIERheVRhYmxlLnByb3RvdHlwZS5idWlsZENlbGxzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJvd3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHRoaXMucm93Q250OyByb3crKykge1xuICAgICAgICAgICAgICAgIHZhciBjZWxscyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IHRoaXMuY29sQ250OyBjb2wrKykge1xuICAgICAgICAgICAgICAgICAgICBjZWxscy5wdXNoKHRoaXMuYnVpbGRDZWxsKHJvdywgY29sKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJvd3MucHVzaChjZWxscyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcm93cztcbiAgICAgICAgfTtcbiAgICAgICAgRGF5VGFibGUucHJvdG90eXBlLmJ1aWxkQ2VsbCA9IGZ1bmN0aW9uIChyb3csIGNvbCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRlOiB0aGlzLmRheVNlcmllcy5kYXRlc1tyb3cgKiB0aGlzLmNvbENudCArIGNvbF1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIERheVRhYmxlLnByb3RvdHlwZS5idWlsZEhlYWRlckRhdGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGRhdGVzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCB0aGlzLmNvbENudDsgY29sKyspIHtcbiAgICAgICAgICAgICAgICBkYXRlcy5wdXNoKHRoaXMuY2VsbHNbMF1bY29sXS5kYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkYXRlcztcbiAgICAgICAgfTtcbiAgICAgICAgRGF5VGFibGUucHJvdG90eXBlLnNsaWNlUmFuZ2UgPSBmdW5jdGlvbiAocmFuZ2UpIHtcbiAgICAgICAgICAgIHZhciBjb2xDbnQgPSB0aGlzLmNvbENudDtcbiAgICAgICAgICAgIHZhciBzZXJpZXNTZWcgPSB0aGlzLmRheVNlcmllcy5zbGljZVJhbmdlKHJhbmdlKTtcbiAgICAgICAgICAgIHZhciBzZWdzID0gW107XG4gICAgICAgICAgICBpZiAoc2VyaWVzU2VnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZpcnN0SW5kZXggPSBzZXJpZXNTZWcuZmlyc3RJbmRleCwgbGFzdEluZGV4ID0gc2VyaWVzU2VnLmxhc3RJbmRleDtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBmaXJzdEluZGV4O1xuICAgICAgICAgICAgICAgIHdoaWxlIChpbmRleCA8PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJvdyA9IE1hdGguZmxvb3IoaW5kZXggLyBjb2xDbnQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dEluZGV4ID0gTWF0aC5taW4oKHJvdyArIDEpICogY29sQ250LCBsYXN0SW5kZXggKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgc2Vncy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdzogcm93LFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RDb2w6IGluZGV4ICUgY29sQ250LFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdENvbDogKG5leHRJbmRleCAtIDEpICUgY29sQ250LFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNTdGFydDogc2VyaWVzU2VnLmlzU3RhcnQgJiYgaW5kZXggPT09IGZpcnN0SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0VuZDogc2VyaWVzU2VnLmlzRW5kICYmIChuZXh0SW5kZXggLSAxKSA9PT0gbGFzdEluZGV4XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpbmRleCA9IG5leHRJbmRleDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2VncztcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIERheVRhYmxlO1xuICAgIH0oKSk7XG5cbiAgICB2YXIgU2xpY2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBTbGljZXIoKSB7XG4gICAgICAgICAgICB0aGlzLnNsaWNlQnVzaW5lc3NIb3VycyA9IG1lbW9pemUodGhpcy5fc2xpY2VCdXNpbmVzc0hvdXJzKTtcbiAgICAgICAgICAgIHRoaXMuc2xpY2VEYXRlU2VsZWN0aW9uID0gbWVtb2l6ZSh0aGlzLl9zbGljZURhdGVTcGFuKTtcbiAgICAgICAgICAgIHRoaXMuc2xpY2VFdmVudFN0b3JlID0gbWVtb2l6ZSh0aGlzLl9zbGljZUV2ZW50U3RvcmUpO1xuICAgICAgICAgICAgdGhpcy5zbGljZUV2ZW50RHJhZyA9IG1lbW9pemUodGhpcy5fc2xpY2VJbnRlcmFjdGlvbik7XG4gICAgICAgICAgICB0aGlzLnNsaWNlRXZlbnRSZXNpemUgPSBtZW1vaXplKHRoaXMuX3NsaWNlSW50ZXJhY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIFNsaWNlci5wcm90b3R5cGUuc2xpY2VQcm9wcyA9IGZ1bmN0aW9uIChwcm9wcywgZGF0ZVByb2ZpbGUsIG5leHREYXlUaHJlc2hvbGQsIGNhbGVuZGFyLCBjb21wb25lbnQpIHtcbiAgICAgICAgICAgIHZhciBleHRyYUFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gNTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgZXh0cmFBcmdzW19pIC0gNV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGV2ZW50VWlCYXNlcyA9IHByb3BzLmV2ZW50VWlCYXNlcztcbiAgICAgICAgICAgIHZhciBldmVudFNlZ3MgPSB0aGlzLnNsaWNlRXZlbnRTdG9yZS5hcHBseSh0aGlzLCBbcHJvcHMuZXZlbnRTdG9yZSwgZXZlbnRVaUJhc2VzLCBkYXRlUHJvZmlsZSwgbmV4dERheVRocmVzaG9sZCwgY29tcG9uZW50XS5jb25jYXQoZXh0cmFBcmdzKSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRhdGVTZWxlY3Rpb25TZWdzOiB0aGlzLnNsaWNlRGF0ZVNlbGVjdGlvbi5hcHBseSh0aGlzLCBbcHJvcHMuZGF0ZVNlbGVjdGlvbiwgZXZlbnRVaUJhc2VzLCBjb21wb25lbnRdLmNvbmNhdChleHRyYUFyZ3MpKSxcbiAgICAgICAgICAgICAgICBidXNpbmVzc0hvdXJTZWdzOiB0aGlzLnNsaWNlQnVzaW5lc3NIb3Vycy5hcHBseSh0aGlzLCBbcHJvcHMuYnVzaW5lc3NIb3VycywgZGF0ZVByb2ZpbGUsIG5leHREYXlUaHJlc2hvbGQsIGNhbGVuZGFyLCBjb21wb25lbnRdLmNvbmNhdChleHRyYUFyZ3MpKSxcbiAgICAgICAgICAgICAgICBmZ0V2ZW50U2VnczogZXZlbnRTZWdzLmZnLFxuICAgICAgICAgICAgICAgIGJnRXZlbnRTZWdzOiBldmVudFNlZ3MuYmcsXG4gICAgICAgICAgICAgICAgZXZlbnREcmFnOiB0aGlzLnNsaWNlRXZlbnREcmFnLmFwcGx5KHRoaXMsIFtwcm9wcy5ldmVudERyYWcsIGV2ZW50VWlCYXNlcywgZGF0ZVByb2ZpbGUsIG5leHREYXlUaHJlc2hvbGQsIGNvbXBvbmVudF0uY29uY2F0KGV4dHJhQXJncykpLFxuICAgICAgICAgICAgICAgIGV2ZW50UmVzaXplOiB0aGlzLnNsaWNlRXZlbnRSZXNpemUuYXBwbHkodGhpcywgW3Byb3BzLmV2ZW50UmVzaXplLCBldmVudFVpQmFzZXMsIGRhdGVQcm9maWxlLCBuZXh0RGF5VGhyZXNob2xkLCBjb21wb25lbnRdLmNvbmNhdChleHRyYUFyZ3MpKSxcbiAgICAgICAgICAgICAgICBldmVudFNlbGVjdGlvbjogcHJvcHMuZXZlbnRTZWxlY3Rpb25cbiAgICAgICAgICAgIH07IC8vIFRPRE86IGdpdmUgaW50ZXJhY3Rpb25TZWdzP1xuICAgICAgICB9O1xuICAgICAgICBTbGljZXIucHJvdG90eXBlLnNsaWNlTm93RGF0ZSA9IGZ1bmN0aW9uICgvLyBkb2VzIG5vdCBtZW1vaXplXG4gICAgICAgIGRhdGUsIGNvbXBvbmVudCkge1xuICAgICAgICAgICAgdmFyIGV4dHJhQXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBleHRyYUFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2xpY2VEYXRlU3Bhbi5hcHBseSh0aGlzLCBbeyByYW5nZTogeyBzdGFydDogZGF0ZSwgZW5kOiBhZGRNcyhkYXRlLCAxKSB9LCBhbGxEYXk6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAge30sXG4gICAgICAgICAgICAgICAgY29tcG9uZW50XS5jb25jYXQoZXh0cmFBcmdzKSk7XG4gICAgICAgIH07XG4gICAgICAgIFNsaWNlci5wcm90b3R5cGUuX3NsaWNlQnVzaW5lc3NIb3VycyA9IGZ1bmN0aW9uIChidXNpbmVzc0hvdXJzLCBkYXRlUHJvZmlsZSwgbmV4dERheVRocmVzaG9sZCwgY2FsZW5kYXIsIGNvbXBvbmVudCkge1xuICAgICAgICAgICAgdmFyIGV4dHJhQXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSA1OyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBleHRyYUFyZ3NbX2kgLSA1XSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWJ1c2luZXNzSG91cnMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2xpY2VFdmVudFN0b3JlLmFwcGx5KHRoaXMsIFtleHBhbmRSZWN1cnJpbmcoYnVzaW5lc3NIb3VycywgY29tcHV0ZUFjdGl2ZVJhbmdlKGRhdGVQcm9maWxlLCBCb29sZWFuKG5leHREYXlUaHJlc2hvbGQpKSwgY2FsZW5kYXIpLFxuICAgICAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgICAgIGRhdGVQcm9maWxlLFxuICAgICAgICAgICAgICAgIG5leHREYXlUaHJlc2hvbGQsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50XS5jb25jYXQoZXh0cmFBcmdzKSkuYmc7XG4gICAgICAgIH07XG4gICAgICAgIFNsaWNlci5wcm90b3R5cGUuX3NsaWNlRXZlbnRTdG9yZSA9IGZ1bmN0aW9uIChldmVudFN0b3JlLCBldmVudFVpQmFzZXMsIGRhdGVQcm9maWxlLCBuZXh0RGF5VGhyZXNob2xkLCBjb21wb25lbnQpIHtcbiAgICAgICAgICAgIHZhciBleHRyYUFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gNTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgZXh0cmFBcmdzW19pIC0gNV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV2ZW50U3RvcmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmFuZ2VSZXMgPSBzbGljZUV2ZW50U3RvcmUoZXZlbnRTdG9yZSwgZXZlbnRVaUJhc2VzLCBjb21wdXRlQWN0aXZlUmFuZ2UoZGF0ZVByb2ZpbGUsIEJvb2xlYW4obmV4dERheVRocmVzaG9sZCkpLCBuZXh0RGF5VGhyZXNob2xkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBiZzogdGhpcy5zbGljZUV2ZW50UmFuZ2VzKHJhbmdlUmVzLmJnLCBjb21wb25lbnQsIGV4dHJhQXJncyksXG4gICAgICAgICAgICAgICAgICAgIGZnOiB0aGlzLnNsaWNlRXZlbnRSYW5nZXMocmFuZ2VSZXMuZmcsIGNvbXBvbmVudCwgZXh0cmFBcmdzKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBiZzogW10sIGZnOiBbXSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBTbGljZXIucHJvdG90eXBlLl9zbGljZUludGVyYWN0aW9uID0gZnVuY3Rpb24gKGludGVyYWN0aW9uLCBldmVudFVpQmFzZXMsIGRhdGVQcm9maWxlLCBuZXh0RGF5VGhyZXNob2xkLCBjb21wb25lbnQpIHtcbiAgICAgICAgICAgIHZhciBleHRyYUFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gNTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgZXh0cmFBcmdzW19pIC0gNV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpbnRlcmFjdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJhbmdlUmVzID0gc2xpY2VFdmVudFN0b3JlKGludGVyYWN0aW9uLm11dGF0ZWRFdmVudHMsIGV2ZW50VWlCYXNlcywgY29tcHV0ZUFjdGl2ZVJhbmdlKGRhdGVQcm9maWxlLCBCb29sZWFuKG5leHREYXlUaHJlc2hvbGQpKSwgbmV4dERheVRocmVzaG9sZCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNlZ3M6IHRoaXMuc2xpY2VFdmVudFJhbmdlcyhyYW5nZVJlcy5mZywgY29tcG9uZW50LCBleHRyYUFyZ3MpLFxuICAgICAgICAgICAgICAgIGFmZmVjdGVkSW5zdGFuY2VzOiBpbnRlcmFjdGlvbi5hZmZlY3RlZEV2ZW50cy5pbnN0YW5jZXMsXG4gICAgICAgICAgICAgICAgaXNFdmVudDogaW50ZXJhY3Rpb24uaXNFdmVudCxcbiAgICAgICAgICAgICAgICBzb3VyY2VTZWc6IGludGVyYWN0aW9uLm9yaWdTZWdcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIFNsaWNlci5wcm90b3R5cGUuX3NsaWNlRGF0ZVNwYW4gPSBmdW5jdGlvbiAoZGF0ZVNwYW4sIGV2ZW50VWlCYXNlcywgY29tcG9uZW50KSB7XG4gICAgICAgICAgICB2YXIgZXh0cmFBcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDM7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGV4dHJhQXJnc1tfaSAtIDNdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZGF0ZVNwYW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZXZlbnRSYW5nZSA9IGZhYnJpY2F0ZUV2ZW50UmFuZ2UoZGF0ZVNwYW4sIGV2ZW50VWlCYXNlcywgY29tcG9uZW50LmNvbnRleHQuY2FsZW5kYXIpO1xuICAgICAgICAgICAgdmFyIHNlZ3MgPSB0aGlzLnNsaWNlUmFuZ2UuYXBwbHkodGhpcywgW2RhdGVTcGFuLnJhbmdlXS5jb25jYXQoZXh0cmFBcmdzKSk7XG4gICAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIHNlZ3NfMSA9IHNlZ3M7IF9hIDwgc2Vnc18xLmxlbmd0aDsgX2ErKykge1xuICAgICAgICAgICAgICAgIHZhciBzZWcgPSBzZWdzXzFbX2FdO1xuICAgICAgICAgICAgICAgIHNlZy5jb21wb25lbnQgPSBjb21wb25lbnQ7XG4gICAgICAgICAgICAgICAgc2VnLmV2ZW50UmFuZ2UgPSBldmVudFJhbmdlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNlZ3M7XG4gICAgICAgIH07XG4gICAgICAgIC8qXG4gICAgICAgIFwiY29tcGxldGVcIiBzZWcgbWVhbnMgaXQgaGFzIGNvbXBvbmVudCBhbmQgZXZlbnRSYW5nZVxuICAgICAgICAqL1xuICAgICAgICBTbGljZXIucHJvdG90eXBlLnNsaWNlRXZlbnRSYW5nZXMgPSBmdW5jdGlvbiAoZXZlbnRSYW5nZXMsIGNvbXBvbmVudCwgLy8gVE9ETzoga2lsbFxuICAgICAgICBleHRyYUFyZ3MpIHtcbiAgICAgICAgICAgIHZhciBzZWdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGV2ZW50UmFuZ2VzXzEgPSBldmVudFJhbmdlczsgX2kgPCBldmVudFJhbmdlc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBldmVudFJhbmdlID0gZXZlbnRSYW5nZXNfMVtfaV07XG4gICAgICAgICAgICAgICAgc2Vncy5wdXNoLmFwcGx5KHNlZ3MsIHRoaXMuc2xpY2VFdmVudFJhbmdlKGV2ZW50UmFuZ2UsIGNvbXBvbmVudCwgZXh0cmFBcmdzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2VncztcbiAgICAgICAgfTtcbiAgICAgICAgLypcbiAgICAgICAgXCJjb21wbGV0ZVwiIHNlZyBtZWFucyBpdCBoYXMgY29tcG9uZW50IGFuZCBldmVudFJhbmdlXG4gICAgICAgICovXG4gICAgICAgIFNsaWNlci5wcm90b3R5cGUuc2xpY2VFdmVudFJhbmdlID0gZnVuY3Rpb24gKGV2ZW50UmFuZ2UsIGNvbXBvbmVudCwgLy8gVE9ETzoga2lsbFxuICAgICAgICBleHRyYUFyZ3MpIHtcbiAgICAgICAgICAgIHZhciBzZWdzID0gdGhpcy5zbGljZVJhbmdlLmFwcGx5KHRoaXMsIFtldmVudFJhbmdlLnJhbmdlXS5jb25jYXQoZXh0cmFBcmdzKSk7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHNlZ3NfMiA9IHNlZ3M7IF9pIDwgc2Vnc18yLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBzZWcgPSBzZWdzXzJbX2ldO1xuICAgICAgICAgICAgICAgIHNlZy5jb21wb25lbnQgPSBjb21wb25lbnQ7XG4gICAgICAgICAgICAgICAgc2VnLmV2ZW50UmFuZ2UgPSBldmVudFJhbmdlO1xuICAgICAgICAgICAgICAgIHNlZy5pc1N0YXJ0ID0gZXZlbnRSYW5nZS5pc1N0YXJ0ICYmIHNlZy5pc1N0YXJ0O1xuICAgICAgICAgICAgICAgIHNlZy5pc0VuZCA9IGV2ZW50UmFuZ2UuaXNFbmQgJiYgc2VnLmlzRW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNlZ3M7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBTbGljZXI7XG4gICAgfSgpKTtcbiAgICAvKlxuICAgIGZvciBpbmNvcnBvcmF0aW5nIG1pblRpbWUvbWF4VGltZSBpZiBhcHByb3ByaWF0ZVxuICAgIFRPRE86IHNob3VsZCBiZSBwYXJ0IG9mIERhdGVQcm9maWxlIVxuICAgIFRpbWVsaW5lRGF0ZVByb2ZpbGUgYWxyZWFkeSBkb2VzIHRoaXMgYnR3XG4gICAgKi9cbiAgICBmdW5jdGlvbiBjb21wdXRlQWN0aXZlUmFuZ2UoZGF0ZVByb2ZpbGUsIGlzQ29tcG9uZW50QWxsRGF5KSB7XG4gICAgICAgIHZhciByYW5nZSA9IGRhdGVQcm9maWxlLmFjdGl2ZVJhbmdlO1xuICAgICAgICBpZiAoaXNDb21wb25lbnRBbGxEYXkpIHtcbiAgICAgICAgICAgIHJldHVybiByYW5nZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhcnQ6IGFkZE1zKHJhbmdlLnN0YXJ0LCBkYXRlUHJvZmlsZS5taW5UaW1lLm1pbGxpc2Vjb25kcyksXG4gICAgICAgICAgICBlbmQ6IGFkZE1zKHJhbmdlLmVuZCwgZGF0ZVByb2ZpbGUubWF4VGltZS5taWxsaXNlY29uZHMgLSA4NjRlNSkgLy8gODY0ZTUgPSBtcyBpbiBhIGRheVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIGV4cG9ydHNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHZhciB2ZXJzaW9uID0gJzQuNC4yJztcblxuICAgIGV4cG9ydHMuQ2FsZW5kYXIgPSBDYWxlbmRhcjtcbiAgICBleHBvcnRzLkNvbXBvbmVudCA9IENvbXBvbmVudDtcbiAgICBleHBvcnRzLkNvbXBvbmVudENvbnRleHQgPSBDb21wb25lbnRDb250ZXh0O1xuICAgIGV4cG9ydHMuRGF0ZUNvbXBvbmVudCA9IERhdGVDb21wb25lbnQ7XG4gICAgZXhwb3J0cy5EYXRlRW52ID0gRGF0ZUVudjtcbiAgICBleHBvcnRzLkRhdGVQcm9maWxlR2VuZXJhdG9yID0gRGF0ZVByb2ZpbGVHZW5lcmF0b3I7XG4gICAgZXhwb3J0cy5EYXlIZWFkZXIgPSBEYXlIZWFkZXI7XG4gICAgZXhwb3J0cy5EYXlTZXJpZXMgPSBEYXlTZXJpZXM7XG4gICAgZXhwb3J0cy5EYXlUYWJsZSA9IERheVRhYmxlO1xuICAgIGV4cG9ydHMuRWxlbWVudERyYWdnaW5nID0gRWxlbWVudERyYWdnaW5nO1xuICAgIGV4cG9ydHMuRWxlbWVudFNjcm9sbENvbnRyb2xsZXIgPSBFbGVtZW50U2Nyb2xsQ29udHJvbGxlcjtcbiAgICBleHBvcnRzLkVtaXR0ZXJNaXhpbiA9IEVtaXR0ZXJNaXhpbjtcbiAgICBleHBvcnRzLkV2ZW50QXBpID0gRXZlbnRBcGk7XG4gICAgZXhwb3J0cy5GZ0V2ZW50UmVuZGVyZXIgPSBGZ0V2ZW50UmVuZGVyZXI7XG4gICAgZXhwb3J0cy5GaWxsUmVuZGVyZXIgPSBGaWxsUmVuZGVyZXI7XG4gICAgZXhwb3J0cy5JbnRlcmFjdGlvbiA9IEludGVyYWN0aW9uO1xuICAgIGV4cG9ydHMuTWl4aW4gPSBNaXhpbjtcbiAgICBleHBvcnRzLk5hbWVkVGltZVpvbmVJbXBsID0gTmFtZWRUaW1lWm9uZUltcGw7XG4gICAgZXhwb3J0cy5Qb3NpdGlvbkNhY2hlID0gUG9zaXRpb25DYWNoZTtcbiAgICBleHBvcnRzLlNjcm9sbENvbXBvbmVudCA9IFNjcm9sbENvbXBvbmVudDtcbiAgICBleHBvcnRzLlNjcm9sbENvbnRyb2xsZXIgPSBTY3JvbGxDb250cm9sbGVyO1xuICAgIGV4cG9ydHMuU2xpY2VyID0gU2xpY2VyO1xuICAgIGV4cG9ydHMuU3BsaXR0ZXIgPSBTcGxpdHRlcjtcbiAgICBleHBvcnRzLlRoZW1lID0gVGhlbWU7XG4gICAgZXhwb3J0cy5WaWV3ID0gVmlldztcbiAgICBleHBvcnRzLldpbmRvd1Njcm9sbENvbnRyb2xsZXIgPSBXaW5kb3dTY3JvbGxDb250cm9sbGVyO1xuICAgIGV4cG9ydHMuYWRkRGF5cyA9IGFkZERheXM7XG4gICAgZXhwb3J0cy5hZGREdXJhdGlvbnMgPSBhZGREdXJhdGlvbnM7XG4gICAgZXhwb3J0cy5hZGRNcyA9IGFkZE1zO1xuICAgIGV4cG9ydHMuYWRkV2Vla3MgPSBhZGRXZWVrcztcbiAgICBleHBvcnRzLmFsbG93Q29udGV4dE1lbnUgPSBhbGxvd0NvbnRleHRNZW51O1xuICAgIGV4cG9ydHMuYWxsb3dTZWxlY3Rpb24gPSBhbGxvd1NlbGVjdGlvbjtcbiAgICBleHBvcnRzLmFwcGVuZFRvRWxlbWVudCA9IGFwcGVuZFRvRWxlbWVudDtcbiAgICBleHBvcnRzLmFwcGx5QWxsID0gYXBwbHlBbGw7XG4gICAgZXhwb3J0cy5hcHBseU11dGF0aW9uVG9FdmVudFN0b3JlID0gYXBwbHlNdXRhdGlvblRvRXZlbnRTdG9yZTtcbiAgICBleHBvcnRzLmFwcGx5U3R5bGUgPSBhcHBseVN0eWxlO1xuICAgIGV4cG9ydHMuYXBwbHlTdHlsZVByb3AgPSBhcHBseVN0eWxlUHJvcDtcbiAgICBleHBvcnRzLmFzUm91Z2hNaW51dGVzID0gYXNSb3VnaE1pbnV0ZXM7XG4gICAgZXhwb3J0cy5hc1JvdWdoTXMgPSBhc1JvdWdoTXM7XG4gICAgZXhwb3J0cy5hc1JvdWdoU2Vjb25kcyA9IGFzUm91Z2hTZWNvbmRzO1xuICAgIGV4cG9ydHMuYnVpbGRHb3RvQW5jaG9ySHRtbCA9IGJ1aWxkR290b0FuY2hvckh0bWw7XG4gICAgZXhwb3J0cy5idWlsZFNlZ0NvbXBhcmVPYmogPSBidWlsZFNlZ0NvbXBhcmVPYmo7XG4gICAgZXhwb3J0cy5jYXBpdGFsaXNlRmlyc3RMZXR0ZXIgPSBjYXBpdGFsaXNlRmlyc3RMZXR0ZXI7XG4gICAgZXhwb3J0cy5jb21iaW5lRXZlbnRVaXMgPSBjb21iaW5lRXZlbnRVaXM7XG4gICAgZXhwb3J0cy5jb21wYXJlQnlGaWVsZFNwZWMgPSBjb21wYXJlQnlGaWVsZFNwZWM7XG4gICAgZXhwb3J0cy5jb21wYXJlQnlGaWVsZFNwZWNzID0gY29tcGFyZUJ5RmllbGRTcGVjcztcbiAgICBleHBvcnRzLmNvbXBhcmVOdW1iZXJzID0gY29tcGFyZU51bWJlcnM7XG4gICAgZXhwb3J0cy5jb21wZW5zYXRlU2Nyb2xsID0gY29tcGVuc2F0ZVNjcm9sbDtcbiAgICBleHBvcnRzLmNvbXB1dGVDbGlwcGluZ1JlY3QgPSBjb21wdXRlQ2xpcHBpbmdSZWN0O1xuICAgIGV4cG9ydHMuY29tcHV0ZUVkZ2VzID0gY29tcHV0ZUVkZ2VzO1xuICAgIGV4cG9ydHMuY29tcHV0ZUV2ZW50RHJhZ2dhYmxlID0gY29tcHV0ZUV2ZW50RHJhZ2dhYmxlO1xuICAgIGV4cG9ydHMuY29tcHV0ZUV2ZW50RW5kUmVzaXphYmxlID0gY29tcHV0ZUV2ZW50RW5kUmVzaXphYmxlO1xuICAgIGV4cG9ydHMuY29tcHV0ZUV2ZW50U3RhcnRSZXNpemFibGUgPSBjb21wdXRlRXZlbnRTdGFydFJlc2l6YWJsZTtcbiAgICBleHBvcnRzLmNvbXB1dGVGYWxsYmFja0hlYWRlckZvcm1hdCA9IGNvbXB1dGVGYWxsYmFja0hlYWRlckZvcm1hdDtcbiAgICBleHBvcnRzLmNvbXB1dGVIZWlnaHRBbmRNYXJnaW5zID0gY29tcHV0ZUhlaWdodEFuZE1hcmdpbnM7XG4gICAgZXhwb3J0cy5jb21wdXRlSW5uZXJSZWN0ID0gY29tcHV0ZUlubmVyUmVjdDtcbiAgICBleHBvcnRzLmNvbXB1dGVSZWN0ID0gY29tcHV0ZVJlY3Q7XG4gICAgZXhwb3J0cy5jb21wdXRlVmlzaWJsZURheVJhbmdlID0gY29tcHV0ZVZpc2libGVEYXlSYW5nZTtcbiAgICBleHBvcnRzLmNvbmZpZyA9IGNvbmZpZztcbiAgICBleHBvcnRzLmNvbnN0cmFpblBvaW50ID0gY29uc3RyYWluUG9pbnQ7XG4gICAgZXhwb3J0cy5jcmVhdGVEdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uO1xuICAgIGV4cG9ydHMuY3JlYXRlRWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQ7XG4gICAgZXhwb3J0cy5jcmVhdGVFbXB0eUV2ZW50U3RvcmUgPSBjcmVhdGVFbXB0eUV2ZW50U3RvcmU7XG4gICAgZXhwb3J0cy5jcmVhdGVFdmVudEluc3RhbmNlID0gY3JlYXRlRXZlbnRJbnN0YW5jZTtcbiAgICBleHBvcnRzLmNyZWF0ZUZvcm1hdHRlciA9IGNyZWF0ZUZvcm1hdHRlcjtcbiAgICBleHBvcnRzLmNyZWF0ZVBsdWdpbiA9IGNyZWF0ZVBsdWdpbjtcbiAgICBleHBvcnRzLmNzc1RvU3RyID0gY3NzVG9TdHI7XG4gICAgZXhwb3J0cy5kZWJvdW5jZSA9IGRlYm91bmNlO1xuICAgIGV4cG9ydHMuZGlmZkRhdGVzID0gZGlmZkRhdGVzO1xuICAgIGV4cG9ydHMuZGlmZkRheUFuZFRpbWUgPSBkaWZmRGF5QW5kVGltZTtcbiAgICBleHBvcnRzLmRpZmZEYXlzID0gZGlmZkRheXM7XG4gICAgZXhwb3J0cy5kaWZmUG9pbnRzID0gZGlmZlBvaW50cztcbiAgICBleHBvcnRzLmRpZmZXZWVrcyA9IGRpZmZXZWVrcztcbiAgICBleHBvcnRzLmRpZmZXaG9sZURheXMgPSBkaWZmV2hvbGVEYXlzO1xuICAgIGV4cG9ydHMuZGlmZldob2xlV2Vla3MgPSBkaWZmV2hvbGVXZWVrcztcbiAgICBleHBvcnRzLmRpc2FibGVDdXJzb3IgPSBkaXNhYmxlQ3Vyc29yO1xuICAgIGV4cG9ydHMuZGlzdHJpYnV0ZUhlaWdodCA9IGRpc3RyaWJ1dGVIZWlnaHQ7XG4gICAgZXhwb3J0cy5lbGVtZW50Q2xvc2VzdCA9IGVsZW1lbnRDbG9zZXN0O1xuICAgIGV4cG9ydHMuZWxlbWVudE1hdGNoZXMgPSBlbGVtZW50TWF0Y2hlcztcbiAgICBleHBvcnRzLmVuYWJsZUN1cnNvciA9IGVuYWJsZUN1cnNvcjtcbiAgICBleHBvcnRzLmV2ZW50VHVwbGVUb1N0b3JlID0gZXZlbnRUdXBsZVRvU3RvcmU7XG4gICAgZXhwb3J0cy5maWx0ZXJFdmVudFN0b3JlRGVmcyA9IGZpbHRlckV2ZW50U3RvcmVEZWZzO1xuICAgIGV4cG9ydHMuZmlsdGVySGFzaCA9IGZpbHRlckhhc2g7XG4gICAgZXhwb3J0cy5maW5kQ2hpbGRyZW4gPSBmaW5kQ2hpbGRyZW47XG4gICAgZXhwb3J0cy5maW5kRWxlbWVudHMgPSBmaW5kRWxlbWVudHM7XG4gICAgZXhwb3J0cy5mbGV4aWJsZUNvbXBhcmUgPSBmbGV4aWJsZUNvbXBhcmU7XG4gICAgZXhwb3J0cy5mb3JjZUNsYXNzTmFtZSA9IGZvcmNlQ2xhc3NOYW1lO1xuICAgIGV4cG9ydHMuZm9ybWF0RGF0ZSA9IGZvcm1hdERhdGU7XG4gICAgZXhwb3J0cy5mb3JtYXRJc29UaW1lU3RyaW5nID0gZm9ybWF0SXNvVGltZVN0cmluZztcbiAgICBleHBvcnRzLmZvcm1hdFJhbmdlID0gZm9ybWF0UmFuZ2U7XG4gICAgZXhwb3J0cy5nZXRBbGxEYXlIdG1sID0gZ2V0QWxsRGF5SHRtbDtcbiAgICBleHBvcnRzLmdldENsaXBwaW5nUGFyZW50cyA9IGdldENsaXBwaW5nUGFyZW50cztcbiAgICBleHBvcnRzLmdldERheUNsYXNzZXMgPSBnZXREYXlDbGFzc2VzO1xuICAgIGV4cG9ydHMuZ2V0RWxTZWcgPSBnZXRFbFNlZztcbiAgICBleHBvcnRzLmdldFJlY3RDZW50ZXIgPSBnZXRSZWN0Q2VudGVyO1xuICAgIGV4cG9ydHMuZ2V0UmVsZXZhbnRFdmVudHMgPSBnZXRSZWxldmFudEV2ZW50cztcbiAgICBleHBvcnRzLmdsb2JhbERlZmF1bHRzID0gZ2xvYmFsRGVmYXVsdHM7XG4gICAgZXhwb3J0cy5ncmVhdGVzdER1cmF0aW9uRGVub21pbmF0b3IgPSBncmVhdGVzdER1cmF0aW9uRGVub21pbmF0b3I7XG4gICAgZXhwb3J0cy5oYXNCZ1JlbmRlcmluZyA9IGhhc0JnUmVuZGVyaW5nO1xuICAgIGV4cG9ydHMuaHRtbEVzY2FwZSA9IGh0bWxFc2NhcGU7XG4gICAgZXhwb3J0cy5odG1sVG9FbGVtZW50ID0gaHRtbFRvRWxlbWVudDtcbiAgICBleHBvcnRzLmluc2VydEFmdGVyRWxlbWVudCA9IGluc2VydEFmdGVyRWxlbWVudDtcbiAgICBleHBvcnRzLmludGVyYWN0aW9uU2V0dGluZ3NTdG9yZSA9IGludGVyYWN0aW9uU2V0dGluZ3NTdG9yZTtcbiAgICBleHBvcnRzLmludGVyYWN0aW9uU2V0dGluZ3NUb1N0b3JlID0gaW50ZXJhY3Rpb25TZXR0aW5nc1RvU3RvcmU7XG4gICAgZXhwb3J0cy5pbnRlcnNlY3RSYW5nZXMgPSBpbnRlcnNlY3RSYW5nZXM7XG4gICAgZXhwb3J0cy5pbnRlcnNlY3RSZWN0cyA9IGludGVyc2VjdFJlY3RzO1xuICAgIGV4cG9ydHMuaXNBcnJheXNFcXVhbCA9IGlzQXJyYXlzRXF1YWw7XG4gICAgZXhwb3J0cy5pc0RhdGVTcGFuc0VxdWFsID0gaXNEYXRlU3BhbnNFcXVhbDtcbiAgICBleHBvcnRzLmlzSW50ID0gaXNJbnQ7XG4gICAgZXhwb3J0cy5pc0ludGVyYWN0aW9uVmFsaWQgPSBpc0ludGVyYWN0aW9uVmFsaWQ7XG4gICAgZXhwb3J0cy5pc011bHRpRGF5UmFuZ2UgPSBpc011bHRpRGF5UmFuZ2U7XG4gICAgZXhwb3J0cy5pc1Byb3BzRXF1YWwgPSBpc1Byb3BzRXF1YWw7XG4gICAgZXhwb3J0cy5pc1Byb3BzVmFsaWQgPSBpc1Byb3BzVmFsaWQ7XG4gICAgZXhwb3J0cy5pc1NpbmdsZURheSA9IGlzU2luZ2xlRGF5O1xuICAgIGV4cG9ydHMuaXNWYWxpZERhdGUgPSBpc1ZhbGlkRGF0ZTtcbiAgICBleHBvcnRzLmxpc3RlbkJ5U2VsZWN0b3IgPSBsaXN0ZW5CeVNlbGVjdG9yO1xuICAgIGV4cG9ydHMubWFwSGFzaCA9IG1hcEhhc2g7XG4gICAgZXhwb3J0cy5tYXRjaENlbGxXaWR0aHMgPSBtYXRjaENlbGxXaWR0aHM7XG4gICAgZXhwb3J0cy5tZW1vaXplID0gbWVtb2l6ZTtcbiAgICBleHBvcnRzLm1lbW9pemVPdXRwdXQgPSBtZW1vaXplT3V0cHV0O1xuICAgIGV4cG9ydHMubWVtb2l6ZVJlbmRlcmluZyA9IG1lbW9pemVSZW5kZXJpbmc7XG4gICAgZXhwb3J0cy5tZXJnZUV2ZW50U3RvcmVzID0gbWVyZ2VFdmVudFN0b3JlcztcbiAgICBleHBvcnRzLm11bHRpcGx5RHVyYXRpb24gPSBtdWx0aXBseUR1cmF0aW9uO1xuICAgIGV4cG9ydHMucGFkU3RhcnQgPSBwYWRTdGFydDtcbiAgICBleHBvcnRzLnBhcnNlQnVzaW5lc3NIb3VycyA9IHBhcnNlQnVzaW5lc3NIb3VycztcbiAgICBleHBvcnRzLnBhcnNlRHJhZ01ldGEgPSBwYXJzZURyYWdNZXRhO1xuICAgIGV4cG9ydHMucGFyc2VFdmVudERlZiA9IHBhcnNlRXZlbnREZWY7XG4gICAgZXhwb3J0cy5wYXJzZUZpZWxkU3BlY3MgPSBwYXJzZUZpZWxkU3BlY3M7XG4gICAgZXhwb3J0cy5wYXJzZU1hcmtlciA9IHBhcnNlO1xuICAgIGV4cG9ydHMucG9pbnRJbnNpZGVSZWN0ID0gcG9pbnRJbnNpZGVSZWN0O1xuICAgIGV4cG9ydHMucHJlcGVuZFRvRWxlbWVudCA9IHByZXBlbmRUb0VsZW1lbnQ7XG4gICAgZXhwb3J0cy5wcmV2ZW50Q29udGV4dE1lbnUgPSBwcmV2ZW50Q29udGV4dE1lbnU7XG4gICAgZXhwb3J0cy5wcmV2ZW50RGVmYXVsdCA9IHByZXZlbnREZWZhdWx0O1xuICAgIGV4cG9ydHMucHJldmVudFNlbGVjdGlvbiA9IHByZXZlbnRTZWxlY3Rpb247XG4gICAgZXhwb3J0cy5wcm9jZXNzU2NvcGVkVWlQcm9wcyA9IHByb2Nlc3NTY29wZWRVaVByb3BzO1xuICAgIGV4cG9ydHMucmFuZ2VDb250YWluc01hcmtlciA9IHJhbmdlQ29udGFpbnNNYXJrZXI7XG4gICAgZXhwb3J0cy5yYW5nZUNvbnRhaW5zUmFuZ2UgPSByYW5nZUNvbnRhaW5zUmFuZ2U7XG4gICAgZXhwb3J0cy5yYW5nZXNFcXVhbCA9IHJhbmdlc0VxdWFsO1xuICAgIGV4cG9ydHMucmFuZ2VzSW50ZXJzZWN0ID0gcmFuZ2VzSW50ZXJzZWN0O1xuICAgIGV4cG9ydHMucmVmaW5lUHJvcHMgPSByZWZpbmVQcm9wcztcbiAgICBleHBvcnRzLnJlbW92ZUVsZW1lbnQgPSByZW1vdmVFbGVtZW50O1xuICAgIGV4cG9ydHMucmVtb3ZlRXhhY3QgPSByZW1vdmVFeGFjdDtcbiAgICBleHBvcnRzLnJlbmRlckRhdGVDZWxsID0gcmVuZGVyRGF0ZUNlbGw7XG4gICAgZXhwb3J0cy5yZXF1ZXN0SnNvbiA9IHJlcXVlc3RKc29uO1xuICAgIGV4cG9ydHMuc2xpY2VFdmVudFN0b3JlID0gc2xpY2VFdmVudFN0b3JlO1xuICAgIGV4cG9ydHMuc3RhcnRPZkRheSA9IHN0YXJ0T2ZEYXk7XG4gICAgZXhwb3J0cy5zdWJ0cmFjdElubmVyRWxIZWlnaHQgPSBzdWJ0cmFjdElubmVyRWxIZWlnaHQ7XG4gICAgZXhwb3J0cy50cmFuc2xhdGVSZWN0ID0gdHJhbnNsYXRlUmVjdDtcbiAgICBleHBvcnRzLnVuY29tcGVuc2F0ZVNjcm9sbCA9IHVuY29tcGVuc2F0ZVNjcm9sbDtcbiAgICBleHBvcnRzLnVuZGlzdHJpYnV0ZUhlaWdodCA9IHVuZGlzdHJpYnV0ZUhlaWdodDtcbiAgICBleHBvcnRzLnVucHJvbWlzaWZ5ID0gdW5wcm9taXNpZnk7XG4gICAgZXhwb3J0cy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICBleHBvcnRzLndoZW5UcmFuc2l0aW9uRG9uZSA9IHdoZW5UcmFuc2l0aW9uRG9uZTtcbiAgICBleHBvcnRzLndob2xlRGl2aWRlRHVyYXRpb25zID0gd2hvbGVEaXZpZGVEdXJhdGlvbnM7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG59KSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@fullcalendar/core/main.js\n");

/***/ }),

/***/ "./node_modules/@fullcalendar/daygrid/main.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/@fullcalendar/daygrid/main.esm.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"AbstractDayGridView\": () => (/* binding */ AbstractDayGridView),\n/* harmony export */   \"DayBgRow\": () => (/* binding */ DayBgRow),\n/* harmony export */   \"DayGrid\": () => (/* binding */ DayGrid),\n/* harmony export */   \"DayGridSlicer\": () => (/* binding */ DayGridSlicer),\n/* harmony export */   \"DayGridView\": () => (/* binding */ DayGridView),\n/* harmony export */   \"SimpleDayGrid\": () => (/* binding */ SimpleDayGrid),\n/* harmony export */   \"buildBasicDayTable\": () => (/* binding */ buildDayTable)\n/* harmony export */ });\n/* harmony import */ var _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @fullcalendar/core */ \"./node_modules/@fullcalendar/core/main.esm.js\");\n/*!\nFullCalendar Day Grid Plugin v4.4.2\nDocs & License: https://fullcalendar.io/\n(c) 2019 Adam Shaw\n*/\n\n\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\n\nvar DayGridDateProfileGenerator = /** @class */ (function (_super) {\n    __extends(DayGridDateProfileGenerator, _super);\n    function DayGridDateProfileGenerator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // Computes the date range that will be rendered.\n    DayGridDateProfileGenerator.prototype.buildRenderRange = function (currentRange, currentRangeUnit, isRangeAllDay) {\n        var dateEnv = this.dateEnv;\n        var renderRange = _super.prototype.buildRenderRange.call(this, currentRange, currentRangeUnit, isRangeAllDay);\n        var start = renderRange.start;\n        var end = renderRange.end;\n        var endOfWeek;\n        // year and month views should be aligned with weeks. this is already done for week\n        if (/^(year|month)$/.test(currentRangeUnit)) {\n            start = dateEnv.startOfWeek(start);\n            // make end-of-week if not already\n            endOfWeek = dateEnv.startOfWeek(end);\n            if (endOfWeek.valueOf() !== end.valueOf()) {\n                end = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.addWeeks)(endOfWeek, 1);\n            }\n        }\n        // ensure 6 weeks\n        if (this.options.monthMode &&\n            this.options.fixedWeekCount) {\n            var rowCnt = Math.ceil(// could be partial weeks due to hiddenDays\n            (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.diffWeeks)(start, end));\n            end = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.addWeeks)(end, 6 - rowCnt);\n        }\n        return { start: start, end: end };\n    };\n    return DayGridDateProfileGenerator;\n}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.DateProfileGenerator));\n\n/* A rectangular panel that is absolutely positioned over other content\n------------------------------------------------------------------------------------------------------------------------\nOptions:\n  - className (string)\n  - content (HTML string, element, or element array)\n  - parentEl\n  - top\n  - left\n  - right (the x coord of where the right edge should be. not a \"CSS\" right)\n  - autoHide (boolean)\n  - show (callback)\n  - hide (callback)\n*/\nvar Popover = /** @class */ (function () {\n    function Popover(options) {\n        var _this = this;\n        this.isHidden = true;\n        this.margin = 10; // the space required between the popover and the edges of the scroll container\n        // Triggered when the user clicks *anywhere* in the document, for the autoHide feature\n        this.documentMousedown = function (ev) {\n            // only hide the popover if the click happened outside the popover\n            if (_this.el && !_this.el.contains(ev.target)) {\n                _this.hide();\n            }\n        };\n        this.options = options;\n    }\n    // Shows the popover on the specified position. Renders it if not already\n    Popover.prototype.show = function () {\n        if (this.isHidden) {\n            if (!this.el) {\n                this.render();\n            }\n            this.el.style.display = '';\n            this.position();\n            this.isHidden = false;\n            this.trigger('show');\n        }\n    };\n    // Hides the popover, through CSS, but does not remove it from the DOM\n    Popover.prototype.hide = function () {\n        if (!this.isHidden) {\n            this.el.style.display = 'none';\n            this.isHidden = true;\n            this.trigger('hide');\n        }\n    };\n    // Creates `this.el` and renders content inside of it\n    Popover.prototype.render = function () {\n        var _this = this;\n        var options = this.options;\n        var el = this.el = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', {\n            className: 'fc-popover ' + (options.className || ''),\n            style: {\n                top: '0',\n                left: '0'\n            }\n        });\n        if (typeof options.content === 'function') {\n            options.content(el);\n        }\n        options.parentEl.appendChild(el);\n        // when a click happens on anything inside with a 'fc-close' className, hide the popover\n        (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.listenBySelector)(el, 'click', '.fc-close', function (ev) {\n            _this.hide();\n        });\n        if (options.autoHide) {\n            document.addEventListener('mousedown', this.documentMousedown);\n        }\n    };\n    // Hides and unregisters any handlers\n    Popover.prototype.destroy = function () {\n        this.hide();\n        if (this.el) {\n            (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.removeElement)(this.el);\n            this.el = null;\n        }\n        document.removeEventListener('mousedown', this.documentMousedown);\n    };\n    // Positions the popover optimally, using the top/left/right options\n    Popover.prototype.position = function () {\n        var options = this.options;\n        var el = this.el;\n        var elDims = el.getBoundingClientRect(); // only used for width,height\n        var origin = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.computeRect)(el.offsetParent);\n        var clippingRect = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.computeClippingRect)(options.parentEl);\n        var top; // the \"position\" (not \"offset\") values for the popover\n        var left; //\n        // compute top and left\n        top = options.top || 0;\n        if (options.left !== undefined) {\n            left = options.left;\n        }\n        else if (options.right !== undefined) {\n            left = options.right - elDims.width; // derive the left value from the right value\n        }\n        else {\n            left = 0;\n        }\n        // constrain to the view port. if constrained by two edges, give precedence to top/left\n        top = Math.min(top, clippingRect.bottom - elDims.height - this.margin);\n        top = Math.max(top, clippingRect.top + this.margin);\n        left = Math.min(left, clippingRect.right - elDims.width - this.margin);\n        left = Math.max(left, clippingRect.left + this.margin);\n        (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.applyStyle)(el, {\n            top: top - origin.top,\n            left: left - origin.left\n        });\n    };\n    // Triggers a callback. Calls a function in the option hash of the same name.\n    // Arguments beyond the first `name` are forwarded on.\n    // TODO: better code reuse for this. Repeat code\n    // can kill this???\n    Popover.prototype.trigger = function (name) {\n        if (this.options[name]) {\n            this.options[name].apply(this, Array.prototype.slice.call(arguments, 1));\n        }\n    };\n    return Popover;\n}());\n\n/* Event-rendering methods for the DayGrid class\n----------------------------------------------------------------------------------------------------------------------*/\n// \"Simple\" is bad a name. has nothing to do with SimpleDayGrid\nvar SimpleDayGridEventRenderer = /** @class */ (function (_super) {\n    __extends(SimpleDayGridEventRenderer, _super);\n    function SimpleDayGridEventRenderer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // Builds the HTML to be used for the default element for an individual segment\n    SimpleDayGridEventRenderer.prototype.renderSegHtml = function (seg, mirrorInfo) {\n        var context = this.context;\n        var eventRange = seg.eventRange;\n        var eventDef = eventRange.def;\n        var eventUi = eventRange.ui;\n        var allDay = eventDef.allDay;\n        var isDraggable = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.computeEventDraggable)(context, eventDef, eventUi);\n        var isResizableFromStart = allDay && seg.isStart && (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.computeEventStartResizable)(context, eventDef, eventUi);\n        var isResizableFromEnd = allDay && seg.isEnd && (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.computeEventEndResizable)(context, eventDef, eventUi);\n        var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd, mirrorInfo);\n        var skinCss = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.cssToStr)(this.getSkinCss(eventUi));\n        var timeHtml = '';\n        var timeText;\n        var titleHtml;\n        classes.unshift('fc-day-grid-event', 'fc-h-event');\n        // Only display a timed events time if it is the starting segment\n        if (seg.isStart) {\n            timeText = this.getTimeText(eventRange);\n            if (timeText) {\n                timeHtml = '<span class=\"fc-time\">' + (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.htmlEscape)(timeText) + '</span>';\n            }\n        }\n        titleHtml =\n            '<span class=\"fc-title\">' +\n                ((0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.htmlEscape)(eventDef.title || '') || '&nbsp;') + // we always want one line of height\n                '</span>';\n        return '<a class=\"' + classes.join(' ') + '\"' +\n            (eventDef.url ?\n                ' href=\"' + (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.htmlEscape)(eventDef.url) + '\"' :\n                '') +\n            (skinCss ?\n                ' style=\"' + skinCss + '\"' :\n                '') +\n            '>' +\n            '<div class=\"fc-content\">' +\n            (context.options.dir === 'rtl' ?\n                titleHtml + ' ' + timeHtml : // put a natural space in between\n                timeHtml + ' ' + titleHtml //\n            ) +\n            '</div>' +\n            (isResizableFromStart ?\n                '<div class=\"fc-resizer fc-start-resizer\"></div>' :\n                '') +\n            (isResizableFromEnd ?\n                '<div class=\"fc-resizer fc-end-resizer\"></div>' :\n                '') +\n            '</a>';\n    };\n    // Computes a default event time formatting string if `eventTimeFormat` is not explicitly defined\n    SimpleDayGridEventRenderer.prototype.computeEventTimeFormat = function () {\n        return {\n            hour: 'numeric',\n            minute: '2-digit',\n            omitZeroMinute: true,\n            meridiem: 'narrow'\n        };\n    };\n    SimpleDayGridEventRenderer.prototype.computeDisplayEventEnd = function () {\n        return false; // TODO: somehow consider the originating DayGrid's column count\n    };\n    return SimpleDayGridEventRenderer;\n}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.FgEventRenderer));\n\n/* Event-rendering methods for the DayGrid class\n----------------------------------------------------------------------------------------------------------------------*/\nvar DayGridEventRenderer = /** @class */ (function (_super) {\n    __extends(DayGridEventRenderer, _super);\n    function DayGridEventRenderer(dayGrid) {\n        var _this = _super.call(this) || this;\n        _this.dayGrid = dayGrid;\n        return _this;\n    }\n    // Renders the given foreground event segments onto the grid\n    DayGridEventRenderer.prototype.attachSegs = function (segs, mirrorInfo) {\n        var rowStructs = this.rowStructs = this.renderSegRows(segs);\n        // append to each row's content skeleton\n        this.dayGrid.rowEls.forEach(function (rowNode, i) {\n            rowNode.querySelector('.fc-content-skeleton > table').appendChild(rowStructs[i].tbodyEl);\n        });\n        // removes the \"more..\" events popover\n        if (!mirrorInfo) {\n            this.dayGrid.removeSegPopover();\n        }\n    };\n    // Unrenders all currently rendered foreground event segments\n    DayGridEventRenderer.prototype.detachSegs = function () {\n        var rowStructs = this.rowStructs || [];\n        var rowStruct;\n        while ((rowStruct = rowStructs.pop())) {\n            (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.removeElement)(rowStruct.tbodyEl);\n        }\n        this.rowStructs = null;\n    };\n    // Uses the given events array to generate <tbody> elements that should be appended to each row's content skeleton.\n    // Returns an array of rowStruct objects (see the bottom of `renderSegRow`).\n    // PRECONDITION: each segment shoud already have a rendered and assigned `.el`\n    DayGridEventRenderer.prototype.renderSegRows = function (segs) {\n        var rowStructs = [];\n        var segRows;\n        var row;\n        segRows = this.groupSegRows(segs); // group into nested arrays\n        // iterate each row of segment groupings\n        for (row = 0; row < segRows.length; row++) {\n            rowStructs.push(this.renderSegRow(row, segRows[row]));\n        }\n        return rowStructs;\n    };\n    // Given a row # and an array of segments all in the same row, render a <tbody> element, a skeleton that contains\n    // the segments. Returns object with a bunch of internal data about how the render was calculated.\n    // NOTE: modifies rowSegs\n    DayGridEventRenderer.prototype.renderSegRow = function (row, rowSegs) {\n        var isRtl = this.context.isRtl;\n        var dayGrid = this.dayGrid;\n        var colCnt = dayGrid.colCnt;\n        var segLevels = this.buildSegLevels(rowSegs); // group into sub-arrays of levels\n        var levelCnt = Math.max(1, segLevels.length); // ensure at least one level\n        var tbody = document.createElement('tbody');\n        var segMatrix = []; // lookup for which segments are rendered into which level+col cells\n        var cellMatrix = []; // lookup for all <td> elements of the level+col matrix\n        var loneCellMatrix = []; // lookup for <td> elements that only take up a single column\n        var i;\n        var levelSegs;\n        var col;\n        var tr;\n        var j;\n        var seg;\n        var td;\n        // populates empty cells from the current column (`col`) to `endCol`\n        function emptyCellsUntil(endCol) {\n            while (col < endCol) {\n                // try to grab a cell from the level above and extend its rowspan. otherwise, create a fresh cell\n                td = (loneCellMatrix[i - 1] || [])[col];\n                if (td) {\n                    td.rowSpan = (td.rowSpan || 1) + 1;\n                }\n                else {\n                    td = document.createElement('td');\n                    tr.appendChild(td);\n                }\n                cellMatrix[i][col] = td;\n                loneCellMatrix[i][col] = td;\n                col++;\n            }\n        }\n        for (i = 0; i < levelCnt; i++) { // iterate through all levels\n            levelSegs = segLevels[i];\n            col = 0;\n            tr = document.createElement('tr');\n            segMatrix.push([]);\n            cellMatrix.push([]);\n            loneCellMatrix.push([]);\n            // levelCnt might be 1 even though there are no actual levels. protect against this.\n            // this single empty row is useful for styling.\n            if (levelSegs) {\n                for (j = 0; j < levelSegs.length; j++) { // iterate through segments in level\n                    seg = levelSegs[j];\n                    var leftCol = isRtl ? (colCnt - 1 - seg.lastCol) : seg.firstCol;\n                    var rightCol = isRtl ? (colCnt - 1 - seg.firstCol) : seg.lastCol;\n                    emptyCellsUntil(leftCol);\n                    // create a container that occupies or more columns. append the event element.\n                    td = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.createElement)('td', { className: 'fc-event-container' }, seg.el);\n                    if (leftCol !== rightCol) {\n                        td.colSpan = rightCol - leftCol + 1;\n                    }\n                    else { // a single-column segment\n                        loneCellMatrix[i][col] = td;\n                    }\n                    while (col <= rightCol) {\n                        cellMatrix[i][col] = td;\n                        segMatrix[i][col] = seg;\n                        col++;\n                    }\n                    tr.appendChild(td);\n                }\n            }\n            emptyCellsUntil(colCnt); // finish off the row\n            var introHtml = dayGrid.renderProps.renderIntroHtml();\n            if (introHtml) {\n                if (isRtl) {\n                    (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.appendToElement)(tr, introHtml);\n                }\n                else {\n                    (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.prependToElement)(tr, introHtml);\n                }\n            }\n            tbody.appendChild(tr);\n        }\n        return {\n            row: row,\n            tbodyEl: tbody,\n            cellMatrix: cellMatrix,\n            segMatrix: segMatrix,\n            segLevels: segLevels,\n            segs: rowSegs\n        };\n    };\n    // Stacks a flat array of segments, which are all assumed to be in the same row, into subarrays of vertical levels.\n    // NOTE: modifies segs\n    DayGridEventRenderer.prototype.buildSegLevels = function (segs) {\n        var isRtl = this.context.isRtl;\n        var colCnt = this.dayGrid.colCnt;\n        var levels = [];\n        var i;\n        var seg;\n        var j;\n        // Give preference to elements with certain criteria, so they have\n        // a chance to be closer to the top.\n        segs = this.sortEventSegs(segs);\n        for (i = 0; i < segs.length; i++) {\n            seg = segs[i];\n            // loop through levels, starting with the topmost, until the segment doesn't collide with other segments\n            for (j = 0; j < levels.length; j++) {\n                if (!isDaySegCollision(seg, levels[j])) {\n                    break;\n                }\n            }\n            // `j` now holds the desired subrow index\n            seg.level = j;\n            seg.leftCol = isRtl ? (colCnt - 1 - seg.lastCol) : seg.firstCol; // for sorting only\n            seg.rightCol = isRtl ? (colCnt - 1 - seg.firstCol) : seg.lastCol // for sorting only\n            ;\n            (levels[j] || (levels[j] = [])).push(seg);\n        }\n        // order segments left-to-right. very important if calendar is RTL\n        for (j = 0; j < levels.length; j++) {\n            levels[j].sort(compareDaySegCols);\n        }\n        return levels;\n    };\n    // Given a flat array of segments, return an array of sub-arrays, grouped by each segment's row\n    DayGridEventRenderer.prototype.groupSegRows = function (segs) {\n        var segRows = [];\n        var i;\n        for (i = 0; i < this.dayGrid.rowCnt; i++) {\n            segRows.push([]);\n        }\n        for (i = 0; i < segs.length; i++) {\n            segRows[segs[i].row].push(segs[i]);\n        }\n        return segRows;\n    };\n    // Computes a default `displayEventEnd` value if one is not expliclty defined\n    DayGridEventRenderer.prototype.computeDisplayEventEnd = function () {\n        return this.dayGrid.colCnt === 1; // we'll likely have space if there's only one day\n    };\n    return DayGridEventRenderer;\n}(SimpleDayGridEventRenderer));\n// Computes whether two segments' columns collide. They are assumed to be in the same row.\nfunction isDaySegCollision(seg, otherSegs) {\n    var i;\n    var otherSeg;\n    for (i = 0; i < otherSegs.length; i++) {\n        otherSeg = otherSegs[i];\n        if (otherSeg.firstCol <= seg.lastCol &&\n            otherSeg.lastCol >= seg.firstCol) {\n            return true;\n        }\n    }\n    return false;\n}\n// A cmp function for determining the leftmost event\nfunction compareDaySegCols(a, b) {\n    return a.leftCol - b.leftCol;\n}\n\nvar DayGridMirrorRenderer = /** @class */ (function (_super) {\n    __extends(DayGridMirrorRenderer, _super);\n    function DayGridMirrorRenderer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DayGridMirrorRenderer.prototype.attachSegs = function (segs, mirrorInfo) {\n        var sourceSeg = mirrorInfo.sourceSeg;\n        var rowStructs = this.rowStructs = this.renderSegRows(segs);\n        // inject each new event skeleton into each associated row\n        this.dayGrid.rowEls.forEach(function (rowNode, row) {\n            var skeletonEl = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.htmlToElement)('<div class=\"fc-mirror-skeleton\"><table></table></div>'); // will be absolutely positioned\n            var skeletonTopEl;\n            var skeletonTop;\n            // If there is an original segment, match the top position. Otherwise, put it at the row's top level\n            if (sourceSeg && sourceSeg.row === row) {\n                skeletonTopEl = sourceSeg.el;\n            }\n            else {\n                skeletonTopEl = rowNode.querySelector('.fc-content-skeleton tbody');\n                if (!skeletonTopEl) { // when no events\n                    skeletonTopEl = rowNode.querySelector('.fc-content-skeleton table');\n                }\n            }\n            skeletonTop = skeletonTopEl.getBoundingClientRect().top -\n                rowNode.getBoundingClientRect().top; // the offsetParent origin\n            skeletonEl.style.top = skeletonTop + 'px';\n            skeletonEl.querySelector('table').appendChild(rowStructs[row].tbodyEl);\n            rowNode.appendChild(skeletonEl);\n        });\n    };\n    return DayGridMirrorRenderer;\n}(DayGridEventRenderer));\n\nvar EMPTY_CELL_HTML = '<td style=\"pointer-events:none\"></td>';\nvar DayGridFillRenderer = /** @class */ (function (_super) {\n    __extends(DayGridFillRenderer, _super);\n    function DayGridFillRenderer(dayGrid) {\n        var _this = _super.call(this) || this;\n        _this.fillSegTag = 'td'; // override the default tag name\n        _this.dayGrid = dayGrid;\n        return _this;\n    }\n    DayGridFillRenderer.prototype.renderSegs = function (type, context, segs) {\n        // don't render timed background events\n        if (type === 'bgEvent') {\n            segs = segs.filter(function (seg) {\n                return seg.eventRange.def.allDay;\n            });\n        }\n        _super.prototype.renderSegs.call(this, type, context, segs);\n    };\n    DayGridFillRenderer.prototype.attachSegs = function (type, segs) {\n        var els = [];\n        var i;\n        var seg;\n        var skeletonEl;\n        for (i = 0; i < segs.length; i++) {\n            seg = segs[i];\n            skeletonEl = this.renderFillRow(type, seg);\n            this.dayGrid.rowEls[seg.row].appendChild(skeletonEl);\n            els.push(skeletonEl);\n        }\n        return els;\n    };\n    // Generates the HTML needed for one row of a fill. Requires the seg's el to be rendered.\n    DayGridFillRenderer.prototype.renderFillRow = function (type, seg) {\n        var dayGrid = this.dayGrid;\n        var isRtl = this.context.isRtl;\n        var colCnt = dayGrid.colCnt;\n        var leftCol = isRtl ? (colCnt - 1 - seg.lastCol) : seg.firstCol;\n        var rightCol = isRtl ? (colCnt - 1 - seg.firstCol) : seg.lastCol;\n        var startCol = leftCol;\n        var endCol = rightCol + 1;\n        var className;\n        var skeletonEl;\n        var trEl;\n        if (type === 'businessHours') {\n            className = 'bgevent';\n        }\n        else {\n            className = type.toLowerCase();\n        }\n        skeletonEl = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.htmlToElement)('<div class=\"fc-' + className + '-skeleton\">' +\n            '<table><tr></tr></table>' +\n            '</div>');\n        trEl = skeletonEl.getElementsByTagName('tr')[0];\n        if (startCol > 0) {\n            (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.appendToElement)(trEl, \n            // will create (startCol + 1) td's\n            new Array(startCol + 1).join(EMPTY_CELL_HTML));\n        }\n        seg.el.colSpan = endCol - startCol;\n        trEl.appendChild(seg.el);\n        if (endCol < colCnt) {\n            (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.appendToElement)(trEl, \n            // will create (colCnt - endCol) td's\n            new Array(colCnt - endCol + 1).join(EMPTY_CELL_HTML));\n        }\n        var introHtml = dayGrid.renderProps.renderIntroHtml();\n        if (introHtml) {\n            if (isRtl) {\n                (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.appendToElement)(trEl, introHtml);\n            }\n            else {\n                (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.prependToElement)(trEl, introHtml);\n            }\n        }\n        return skeletonEl;\n    };\n    return DayGridFillRenderer;\n}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.FillRenderer));\n\nvar DayTile = /** @class */ (function (_super) {\n    __extends(DayTile, _super);\n    function DayTile(el) {\n        var _this = _super.call(this, el) || this;\n        var eventRenderer = _this.eventRenderer = new DayTileEventRenderer(_this);\n        var renderFrame = _this.renderFrame = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.memoizeRendering)(_this._renderFrame);\n        _this.renderFgEvents = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.memoizeRendering)(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [renderFrame]);\n        _this.renderEventSelection = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.memoizeRendering)(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);\n        _this.renderEventDrag = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.memoizeRendering)(eventRenderer.hideByHash.bind(eventRenderer), eventRenderer.showByHash.bind(eventRenderer), [renderFrame]);\n        _this.renderEventResize = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.memoizeRendering)(eventRenderer.hideByHash.bind(eventRenderer), eventRenderer.showByHash.bind(eventRenderer), [renderFrame]);\n        return _this;\n    }\n    DayTile.prototype.firstContext = function (context) {\n        context.calendar.registerInteractiveComponent(this, {\n            el: this.el,\n            useEventCenter: false\n        });\n    };\n    DayTile.prototype.render = function (props, context) {\n        this.renderFrame(props.date);\n        this.renderFgEvents(context, props.fgSegs);\n        this.renderEventSelection(props.eventSelection);\n        this.renderEventDrag(props.eventDragInstances);\n        this.renderEventResize(props.eventResizeInstances);\n    };\n    DayTile.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.renderFrame.unrender(); // should unrender everything else\n        this.context.calendar.unregisterInteractiveComponent(this);\n    };\n    DayTile.prototype._renderFrame = function (date) {\n        var _a = this.context, theme = _a.theme, dateEnv = _a.dateEnv, options = _a.options;\n        var title = dateEnv.format(date, (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.createFormatter)(options.dayPopoverFormat) // TODO: cache\n        );\n        this.el.innerHTML =\n            '<div class=\"fc-header ' + theme.getClass('popoverHeader') + '\">' +\n                '<span class=\"fc-title\">' +\n                (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.htmlEscape)(title) +\n                '</span>' +\n                '<span class=\"fc-close ' + theme.getIconClass('close') + '\"></span>' +\n                '</div>' +\n                '<div class=\"fc-body ' + theme.getClass('popoverContent') + '\">' +\n                '<div class=\"fc-event-container\"></div>' +\n                '</div>';\n        this.segContainerEl = this.el.querySelector('.fc-event-container');\n    };\n    DayTile.prototype.queryHit = function (positionLeft, positionTop, elWidth, elHeight) {\n        var date = this.props.date; // HACK\n        if (positionLeft < elWidth && positionTop < elHeight) {\n            return {\n                component: this,\n                dateSpan: {\n                    allDay: true,\n                    range: { start: date, end: (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.addDays)(date, 1) }\n                },\n                dayEl: this.el,\n                rect: {\n                    left: 0,\n                    top: 0,\n                    right: elWidth,\n                    bottom: elHeight\n                },\n                layer: 1\n            };\n        }\n    };\n    return DayTile;\n}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.DateComponent));\nvar DayTileEventRenderer = /** @class */ (function (_super) {\n    __extends(DayTileEventRenderer, _super);\n    function DayTileEventRenderer(dayTile) {\n        var _this = _super.call(this) || this;\n        _this.dayTile = dayTile;\n        return _this;\n    }\n    DayTileEventRenderer.prototype.attachSegs = function (segs) {\n        for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n            var seg = segs_1[_i];\n            this.dayTile.segContainerEl.appendChild(seg.el);\n        }\n    };\n    DayTileEventRenderer.prototype.detachSegs = function (segs) {\n        for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {\n            var seg = segs_2[_i];\n            (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.removeElement)(seg.el);\n        }\n    };\n    return DayTileEventRenderer;\n}(SimpleDayGridEventRenderer));\n\nvar DayBgRow = /** @class */ (function () {\n    function DayBgRow(context) {\n        this.context = context;\n    }\n    DayBgRow.prototype.renderHtml = function (props) {\n        var parts = [];\n        if (props.renderIntroHtml) {\n            parts.push(props.renderIntroHtml());\n        }\n        for (var _i = 0, _a = props.cells; _i < _a.length; _i++) {\n            var cell = _a[_i];\n            parts.push(renderCellHtml(cell.date, props.dateProfile, this.context, cell.htmlAttrs));\n        }\n        if (!props.cells.length) {\n            parts.push('<td class=\"fc-day ' + this.context.theme.getClass('widgetContent') + '\"></td>');\n        }\n        if (this.context.options.dir === 'rtl') {\n            parts.reverse();\n        }\n        return '<tr>' + parts.join('') + '</tr>';\n    };\n    return DayBgRow;\n}());\nfunction renderCellHtml(date, dateProfile, context, otherAttrs) {\n    var dateEnv = context.dateEnv, theme = context.theme;\n    var isDateValid = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.rangeContainsMarker)(dateProfile.activeRange, date); // TODO: called too frequently. cache somehow.\n    var classes = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.getDayClasses)(date, dateProfile, context);\n    classes.unshift('fc-day', theme.getClass('widgetContent'));\n    return '<td class=\"' + classes.join(' ') + '\"' +\n        (isDateValid ?\n            ' data-date=\"' + dateEnv.formatIso(date, { omitTime: true }) + '\"' :\n            '') +\n        (otherAttrs ?\n            ' ' + otherAttrs :\n            '') +\n        '></td>';\n}\n\nvar DAY_NUM_FORMAT = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.createFormatter)({ day: 'numeric' });\nvar WEEK_NUM_FORMAT = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.createFormatter)({ week: 'numeric' });\nvar DayGrid = /** @class */ (function (_super) {\n    __extends(DayGrid, _super);\n    function DayGrid(el, renderProps) {\n        var _this = _super.call(this, el) || this;\n        _this.bottomCoordPadding = 0; // hack for extending the hit area for the last row of the coordinate grid\n        _this.isCellSizesDirty = false;\n        _this.renderProps = renderProps;\n        var eventRenderer = _this.eventRenderer = new DayGridEventRenderer(_this);\n        var fillRenderer = _this.fillRenderer = new DayGridFillRenderer(_this);\n        _this.mirrorRenderer = new DayGridMirrorRenderer(_this);\n        var renderCells = _this.renderCells = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.memoizeRendering)(_this._renderCells, _this._unrenderCells);\n        _this.renderBusinessHours = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.memoizeRendering)(fillRenderer.renderSegs.bind(fillRenderer, 'businessHours'), fillRenderer.unrender.bind(fillRenderer, 'businessHours'), [renderCells]);\n        _this.renderDateSelection = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.memoizeRendering)(fillRenderer.renderSegs.bind(fillRenderer, 'highlight'), fillRenderer.unrender.bind(fillRenderer, 'highlight'), [renderCells]);\n        _this.renderBgEvents = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.memoizeRendering)(fillRenderer.renderSegs.bind(fillRenderer, 'bgEvent'), fillRenderer.unrender.bind(fillRenderer, 'bgEvent'), [renderCells]);\n        _this.renderFgEvents = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.memoizeRendering)(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [renderCells]);\n        _this.renderEventSelection = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.memoizeRendering)(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);\n        _this.renderEventDrag = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.memoizeRendering)(_this._renderEventDrag, _this._unrenderEventDrag, [renderCells]);\n        _this.renderEventResize = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.memoizeRendering)(_this._renderEventResize, _this._unrenderEventResize, [renderCells]);\n        return _this;\n    }\n    DayGrid.prototype.render = function (props, context) {\n        var cells = props.cells;\n        this.rowCnt = cells.length;\n        this.colCnt = cells[0].length;\n        this.renderCells(cells, props.isRigid);\n        this.renderBusinessHours(context, props.businessHourSegs);\n        this.renderDateSelection(context, props.dateSelectionSegs);\n        this.renderBgEvents(context, props.bgEventSegs);\n        this.renderFgEvents(context, props.fgEventSegs);\n        this.renderEventSelection(props.eventSelection);\n        this.renderEventDrag(props.eventDrag);\n        this.renderEventResize(props.eventResize);\n        if (this.segPopoverTile) {\n            this.updateSegPopoverTile();\n        }\n    };\n    DayGrid.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.renderCells.unrender(); // will unrender everything else\n    };\n    DayGrid.prototype.getCellRange = function (row, col) {\n        var start = this.props.cells[row][col].date;\n        var end = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.addDays)(start, 1);\n        return { start: start, end: end };\n    };\n    DayGrid.prototype.updateSegPopoverTile = function (date, segs) {\n        var ownProps = this.props;\n        this.segPopoverTile.receiveProps({\n            date: date || this.segPopoverTile.props.date,\n            fgSegs: segs || this.segPopoverTile.props.fgSegs,\n            eventSelection: ownProps.eventSelection,\n            eventDragInstances: ownProps.eventDrag ? ownProps.eventDrag.affectedInstances : null,\n            eventResizeInstances: ownProps.eventResize ? ownProps.eventResize.affectedInstances : null\n        }, this.context);\n    };\n    /* Date Rendering\n    ------------------------------------------------------------------------------------------------------------------*/\n    DayGrid.prototype._renderCells = function (cells, isRigid) {\n        var _a = this.context, calendar = _a.calendar, view = _a.view, isRtl = _a.isRtl, dateEnv = _a.dateEnv;\n        var _b = this, rowCnt = _b.rowCnt, colCnt = _b.colCnt;\n        var html = '';\n        var row;\n        var col;\n        for (row = 0; row < rowCnt; row++) {\n            html += this.renderDayRowHtml(row, isRigid);\n        }\n        this.el.innerHTML = html;\n        this.rowEls = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.findElements)(this.el, '.fc-row');\n        this.cellEls = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.findElements)(this.el, '.fc-day, .fc-disabled-day');\n        if (isRtl) {\n            this.cellEls.reverse();\n        }\n        this.rowPositions = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.PositionCache(this.el, this.rowEls, false, true // vertical\n        );\n        this.colPositions = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.PositionCache(this.el, this.cellEls.slice(0, colCnt), // only the first row\n        true, false // horizontal\n        );\n        // trigger dayRender with each cell's element\n        for (row = 0; row < rowCnt; row++) {\n            for (col = 0; col < colCnt; col++) {\n                calendar.publiclyTrigger('dayRender', [\n                    {\n                        date: dateEnv.toDate(cells[row][col].date),\n                        el: this.getCellEl(row, col),\n                        view: view\n                    }\n                ]);\n            }\n        }\n        this.isCellSizesDirty = true;\n    };\n    DayGrid.prototype._unrenderCells = function () {\n        this.removeSegPopover();\n    };\n    // Generates the HTML for a single row, which is a div that wraps a table.\n    // `row` is the row number.\n    DayGrid.prototype.renderDayRowHtml = function (row, isRigid) {\n        var theme = this.context.theme;\n        var classes = ['fc-row', 'fc-week', theme.getClass('dayRow')];\n        if (isRigid) {\n            classes.push('fc-rigid');\n        }\n        var bgRow = new DayBgRow(this.context);\n        return '' +\n            '<div class=\"' + classes.join(' ') + '\">' +\n            '<div class=\"fc-bg\">' +\n            '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n            bgRow.renderHtml({\n                cells: this.props.cells[row],\n                dateProfile: this.props.dateProfile,\n                renderIntroHtml: this.renderProps.renderBgIntroHtml\n            }) +\n            '</table>' +\n            '</div>' +\n            '<div class=\"fc-content-skeleton\">' +\n            '<table>' +\n            (this.getIsNumbersVisible() ?\n                '<thead>' +\n                    this.renderNumberTrHtml(row) +\n                    '</thead>' :\n                '') +\n            '</table>' +\n            '</div>' +\n            '</div>';\n    };\n    DayGrid.prototype.getIsNumbersVisible = function () {\n        return this.getIsDayNumbersVisible() ||\n            this.renderProps.cellWeekNumbersVisible ||\n            this.renderProps.colWeekNumbersVisible;\n    };\n    DayGrid.prototype.getIsDayNumbersVisible = function () {\n        return this.rowCnt > 1;\n    };\n    /* Grid Number Rendering\n    ------------------------------------------------------------------------------------------------------------------*/\n    DayGrid.prototype.renderNumberTrHtml = function (row) {\n        var isRtl = this.context.isRtl;\n        var intro = this.renderProps.renderNumberIntroHtml(row, this);\n        return '' +\n            '<tr>' +\n            (isRtl ? '' : intro) +\n            this.renderNumberCellsHtml(row) +\n            (isRtl ? intro : '') +\n            '</tr>';\n    };\n    DayGrid.prototype.renderNumberCellsHtml = function (row) {\n        var htmls = [];\n        var col;\n        var date;\n        for (col = 0; col < this.colCnt; col++) {\n            date = this.props.cells[row][col].date;\n            htmls.push(this.renderNumberCellHtml(date));\n        }\n        if (this.context.isRtl) {\n            htmls.reverse();\n        }\n        return htmls.join('');\n    };\n    // Generates the HTML for the <td>s of the \"number\" row in the DayGrid's content skeleton.\n    // The number row will only exist if either day numbers or week numbers are turned on.\n    DayGrid.prototype.renderNumberCellHtml = function (date) {\n        var _a = this.context, dateEnv = _a.dateEnv, options = _a.options;\n        var html = '';\n        var isDateValid = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.rangeContainsMarker)(this.props.dateProfile.activeRange, date); // TODO: called too frequently. cache somehow.\n        var isDayNumberVisible = this.getIsDayNumbersVisible() && isDateValid;\n        var classes;\n        var weekCalcFirstDow;\n        if (!isDayNumberVisible && !this.renderProps.cellWeekNumbersVisible) {\n            // no numbers in day cell (week number must be along the side)\n            return '<td></td>'; //  will create an empty space above events :(\n        }\n        classes = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.getDayClasses)(date, this.props.dateProfile, this.context);\n        classes.unshift('fc-day-top');\n        if (this.renderProps.cellWeekNumbersVisible) {\n            weekCalcFirstDow = dateEnv.weekDow;\n        }\n        html += '<td class=\"' + classes.join(' ') + '\"' +\n            (isDateValid ?\n                ' data-date=\"' + dateEnv.formatIso(date, { omitTime: true }) + '\"' :\n                '') +\n            '>';\n        if (this.renderProps.cellWeekNumbersVisible && (date.getUTCDay() === weekCalcFirstDow)) {\n            html += (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.buildGotoAnchorHtml)(options, dateEnv, { date: date, type: 'week' }, { 'class': 'fc-week-number' }, dateEnv.format(date, WEEK_NUM_FORMAT) // inner HTML\n            );\n        }\n        if (isDayNumberVisible) {\n            html += (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.buildGotoAnchorHtml)(options, dateEnv, date, { 'class': 'fc-day-number' }, dateEnv.format(date, DAY_NUM_FORMAT) // inner HTML\n            );\n        }\n        html += '</td>';\n        return html;\n    };\n    /* Sizing\n    ------------------------------------------------------------------------------------------------------------------*/\n    DayGrid.prototype.updateSize = function (isResize) {\n        var calendar = this.context.calendar;\n        var _a = this, fillRenderer = _a.fillRenderer, eventRenderer = _a.eventRenderer, mirrorRenderer = _a.mirrorRenderer;\n        if (isResize ||\n            this.isCellSizesDirty ||\n            calendar.isEventsUpdated // hack\n        ) {\n            this.buildPositionCaches();\n            this.isCellSizesDirty = false;\n        }\n        fillRenderer.computeSizes(isResize);\n        eventRenderer.computeSizes(isResize);\n        mirrorRenderer.computeSizes(isResize);\n        fillRenderer.assignSizes(isResize);\n        eventRenderer.assignSizes(isResize);\n        mirrorRenderer.assignSizes(isResize);\n    };\n    DayGrid.prototype.buildPositionCaches = function () {\n        this.buildColPositions();\n        this.buildRowPositions();\n    };\n    DayGrid.prototype.buildColPositions = function () {\n        this.colPositions.build();\n    };\n    DayGrid.prototype.buildRowPositions = function () {\n        this.rowPositions.build();\n        this.rowPositions.bottoms[this.rowCnt - 1] += this.bottomCoordPadding; // hack\n    };\n    /* Hit System\n    ------------------------------------------------------------------------------------------------------------------*/\n    DayGrid.prototype.positionToHit = function (leftPosition, topPosition) {\n        var _a = this, colPositions = _a.colPositions, rowPositions = _a.rowPositions;\n        var col = colPositions.leftToIndex(leftPosition);\n        var row = rowPositions.topToIndex(topPosition);\n        if (row != null && col != null) {\n            return {\n                row: row,\n                col: col,\n                dateSpan: {\n                    range: this.getCellRange(row, col),\n                    allDay: true\n                },\n                dayEl: this.getCellEl(row, col),\n                relativeRect: {\n                    left: colPositions.lefts[col],\n                    right: colPositions.rights[col],\n                    top: rowPositions.tops[row],\n                    bottom: rowPositions.bottoms[row]\n                }\n            };\n        }\n    };\n    /* Cell System\n    ------------------------------------------------------------------------------------------------------------------*/\n    // FYI: the first column is the leftmost column, regardless of date\n    DayGrid.prototype.getCellEl = function (row, col) {\n        return this.cellEls[row * this.colCnt + col];\n    };\n    /* Event Drag Visualization\n    ------------------------------------------------------------------------------------------------------------------*/\n    DayGrid.prototype._renderEventDrag = function (state) {\n        if (state) {\n            this.eventRenderer.hideByHash(state.affectedInstances);\n            this.fillRenderer.renderSegs('highlight', this.context, state.segs);\n        }\n    };\n    DayGrid.prototype._unrenderEventDrag = function (state) {\n        if (state) {\n            this.eventRenderer.showByHash(state.affectedInstances);\n            this.fillRenderer.unrender('highlight', this.context);\n        }\n    };\n    /* Event Resize Visualization\n    ------------------------------------------------------------------------------------------------------------------*/\n    DayGrid.prototype._renderEventResize = function (state) {\n        if (state) {\n            this.eventRenderer.hideByHash(state.affectedInstances);\n            this.fillRenderer.renderSegs('highlight', this.context, state.segs);\n            this.mirrorRenderer.renderSegs(this.context, state.segs, { isResizing: true, sourceSeg: state.sourceSeg });\n        }\n    };\n    DayGrid.prototype._unrenderEventResize = function (state) {\n        if (state) {\n            this.eventRenderer.showByHash(state.affectedInstances);\n            this.fillRenderer.unrender('highlight', this.context);\n            this.mirrorRenderer.unrender(this.context, state.segs, { isResizing: true, sourceSeg: state.sourceSeg });\n        }\n    };\n    /* More+ Link Popover\n    ------------------------------------------------------------------------------------------------------------------*/\n    DayGrid.prototype.removeSegPopover = function () {\n        if (this.segPopover) {\n            this.segPopover.hide(); // in handler, will call segPopover's removeElement\n        }\n    };\n    // Limits the number of \"levels\" (vertically stacking layers of events) for each row of the grid.\n    // `levelLimit` can be false (don't limit), a number, or true (should be computed).\n    DayGrid.prototype.limitRows = function (levelLimit) {\n        var rowStructs = this.eventRenderer.rowStructs || [];\n        var row; // row #\n        var rowLevelLimit;\n        for (row = 0; row < rowStructs.length; row++) {\n            this.unlimitRow(row);\n            if (!levelLimit) {\n                rowLevelLimit = false;\n            }\n            else if (typeof levelLimit === 'number') {\n                rowLevelLimit = levelLimit;\n            }\n            else {\n                rowLevelLimit = this.computeRowLevelLimit(row);\n            }\n            if (rowLevelLimit !== false) {\n                this.limitRow(row, rowLevelLimit);\n            }\n        }\n    };\n    // Computes the number of levels a row will accomodate without going outside its bounds.\n    // Assumes the row is \"rigid\" (maintains a constant height regardless of what is inside).\n    // `row` is the row number.\n    DayGrid.prototype.computeRowLevelLimit = function (row) {\n        var rowEl = this.rowEls[row]; // the containing \"fake\" row div\n        var rowBottom = rowEl.getBoundingClientRect().bottom; // relative to viewport!\n        var trEls = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.findChildren)(this.eventRenderer.rowStructs[row].tbodyEl);\n        var i;\n        var trEl;\n        // Reveal one level <tr> at a time and stop when we find one out of bounds\n        for (i = 0; i < trEls.length; i++) {\n            trEl = trEls[i];\n            trEl.classList.remove('fc-limited'); // reset to original state (reveal)\n            if (trEl.getBoundingClientRect().bottom > rowBottom) {\n                return i;\n            }\n        }\n        return false; // should not limit at all\n    };\n    // Limits the given grid row to the maximum number of levels and injects \"more\" links if necessary.\n    // `row` is the row number.\n    // `levelLimit` is a number for the maximum (inclusive) number of levels allowed.\n    DayGrid.prototype.limitRow = function (row, levelLimit) {\n        var _this = this;\n        var colCnt = this.colCnt;\n        var isRtl = this.context.isRtl;\n        var rowStruct = this.eventRenderer.rowStructs[row];\n        var moreNodes = []; // array of \"more\" <a> links and <td> DOM nodes\n        var col = 0; // col #, left-to-right (not chronologically)\n        var levelSegs; // array of segment objects in the last allowable level, ordered left-to-right\n        var cellMatrix; // a matrix (by level, then column) of all <td> elements in the row\n        var limitedNodes; // array of temporarily hidden level <tr> and segment <td> DOM nodes\n        var i;\n        var seg;\n        var segsBelow; // array of segment objects below `seg` in the current `col`\n        var totalSegsBelow; // total number of segments below `seg` in any of the columns `seg` occupies\n        var colSegsBelow; // array of segment arrays, below seg, one for each column (offset from segs's first column)\n        var td;\n        var rowSpan;\n        var segMoreNodes; // array of \"more\" <td> cells that will stand-in for the current seg's cell\n        var j;\n        var moreTd;\n        var moreWrap;\n        var moreLink;\n        // Iterates through empty level cells and places \"more\" links inside if need be\n        var emptyCellsUntil = function (endCol) {\n            while (col < endCol) {\n                segsBelow = _this.getCellSegs(row, col, levelLimit);\n                if (segsBelow.length) {\n                    td = cellMatrix[levelLimit - 1][col];\n                    moreLink = _this.renderMoreLink(row, col, segsBelow);\n                    moreWrap = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', null, moreLink);\n                    td.appendChild(moreWrap);\n                    moreNodes.push(moreWrap);\n                }\n                col++;\n            }\n        };\n        if (levelLimit && levelLimit < rowStruct.segLevels.length) { // is it actually over the limit?\n            levelSegs = rowStruct.segLevels[levelLimit - 1];\n            cellMatrix = rowStruct.cellMatrix;\n            limitedNodes = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.findChildren)(rowStruct.tbodyEl).slice(levelLimit); // get level <tr> elements past the limit\n            limitedNodes.forEach(function (node) {\n                node.classList.add('fc-limited'); // hide elements and get a simple DOM-nodes array\n            });\n            // iterate though segments in the last allowable level\n            for (i = 0; i < levelSegs.length; i++) {\n                seg = levelSegs[i];\n                var leftCol = isRtl ? (colCnt - 1 - seg.lastCol) : seg.firstCol;\n                var rightCol = isRtl ? (colCnt - 1 - seg.firstCol) : seg.lastCol;\n                emptyCellsUntil(leftCol); // process empty cells before the segment\n                // determine *all* segments below `seg` that occupy the same columns\n                colSegsBelow = [];\n                totalSegsBelow = 0;\n                while (col <= rightCol) {\n                    segsBelow = this.getCellSegs(row, col, levelLimit);\n                    colSegsBelow.push(segsBelow);\n                    totalSegsBelow += segsBelow.length;\n                    col++;\n                }\n                if (totalSegsBelow) { // do we need to replace this segment with one or many \"more\" links?\n                    td = cellMatrix[levelLimit - 1][leftCol]; // the segment's parent cell\n                    rowSpan = td.rowSpan || 1;\n                    segMoreNodes = [];\n                    // make a replacement <td> for each column the segment occupies. will be one for each colspan\n                    for (j = 0; j < colSegsBelow.length; j++) {\n                        moreTd = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.createElement)('td', { className: 'fc-more-cell', rowSpan: rowSpan });\n                        segsBelow = colSegsBelow[j];\n                        moreLink = this.renderMoreLink(row, leftCol + j, [seg].concat(segsBelow) // count seg as hidden too\n                        );\n                        moreWrap = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', null, moreLink);\n                        moreTd.appendChild(moreWrap);\n                        segMoreNodes.push(moreTd);\n                        moreNodes.push(moreTd);\n                    }\n                    td.classList.add('fc-limited');\n                    (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.insertAfterElement)(td, segMoreNodes);\n                    limitedNodes.push(td);\n                }\n            }\n            emptyCellsUntil(this.colCnt); // finish off the level\n            rowStruct.moreEls = moreNodes; // for easy undoing later\n            rowStruct.limitedEls = limitedNodes; // for easy undoing later\n        }\n    };\n    // Reveals all levels and removes all \"more\"-related elements for a grid's row.\n    // `row` is a row number.\n    DayGrid.prototype.unlimitRow = function (row) {\n        var rowStruct = this.eventRenderer.rowStructs[row];\n        if (rowStruct.moreEls) {\n            rowStruct.moreEls.forEach(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.removeElement);\n            rowStruct.moreEls = null;\n        }\n        if (rowStruct.limitedEls) {\n            rowStruct.limitedEls.forEach(function (limitedEl) {\n                limitedEl.classList.remove('fc-limited');\n            });\n            rowStruct.limitedEls = null;\n        }\n    };\n    // Renders an <a> element that represents hidden event element for a cell.\n    // Responsible for attaching click handler as well.\n    DayGrid.prototype.renderMoreLink = function (row, col, hiddenSegs) {\n        var _this = this;\n        var _a = this.context, calendar = _a.calendar, view = _a.view, dateEnv = _a.dateEnv, options = _a.options, isRtl = _a.isRtl;\n        var a = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.createElement)('a', { className: 'fc-more' });\n        a.innerText = this.getMoreLinkText(hiddenSegs.length);\n        a.addEventListener('click', function (ev) {\n            var clickOption = options.eventLimitClick;\n            var _col = isRtl ? _this.colCnt - col - 1 : col; // HACK: props.cells has different dir system?\n            var date = _this.props.cells[row][_col].date;\n            var moreEl = ev.currentTarget;\n            var dayEl = _this.getCellEl(row, col);\n            var allSegs = _this.getCellSegs(row, col);\n            // rescope the segments to be within the cell's date\n            var reslicedAllSegs = _this.resliceDaySegs(allSegs, date);\n            var reslicedHiddenSegs = _this.resliceDaySegs(hiddenSegs, date);\n            if (typeof clickOption === 'function') {\n                // the returned value can be an atomic option\n                clickOption = calendar.publiclyTrigger('eventLimitClick', [\n                    {\n                        date: dateEnv.toDate(date),\n                        allDay: true,\n                        dayEl: dayEl,\n                        moreEl: moreEl,\n                        segs: reslicedAllSegs,\n                        hiddenSegs: reslicedHiddenSegs,\n                        jsEvent: ev,\n                        view: view\n                    }\n                ]);\n            }\n            if (clickOption === 'popover') {\n                _this.showSegPopover(row, col, moreEl, reslicedAllSegs);\n            }\n            else if (typeof clickOption === 'string') { // a view name\n                calendar.zoomTo(date, clickOption);\n            }\n        });\n        return a;\n    };\n    // Reveals the popover that displays all events within a cell\n    DayGrid.prototype.showSegPopover = function (row, col, moreLink, segs) {\n        var _this = this;\n        var _a = this.context, calendar = _a.calendar, view = _a.view, theme = _a.theme, isRtl = _a.isRtl;\n        var _col = isRtl ? this.colCnt - col - 1 : col; // HACK: props.cells has different dir system?\n        var moreWrap = moreLink.parentNode; // the <div> wrapper around the <a>\n        var topEl; // the element we want to match the top coordinate of\n        var options;\n        if (this.rowCnt === 1) {\n            topEl = view.el; // will cause the popover to cover any sort of header\n        }\n        else {\n            topEl = this.rowEls[row]; // will align with top of row\n        }\n        options = {\n            className: 'fc-more-popover ' + theme.getClass('popover'),\n            parentEl: view.el,\n            top: (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.computeRect)(topEl).top,\n            autoHide: true,\n            content: function (el) {\n                _this.segPopoverTile = new DayTile(el);\n                _this.updateSegPopoverTile(_this.props.cells[row][_col].date, segs);\n            },\n            hide: function () {\n                _this.segPopoverTile.destroy();\n                _this.segPopoverTile = null;\n                _this.segPopover.destroy();\n                _this.segPopover = null;\n            }\n        };\n        // Determine horizontal coordinate.\n        // We use the moreWrap instead of the <td> to avoid border confusion.\n        if (isRtl) {\n            options.right = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.computeRect)(moreWrap).right + 1; // +1 to be over cell border\n        }\n        else {\n            options.left = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.computeRect)(moreWrap).left - 1; // -1 to be over cell border\n        }\n        this.segPopover = new Popover(options);\n        this.segPopover.show();\n        calendar.releaseAfterSizingTriggers(); // hack for eventPositioned\n    };\n    // Given the events within an array of segment objects, reslice them to be in a single day\n    DayGrid.prototype.resliceDaySegs = function (segs, dayDate) {\n        var dayStart = dayDate;\n        var dayEnd = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.addDays)(dayStart, 1);\n        var dayRange = { start: dayStart, end: dayEnd };\n        var newSegs = [];\n        for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n            var seg = segs_1[_i];\n            var eventRange = seg.eventRange;\n            var origRange = eventRange.range;\n            var slicedRange = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.intersectRanges)(origRange, dayRange);\n            if (slicedRange) {\n                newSegs.push(__assign({}, seg, { eventRange: {\n                        def: eventRange.def,\n                        ui: __assign({}, eventRange.ui, { durationEditable: false }),\n                        instance: eventRange.instance,\n                        range: slicedRange\n                    }, isStart: seg.isStart && slicedRange.start.valueOf() === origRange.start.valueOf(), isEnd: seg.isEnd && slicedRange.end.valueOf() === origRange.end.valueOf() }));\n            }\n        }\n        return newSegs;\n    };\n    // Generates the text that should be inside a \"more\" link, given the number of events it represents\n    DayGrid.prototype.getMoreLinkText = function (num) {\n        var opt = this.context.options.eventLimitText;\n        if (typeof opt === 'function') {\n            return opt(num);\n        }\n        else {\n            return '+' + num + ' ' + opt;\n        }\n    };\n    // Returns segments within a given cell.\n    // If `startLevel` is specified, returns only events including and below that level. Otherwise returns all segs.\n    DayGrid.prototype.getCellSegs = function (row, col, startLevel) {\n        var segMatrix = this.eventRenderer.rowStructs[row].segMatrix;\n        var level = startLevel || 0;\n        var segs = [];\n        var seg;\n        while (level < segMatrix.length) {\n            seg = segMatrix[level][col];\n            if (seg) {\n                segs.push(seg);\n            }\n            level++;\n        }\n        return segs;\n    };\n    return DayGrid;\n}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.DateComponent));\n\nvar WEEK_NUM_FORMAT$1 = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.createFormatter)({ week: 'numeric' });\n/* An abstract class for the daygrid views, as well as month view. Renders one or more rows of day cells.\n----------------------------------------------------------------------------------------------------------------------*/\n// It is a manager for a DayGrid subcomponent, which does most of the heavy lifting.\n// It is responsible for managing width/height.\nvar AbstractDayGridView = /** @class */ (function (_super) {\n    __extends(AbstractDayGridView, _super);\n    function AbstractDayGridView() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.processOptions = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.memoize)(_this._processOptions);\n        _this.renderSkeleton = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.memoizeRendering)(_this._renderSkeleton, _this._unrenderSkeleton);\n        /* Header Rendering\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Generates the HTML that will go before the day-of week header cells\n        _this.renderHeadIntroHtml = function () {\n            var _a = _this.context, theme = _a.theme, options = _a.options;\n            if (_this.colWeekNumbersVisible) {\n                return '' +\n                    '<th class=\"fc-week-number ' + theme.getClass('widgetHeader') + '\" ' + _this.weekNumberStyleAttr() + '>' +\n                    '<span>' + // needed for matchCellWidths\n                    (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.htmlEscape)(options.weekLabel) +\n                    '</span>' +\n                    '</th>';\n            }\n            return '';\n        };\n        /* Day Grid Rendering\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Generates the HTML that will go before content-skeleton cells that display the day/week numbers\n        _this.renderDayGridNumberIntroHtml = function (row, dayGrid) {\n            var _a = _this.context, options = _a.options, dateEnv = _a.dateEnv;\n            var weekStart = dayGrid.props.cells[row][0].date;\n            if (_this.colWeekNumbersVisible) {\n                return '' +\n                    '<td class=\"fc-week-number\" ' + _this.weekNumberStyleAttr() + '>' +\n                    (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.buildGotoAnchorHtml)(// aside from link, important for matchCellWidths\n                    options, dateEnv, { date: weekStart, type: 'week', forceOff: dayGrid.colCnt === 1 }, dateEnv.format(weekStart, WEEK_NUM_FORMAT$1) // inner HTML\n                    ) +\n                    '</td>';\n            }\n            return '';\n        };\n        // Generates the HTML that goes before the day bg cells for each day-row\n        _this.renderDayGridBgIntroHtml = function () {\n            var theme = _this.context.theme;\n            if (_this.colWeekNumbersVisible) {\n                return '<td class=\"fc-week-number ' + theme.getClass('widgetContent') + '\" ' + _this.weekNumberStyleAttr() + '></td>';\n            }\n            return '';\n        };\n        // Generates the HTML that goes before every other type of row generated by DayGrid.\n        // Affects mirror-skeleton and highlight-skeleton rows.\n        _this.renderDayGridIntroHtml = function () {\n            if (_this.colWeekNumbersVisible) {\n                return '<td class=\"fc-week-number\" ' + _this.weekNumberStyleAttr() + '></td>';\n            }\n            return '';\n        };\n        return _this;\n    }\n    AbstractDayGridView.prototype._processOptions = function (options) {\n        if (options.weekNumbers) {\n            if (options.weekNumbersWithinDays) {\n                this.cellWeekNumbersVisible = true;\n                this.colWeekNumbersVisible = false;\n            }\n            else {\n                this.cellWeekNumbersVisible = false;\n                this.colWeekNumbersVisible = true;\n            }\n        }\n        else {\n            this.colWeekNumbersVisible = false;\n            this.cellWeekNumbersVisible = false;\n        }\n    };\n    AbstractDayGridView.prototype.render = function (props, context) {\n        _super.prototype.render.call(this, props, context);\n        this.processOptions(context.options);\n        this.renderSkeleton(context);\n    };\n    AbstractDayGridView.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.renderSkeleton.unrender();\n    };\n    AbstractDayGridView.prototype._renderSkeleton = function (context) {\n        this.el.classList.add('fc-dayGrid-view');\n        this.el.innerHTML = this.renderSkeletonHtml();\n        this.scroller = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.ScrollComponent('hidden', // overflow x\n        'auto' // overflow y\n        );\n        var dayGridContainerEl = this.scroller.el;\n        this.el.querySelector('.fc-body > tr > td').appendChild(dayGridContainerEl);\n        dayGridContainerEl.classList.add('fc-day-grid-container');\n        var dayGridEl = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.createElement)('div', { className: 'fc-day-grid' });\n        dayGridContainerEl.appendChild(dayGridEl);\n        this.dayGrid = new DayGrid(dayGridEl, {\n            renderNumberIntroHtml: this.renderDayGridNumberIntroHtml,\n            renderBgIntroHtml: this.renderDayGridBgIntroHtml,\n            renderIntroHtml: this.renderDayGridIntroHtml,\n            colWeekNumbersVisible: this.colWeekNumbersVisible,\n            cellWeekNumbersVisible: this.cellWeekNumbersVisible\n        });\n    };\n    AbstractDayGridView.prototype._unrenderSkeleton = function () {\n        this.el.classList.remove('fc-dayGrid-view');\n        this.dayGrid.destroy();\n        this.scroller.destroy();\n    };\n    // Builds the HTML skeleton for the view.\n    // The day-grid component will render inside of a container defined by this HTML.\n    AbstractDayGridView.prototype.renderSkeletonHtml = function () {\n        var _a = this.context, theme = _a.theme, options = _a.options;\n        return '' +\n            '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n            (options.columnHeader ?\n                '<thead class=\"fc-head\">' +\n                    '<tr>' +\n                    '<td class=\"fc-head-container ' + theme.getClass('widgetHeader') + '\">&nbsp;</td>' +\n                    '</tr>' +\n                    '</thead>' :\n                '') +\n            '<tbody class=\"fc-body\">' +\n            '<tr>' +\n            '<td class=\"' + theme.getClass('widgetContent') + '\"></td>' +\n            '</tr>' +\n            '</tbody>' +\n            '</table>';\n    };\n    // Generates an HTML attribute string for setting the width of the week number column, if it is known\n    AbstractDayGridView.prototype.weekNumberStyleAttr = function () {\n        if (this.weekNumberWidth != null) {\n            return 'style=\"width:' + this.weekNumberWidth + 'px\"';\n        }\n        return '';\n    };\n    // Determines whether each row should have a constant height\n    AbstractDayGridView.prototype.hasRigidRows = function () {\n        var eventLimit = this.context.options.eventLimit;\n        return eventLimit && typeof eventLimit !== 'number';\n    };\n    /* Dimensions\n    ------------------------------------------------------------------------------------------------------------------*/\n    AbstractDayGridView.prototype.updateSize = function (isResize, viewHeight, isAuto) {\n        _super.prototype.updateSize.call(this, isResize, viewHeight, isAuto); // will call updateBaseSize. important that executes first\n        this.dayGrid.updateSize(isResize);\n    };\n    // Refreshes the horizontal dimensions of the view\n    AbstractDayGridView.prototype.updateBaseSize = function (isResize, viewHeight, isAuto) {\n        var dayGrid = this.dayGrid;\n        var eventLimit = this.context.options.eventLimit;\n        var headRowEl = this.header ? this.header.el : null; // HACK\n        var scrollerHeight;\n        var scrollbarWidths;\n        // hack to give the view some height prior to dayGrid's columns being rendered\n        // TODO: separate setting height from scroller VS dayGrid.\n        if (!dayGrid.rowEls) {\n            if (!isAuto) {\n                scrollerHeight = this.computeScrollerHeight(viewHeight);\n                this.scroller.setHeight(scrollerHeight);\n            }\n            return;\n        }\n        if (this.colWeekNumbersVisible) {\n            // Make sure all week number cells running down the side have the same width.\n            this.weekNumberWidth = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.matchCellWidths)((0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.findElements)(this.el, '.fc-week-number'));\n        }\n        // reset all heights to be natural\n        this.scroller.clear();\n        if (headRowEl) {\n            (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.uncompensateScroll)(headRowEl);\n        }\n        dayGrid.removeSegPopover(); // kill the \"more\" popover if displayed\n        // is the event limit a constant level number?\n        if (eventLimit && typeof eventLimit === 'number') {\n            dayGrid.limitRows(eventLimit); // limit the levels first so the height can redistribute after\n        }\n        // distribute the height to the rows\n        // (viewHeight is a \"recommended\" value if isAuto)\n        scrollerHeight = this.computeScrollerHeight(viewHeight);\n        this.setGridHeight(scrollerHeight, isAuto);\n        // is the event limit dynamically calculated?\n        if (eventLimit && typeof eventLimit !== 'number') {\n            dayGrid.limitRows(eventLimit); // limit the levels after the grid's row heights have been set\n        }\n        if (!isAuto) { // should we force dimensions of the scroll container?\n            this.scroller.setHeight(scrollerHeight);\n            scrollbarWidths = this.scroller.getScrollbarWidths();\n            if (scrollbarWidths.left || scrollbarWidths.right) { // using scrollbars?\n                if (headRowEl) {\n                    (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.compensateScroll)(headRowEl, scrollbarWidths);\n                }\n                // doing the scrollbar compensation might have created text overflow which created more height. redo\n                scrollerHeight = this.computeScrollerHeight(viewHeight);\n                this.scroller.setHeight(scrollerHeight);\n            }\n            // guarantees the same scrollbar widths\n            this.scroller.lockOverflow(scrollbarWidths);\n        }\n    };\n    // given a desired total height of the view, returns what the height of the scroller should be\n    AbstractDayGridView.prototype.computeScrollerHeight = function (viewHeight) {\n        return viewHeight -\n            (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.subtractInnerElHeight)(this.el, this.scroller.el); // everything that's NOT the scroller\n    };\n    // Sets the height of just the DayGrid component in this view\n    AbstractDayGridView.prototype.setGridHeight = function (height, isAuto) {\n        if (this.context.options.monthMode) {\n            // if auto, make the height of each row the height that it would be if there were 6 weeks\n            if (isAuto) {\n                height *= this.dayGrid.rowCnt / 6;\n            }\n            (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.distributeHeight)(this.dayGrid.rowEls, height, !isAuto); // if auto, don't compensate for height-hogging rows\n        }\n        else {\n            if (isAuto) {\n                (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.undistributeHeight)(this.dayGrid.rowEls); // let the rows be their natural height with no expanding\n            }\n            else {\n                (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.distributeHeight)(this.dayGrid.rowEls, height, true); // true = compensate for height-hogging rows\n            }\n        }\n    };\n    /* Scroll\n    ------------------------------------------------------------------------------------------------------------------*/\n    AbstractDayGridView.prototype.computeDateScroll = function (duration) {\n        return { top: 0 };\n    };\n    AbstractDayGridView.prototype.queryDateScroll = function () {\n        return { top: this.scroller.getScrollTop() };\n    };\n    AbstractDayGridView.prototype.applyDateScroll = function (scroll) {\n        if (scroll.top !== undefined) {\n            this.scroller.setScrollTop(scroll.top);\n        }\n    };\n    return AbstractDayGridView;\n}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.View));\nAbstractDayGridView.prototype.dateProfileGeneratorClass = DayGridDateProfileGenerator;\n\nvar SimpleDayGrid = /** @class */ (function (_super) {\n    __extends(SimpleDayGrid, _super);\n    function SimpleDayGrid(dayGrid) {\n        var _this = _super.call(this, dayGrid.el) || this;\n        _this.slicer = new DayGridSlicer();\n        _this.dayGrid = dayGrid;\n        return _this;\n    }\n    SimpleDayGrid.prototype.firstContext = function (context) {\n        context.calendar.registerInteractiveComponent(this, { el: this.dayGrid.el });\n    };\n    SimpleDayGrid.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.context.calendar.unregisterInteractiveComponent(this);\n    };\n    SimpleDayGrid.prototype.render = function (props, context) {\n        var dayGrid = this.dayGrid;\n        var dateProfile = props.dateProfile, dayTable = props.dayTable;\n        dayGrid.receiveContext(context); // hack because context is used in sliceProps\n        dayGrid.receiveProps(__assign({}, this.slicer.sliceProps(props, dateProfile, props.nextDayThreshold, context.calendar, dayGrid, dayTable), { dateProfile: dateProfile, cells: dayTable.cells, isRigid: props.isRigid }), context);\n    };\n    SimpleDayGrid.prototype.buildPositionCaches = function () {\n        this.dayGrid.buildPositionCaches();\n    };\n    SimpleDayGrid.prototype.queryHit = function (positionLeft, positionTop) {\n        var rawHit = this.dayGrid.positionToHit(positionLeft, positionTop);\n        if (rawHit) {\n            return {\n                component: this.dayGrid,\n                dateSpan: rawHit.dateSpan,\n                dayEl: rawHit.dayEl,\n                rect: {\n                    left: rawHit.relativeRect.left,\n                    right: rawHit.relativeRect.right,\n                    top: rawHit.relativeRect.top,\n                    bottom: rawHit.relativeRect.bottom\n                },\n                layer: 0\n            };\n        }\n    };\n    return SimpleDayGrid;\n}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.DateComponent));\nvar DayGridSlicer = /** @class */ (function (_super) {\n    __extends(DayGridSlicer, _super);\n    function DayGridSlicer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DayGridSlicer.prototype.sliceRange = function (dateRange, dayTable) {\n        return dayTable.sliceRange(dateRange);\n    };\n    return DayGridSlicer;\n}(_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.Slicer));\n\nvar DayGridView = /** @class */ (function (_super) {\n    __extends(DayGridView, _super);\n    function DayGridView() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.buildDayTable = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.memoize)(buildDayTable);\n        return _this;\n    }\n    DayGridView.prototype.render = function (props, context) {\n        _super.prototype.render.call(this, props, context); // will call _renderSkeleton/_unrenderSkeleton\n        var dateProfile = this.props.dateProfile;\n        var dayTable = this.dayTable =\n            this.buildDayTable(dateProfile, props.dateProfileGenerator);\n        if (this.header) {\n            this.header.receiveProps({\n                dateProfile: dateProfile,\n                dates: dayTable.headerDates,\n                datesRepDistinctDays: dayTable.rowCnt === 1,\n                renderIntroHtml: this.renderHeadIntroHtml\n            }, context);\n        }\n        this.simpleDayGrid.receiveProps({\n            dateProfile: dateProfile,\n            dayTable: dayTable,\n            businessHours: props.businessHours,\n            dateSelection: props.dateSelection,\n            eventStore: props.eventStore,\n            eventUiBases: props.eventUiBases,\n            eventSelection: props.eventSelection,\n            eventDrag: props.eventDrag,\n            eventResize: props.eventResize,\n            isRigid: this.hasRigidRows(),\n            nextDayThreshold: this.context.nextDayThreshold\n        }, context);\n    };\n    DayGridView.prototype._renderSkeleton = function (context) {\n        _super.prototype._renderSkeleton.call(this, context);\n        if (context.options.columnHeader) {\n            this.header = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.DayHeader(this.el.querySelector('.fc-head-container'));\n        }\n        this.simpleDayGrid = new SimpleDayGrid(this.dayGrid);\n    };\n    DayGridView.prototype._unrenderSkeleton = function () {\n        _super.prototype._unrenderSkeleton.call(this);\n        if (this.header) {\n            this.header.destroy();\n        }\n        this.simpleDayGrid.destroy();\n    };\n    return DayGridView;\n}(AbstractDayGridView));\nfunction buildDayTable(dateProfile, dateProfileGenerator) {\n    var daySeries = new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.DaySeries(dateProfile.renderRange, dateProfileGenerator);\n    return new _fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.DayTable(daySeries, /year|month|week/.test(dateProfile.currentRangeUnit));\n}\n\nvar main = (0,_fullcalendar_core__WEBPACK_IMPORTED_MODULE_0__.createPlugin)({\n    defaultView: 'dayGridMonth',\n    views: {\n        dayGrid: DayGridView,\n        dayGridDay: {\n            type: 'dayGrid',\n            duration: { days: 1 }\n        },\n        dayGridWeek: {\n            type: 'dayGrid',\n            duration: { weeks: 1 }\n        },\n        dayGridMonth: {\n            type: 'dayGrid',\n            duration: { months: 1 },\n            monthMode: true,\n            fixedWeekCount: true\n        }\n    }\n});\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (main);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci9kYXlncmlkL21haW4uZXNtLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRSt1Qjs7QUFFL3VCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZ0JBQWdCLHNDQUFzQyxrQkFBa0I7QUFDbkYsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxPQUFPO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiw0REFBUTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDZEQUFTO0FBQ3JCLGtCQUFrQiw0REFBUTtBQUMxQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsQ0FBQyxDQUFDLG9FQUFvQjs7QUFFdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsaUVBQWE7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxvRUFBZ0I7QUFDeEI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksaUVBQWE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRCxxQkFBcUIsK0RBQVc7QUFDaEMsMkJBQTJCLHVFQUFtQjtBQUM5QyxpQkFBaUI7QUFDakIsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLDhEQUFVO0FBQ2xCO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHlFQUFxQjtBQUMvQyw0REFBNEQsOEVBQTBCO0FBQ3RGLHdEQUF3RCw0RUFBd0I7QUFDaEY7QUFDQSxzQkFBc0IsNERBQVE7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCw4REFBVTtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiw4REFBVSxpQ0FBaUM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDhEQUFVO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBLENBQUMsQ0FBQywrREFBZTs7QUFFakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxpRUFBYTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBLHNCQUFzQixzQkFBc0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRDtBQUN0RCxzREFBc0Q7QUFDdEQ7QUFDQSw0QkFBNEI7QUFDNUIsNkJBQTZCO0FBQzdCLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsY0FBYyxPQUFPO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixzQkFBc0IsT0FBTztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGlFQUFhLFNBQVMsaUNBQWlDO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsbUVBQWU7QUFDbkM7QUFDQTtBQUNBLG9CQUFvQixvRUFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7QUFDQSx3QkFBd0IsbUJBQW1CO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZFQUE2RTtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG1CQUFtQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHlCQUF5QjtBQUM3QztBQUNBO0FBQ0Esb0JBQW9CLGlCQUFpQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixzQkFBc0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGlFQUFhLDJEQUEyRDtBQUNyRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixpQkFBaUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsaUVBQWE7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG1FQUFlO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbUVBQWU7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1FQUFlO0FBQy9CO0FBQ0E7QUFDQSxnQkFBZ0Isb0VBQWdCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLENBQUMsNERBQVk7O0FBRWQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxvRUFBZ0I7QUFDOUQsK0JBQStCLG9FQUFnQjtBQUMvQyxxQ0FBcUMsb0VBQWdCO0FBQ3JELGdDQUFnQyxvRUFBZ0I7QUFDaEQsa0NBQWtDLG9FQUFnQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsbUVBQWU7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsOERBQVU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsa0JBQWtCLDJEQUFPO0FBQ3RELGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsQ0FBQyw2REFBYTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0Msb0JBQW9CO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0Msb0JBQW9CO0FBQzVEO0FBQ0EsWUFBWSxpRUFBYTtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxnQkFBZ0I7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxzQkFBc0IsdUVBQW1CLGlDQUFpQztBQUMxRSxrQkFBa0IsaUVBQWE7QUFDL0I7QUFDQTtBQUNBO0FBQ0EsdURBQXVELGdCQUFnQjtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLG1FQUFlLEdBQUcsZ0JBQWdCO0FBQ3ZELHNCQUFzQixtRUFBZSxHQUFHLGlCQUFpQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLG9FQUFnQjtBQUM5RCxvQ0FBb0Msb0VBQWdCO0FBQ3BELG9DQUFvQyxvRUFBZ0I7QUFDcEQsK0JBQStCLG9FQUFnQjtBQUMvQywrQkFBK0Isb0VBQWdCO0FBQy9DLHFDQUFxQyxvRUFBZ0I7QUFDckQsZ0NBQWdDLG9FQUFnQjtBQUNoRCxrQ0FBa0Msb0VBQWdCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDJEQUFPO0FBQ3pCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGNBQWM7QUFDcEM7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGdFQUFZO0FBQ2xDLHVCQUF1QixnRUFBWTtBQUNuQztBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsNkRBQWE7QUFDN0M7QUFDQSxnQ0FBZ0MsNkRBQWE7QUFDN0M7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGNBQWM7QUFDcEMsMEJBQTBCLGNBQWM7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsbUJBQW1CO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHVFQUFtQiw0Q0FBNEM7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBLGtCQUFrQixpRUFBYTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsZ0JBQWdCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix1RUFBbUIscUJBQXFCLDBCQUEwQixJQUFJLDJCQUEyQjtBQUNySDtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsdUVBQW1CLDJCQUEyQiwwQkFBMEI7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0VBQStFO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUVBQXVFLDhDQUE4QztBQUNySDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUUsOENBQThDO0FBQ25IO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxzQkFBc0IseUJBQXlCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDLDhEQUE4RDtBQUM5RCxvQkFBb0IsZ0VBQVk7QUFDaEM7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIscUJBQXFCO0FBQ3JCLHVCQUF1QjtBQUN2Qix3QkFBd0I7QUFDeEIsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIsNEJBQTRCO0FBQzVCLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsaUVBQWE7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUVBQXFFO0FBQ3JFO0FBQ0E7QUFDQSwyQkFBMkIsZ0VBQVksdUNBQXVDO0FBQzlFO0FBQ0Esa0RBQWtEO0FBQ2xELGFBQWE7QUFDYjtBQUNBLHdCQUF3QixzQkFBc0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0Qyw4REFBOEQ7QUFDOUQ7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHlCQUF5QjtBQUN6RCxpQ0FBaUMsaUVBQWEsU0FBUyw2Q0FBNkM7QUFDcEc7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGlFQUFhO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isc0VBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQywyQ0FBMkM7QUFDM0MsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLDZEQUFhO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixpRUFBYSxRQUFRLHNCQUFzQjtBQUMzRDtBQUNBO0FBQ0E7QUFDQSw2REFBNkQ7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0Q7QUFDeEQ7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0Q7QUFDeEQsNENBQTRDO0FBQzVDLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsK0RBQVc7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsK0RBQVcsc0JBQXNCO0FBQzdEO0FBQ0E7QUFDQSwyQkFBMkIsK0RBQVcscUJBQXFCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiwyREFBTztBQUM1Qix5QkFBeUI7QUFDekI7QUFDQSx3Q0FBd0Msb0JBQW9CO0FBQzVEO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixtRUFBZTtBQUM3QztBQUNBLHdDQUF3QyxTQUFTO0FBQ2pEO0FBQ0EsdUNBQXVDLG1CQUFtQix5QkFBeUI7QUFDbkY7QUFDQTtBQUNBLHFCQUFxQixnS0FBZ0s7QUFDckw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLENBQUMsNkRBQWE7O0FBRWYsd0JBQXdCLG1FQUFlLEdBQUcsaUJBQWlCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsMkRBQU87QUFDdEMsK0JBQStCLG9FQUFnQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsOERBQVU7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix1RUFBbUI7QUFDdkMsd0NBQXdDLCtEQUErRDtBQUN2RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsK0RBQWU7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixpRUFBYSxVQUFVLDBCQUEwQjtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnR0FBZ0c7QUFDaEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEU7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZEO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLG1FQUFlLENBQUMsZ0VBQVk7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHNFQUFrQjtBQUM5QjtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQSxpRUFBaUU7QUFDakU7QUFDQSxvQkFBb0Isb0VBQWdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkseUVBQXFCLDZCQUE2QjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxvRUFBZ0Isd0NBQXdDO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixzRUFBa0IsdUJBQXVCO0FBQ3pEO0FBQ0E7QUFDQSxnQkFBZ0Isb0VBQWdCLHFDQUFxQztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsQ0FBQyxvREFBSTtBQUNOOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCxxQkFBcUI7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6Qyx3Q0FBd0MsNkdBQTZHLHlFQUF5RTtBQUM5TjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxDQUFDLDZEQUFhO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxDQUFDLHNEQUFNOztBQUVSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDJEQUFPO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLDREQUE0RDtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIseURBQVM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLHdCQUF3Qix5REFBUztBQUNqQyxlQUFlLHdEQUFRO0FBQ3ZCOztBQUVBLFdBQVcsZ0VBQVk7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QixTQUFTO0FBQ1Q7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QixTQUFTO0FBQ1Q7QUFDQTtBQUNBLHdCQUF3QixXQUFXO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCxpRUFBZSxJQUFJLEVBQUM7QUFDOEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZ1bGxjYWxlbmRhci9kYXlncmlkL21haW4uZXNtLmpzPzg4ZTEiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG5GdWxsQ2FsZW5kYXIgRGF5IEdyaWQgUGx1Z2luIHY0LjQuMlxuRG9jcyAmIExpY2Vuc2U6IGh0dHBzOi8vZnVsbGNhbGVuZGFyLmlvL1xuKGMpIDIwMTkgQWRhbSBTaGF3XG4qL1xuXG5pbXBvcnQgeyBhZGRXZWVrcywgZGlmZldlZWtzLCBEYXRlUHJvZmlsZUdlbmVyYXRvciwgY3JlYXRlRWxlbWVudCwgbGlzdGVuQnlTZWxlY3RvciwgcmVtb3ZlRWxlbWVudCwgY29tcHV0ZVJlY3QsIGNvbXB1dGVDbGlwcGluZ1JlY3QsIGFwcGx5U3R5bGUsIGNvbXB1dGVFdmVudERyYWdnYWJsZSwgY29tcHV0ZUV2ZW50U3RhcnRSZXNpemFibGUsIGNvbXB1dGVFdmVudEVuZFJlc2l6YWJsZSwgY3NzVG9TdHIsIGh0bWxFc2NhcGUsIEZnRXZlbnRSZW5kZXJlciwgYXBwZW5kVG9FbGVtZW50LCBwcmVwZW5kVG9FbGVtZW50LCBodG1sVG9FbGVtZW50LCBGaWxsUmVuZGVyZXIsIG1lbW9pemVSZW5kZXJpbmcsIGNyZWF0ZUZvcm1hdHRlciwgYWRkRGF5cywgRGF0ZUNvbXBvbmVudCwgcmFuZ2VDb250YWluc01hcmtlciwgZ2V0RGF5Q2xhc3NlcywgZmluZEVsZW1lbnRzLCBQb3NpdGlvbkNhY2hlLCBidWlsZEdvdG9BbmNob3JIdG1sLCBmaW5kQ2hpbGRyZW4sIGluc2VydEFmdGVyRWxlbWVudCwgaW50ZXJzZWN0UmFuZ2VzLCBtZW1vaXplLCBTY3JvbGxDb21wb25lbnQsIG1hdGNoQ2VsbFdpZHRocywgdW5jb21wZW5zYXRlU2Nyb2xsLCBjb21wZW5zYXRlU2Nyb2xsLCBzdWJ0cmFjdElubmVyRWxIZWlnaHQsIGRpc3RyaWJ1dGVIZWlnaHQsIHVuZGlzdHJpYnV0ZUhlaWdodCwgVmlldywgU2xpY2VyLCBEYXlIZWFkZXIsIERheVNlcmllcywgRGF5VGFibGUsIGNyZWF0ZVBsdWdpbiB9IGZyb20gJ0BmdWxsY2FsZW5kYXIvY29yZSc7XG5cbi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbnZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn07XG5cbnZhciBEYXlHcmlkRGF0ZVByb2ZpbGVHZW5lcmF0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKERheUdyaWREYXRlUHJvZmlsZUdlbmVyYXRvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEYXlHcmlkRGF0ZVByb2ZpbGVHZW5lcmF0b3IoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgLy8gQ29tcHV0ZXMgdGhlIGRhdGUgcmFuZ2UgdGhhdCB3aWxsIGJlIHJlbmRlcmVkLlxuICAgIERheUdyaWREYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuYnVpbGRSZW5kZXJSYW5nZSA9IGZ1bmN0aW9uIChjdXJyZW50UmFuZ2UsIGN1cnJlbnRSYW5nZVVuaXQsIGlzUmFuZ2VBbGxEYXkpIHtcbiAgICAgICAgdmFyIGRhdGVFbnYgPSB0aGlzLmRhdGVFbnY7XG4gICAgICAgIHZhciByZW5kZXJSYW5nZSA9IF9zdXBlci5wcm90b3R5cGUuYnVpbGRSZW5kZXJSYW5nZS5jYWxsKHRoaXMsIGN1cnJlbnRSYW5nZSwgY3VycmVudFJhbmdlVW5pdCwgaXNSYW5nZUFsbERheSk7XG4gICAgICAgIHZhciBzdGFydCA9IHJlbmRlclJhbmdlLnN0YXJ0O1xuICAgICAgICB2YXIgZW5kID0gcmVuZGVyUmFuZ2UuZW5kO1xuICAgICAgICB2YXIgZW5kT2ZXZWVrO1xuICAgICAgICAvLyB5ZWFyIGFuZCBtb250aCB2aWV3cyBzaG91bGQgYmUgYWxpZ25lZCB3aXRoIHdlZWtzLiB0aGlzIGlzIGFscmVhZHkgZG9uZSBmb3Igd2Vla1xuICAgICAgICBpZiAoL14oeWVhcnxtb250aCkkLy50ZXN0KGN1cnJlbnRSYW5nZVVuaXQpKSB7XG4gICAgICAgICAgICBzdGFydCA9IGRhdGVFbnYuc3RhcnRPZldlZWsoc3RhcnQpO1xuICAgICAgICAgICAgLy8gbWFrZSBlbmQtb2Ytd2VlayBpZiBub3QgYWxyZWFkeVxuICAgICAgICAgICAgZW5kT2ZXZWVrID0gZGF0ZUVudi5zdGFydE9mV2VlayhlbmQpO1xuICAgICAgICAgICAgaWYgKGVuZE9mV2Vlay52YWx1ZU9mKCkgIT09IGVuZC52YWx1ZU9mKCkpIHtcbiAgICAgICAgICAgICAgICBlbmQgPSBhZGRXZWVrcyhlbmRPZldlZWssIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGVuc3VyZSA2IHdlZWtzXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubW9udGhNb2RlICYmXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZml4ZWRXZWVrQ291bnQpIHtcbiAgICAgICAgICAgIHZhciByb3dDbnQgPSBNYXRoLmNlaWwoLy8gY291bGQgYmUgcGFydGlhbCB3ZWVrcyBkdWUgdG8gaGlkZGVuRGF5c1xuICAgICAgICAgICAgZGlmZldlZWtzKHN0YXJ0LCBlbmQpKTtcbiAgICAgICAgICAgIGVuZCA9IGFkZFdlZWtzKGVuZCwgNiAtIHJvd0NudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCB9O1xuICAgIH07XG4gICAgcmV0dXJuIERheUdyaWREYXRlUHJvZmlsZUdlbmVyYXRvcjtcbn0oRGF0ZVByb2ZpbGVHZW5lcmF0b3IpKTtcblxuLyogQSByZWN0YW5ndWxhciBwYW5lbCB0aGF0IGlzIGFic29sdXRlbHkgcG9zaXRpb25lZCBvdmVyIG90aGVyIGNvbnRlbnRcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuT3B0aW9uczpcbiAgLSBjbGFzc05hbWUgKHN0cmluZylcbiAgLSBjb250ZW50IChIVE1MIHN0cmluZywgZWxlbWVudCwgb3IgZWxlbWVudCBhcnJheSlcbiAgLSBwYXJlbnRFbFxuICAtIHRvcFxuICAtIGxlZnRcbiAgLSByaWdodCAodGhlIHggY29vcmQgb2Ygd2hlcmUgdGhlIHJpZ2h0IGVkZ2Ugc2hvdWxkIGJlLiBub3QgYSBcIkNTU1wiIHJpZ2h0KVxuICAtIGF1dG9IaWRlIChib29sZWFuKVxuICAtIHNob3cgKGNhbGxiYWNrKVxuICAtIGhpZGUgKGNhbGxiYWNrKVxuKi9cbnZhciBQb3BvdmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBvcG92ZXIob3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmlzSGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5tYXJnaW4gPSAxMDsgLy8gdGhlIHNwYWNlIHJlcXVpcmVkIGJldHdlZW4gdGhlIHBvcG92ZXIgYW5kIHRoZSBlZGdlcyBvZiB0aGUgc2Nyb2xsIGNvbnRhaW5lclxuICAgICAgICAvLyBUcmlnZ2VyZWQgd2hlbiB0aGUgdXNlciBjbGlja3MgKmFueXdoZXJlKiBpbiB0aGUgZG9jdW1lbnQsIGZvciB0aGUgYXV0b0hpZGUgZmVhdHVyZVxuICAgICAgICB0aGlzLmRvY3VtZW50TW91c2Vkb3duID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICAvLyBvbmx5IGhpZGUgdGhlIHBvcG92ZXIgaWYgdGhlIGNsaWNrIGhhcHBlbmVkIG91dHNpZGUgdGhlIHBvcG92ZXJcbiAgICAgICAgICAgIGlmIChfdGhpcy5lbCAmJiAhX3RoaXMuZWwuY29udGFpbnMoZXYudGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgIF90aGlzLmhpZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgLy8gU2hvd3MgdGhlIHBvcG92ZXIgb24gdGhlIHNwZWNpZmllZCBwb3NpdGlvbi4gUmVuZGVycyBpdCBpZiBub3QgYWxyZWFkeVxuICAgIFBvcG92ZXIucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzSGlkZGVuKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLmlzSGlkZGVuID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ3Nob3cnKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gSGlkZXMgdGhlIHBvcG92ZXIsIHRocm91Z2ggQ1NTLCBidXQgZG9lcyBub3QgcmVtb3ZlIGl0IGZyb20gdGhlIERPTVxuICAgIFBvcG92ZXIucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0hpZGRlbikge1xuICAgICAgICAgICAgdGhpcy5lbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgdGhpcy5pc0hpZGRlbiA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2hpZGUnKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gQ3JlYXRlcyBgdGhpcy5lbGAgYW5kIHJlbmRlcnMgY29udGVudCBpbnNpZGUgb2YgaXRcbiAgICBQb3BvdmVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICB2YXIgZWwgPSB0aGlzLmVsID0gY3JlYXRlRWxlbWVudCgnZGl2Jywge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAnZmMtcG9wb3ZlciAnICsgKG9wdGlvbnMuY2xhc3NOYW1lIHx8ICcnKSxcbiAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgdG9wOiAnMCcsXG4gICAgICAgICAgICAgICAgbGVmdDogJzAnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuY29udGVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgb3B0aW9ucy5jb250ZW50KGVsKTtcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zLnBhcmVudEVsLmFwcGVuZENoaWxkKGVsKTtcbiAgICAgICAgLy8gd2hlbiBhIGNsaWNrIGhhcHBlbnMgb24gYW55dGhpbmcgaW5zaWRlIHdpdGggYSAnZmMtY2xvc2UnIGNsYXNzTmFtZSwgaGlkZSB0aGUgcG9wb3ZlclxuICAgICAgICBsaXN0ZW5CeVNlbGVjdG9yKGVsLCAnY2xpY2snLCAnLmZjLWNsb3NlJywgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBfdGhpcy5oaWRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAob3B0aW9ucy5hdXRvSGlkZSkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5kb2N1bWVudE1vdXNlZG93bik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEhpZGVzIGFuZCB1bnJlZ2lzdGVycyBhbnkgaGFuZGxlcnNcbiAgICBQb3BvdmVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgaWYgKHRoaXMuZWwpIHtcbiAgICAgICAgICAgIHJlbW92ZUVsZW1lbnQodGhpcy5lbCk7XG4gICAgICAgICAgICB0aGlzLmVsID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLmRvY3VtZW50TW91c2Vkb3duKTtcbiAgICB9O1xuICAgIC8vIFBvc2l0aW9ucyB0aGUgcG9wb3ZlciBvcHRpbWFsbHksIHVzaW5nIHRoZSB0b3AvbGVmdC9yaWdodCBvcHRpb25zXG4gICAgUG9wb3Zlci5wcm90b3R5cGUucG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICB2YXIgZWwgPSB0aGlzLmVsO1xuICAgICAgICB2YXIgZWxEaW1zID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IC8vIG9ubHkgdXNlZCBmb3Igd2lkdGgsaGVpZ2h0XG4gICAgICAgIHZhciBvcmlnaW4gPSBjb21wdXRlUmVjdChlbC5vZmZzZXRQYXJlbnQpO1xuICAgICAgICB2YXIgY2xpcHBpbmdSZWN0ID0gY29tcHV0ZUNsaXBwaW5nUmVjdChvcHRpb25zLnBhcmVudEVsKTtcbiAgICAgICAgdmFyIHRvcDsgLy8gdGhlIFwicG9zaXRpb25cIiAobm90IFwib2Zmc2V0XCIpIHZhbHVlcyBmb3IgdGhlIHBvcG92ZXJcbiAgICAgICAgdmFyIGxlZnQ7IC8vXG4gICAgICAgIC8vIGNvbXB1dGUgdG9wIGFuZCBsZWZ0XG4gICAgICAgIHRvcCA9IG9wdGlvbnMudG9wIHx8IDA7XG4gICAgICAgIGlmIChvcHRpb25zLmxlZnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbGVmdCA9IG9wdGlvbnMubGVmdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHRpb25zLnJpZ2h0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGxlZnQgPSBvcHRpb25zLnJpZ2h0IC0gZWxEaW1zLndpZHRoOyAvLyBkZXJpdmUgdGhlIGxlZnQgdmFsdWUgZnJvbSB0aGUgcmlnaHQgdmFsdWVcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxlZnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNvbnN0cmFpbiB0byB0aGUgdmlldyBwb3J0LiBpZiBjb25zdHJhaW5lZCBieSB0d28gZWRnZXMsIGdpdmUgcHJlY2VkZW5jZSB0byB0b3AvbGVmdFxuICAgICAgICB0b3AgPSBNYXRoLm1pbih0b3AsIGNsaXBwaW5nUmVjdC5ib3R0b20gLSBlbERpbXMuaGVpZ2h0IC0gdGhpcy5tYXJnaW4pO1xuICAgICAgICB0b3AgPSBNYXRoLm1heCh0b3AsIGNsaXBwaW5nUmVjdC50b3AgKyB0aGlzLm1hcmdpbik7XG4gICAgICAgIGxlZnQgPSBNYXRoLm1pbihsZWZ0LCBjbGlwcGluZ1JlY3QucmlnaHQgLSBlbERpbXMud2lkdGggLSB0aGlzLm1hcmdpbik7XG4gICAgICAgIGxlZnQgPSBNYXRoLm1heChsZWZ0LCBjbGlwcGluZ1JlY3QubGVmdCArIHRoaXMubWFyZ2luKTtcbiAgICAgICAgYXBwbHlTdHlsZShlbCwge1xuICAgICAgICAgICAgdG9wOiB0b3AgLSBvcmlnaW4udG9wLFxuICAgICAgICAgICAgbGVmdDogbGVmdCAtIG9yaWdpbi5sZWZ0XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gVHJpZ2dlcnMgYSBjYWxsYmFjay4gQ2FsbHMgYSBmdW5jdGlvbiBpbiB0aGUgb3B0aW9uIGhhc2ggb2YgdGhlIHNhbWUgbmFtZS5cbiAgICAvLyBBcmd1bWVudHMgYmV5b25kIHRoZSBmaXJzdCBgbmFtZWAgYXJlIGZvcndhcmRlZCBvbi5cbiAgICAvLyBUT0RPOiBiZXR0ZXIgY29kZSByZXVzZSBmb3IgdGhpcy4gUmVwZWF0IGNvZGVcbiAgICAvLyBjYW4ga2lsbCB0aGlzPz8/XG4gICAgUG9wb3Zlci5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnNbbmFtZV0pIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9uc1tuYW1lXS5hcHBseSh0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFBvcG92ZXI7XG59KCkpO1xuXG4vKiBFdmVudC1yZW5kZXJpbmcgbWV0aG9kcyBmb3IgdGhlIERheUdyaWQgY2xhc3Ncbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLy8gXCJTaW1wbGVcIiBpcyBiYWQgYSBuYW1lLiBoYXMgbm90aGluZyB0byBkbyB3aXRoIFNpbXBsZURheUdyaWRcbnZhciBTaW1wbGVEYXlHcmlkRXZlbnRSZW5kZXJlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2ltcGxlRGF5R3JpZEV2ZW50UmVuZGVyZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2ltcGxlRGF5R3JpZEV2ZW50UmVuZGVyZXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgLy8gQnVpbGRzIHRoZSBIVE1MIHRvIGJlIHVzZWQgZm9yIHRoZSBkZWZhdWx0IGVsZW1lbnQgZm9yIGFuIGluZGl2aWR1YWwgc2VnbWVudFxuICAgIFNpbXBsZURheUdyaWRFdmVudFJlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXJTZWdIdG1sID0gZnVuY3Rpb24gKHNlZywgbWlycm9ySW5mbykge1xuICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMuY29udGV4dDtcbiAgICAgICAgdmFyIGV2ZW50UmFuZ2UgPSBzZWcuZXZlbnRSYW5nZTtcbiAgICAgICAgdmFyIGV2ZW50RGVmID0gZXZlbnRSYW5nZS5kZWY7XG4gICAgICAgIHZhciBldmVudFVpID0gZXZlbnRSYW5nZS51aTtcbiAgICAgICAgdmFyIGFsbERheSA9IGV2ZW50RGVmLmFsbERheTtcbiAgICAgICAgdmFyIGlzRHJhZ2dhYmxlID0gY29tcHV0ZUV2ZW50RHJhZ2dhYmxlKGNvbnRleHQsIGV2ZW50RGVmLCBldmVudFVpKTtcbiAgICAgICAgdmFyIGlzUmVzaXphYmxlRnJvbVN0YXJ0ID0gYWxsRGF5ICYmIHNlZy5pc1N0YXJ0ICYmIGNvbXB1dGVFdmVudFN0YXJ0UmVzaXphYmxlKGNvbnRleHQsIGV2ZW50RGVmLCBldmVudFVpKTtcbiAgICAgICAgdmFyIGlzUmVzaXphYmxlRnJvbUVuZCA9IGFsbERheSAmJiBzZWcuaXNFbmQgJiYgY29tcHV0ZUV2ZW50RW5kUmVzaXphYmxlKGNvbnRleHQsIGV2ZW50RGVmLCBldmVudFVpKTtcbiAgICAgICAgdmFyIGNsYXNzZXMgPSB0aGlzLmdldFNlZ0NsYXNzZXMoc2VnLCBpc0RyYWdnYWJsZSwgaXNSZXNpemFibGVGcm9tU3RhcnQgfHwgaXNSZXNpemFibGVGcm9tRW5kLCBtaXJyb3JJbmZvKTtcbiAgICAgICAgdmFyIHNraW5Dc3MgPSBjc3NUb1N0cih0aGlzLmdldFNraW5Dc3MoZXZlbnRVaSkpO1xuICAgICAgICB2YXIgdGltZUh0bWwgPSAnJztcbiAgICAgICAgdmFyIHRpbWVUZXh0O1xuICAgICAgICB2YXIgdGl0bGVIdG1sO1xuICAgICAgICBjbGFzc2VzLnVuc2hpZnQoJ2ZjLWRheS1ncmlkLWV2ZW50JywgJ2ZjLWgtZXZlbnQnKTtcbiAgICAgICAgLy8gT25seSBkaXNwbGF5IGEgdGltZWQgZXZlbnRzIHRpbWUgaWYgaXQgaXMgdGhlIHN0YXJ0aW5nIHNlZ21lbnRcbiAgICAgICAgaWYgKHNlZy5pc1N0YXJ0KSB7XG4gICAgICAgICAgICB0aW1lVGV4dCA9IHRoaXMuZ2V0VGltZVRleHQoZXZlbnRSYW5nZSk7XG4gICAgICAgICAgICBpZiAodGltZVRleHQpIHtcbiAgICAgICAgICAgICAgICB0aW1lSHRtbCA9ICc8c3BhbiBjbGFzcz1cImZjLXRpbWVcIj4nICsgaHRtbEVzY2FwZSh0aW1lVGV4dCkgKyAnPC9zcGFuPic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGl0bGVIdG1sID1cbiAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImZjLXRpdGxlXCI+JyArXG4gICAgICAgICAgICAgICAgKGh0bWxFc2NhcGUoZXZlbnREZWYudGl0bGUgfHwgJycpIHx8ICcmbmJzcDsnKSArIC8vIHdlIGFsd2F5cyB3YW50IG9uZSBsaW5lIG9mIGhlaWdodFxuICAgICAgICAgICAgICAgICc8L3NwYW4+JztcbiAgICAgICAgcmV0dXJuICc8YSBjbGFzcz1cIicgKyBjbGFzc2VzLmpvaW4oJyAnKSArICdcIicgK1xuICAgICAgICAgICAgKGV2ZW50RGVmLnVybCA/XG4gICAgICAgICAgICAgICAgJyBocmVmPVwiJyArIGh0bWxFc2NhcGUoZXZlbnREZWYudXJsKSArICdcIicgOlxuICAgICAgICAgICAgICAgICcnKSArXG4gICAgICAgICAgICAoc2tpbkNzcyA/XG4gICAgICAgICAgICAgICAgJyBzdHlsZT1cIicgKyBza2luQ3NzICsgJ1wiJyA6XG4gICAgICAgICAgICAgICAgJycpICtcbiAgICAgICAgICAgICc+JyArXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZjLWNvbnRlbnRcIj4nICtcbiAgICAgICAgICAgIChjb250ZXh0Lm9wdGlvbnMuZGlyID09PSAncnRsJyA/XG4gICAgICAgICAgICAgICAgdGl0bGVIdG1sICsgJyAnICsgdGltZUh0bWwgOiAvLyBwdXQgYSBuYXR1cmFsIHNwYWNlIGluIGJldHdlZW5cbiAgICAgICAgICAgICAgICB0aW1lSHRtbCArICcgJyArIHRpdGxlSHRtbCAvL1xuICAgICAgICAgICAgKSArXG4gICAgICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICAgICAoaXNSZXNpemFibGVGcm9tU3RhcnQgP1xuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZmMtcmVzaXplciBmYy1zdGFydC1yZXNpemVyXCI+PC9kaXY+JyA6XG4gICAgICAgICAgICAgICAgJycpICtcbiAgICAgICAgICAgIChpc1Jlc2l6YWJsZUZyb21FbmQgP1xuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZmMtcmVzaXplciBmYy1lbmQtcmVzaXplclwiPjwvZGl2PicgOlxuICAgICAgICAgICAgICAgICcnKSArXG4gICAgICAgICAgICAnPC9hPic7XG4gICAgfTtcbiAgICAvLyBDb21wdXRlcyBhIGRlZmF1bHQgZXZlbnQgdGltZSBmb3JtYXR0aW5nIHN0cmluZyBpZiBgZXZlbnRUaW1lRm9ybWF0YCBpcyBub3QgZXhwbGljaXRseSBkZWZpbmVkXG4gICAgU2ltcGxlRGF5R3JpZEV2ZW50UmVuZGVyZXIucHJvdG90eXBlLmNvbXB1dGVFdmVudFRpbWVGb3JtYXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgICAgICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICAgICAgICAgIG9taXRaZXJvTWludXRlOiB0cnVlLFxuICAgICAgICAgICAgbWVyaWRpZW06ICduYXJyb3cnXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBTaW1wbGVEYXlHcmlkRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuY29tcHV0ZURpc3BsYXlFdmVudEVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBUT0RPOiBzb21laG93IGNvbnNpZGVyIHRoZSBvcmlnaW5hdGluZyBEYXlHcmlkJ3MgY29sdW1uIGNvdW50XG4gICAgfTtcbiAgICByZXR1cm4gU2ltcGxlRGF5R3JpZEV2ZW50UmVuZGVyZXI7XG59KEZnRXZlbnRSZW5kZXJlcikpO1xuXG4vKiBFdmVudC1yZW5kZXJpbmcgbWV0aG9kcyBmb3IgdGhlIERheUdyaWQgY2xhc3Ncbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xudmFyIERheUdyaWRFdmVudFJlbmRlcmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhEYXlHcmlkRXZlbnRSZW5kZXJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEYXlHcmlkRXZlbnRSZW5kZXJlcihkYXlHcmlkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRheUdyaWQgPSBkYXlHcmlkO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8vIFJlbmRlcnMgdGhlIGdpdmVuIGZvcmVncm91bmQgZXZlbnQgc2VnbWVudHMgb250byB0aGUgZ3JpZFxuICAgIERheUdyaWRFdmVudFJlbmRlcmVyLnByb3RvdHlwZS5hdHRhY2hTZWdzID0gZnVuY3Rpb24gKHNlZ3MsIG1pcnJvckluZm8pIHtcbiAgICAgICAgdmFyIHJvd1N0cnVjdHMgPSB0aGlzLnJvd1N0cnVjdHMgPSB0aGlzLnJlbmRlclNlZ1Jvd3Moc2Vncyk7XG4gICAgICAgIC8vIGFwcGVuZCB0byBlYWNoIHJvdydzIGNvbnRlbnQgc2tlbGV0b25cbiAgICAgICAgdGhpcy5kYXlHcmlkLnJvd0Vscy5mb3JFYWNoKGZ1bmN0aW9uIChyb3dOb2RlLCBpKSB7XG4gICAgICAgICAgICByb3dOb2RlLnF1ZXJ5U2VsZWN0b3IoJy5mYy1jb250ZW50LXNrZWxldG9uID4gdGFibGUnKS5hcHBlbmRDaGlsZChyb3dTdHJ1Y3RzW2ldLnRib2R5RWwpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gcmVtb3ZlcyB0aGUgXCJtb3JlLi5cIiBldmVudHMgcG9wb3ZlclxuICAgICAgICBpZiAoIW1pcnJvckluZm8pIHtcbiAgICAgICAgICAgIHRoaXMuZGF5R3JpZC5yZW1vdmVTZWdQb3BvdmVyKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIFVucmVuZGVycyBhbGwgY3VycmVudGx5IHJlbmRlcmVkIGZvcmVncm91bmQgZXZlbnQgc2VnbWVudHNcbiAgICBEYXlHcmlkRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuZGV0YWNoU2VncyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJvd1N0cnVjdHMgPSB0aGlzLnJvd1N0cnVjdHMgfHwgW107XG4gICAgICAgIHZhciByb3dTdHJ1Y3Q7XG4gICAgICAgIHdoaWxlICgocm93U3RydWN0ID0gcm93U3RydWN0cy5wb3AoKSkpIHtcbiAgICAgICAgICAgIHJlbW92ZUVsZW1lbnQocm93U3RydWN0LnRib2R5RWwpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucm93U3RydWN0cyA9IG51bGw7XG4gICAgfTtcbiAgICAvLyBVc2VzIHRoZSBnaXZlbiBldmVudHMgYXJyYXkgdG8gZ2VuZXJhdGUgPHRib2R5PiBlbGVtZW50cyB0aGF0IHNob3VsZCBiZSBhcHBlbmRlZCB0byBlYWNoIHJvdydzIGNvbnRlbnQgc2tlbGV0b24uXG4gICAgLy8gUmV0dXJucyBhbiBhcnJheSBvZiByb3dTdHJ1Y3Qgb2JqZWN0cyAoc2VlIHRoZSBib3R0b20gb2YgYHJlbmRlclNlZ1Jvd2ApLlxuICAgIC8vIFBSRUNPTkRJVElPTjogZWFjaCBzZWdtZW50IHNob3VkIGFscmVhZHkgaGF2ZSBhIHJlbmRlcmVkIGFuZCBhc3NpZ25lZCBgLmVsYFxuICAgIERheUdyaWRFdmVudFJlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXJTZWdSb3dzID0gZnVuY3Rpb24gKHNlZ3MpIHtcbiAgICAgICAgdmFyIHJvd1N0cnVjdHMgPSBbXTtcbiAgICAgICAgdmFyIHNlZ1Jvd3M7XG4gICAgICAgIHZhciByb3c7XG4gICAgICAgIHNlZ1Jvd3MgPSB0aGlzLmdyb3VwU2VnUm93cyhzZWdzKTsgLy8gZ3JvdXAgaW50byBuZXN0ZWQgYXJyYXlzXG4gICAgICAgIC8vIGl0ZXJhdGUgZWFjaCByb3cgb2Ygc2VnbWVudCBncm91cGluZ3NcbiAgICAgICAgZm9yIChyb3cgPSAwOyByb3cgPCBzZWdSb3dzLmxlbmd0aDsgcm93KyspIHtcbiAgICAgICAgICAgIHJvd1N0cnVjdHMucHVzaCh0aGlzLnJlbmRlclNlZ1Jvdyhyb3csIHNlZ1Jvd3Nbcm93XSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByb3dTdHJ1Y3RzO1xuICAgIH07XG4gICAgLy8gR2l2ZW4gYSByb3cgIyBhbmQgYW4gYXJyYXkgb2Ygc2VnbWVudHMgYWxsIGluIHRoZSBzYW1lIHJvdywgcmVuZGVyIGEgPHRib2R5PiBlbGVtZW50LCBhIHNrZWxldG9uIHRoYXQgY29udGFpbnNcbiAgICAvLyB0aGUgc2VnbWVudHMuIFJldHVybnMgb2JqZWN0IHdpdGggYSBidW5jaCBvZiBpbnRlcm5hbCBkYXRhIGFib3V0IGhvdyB0aGUgcmVuZGVyIHdhcyBjYWxjdWxhdGVkLlxuICAgIC8vIE5PVEU6IG1vZGlmaWVzIHJvd1NlZ3NcbiAgICBEYXlHcmlkRXZlbnRSZW5kZXJlci5wcm90b3R5cGUucmVuZGVyU2VnUm93ID0gZnVuY3Rpb24gKHJvdywgcm93U2Vncykge1xuICAgICAgICB2YXIgaXNSdGwgPSB0aGlzLmNvbnRleHQuaXNSdGw7XG4gICAgICAgIHZhciBkYXlHcmlkID0gdGhpcy5kYXlHcmlkO1xuICAgICAgICB2YXIgY29sQ250ID0gZGF5R3JpZC5jb2xDbnQ7XG4gICAgICAgIHZhciBzZWdMZXZlbHMgPSB0aGlzLmJ1aWxkU2VnTGV2ZWxzKHJvd1NlZ3MpOyAvLyBncm91cCBpbnRvIHN1Yi1hcnJheXMgb2YgbGV2ZWxzXG4gICAgICAgIHZhciBsZXZlbENudCA9IE1hdGgubWF4KDEsIHNlZ0xldmVscy5sZW5ndGgpOyAvLyBlbnN1cmUgYXQgbGVhc3Qgb25lIGxldmVsXG4gICAgICAgIHZhciB0Ym9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3Rib2R5Jyk7XG4gICAgICAgIHZhciBzZWdNYXRyaXggPSBbXTsgLy8gbG9va3VwIGZvciB3aGljaCBzZWdtZW50cyBhcmUgcmVuZGVyZWQgaW50byB3aGljaCBsZXZlbCtjb2wgY2VsbHNcbiAgICAgICAgdmFyIGNlbGxNYXRyaXggPSBbXTsgLy8gbG9va3VwIGZvciBhbGwgPHRkPiBlbGVtZW50cyBvZiB0aGUgbGV2ZWwrY29sIG1hdHJpeFxuICAgICAgICB2YXIgbG9uZUNlbGxNYXRyaXggPSBbXTsgLy8gbG9va3VwIGZvciA8dGQ+IGVsZW1lbnRzIHRoYXQgb25seSB0YWtlIHVwIGEgc2luZ2xlIGNvbHVtblxuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxldmVsU2VncztcbiAgICAgICAgdmFyIGNvbDtcbiAgICAgICAgdmFyIHRyO1xuICAgICAgICB2YXIgajtcbiAgICAgICAgdmFyIHNlZztcbiAgICAgICAgdmFyIHRkO1xuICAgICAgICAvLyBwb3B1bGF0ZXMgZW1wdHkgY2VsbHMgZnJvbSB0aGUgY3VycmVudCBjb2x1bW4gKGBjb2xgKSB0byBgZW5kQ29sYFxuICAgICAgICBmdW5jdGlvbiBlbXB0eUNlbGxzVW50aWwoZW5kQ29sKSB7XG4gICAgICAgICAgICB3aGlsZSAoY29sIDwgZW5kQ29sKSB7XG4gICAgICAgICAgICAgICAgLy8gdHJ5IHRvIGdyYWIgYSBjZWxsIGZyb20gdGhlIGxldmVsIGFib3ZlIGFuZCBleHRlbmQgaXRzIHJvd3NwYW4uIG90aGVyd2lzZSwgY3JlYXRlIGEgZnJlc2ggY2VsbFxuICAgICAgICAgICAgICAgIHRkID0gKGxvbmVDZWxsTWF0cml4W2kgLSAxXSB8fCBbXSlbY29sXTtcbiAgICAgICAgICAgICAgICBpZiAodGQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGQucm93U3BhbiA9ICh0ZC5yb3dTcGFuIHx8IDEpICsgMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgICAgICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjZWxsTWF0cml4W2ldW2NvbF0gPSB0ZDtcbiAgICAgICAgICAgICAgICBsb25lQ2VsbE1hdHJpeFtpXVtjb2xdID0gdGQ7XG4gICAgICAgICAgICAgICAgY29sKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxldmVsQ250OyBpKyspIHsgLy8gaXRlcmF0ZSB0aHJvdWdoIGFsbCBsZXZlbHNcbiAgICAgICAgICAgIGxldmVsU2VncyA9IHNlZ0xldmVsc1tpXTtcbiAgICAgICAgICAgIGNvbCA9IDA7XG4gICAgICAgICAgICB0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG4gICAgICAgICAgICBzZWdNYXRyaXgucHVzaChbXSk7XG4gICAgICAgICAgICBjZWxsTWF0cml4LnB1c2goW10pO1xuICAgICAgICAgICAgbG9uZUNlbGxNYXRyaXgucHVzaChbXSk7XG4gICAgICAgICAgICAvLyBsZXZlbENudCBtaWdodCBiZSAxIGV2ZW4gdGhvdWdoIHRoZXJlIGFyZSBubyBhY3R1YWwgbGV2ZWxzLiBwcm90ZWN0IGFnYWluc3QgdGhpcy5cbiAgICAgICAgICAgIC8vIHRoaXMgc2luZ2xlIGVtcHR5IHJvdyBpcyB1c2VmdWwgZm9yIHN0eWxpbmcuXG4gICAgICAgICAgICBpZiAobGV2ZWxTZWdzKSB7XG4gICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGxldmVsU2Vncy5sZW5ndGg7IGorKykgeyAvLyBpdGVyYXRlIHRocm91Z2ggc2VnbWVudHMgaW4gbGV2ZWxcbiAgICAgICAgICAgICAgICAgICAgc2VnID0gbGV2ZWxTZWdzW2pdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGVmdENvbCA9IGlzUnRsID8gKGNvbENudCAtIDEgLSBzZWcubGFzdENvbCkgOiBzZWcuZmlyc3RDb2w7XG4gICAgICAgICAgICAgICAgICAgIHZhciByaWdodENvbCA9IGlzUnRsID8gKGNvbENudCAtIDEgLSBzZWcuZmlyc3RDb2wpIDogc2VnLmxhc3RDb2w7XG4gICAgICAgICAgICAgICAgICAgIGVtcHR5Q2VsbHNVbnRpbChsZWZ0Q29sKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY3JlYXRlIGEgY29udGFpbmVyIHRoYXQgb2NjdXBpZXMgb3IgbW9yZSBjb2x1bW5zLiBhcHBlbmQgdGhlIGV2ZW50IGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgICAgIHRkID0gY3JlYXRlRWxlbWVudCgndGQnLCB7IGNsYXNzTmFtZTogJ2ZjLWV2ZW50LWNvbnRhaW5lcicgfSwgc2VnLmVsKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxlZnRDb2wgIT09IHJpZ2h0Q29sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZC5jb2xTcGFuID0gcmlnaHRDb2wgLSBsZWZ0Q29sICsgMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHsgLy8gYSBzaW5nbGUtY29sdW1uIHNlZ21lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvbmVDZWxsTWF0cml4W2ldW2NvbF0gPSB0ZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY29sIDw9IHJpZ2h0Q29sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsTWF0cml4W2ldW2NvbF0gPSB0ZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlZ01hdHJpeFtpXVtjb2xdID0gc2VnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVtcHR5Q2VsbHNVbnRpbChjb2xDbnQpOyAvLyBmaW5pc2ggb2ZmIHRoZSByb3dcbiAgICAgICAgICAgIHZhciBpbnRyb0h0bWwgPSBkYXlHcmlkLnJlbmRlclByb3BzLnJlbmRlckludHJvSHRtbCgpO1xuICAgICAgICAgICAgaWYgKGludHJvSHRtbCkge1xuICAgICAgICAgICAgICAgIGlmIChpc1J0bCkge1xuICAgICAgICAgICAgICAgICAgICBhcHBlbmRUb0VsZW1lbnQodHIsIGludHJvSHRtbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwcmVwZW5kVG9FbGVtZW50KHRyLCBpbnRyb0h0bWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRib2R5LmFwcGVuZENoaWxkKHRyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcm93OiByb3csXG4gICAgICAgICAgICB0Ym9keUVsOiB0Ym9keSxcbiAgICAgICAgICAgIGNlbGxNYXRyaXg6IGNlbGxNYXRyaXgsXG4gICAgICAgICAgICBzZWdNYXRyaXg6IHNlZ01hdHJpeCxcbiAgICAgICAgICAgIHNlZ0xldmVsczogc2VnTGV2ZWxzLFxuICAgICAgICAgICAgc2Vnczogcm93U2Vnc1xuICAgICAgICB9O1xuICAgIH07XG4gICAgLy8gU3RhY2tzIGEgZmxhdCBhcnJheSBvZiBzZWdtZW50cywgd2hpY2ggYXJlIGFsbCBhc3N1bWVkIHRvIGJlIGluIHRoZSBzYW1lIHJvdywgaW50byBzdWJhcnJheXMgb2YgdmVydGljYWwgbGV2ZWxzLlxuICAgIC8vIE5PVEU6IG1vZGlmaWVzIHNlZ3NcbiAgICBEYXlHcmlkRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuYnVpbGRTZWdMZXZlbHMgPSBmdW5jdGlvbiAoc2Vncykge1xuICAgICAgICB2YXIgaXNSdGwgPSB0aGlzLmNvbnRleHQuaXNSdGw7XG4gICAgICAgIHZhciBjb2xDbnQgPSB0aGlzLmRheUdyaWQuY29sQ250O1xuICAgICAgICB2YXIgbGV2ZWxzID0gW107XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgc2VnO1xuICAgICAgICB2YXIgajtcbiAgICAgICAgLy8gR2l2ZSBwcmVmZXJlbmNlIHRvIGVsZW1lbnRzIHdpdGggY2VydGFpbiBjcml0ZXJpYSwgc28gdGhleSBoYXZlXG4gICAgICAgIC8vIGEgY2hhbmNlIHRvIGJlIGNsb3NlciB0byB0aGUgdG9wLlxuICAgICAgICBzZWdzID0gdGhpcy5zb3J0RXZlbnRTZWdzKHNlZ3MpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc2Vncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgc2VnID0gc2Vnc1tpXTtcbiAgICAgICAgICAgIC8vIGxvb3AgdGhyb3VnaCBsZXZlbHMsIHN0YXJ0aW5nIHdpdGggdGhlIHRvcG1vc3QsIHVudGlsIHRoZSBzZWdtZW50IGRvZXNuJ3QgY29sbGlkZSB3aXRoIG90aGVyIHNlZ21lbnRzXG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbGV2ZWxzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc0RheVNlZ0NvbGxpc2lvbihzZWcsIGxldmVsc1tqXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYGpgIG5vdyBob2xkcyB0aGUgZGVzaXJlZCBzdWJyb3cgaW5kZXhcbiAgICAgICAgICAgIHNlZy5sZXZlbCA9IGo7XG4gICAgICAgICAgICBzZWcubGVmdENvbCA9IGlzUnRsID8gKGNvbENudCAtIDEgLSBzZWcubGFzdENvbCkgOiBzZWcuZmlyc3RDb2w7IC8vIGZvciBzb3J0aW5nIG9ubHlcbiAgICAgICAgICAgIHNlZy5yaWdodENvbCA9IGlzUnRsID8gKGNvbENudCAtIDEgLSBzZWcuZmlyc3RDb2wpIDogc2VnLmxhc3RDb2wgLy8gZm9yIHNvcnRpbmcgb25seVxuICAgICAgICAgICAgO1xuICAgICAgICAgICAgKGxldmVsc1tqXSB8fCAobGV2ZWxzW2pdID0gW10pKS5wdXNoKHNlZyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb3JkZXIgc2VnbWVudHMgbGVmdC10by1yaWdodC4gdmVyeSBpbXBvcnRhbnQgaWYgY2FsZW5kYXIgaXMgUlRMXG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBsZXZlbHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGxldmVsc1tqXS5zb3J0KGNvbXBhcmVEYXlTZWdDb2xzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGV2ZWxzO1xuICAgIH07XG4gICAgLy8gR2l2ZW4gYSBmbGF0IGFycmF5IG9mIHNlZ21lbnRzLCByZXR1cm4gYW4gYXJyYXkgb2Ygc3ViLWFycmF5cywgZ3JvdXBlZCBieSBlYWNoIHNlZ21lbnQncyByb3dcbiAgICBEYXlHcmlkRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuZ3JvdXBTZWdSb3dzID0gZnVuY3Rpb24gKHNlZ3MpIHtcbiAgICAgICAgdmFyIHNlZ1Jvd3MgPSBbXTtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmRheUdyaWQucm93Q250OyBpKyspIHtcbiAgICAgICAgICAgIHNlZ1Jvd3MucHVzaChbXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHNlZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHNlZ1Jvd3Nbc2Vnc1tpXS5yb3ddLnB1c2goc2Vnc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlZ1Jvd3M7XG4gICAgfTtcbiAgICAvLyBDb21wdXRlcyBhIGRlZmF1bHQgYGRpc3BsYXlFdmVudEVuZGAgdmFsdWUgaWYgb25lIGlzIG5vdCBleHBsaWNsdHkgZGVmaW5lZFxuICAgIERheUdyaWRFdmVudFJlbmRlcmVyLnByb3RvdHlwZS5jb21wdXRlRGlzcGxheUV2ZW50RW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXlHcmlkLmNvbENudCA9PT0gMTsgLy8gd2UnbGwgbGlrZWx5IGhhdmUgc3BhY2UgaWYgdGhlcmUncyBvbmx5IG9uZSBkYXlcbiAgICB9O1xuICAgIHJldHVybiBEYXlHcmlkRXZlbnRSZW5kZXJlcjtcbn0oU2ltcGxlRGF5R3JpZEV2ZW50UmVuZGVyZXIpKTtcbi8vIENvbXB1dGVzIHdoZXRoZXIgdHdvIHNlZ21lbnRzJyBjb2x1bW5zIGNvbGxpZGUuIFRoZXkgYXJlIGFzc3VtZWQgdG8gYmUgaW4gdGhlIHNhbWUgcm93LlxuZnVuY3Rpb24gaXNEYXlTZWdDb2xsaXNpb24oc2VnLCBvdGhlclNlZ3MpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgb3RoZXJTZWc7XG4gICAgZm9yIChpID0gMDsgaSA8IG90aGVyU2Vncy5sZW5ndGg7IGkrKykge1xuICAgICAgICBvdGhlclNlZyA9IG90aGVyU2Vnc1tpXTtcbiAgICAgICAgaWYgKG90aGVyU2VnLmZpcnN0Q29sIDw9IHNlZy5sYXN0Q29sICYmXG4gICAgICAgICAgICBvdGhlclNlZy5sYXN0Q29sID49IHNlZy5maXJzdENvbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLy8gQSBjbXAgZnVuY3Rpb24gZm9yIGRldGVybWluaW5nIHRoZSBsZWZ0bW9zdCBldmVudFxuZnVuY3Rpb24gY29tcGFyZURheVNlZ0NvbHMoYSwgYikge1xuICAgIHJldHVybiBhLmxlZnRDb2wgLSBiLmxlZnRDb2w7XG59XG5cbnZhciBEYXlHcmlkTWlycm9yUmVuZGVyZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKERheUdyaWRNaXJyb3JSZW5kZXJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEYXlHcmlkTWlycm9yUmVuZGVyZXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgRGF5R3JpZE1pcnJvclJlbmRlcmVyLnByb3RvdHlwZS5hdHRhY2hTZWdzID0gZnVuY3Rpb24gKHNlZ3MsIG1pcnJvckluZm8pIHtcbiAgICAgICAgdmFyIHNvdXJjZVNlZyA9IG1pcnJvckluZm8uc291cmNlU2VnO1xuICAgICAgICB2YXIgcm93U3RydWN0cyA9IHRoaXMucm93U3RydWN0cyA9IHRoaXMucmVuZGVyU2VnUm93cyhzZWdzKTtcbiAgICAgICAgLy8gaW5qZWN0IGVhY2ggbmV3IGV2ZW50IHNrZWxldG9uIGludG8gZWFjaCBhc3NvY2lhdGVkIHJvd1xuICAgICAgICB0aGlzLmRheUdyaWQucm93RWxzLmZvckVhY2goZnVuY3Rpb24gKHJvd05vZGUsIHJvdykge1xuICAgICAgICAgICAgdmFyIHNrZWxldG9uRWwgPSBodG1sVG9FbGVtZW50KCc8ZGl2IGNsYXNzPVwiZmMtbWlycm9yLXNrZWxldG9uXCI+PHRhYmxlPjwvdGFibGU+PC9kaXY+Jyk7IC8vIHdpbGwgYmUgYWJzb2x1dGVseSBwb3NpdGlvbmVkXG4gICAgICAgICAgICB2YXIgc2tlbGV0b25Ub3BFbDtcbiAgICAgICAgICAgIHZhciBza2VsZXRvblRvcDtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIGFuIG9yaWdpbmFsIHNlZ21lbnQsIG1hdGNoIHRoZSB0b3AgcG9zaXRpb24uIE90aGVyd2lzZSwgcHV0IGl0IGF0IHRoZSByb3cncyB0b3AgbGV2ZWxcbiAgICAgICAgICAgIGlmIChzb3VyY2VTZWcgJiYgc291cmNlU2VnLnJvdyA9PT0gcm93KSB7XG4gICAgICAgICAgICAgICAgc2tlbGV0b25Ub3BFbCA9IHNvdXJjZVNlZy5lbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNrZWxldG9uVG9wRWwgPSByb3dOb2RlLnF1ZXJ5U2VsZWN0b3IoJy5mYy1jb250ZW50LXNrZWxldG9uIHRib2R5Jyk7XG4gICAgICAgICAgICAgICAgaWYgKCFza2VsZXRvblRvcEVsKSB7IC8vIHdoZW4gbm8gZXZlbnRzXG4gICAgICAgICAgICAgICAgICAgIHNrZWxldG9uVG9wRWwgPSByb3dOb2RlLnF1ZXJ5U2VsZWN0b3IoJy5mYy1jb250ZW50LXNrZWxldG9uIHRhYmxlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2tlbGV0b25Ub3AgPSBza2VsZXRvblRvcEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCAtXG4gICAgICAgICAgICAgICAgcm93Tm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7IC8vIHRoZSBvZmZzZXRQYXJlbnQgb3JpZ2luXG4gICAgICAgICAgICBza2VsZXRvbkVsLnN0eWxlLnRvcCA9IHNrZWxldG9uVG9wICsgJ3B4JztcbiAgICAgICAgICAgIHNrZWxldG9uRWwucXVlcnlTZWxlY3RvcigndGFibGUnKS5hcHBlbmRDaGlsZChyb3dTdHJ1Y3RzW3Jvd10udGJvZHlFbCk7XG4gICAgICAgICAgICByb3dOb2RlLmFwcGVuZENoaWxkKHNrZWxldG9uRWwpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBEYXlHcmlkTWlycm9yUmVuZGVyZXI7XG59KERheUdyaWRFdmVudFJlbmRlcmVyKSk7XG5cbnZhciBFTVBUWV9DRUxMX0hUTUwgPSAnPHRkIHN0eWxlPVwicG9pbnRlci1ldmVudHM6bm9uZVwiPjwvdGQ+JztcbnZhciBEYXlHcmlkRmlsbFJlbmRlcmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhEYXlHcmlkRmlsbFJlbmRlcmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERheUdyaWRGaWxsUmVuZGVyZXIoZGF5R3JpZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5maWxsU2VnVGFnID0gJ3RkJzsgLy8gb3ZlcnJpZGUgdGhlIGRlZmF1bHQgdGFnIG5hbWVcbiAgICAgICAgX3RoaXMuZGF5R3JpZCA9IGRheUdyaWQ7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRGF5R3JpZEZpbGxSZW5kZXJlci5wcm90b3R5cGUucmVuZGVyU2VncyA9IGZ1bmN0aW9uICh0eXBlLCBjb250ZXh0LCBzZWdzKSB7XG4gICAgICAgIC8vIGRvbid0IHJlbmRlciB0aW1lZCBiYWNrZ3JvdW5kIGV2ZW50c1xuICAgICAgICBpZiAodHlwZSA9PT0gJ2JnRXZlbnQnKSB7XG4gICAgICAgICAgICBzZWdzID0gc2Vncy5maWx0ZXIoZnVuY3Rpb24gKHNlZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZWcuZXZlbnRSYW5nZS5kZWYuYWxsRGF5O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5yZW5kZXJTZWdzLmNhbGwodGhpcywgdHlwZSwgY29udGV4dCwgc2Vncyk7XG4gICAgfTtcbiAgICBEYXlHcmlkRmlsbFJlbmRlcmVyLnByb3RvdHlwZS5hdHRhY2hTZWdzID0gZnVuY3Rpb24gKHR5cGUsIHNlZ3MpIHtcbiAgICAgICAgdmFyIGVscyA9IFtdO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIHNlZztcbiAgICAgICAgdmFyIHNrZWxldG9uRWw7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBzZWdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzZWcgPSBzZWdzW2ldO1xuICAgICAgICAgICAgc2tlbGV0b25FbCA9IHRoaXMucmVuZGVyRmlsbFJvdyh0eXBlLCBzZWcpO1xuICAgICAgICAgICAgdGhpcy5kYXlHcmlkLnJvd0Vsc1tzZWcucm93XS5hcHBlbmRDaGlsZChza2VsZXRvbkVsKTtcbiAgICAgICAgICAgIGVscy5wdXNoKHNrZWxldG9uRWwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbHM7XG4gICAgfTtcbiAgICAvLyBHZW5lcmF0ZXMgdGhlIEhUTUwgbmVlZGVkIGZvciBvbmUgcm93IG9mIGEgZmlsbC4gUmVxdWlyZXMgdGhlIHNlZydzIGVsIHRvIGJlIHJlbmRlcmVkLlxuICAgIERheUdyaWRGaWxsUmVuZGVyZXIucHJvdG90eXBlLnJlbmRlckZpbGxSb3cgPSBmdW5jdGlvbiAodHlwZSwgc2VnKSB7XG4gICAgICAgIHZhciBkYXlHcmlkID0gdGhpcy5kYXlHcmlkO1xuICAgICAgICB2YXIgaXNSdGwgPSB0aGlzLmNvbnRleHQuaXNSdGw7XG4gICAgICAgIHZhciBjb2xDbnQgPSBkYXlHcmlkLmNvbENudDtcbiAgICAgICAgdmFyIGxlZnRDb2wgPSBpc1J0bCA/IChjb2xDbnQgLSAxIC0gc2VnLmxhc3RDb2wpIDogc2VnLmZpcnN0Q29sO1xuICAgICAgICB2YXIgcmlnaHRDb2wgPSBpc1J0bCA/IChjb2xDbnQgLSAxIC0gc2VnLmZpcnN0Q29sKSA6IHNlZy5sYXN0Q29sO1xuICAgICAgICB2YXIgc3RhcnRDb2wgPSBsZWZ0Q29sO1xuICAgICAgICB2YXIgZW5kQ29sID0gcmlnaHRDb2wgKyAxO1xuICAgICAgICB2YXIgY2xhc3NOYW1lO1xuICAgICAgICB2YXIgc2tlbGV0b25FbDtcbiAgICAgICAgdmFyIHRyRWw7XG4gICAgICAgIGlmICh0eXBlID09PSAnYnVzaW5lc3NIb3VycycpIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZSA9ICdiZ2V2ZW50JztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBza2VsZXRvbkVsID0gaHRtbFRvRWxlbWVudCgnPGRpdiBjbGFzcz1cImZjLScgKyBjbGFzc05hbWUgKyAnLXNrZWxldG9uXCI+JyArXG4gICAgICAgICAgICAnPHRhYmxlPjx0cj48L3RyPjwvdGFibGU+JyArXG4gICAgICAgICAgICAnPC9kaXY+Jyk7XG4gICAgICAgIHRyRWwgPSBza2VsZXRvbkVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0cicpWzBdO1xuICAgICAgICBpZiAoc3RhcnRDb2wgPiAwKSB7XG4gICAgICAgICAgICBhcHBlbmRUb0VsZW1lbnQodHJFbCwgXG4gICAgICAgICAgICAvLyB3aWxsIGNyZWF0ZSAoc3RhcnRDb2wgKyAxKSB0ZCdzXG4gICAgICAgICAgICBuZXcgQXJyYXkoc3RhcnRDb2wgKyAxKS5qb2luKEVNUFRZX0NFTExfSFRNTCkpO1xuICAgICAgICB9XG4gICAgICAgIHNlZy5lbC5jb2xTcGFuID0gZW5kQ29sIC0gc3RhcnRDb2w7XG4gICAgICAgIHRyRWwuYXBwZW5kQ2hpbGQoc2VnLmVsKTtcbiAgICAgICAgaWYgKGVuZENvbCA8IGNvbENudCkge1xuICAgICAgICAgICAgYXBwZW5kVG9FbGVtZW50KHRyRWwsIFxuICAgICAgICAgICAgLy8gd2lsbCBjcmVhdGUgKGNvbENudCAtIGVuZENvbCkgdGQnc1xuICAgICAgICAgICAgbmV3IEFycmF5KGNvbENudCAtIGVuZENvbCArIDEpLmpvaW4oRU1QVFlfQ0VMTF9IVE1MKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGludHJvSHRtbCA9IGRheUdyaWQucmVuZGVyUHJvcHMucmVuZGVySW50cm9IdG1sKCk7XG4gICAgICAgIGlmIChpbnRyb0h0bWwpIHtcbiAgICAgICAgICAgIGlmIChpc1J0bCkge1xuICAgICAgICAgICAgICAgIGFwcGVuZFRvRWxlbWVudCh0ckVsLCBpbnRyb0h0bWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcHJlcGVuZFRvRWxlbWVudCh0ckVsLCBpbnRyb0h0bWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBza2VsZXRvbkVsO1xuICAgIH07XG4gICAgcmV0dXJuIERheUdyaWRGaWxsUmVuZGVyZXI7XG59KEZpbGxSZW5kZXJlcikpO1xuXG52YXIgRGF5VGlsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGF5VGlsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEYXlUaWxlKGVsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGVsKSB8fCB0aGlzO1xuICAgICAgICB2YXIgZXZlbnRSZW5kZXJlciA9IF90aGlzLmV2ZW50UmVuZGVyZXIgPSBuZXcgRGF5VGlsZUV2ZW50UmVuZGVyZXIoX3RoaXMpO1xuICAgICAgICB2YXIgcmVuZGVyRnJhbWUgPSBfdGhpcy5yZW5kZXJGcmFtZSA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMuX3JlbmRlckZyYW1lKTtcbiAgICAgICAgX3RoaXMucmVuZGVyRmdFdmVudHMgPSBtZW1vaXplUmVuZGVyaW5nKGV2ZW50UmVuZGVyZXIucmVuZGVyU2Vncy5iaW5kKGV2ZW50UmVuZGVyZXIpLCBldmVudFJlbmRlcmVyLnVucmVuZGVyLmJpbmQoZXZlbnRSZW5kZXJlciksIFtyZW5kZXJGcmFtZV0pO1xuICAgICAgICBfdGhpcy5yZW5kZXJFdmVudFNlbGVjdGlvbiA9IG1lbW9pemVSZW5kZXJpbmcoZXZlbnRSZW5kZXJlci5zZWxlY3RCeUluc3RhbmNlSWQuYmluZChldmVudFJlbmRlcmVyKSwgZXZlbnRSZW5kZXJlci51bnNlbGVjdEJ5SW5zdGFuY2VJZC5iaW5kKGV2ZW50UmVuZGVyZXIpLCBbX3RoaXMucmVuZGVyRmdFdmVudHNdKTtcbiAgICAgICAgX3RoaXMucmVuZGVyRXZlbnREcmFnID0gbWVtb2l6ZVJlbmRlcmluZyhldmVudFJlbmRlcmVyLmhpZGVCeUhhc2guYmluZChldmVudFJlbmRlcmVyKSwgZXZlbnRSZW5kZXJlci5zaG93QnlIYXNoLmJpbmQoZXZlbnRSZW5kZXJlciksIFtyZW5kZXJGcmFtZV0pO1xuICAgICAgICBfdGhpcy5yZW5kZXJFdmVudFJlc2l6ZSA9IG1lbW9pemVSZW5kZXJpbmcoZXZlbnRSZW5kZXJlci5oaWRlQnlIYXNoLmJpbmQoZXZlbnRSZW5kZXJlciksIGV2ZW50UmVuZGVyZXIuc2hvd0J5SGFzaC5iaW5kKGV2ZW50UmVuZGVyZXIpLCBbcmVuZGVyRnJhbWVdKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEYXlUaWxlLnByb3RvdHlwZS5maXJzdENvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICBjb250ZXh0LmNhbGVuZGFyLnJlZ2lzdGVySW50ZXJhY3RpdmVDb21wb25lbnQodGhpcywge1xuICAgICAgICAgICAgZWw6IHRoaXMuZWwsXG4gICAgICAgICAgICB1c2VFdmVudENlbnRlcjogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBEYXlUaWxlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAocHJvcHMsIGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJGcmFtZShwcm9wcy5kYXRlKTtcbiAgICAgICAgdGhpcy5yZW5kZXJGZ0V2ZW50cyhjb250ZXh0LCBwcm9wcy5mZ1NlZ3MpO1xuICAgICAgICB0aGlzLnJlbmRlckV2ZW50U2VsZWN0aW9uKHByb3BzLmV2ZW50U2VsZWN0aW9uKTtcbiAgICAgICAgdGhpcy5yZW5kZXJFdmVudERyYWcocHJvcHMuZXZlbnREcmFnSW5zdGFuY2VzKTtcbiAgICAgICAgdGhpcy5yZW5kZXJFdmVudFJlc2l6ZShwcm9wcy5ldmVudFJlc2l6ZUluc3RhbmNlcyk7XG4gICAgfTtcbiAgICBEYXlUaWxlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5yZW5kZXJGcmFtZS51bnJlbmRlcigpOyAvLyBzaG91bGQgdW5yZW5kZXIgZXZlcnl0aGluZyBlbHNlXG4gICAgICAgIHRoaXMuY29udGV4dC5jYWxlbmRhci51bnJlZ2lzdGVySW50ZXJhY3RpdmVDb21wb25lbnQodGhpcyk7XG4gICAgfTtcbiAgICBEYXlUaWxlLnByb3RvdHlwZS5fcmVuZGVyRnJhbWUgPSBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLmNvbnRleHQsIHRoZW1lID0gX2EudGhlbWUsIGRhdGVFbnYgPSBfYS5kYXRlRW52LCBvcHRpb25zID0gX2Eub3B0aW9ucztcbiAgICAgICAgdmFyIHRpdGxlID0gZGF0ZUVudi5mb3JtYXQoZGF0ZSwgY3JlYXRlRm9ybWF0dGVyKG9wdGlvbnMuZGF5UG9wb3ZlckZvcm1hdCkgLy8gVE9ETzogY2FjaGVcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5lbC5pbm5lckhUTUwgPVxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmYy1oZWFkZXIgJyArIHRoZW1lLmdldENsYXNzKCdwb3BvdmVySGVhZGVyJykgKyAnXCI+JyArXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiZmMtdGl0bGVcIj4nICtcbiAgICAgICAgICAgICAgICBodG1sRXNjYXBlKHRpdGxlKSArXG4gICAgICAgICAgICAgICAgJzwvc3Bhbj4nICtcbiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJmYy1jbG9zZSAnICsgdGhlbWUuZ2V0SWNvbkNsYXNzKCdjbG9zZScpICsgJ1wiPjwvc3Bhbj4nICtcbiAgICAgICAgICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmYy1ib2R5ICcgKyB0aGVtZS5nZXRDbGFzcygncG9wb3ZlckNvbnRlbnQnKSArICdcIj4nICtcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZjLWV2ZW50LWNvbnRhaW5lclwiPjwvZGl2PicgK1xuICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xuICAgICAgICB0aGlzLnNlZ0NvbnRhaW5lckVsID0gdGhpcy5lbC5xdWVyeVNlbGVjdG9yKCcuZmMtZXZlbnQtY29udGFpbmVyJyk7XG4gICAgfTtcbiAgICBEYXlUaWxlLnByb3RvdHlwZS5xdWVyeUhpdCA9IGZ1bmN0aW9uIChwb3NpdGlvbkxlZnQsIHBvc2l0aW9uVG9wLCBlbFdpZHRoLCBlbEhlaWdodCkge1xuICAgICAgICB2YXIgZGF0ZSA9IHRoaXMucHJvcHMuZGF0ZTsgLy8gSEFDS1xuICAgICAgICBpZiAocG9zaXRpb25MZWZ0IDwgZWxXaWR0aCAmJiBwb3NpdGlvblRvcCA8IGVsSGVpZ2h0KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogdGhpcyxcbiAgICAgICAgICAgICAgICBkYXRlU3Bhbjoge1xuICAgICAgICAgICAgICAgICAgICBhbGxEYXk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiB7IHN0YXJ0OiBkYXRlLCBlbmQ6IGFkZERheXMoZGF0ZSwgMSkgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGF5RWw6IHRoaXMuZWwsXG4gICAgICAgICAgICAgICAgcmVjdDoge1xuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiBlbFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBib3R0b206IGVsSGVpZ2h0XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsYXllcjogMVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIERheVRpbGU7XG59KERhdGVDb21wb25lbnQpKTtcbnZhciBEYXlUaWxlRXZlbnRSZW5kZXJlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRGF5VGlsZUV2ZW50UmVuZGVyZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGF5VGlsZUV2ZW50UmVuZGVyZXIoZGF5VGlsZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kYXlUaWxlID0gZGF5VGlsZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEYXlUaWxlRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuYXR0YWNoU2VncyA9IGZ1bmN0aW9uIChzZWdzKSB7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgc2Vnc18xID0gc2VnczsgX2kgPCBzZWdzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2VnID0gc2Vnc18xW19pXTtcbiAgICAgICAgICAgIHRoaXMuZGF5VGlsZS5zZWdDb250YWluZXJFbC5hcHBlbmRDaGlsZChzZWcuZWwpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEYXlUaWxlRXZlbnRSZW5kZXJlci5wcm90b3R5cGUuZGV0YWNoU2VncyA9IGZ1bmN0aW9uIChzZWdzKSB7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgc2Vnc18yID0gc2VnczsgX2kgPCBzZWdzXzIubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2VnID0gc2Vnc18yW19pXTtcbiAgICAgICAgICAgIHJlbW92ZUVsZW1lbnQoc2VnLmVsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIERheVRpbGVFdmVudFJlbmRlcmVyO1xufShTaW1wbGVEYXlHcmlkRXZlbnRSZW5kZXJlcikpO1xuXG52YXIgRGF5QmdSb3cgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGF5QmdSb3coY29udGV4dCkge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgIH1cbiAgICBEYXlCZ1Jvdy5wcm90b3R5cGUucmVuZGVySHRtbCA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICB2YXIgcGFydHMgPSBbXTtcbiAgICAgICAgaWYgKHByb3BzLnJlbmRlckludHJvSHRtbCkge1xuICAgICAgICAgICAgcGFydHMucHVzaChwcm9wcy5yZW5kZXJJbnRyb0h0bWwoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHByb3BzLmNlbGxzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGNlbGwgPSBfYVtfaV07XG4gICAgICAgICAgICBwYXJ0cy5wdXNoKHJlbmRlckNlbGxIdG1sKGNlbGwuZGF0ZSwgcHJvcHMuZGF0ZVByb2ZpbGUsIHRoaXMuY29udGV4dCwgY2VsbC5odG1sQXR0cnMpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXByb3BzLmNlbGxzLmxlbmd0aCkge1xuICAgICAgICAgICAgcGFydHMucHVzaCgnPHRkIGNsYXNzPVwiZmMtZGF5ICcgKyB0aGlzLmNvbnRleHQudGhlbWUuZ2V0Q2xhc3MoJ3dpZGdldENvbnRlbnQnKSArICdcIj48L3RkPicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNvbnRleHQub3B0aW9ucy5kaXIgPT09ICdydGwnKSB7XG4gICAgICAgICAgICBwYXJ0cy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICc8dHI+JyArIHBhcnRzLmpvaW4oJycpICsgJzwvdHI+JztcbiAgICB9O1xuICAgIHJldHVybiBEYXlCZ1Jvdztcbn0oKSk7XG5mdW5jdGlvbiByZW5kZXJDZWxsSHRtbChkYXRlLCBkYXRlUHJvZmlsZSwgY29udGV4dCwgb3RoZXJBdHRycykge1xuICAgIHZhciBkYXRlRW52ID0gY29udGV4dC5kYXRlRW52LCB0aGVtZSA9IGNvbnRleHQudGhlbWU7XG4gICAgdmFyIGlzRGF0ZVZhbGlkID0gcmFuZ2VDb250YWluc01hcmtlcihkYXRlUHJvZmlsZS5hY3RpdmVSYW5nZSwgZGF0ZSk7IC8vIFRPRE86IGNhbGxlZCB0b28gZnJlcXVlbnRseS4gY2FjaGUgc29tZWhvdy5cbiAgICB2YXIgY2xhc3NlcyA9IGdldERheUNsYXNzZXMoZGF0ZSwgZGF0ZVByb2ZpbGUsIGNvbnRleHQpO1xuICAgIGNsYXNzZXMudW5zaGlmdCgnZmMtZGF5JywgdGhlbWUuZ2V0Q2xhc3MoJ3dpZGdldENvbnRlbnQnKSk7XG4gICAgcmV0dXJuICc8dGQgY2xhc3M9XCInICsgY2xhc3Nlcy5qb2luKCcgJykgKyAnXCInICtcbiAgICAgICAgKGlzRGF0ZVZhbGlkID9cbiAgICAgICAgICAgICcgZGF0YS1kYXRlPVwiJyArIGRhdGVFbnYuZm9ybWF0SXNvKGRhdGUsIHsgb21pdFRpbWU6IHRydWUgfSkgKyAnXCInIDpcbiAgICAgICAgICAgICcnKSArXG4gICAgICAgIChvdGhlckF0dHJzID9cbiAgICAgICAgICAgICcgJyArIG90aGVyQXR0cnMgOlxuICAgICAgICAgICAgJycpICtcbiAgICAgICAgJz48L3RkPic7XG59XG5cbnZhciBEQVlfTlVNX0ZPUk1BVCA9IGNyZWF0ZUZvcm1hdHRlcih7IGRheTogJ251bWVyaWMnIH0pO1xudmFyIFdFRUtfTlVNX0ZPUk1BVCA9IGNyZWF0ZUZvcm1hdHRlcih7IHdlZWs6ICdudW1lcmljJyB9KTtcbnZhciBEYXlHcmlkID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhEYXlHcmlkLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIERheUdyaWQoZWwsIHJlbmRlclByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGVsKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5ib3R0b21Db29yZFBhZGRpbmcgPSAwOyAvLyBoYWNrIGZvciBleHRlbmRpbmcgdGhlIGhpdCBhcmVhIGZvciB0aGUgbGFzdCByb3cgb2YgdGhlIGNvb3JkaW5hdGUgZ3JpZFxuICAgICAgICBfdGhpcy5pc0NlbGxTaXplc0RpcnR5ID0gZmFsc2U7XG4gICAgICAgIF90aGlzLnJlbmRlclByb3BzID0gcmVuZGVyUHJvcHM7XG4gICAgICAgIHZhciBldmVudFJlbmRlcmVyID0gX3RoaXMuZXZlbnRSZW5kZXJlciA9IG5ldyBEYXlHcmlkRXZlbnRSZW5kZXJlcihfdGhpcyk7XG4gICAgICAgIHZhciBmaWxsUmVuZGVyZXIgPSBfdGhpcy5maWxsUmVuZGVyZXIgPSBuZXcgRGF5R3JpZEZpbGxSZW5kZXJlcihfdGhpcyk7XG4gICAgICAgIF90aGlzLm1pcnJvclJlbmRlcmVyID0gbmV3IERheUdyaWRNaXJyb3JSZW5kZXJlcihfdGhpcyk7XG4gICAgICAgIHZhciByZW5kZXJDZWxscyA9IF90aGlzLnJlbmRlckNlbGxzID0gbWVtb2l6ZVJlbmRlcmluZyhfdGhpcy5fcmVuZGVyQ2VsbHMsIF90aGlzLl91bnJlbmRlckNlbGxzKTtcbiAgICAgICAgX3RoaXMucmVuZGVyQnVzaW5lc3NIb3VycyA9IG1lbW9pemVSZW5kZXJpbmcoZmlsbFJlbmRlcmVyLnJlbmRlclNlZ3MuYmluZChmaWxsUmVuZGVyZXIsICdidXNpbmVzc0hvdXJzJyksIGZpbGxSZW5kZXJlci51bnJlbmRlci5iaW5kKGZpbGxSZW5kZXJlciwgJ2J1c2luZXNzSG91cnMnKSwgW3JlbmRlckNlbGxzXSk7XG4gICAgICAgIF90aGlzLnJlbmRlckRhdGVTZWxlY3Rpb24gPSBtZW1vaXplUmVuZGVyaW5nKGZpbGxSZW5kZXJlci5yZW5kZXJTZWdzLmJpbmQoZmlsbFJlbmRlcmVyLCAnaGlnaGxpZ2h0JyksIGZpbGxSZW5kZXJlci51bnJlbmRlci5iaW5kKGZpbGxSZW5kZXJlciwgJ2hpZ2hsaWdodCcpLCBbcmVuZGVyQ2VsbHNdKTtcbiAgICAgICAgX3RoaXMucmVuZGVyQmdFdmVudHMgPSBtZW1vaXplUmVuZGVyaW5nKGZpbGxSZW5kZXJlci5yZW5kZXJTZWdzLmJpbmQoZmlsbFJlbmRlcmVyLCAnYmdFdmVudCcpLCBmaWxsUmVuZGVyZXIudW5yZW5kZXIuYmluZChmaWxsUmVuZGVyZXIsICdiZ0V2ZW50JyksIFtyZW5kZXJDZWxsc10pO1xuICAgICAgICBfdGhpcy5yZW5kZXJGZ0V2ZW50cyA9IG1lbW9pemVSZW5kZXJpbmcoZXZlbnRSZW5kZXJlci5yZW5kZXJTZWdzLmJpbmQoZXZlbnRSZW5kZXJlciksIGV2ZW50UmVuZGVyZXIudW5yZW5kZXIuYmluZChldmVudFJlbmRlcmVyKSwgW3JlbmRlckNlbGxzXSk7XG4gICAgICAgIF90aGlzLnJlbmRlckV2ZW50U2VsZWN0aW9uID0gbWVtb2l6ZVJlbmRlcmluZyhldmVudFJlbmRlcmVyLnNlbGVjdEJ5SW5zdGFuY2VJZC5iaW5kKGV2ZW50UmVuZGVyZXIpLCBldmVudFJlbmRlcmVyLnVuc2VsZWN0QnlJbnN0YW5jZUlkLmJpbmQoZXZlbnRSZW5kZXJlciksIFtfdGhpcy5yZW5kZXJGZ0V2ZW50c10pO1xuICAgICAgICBfdGhpcy5yZW5kZXJFdmVudERyYWcgPSBtZW1vaXplUmVuZGVyaW5nKF90aGlzLl9yZW5kZXJFdmVudERyYWcsIF90aGlzLl91bnJlbmRlckV2ZW50RHJhZywgW3JlbmRlckNlbGxzXSk7XG4gICAgICAgIF90aGlzLnJlbmRlckV2ZW50UmVzaXplID0gbWVtb2l6ZVJlbmRlcmluZyhfdGhpcy5fcmVuZGVyRXZlbnRSZXNpemUsIF90aGlzLl91bnJlbmRlckV2ZW50UmVzaXplLCBbcmVuZGVyQ2VsbHNdKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEYXlHcmlkLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAocHJvcHMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGNlbGxzID0gcHJvcHMuY2VsbHM7XG4gICAgICAgIHRoaXMucm93Q250ID0gY2VsbHMubGVuZ3RoO1xuICAgICAgICB0aGlzLmNvbENudCA9IGNlbGxzWzBdLmxlbmd0aDtcbiAgICAgICAgdGhpcy5yZW5kZXJDZWxscyhjZWxscywgcHJvcHMuaXNSaWdpZCk7XG4gICAgICAgIHRoaXMucmVuZGVyQnVzaW5lc3NIb3Vycyhjb250ZXh0LCBwcm9wcy5idXNpbmVzc0hvdXJTZWdzKTtcbiAgICAgICAgdGhpcy5yZW5kZXJEYXRlU2VsZWN0aW9uKGNvbnRleHQsIHByb3BzLmRhdGVTZWxlY3Rpb25TZWdzKTtcbiAgICAgICAgdGhpcy5yZW5kZXJCZ0V2ZW50cyhjb250ZXh0LCBwcm9wcy5iZ0V2ZW50U2Vncyk7XG4gICAgICAgIHRoaXMucmVuZGVyRmdFdmVudHMoY29udGV4dCwgcHJvcHMuZmdFdmVudFNlZ3MpO1xuICAgICAgICB0aGlzLnJlbmRlckV2ZW50U2VsZWN0aW9uKHByb3BzLmV2ZW50U2VsZWN0aW9uKTtcbiAgICAgICAgdGhpcy5yZW5kZXJFdmVudERyYWcocHJvcHMuZXZlbnREcmFnKTtcbiAgICAgICAgdGhpcy5yZW5kZXJFdmVudFJlc2l6ZShwcm9wcy5ldmVudFJlc2l6ZSk7XG4gICAgICAgIGlmICh0aGlzLnNlZ1BvcG92ZXJUaWxlKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNlZ1BvcG92ZXJUaWxlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERheUdyaWQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLnJlbmRlckNlbGxzLnVucmVuZGVyKCk7IC8vIHdpbGwgdW5yZW5kZXIgZXZlcnl0aGluZyBlbHNlXG4gICAgfTtcbiAgICBEYXlHcmlkLnByb3RvdHlwZS5nZXRDZWxsUmFuZ2UgPSBmdW5jdGlvbiAocm93LCBjb2wpIHtcbiAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5wcm9wcy5jZWxsc1tyb3ddW2NvbF0uZGF0ZTtcbiAgICAgICAgdmFyIGVuZCA9IGFkZERheXMoc3RhcnQsIDEpO1xuICAgICAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kIH07XG4gICAgfTtcbiAgICBEYXlHcmlkLnByb3RvdHlwZS51cGRhdGVTZWdQb3BvdmVyVGlsZSA9IGZ1bmN0aW9uIChkYXRlLCBzZWdzKSB7XG4gICAgICAgIHZhciBvd25Qcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgIHRoaXMuc2VnUG9wb3ZlclRpbGUucmVjZWl2ZVByb3BzKHtcbiAgICAgICAgICAgIGRhdGU6IGRhdGUgfHwgdGhpcy5zZWdQb3BvdmVyVGlsZS5wcm9wcy5kYXRlLFxuICAgICAgICAgICAgZmdTZWdzOiBzZWdzIHx8IHRoaXMuc2VnUG9wb3ZlclRpbGUucHJvcHMuZmdTZWdzLFxuICAgICAgICAgICAgZXZlbnRTZWxlY3Rpb246IG93blByb3BzLmV2ZW50U2VsZWN0aW9uLFxuICAgICAgICAgICAgZXZlbnREcmFnSW5zdGFuY2VzOiBvd25Qcm9wcy5ldmVudERyYWcgPyBvd25Qcm9wcy5ldmVudERyYWcuYWZmZWN0ZWRJbnN0YW5jZXMgOiBudWxsLFxuICAgICAgICAgICAgZXZlbnRSZXNpemVJbnN0YW5jZXM6IG93blByb3BzLmV2ZW50UmVzaXplID8gb3duUHJvcHMuZXZlbnRSZXNpemUuYWZmZWN0ZWRJbnN0YW5jZXMgOiBudWxsXG4gICAgICAgIH0sIHRoaXMuY29udGV4dCk7XG4gICAgfTtcbiAgICAvKiBEYXRlIFJlbmRlcmluZ1xuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gICAgRGF5R3JpZC5wcm90b3R5cGUuX3JlbmRlckNlbGxzID0gZnVuY3Rpb24gKGNlbGxzLCBpc1JpZ2lkKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuY29udGV4dCwgY2FsZW5kYXIgPSBfYS5jYWxlbmRhciwgdmlldyA9IF9hLnZpZXcsIGlzUnRsID0gX2EuaXNSdGwsIGRhdGVFbnYgPSBfYS5kYXRlRW52O1xuICAgICAgICB2YXIgX2IgPSB0aGlzLCByb3dDbnQgPSBfYi5yb3dDbnQsIGNvbENudCA9IF9iLmNvbENudDtcbiAgICAgICAgdmFyIGh0bWwgPSAnJztcbiAgICAgICAgdmFyIHJvdztcbiAgICAgICAgdmFyIGNvbDtcbiAgICAgICAgZm9yIChyb3cgPSAwOyByb3cgPCByb3dDbnQ7IHJvdysrKSB7XG4gICAgICAgICAgICBodG1sICs9IHRoaXMucmVuZGVyRGF5Um93SHRtbChyb3csIGlzUmlnaWQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWwuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgICAgdGhpcy5yb3dFbHMgPSBmaW5kRWxlbWVudHModGhpcy5lbCwgJy5mYy1yb3cnKTtcbiAgICAgICAgdGhpcy5jZWxsRWxzID0gZmluZEVsZW1lbnRzKHRoaXMuZWwsICcuZmMtZGF5LCAuZmMtZGlzYWJsZWQtZGF5Jyk7XG4gICAgICAgIGlmIChpc1J0bCkge1xuICAgICAgICAgICAgdGhpcy5jZWxsRWxzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJvd1Bvc2l0aW9ucyA9IG5ldyBQb3NpdGlvbkNhY2hlKHRoaXMuZWwsIHRoaXMucm93RWxzLCBmYWxzZSwgdHJ1ZSAvLyB2ZXJ0aWNhbFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmNvbFBvc2l0aW9ucyA9IG5ldyBQb3NpdGlvbkNhY2hlKHRoaXMuZWwsIHRoaXMuY2VsbEVscy5zbGljZSgwLCBjb2xDbnQpLCAvLyBvbmx5IHRoZSBmaXJzdCByb3dcbiAgICAgICAgdHJ1ZSwgZmFsc2UgLy8gaG9yaXpvbnRhbFxuICAgICAgICApO1xuICAgICAgICAvLyB0cmlnZ2VyIGRheVJlbmRlciB3aXRoIGVhY2ggY2VsbCdzIGVsZW1lbnRcbiAgICAgICAgZm9yIChyb3cgPSAwOyByb3cgPCByb3dDbnQ7IHJvdysrKSB7XG4gICAgICAgICAgICBmb3IgKGNvbCA9IDA7IGNvbCA8IGNvbENudDsgY29sKyspIHtcbiAgICAgICAgICAgICAgICBjYWxlbmRhci5wdWJsaWNseVRyaWdnZXIoJ2RheVJlbmRlcicsIFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZTogZGF0ZUVudi50b0RhdGUoY2VsbHNbcm93XVtjb2xdLmRhdGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZWw6IHRoaXMuZ2V0Q2VsbEVsKHJvdywgY29sKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXc6IHZpZXdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNDZWxsU2l6ZXNEaXJ0eSA9IHRydWU7XG4gICAgfTtcbiAgICBEYXlHcmlkLnByb3RvdHlwZS5fdW5yZW5kZXJDZWxscyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVTZWdQb3BvdmVyKCk7XG4gICAgfTtcbiAgICAvLyBHZW5lcmF0ZXMgdGhlIEhUTUwgZm9yIGEgc2luZ2xlIHJvdywgd2hpY2ggaXMgYSBkaXYgdGhhdCB3cmFwcyBhIHRhYmxlLlxuICAgIC8vIGByb3dgIGlzIHRoZSByb3cgbnVtYmVyLlxuICAgIERheUdyaWQucHJvdG90eXBlLnJlbmRlckRheVJvd0h0bWwgPSBmdW5jdGlvbiAocm93LCBpc1JpZ2lkKSB7XG4gICAgICAgIHZhciB0aGVtZSA9IHRoaXMuY29udGV4dC50aGVtZTtcbiAgICAgICAgdmFyIGNsYXNzZXMgPSBbJ2ZjLXJvdycsICdmYy13ZWVrJywgdGhlbWUuZ2V0Q2xhc3MoJ2RheVJvdycpXTtcbiAgICAgICAgaWYgKGlzUmlnaWQpIHtcbiAgICAgICAgICAgIGNsYXNzZXMucHVzaCgnZmMtcmlnaWQnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYmdSb3cgPSBuZXcgRGF5QmdSb3codGhpcy5jb250ZXh0KTtcbiAgICAgICAgcmV0dXJuICcnICtcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiJyArIGNsYXNzZXMuam9pbignICcpICsgJ1wiPicgK1xuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmYy1iZ1wiPicgK1xuICAgICAgICAgICAgJzx0YWJsZSBjbGFzcz1cIicgKyB0aGVtZS5nZXRDbGFzcygndGFibGVHcmlkJykgKyAnXCI+JyArXG4gICAgICAgICAgICBiZ1Jvdy5yZW5kZXJIdG1sKHtcbiAgICAgICAgICAgICAgICBjZWxsczogdGhpcy5wcm9wcy5jZWxsc1tyb3ddLFxuICAgICAgICAgICAgICAgIGRhdGVQcm9maWxlOiB0aGlzLnByb3BzLmRhdGVQcm9maWxlLFxuICAgICAgICAgICAgICAgIHJlbmRlckludHJvSHRtbDogdGhpcy5yZW5kZXJQcm9wcy5yZW5kZXJCZ0ludHJvSHRtbFxuICAgICAgICAgICAgfSkgK1xuICAgICAgICAgICAgJzwvdGFibGU+JyArXG4gICAgICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZjLWNvbnRlbnQtc2tlbGV0b25cIj4nICtcbiAgICAgICAgICAgICc8dGFibGU+JyArXG4gICAgICAgICAgICAodGhpcy5nZXRJc051bWJlcnNWaXNpYmxlKCkgP1xuICAgICAgICAgICAgICAgICc8dGhlYWQ+JyArXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyTnVtYmVyVHJIdG1sKHJvdykgK1xuICAgICAgICAgICAgICAgICAgICAnPC90aGVhZD4nIDpcbiAgICAgICAgICAgICAgICAnJykgK1xuICAgICAgICAgICAgJzwvdGFibGU+JyArXG4gICAgICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICAgICAnPC9kaXY+JztcbiAgICB9O1xuICAgIERheUdyaWQucHJvdG90eXBlLmdldElzTnVtYmVyc1Zpc2libGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldElzRGF5TnVtYmVyc1Zpc2libGUoKSB8fFxuICAgICAgICAgICAgdGhpcy5yZW5kZXJQcm9wcy5jZWxsV2Vla051bWJlcnNWaXNpYmxlIHx8XG4gICAgICAgICAgICB0aGlzLnJlbmRlclByb3BzLmNvbFdlZWtOdW1iZXJzVmlzaWJsZTtcbiAgICB9O1xuICAgIERheUdyaWQucHJvdG90eXBlLmdldElzRGF5TnVtYmVyc1Zpc2libGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvd0NudCA+IDE7XG4gICAgfTtcbiAgICAvKiBHcmlkIE51bWJlciBSZW5kZXJpbmdcbiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICAgIERheUdyaWQucHJvdG90eXBlLnJlbmRlck51bWJlclRySHRtbCA9IGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgdmFyIGlzUnRsID0gdGhpcy5jb250ZXh0LmlzUnRsO1xuICAgICAgICB2YXIgaW50cm8gPSB0aGlzLnJlbmRlclByb3BzLnJlbmRlck51bWJlckludHJvSHRtbChyb3csIHRoaXMpO1xuICAgICAgICByZXR1cm4gJycgK1xuICAgICAgICAgICAgJzx0cj4nICtcbiAgICAgICAgICAgIChpc1J0bCA/ICcnIDogaW50cm8pICtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTnVtYmVyQ2VsbHNIdG1sKHJvdykgK1xuICAgICAgICAgICAgKGlzUnRsID8gaW50cm8gOiAnJykgK1xuICAgICAgICAgICAgJzwvdHI+JztcbiAgICB9O1xuICAgIERheUdyaWQucHJvdG90eXBlLnJlbmRlck51bWJlckNlbGxzSHRtbCA9IGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgdmFyIGh0bWxzID0gW107XG4gICAgICAgIHZhciBjb2w7XG4gICAgICAgIHZhciBkYXRlO1xuICAgICAgICBmb3IgKGNvbCA9IDA7IGNvbCA8IHRoaXMuY29sQ250OyBjb2wrKykge1xuICAgICAgICAgICAgZGF0ZSA9IHRoaXMucHJvcHMuY2VsbHNbcm93XVtjb2xdLmRhdGU7XG4gICAgICAgICAgICBodG1scy5wdXNoKHRoaXMucmVuZGVyTnVtYmVyQ2VsbEh0bWwoZGF0ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNvbnRleHQuaXNSdGwpIHtcbiAgICAgICAgICAgIGh0bWxzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaHRtbHMuam9pbignJyk7XG4gICAgfTtcbiAgICAvLyBHZW5lcmF0ZXMgdGhlIEhUTUwgZm9yIHRoZSA8dGQ+cyBvZiB0aGUgXCJudW1iZXJcIiByb3cgaW4gdGhlIERheUdyaWQncyBjb250ZW50IHNrZWxldG9uLlxuICAgIC8vIFRoZSBudW1iZXIgcm93IHdpbGwgb25seSBleGlzdCBpZiBlaXRoZXIgZGF5IG51bWJlcnMgb3Igd2VlayBudW1iZXJzIGFyZSB0dXJuZWQgb24uXG4gICAgRGF5R3JpZC5wcm90b3R5cGUucmVuZGVyTnVtYmVyQ2VsbEh0bWwgPSBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLmNvbnRleHQsIGRhdGVFbnYgPSBfYS5kYXRlRW52LCBvcHRpb25zID0gX2Eub3B0aW9ucztcbiAgICAgICAgdmFyIGh0bWwgPSAnJztcbiAgICAgICAgdmFyIGlzRGF0ZVZhbGlkID0gcmFuZ2VDb250YWluc01hcmtlcih0aGlzLnByb3BzLmRhdGVQcm9maWxlLmFjdGl2ZVJhbmdlLCBkYXRlKTsgLy8gVE9ETzogY2FsbGVkIHRvbyBmcmVxdWVudGx5LiBjYWNoZSBzb21laG93LlxuICAgICAgICB2YXIgaXNEYXlOdW1iZXJWaXNpYmxlID0gdGhpcy5nZXRJc0RheU51bWJlcnNWaXNpYmxlKCkgJiYgaXNEYXRlVmFsaWQ7XG4gICAgICAgIHZhciBjbGFzc2VzO1xuICAgICAgICB2YXIgd2Vla0NhbGNGaXJzdERvdztcbiAgICAgICAgaWYgKCFpc0RheU51bWJlclZpc2libGUgJiYgIXRoaXMucmVuZGVyUHJvcHMuY2VsbFdlZWtOdW1iZXJzVmlzaWJsZSkge1xuICAgICAgICAgICAgLy8gbm8gbnVtYmVycyBpbiBkYXkgY2VsbCAod2VlayBudW1iZXIgbXVzdCBiZSBhbG9uZyB0aGUgc2lkZSlcbiAgICAgICAgICAgIHJldHVybiAnPHRkPjwvdGQ+JzsgLy8gIHdpbGwgY3JlYXRlIGFuIGVtcHR5IHNwYWNlIGFib3ZlIGV2ZW50cyA6KFxuICAgICAgICB9XG4gICAgICAgIGNsYXNzZXMgPSBnZXREYXlDbGFzc2VzKGRhdGUsIHRoaXMucHJvcHMuZGF0ZVByb2ZpbGUsIHRoaXMuY29udGV4dCk7XG4gICAgICAgIGNsYXNzZXMudW5zaGlmdCgnZmMtZGF5LXRvcCcpO1xuICAgICAgICBpZiAodGhpcy5yZW5kZXJQcm9wcy5jZWxsV2Vla051bWJlcnNWaXNpYmxlKSB7XG4gICAgICAgICAgICB3ZWVrQ2FsY0ZpcnN0RG93ID0gZGF0ZUVudi53ZWVrRG93O1xuICAgICAgICB9XG4gICAgICAgIGh0bWwgKz0gJzx0ZCBjbGFzcz1cIicgKyBjbGFzc2VzLmpvaW4oJyAnKSArICdcIicgK1xuICAgICAgICAgICAgKGlzRGF0ZVZhbGlkID9cbiAgICAgICAgICAgICAgICAnIGRhdGEtZGF0ZT1cIicgKyBkYXRlRW52LmZvcm1hdElzbyhkYXRlLCB7IG9taXRUaW1lOiB0cnVlIH0pICsgJ1wiJyA6XG4gICAgICAgICAgICAgICAgJycpICtcbiAgICAgICAgICAgICc+JztcbiAgICAgICAgaWYgKHRoaXMucmVuZGVyUHJvcHMuY2VsbFdlZWtOdW1iZXJzVmlzaWJsZSAmJiAoZGF0ZS5nZXRVVENEYXkoKSA9PT0gd2Vla0NhbGNGaXJzdERvdykpIHtcbiAgICAgICAgICAgIGh0bWwgKz0gYnVpbGRHb3RvQW5jaG9ySHRtbChvcHRpb25zLCBkYXRlRW52LCB7IGRhdGU6IGRhdGUsIHR5cGU6ICd3ZWVrJyB9LCB7ICdjbGFzcyc6ICdmYy13ZWVrLW51bWJlcicgfSwgZGF0ZUVudi5mb3JtYXQoZGF0ZSwgV0VFS19OVU1fRk9STUFUKSAvLyBpbm5lciBIVE1MXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0RheU51bWJlclZpc2libGUpIHtcbiAgICAgICAgICAgIGh0bWwgKz0gYnVpbGRHb3RvQW5jaG9ySHRtbChvcHRpb25zLCBkYXRlRW52LCBkYXRlLCB7ICdjbGFzcyc6ICdmYy1kYXktbnVtYmVyJyB9LCBkYXRlRW52LmZvcm1hdChkYXRlLCBEQVlfTlVNX0ZPUk1BVCkgLy8gaW5uZXIgSFRNTFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBodG1sICs9ICc8L3RkPic7XG4gICAgICAgIHJldHVybiBodG1sO1xuICAgIH07XG4gICAgLyogU2l6aW5nXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICBEYXlHcmlkLnByb3RvdHlwZS51cGRhdGVTaXplID0gZnVuY3Rpb24gKGlzUmVzaXplKSB7XG4gICAgICAgIHZhciBjYWxlbmRhciA9IHRoaXMuY29udGV4dC5jYWxlbmRhcjtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgZmlsbFJlbmRlcmVyID0gX2EuZmlsbFJlbmRlcmVyLCBldmVudFJlbmRlcmVyID0gX2EuZXZlbnRSZW5kZXJlciwgbWlycm9yUmVuZGVyZXIgPSBfYS5taXJyb3JSZW5kZXJlcjtcbiAgICAgICAgaWYgKGlzUmVzaXplIHx8XG4gICAgICAgICAgICB0aGlzLmlzQ2VsbFNpemVzRGlydHkgfHxcbiAgICAgICAgICAgIGNhbGVuZGFyLmlzRXZlbnRzVXBkYXRlZCAvLyBoYWNrXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5idWlsZFBvc2l0aW9uQ2FjaGVzKCk7XG4gICAgICAgICAgICB0aGlzLmlzQ2VsbFNpemVzRGlydHkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmaWxsUmVuZGVyZXIuY29tcHV0ZVNpemVzKGlzUmVzaXplKTtcbiAgICAgICAgZXZlbnRSZW5kZXJlci5jb21wdXRlU2l6ZXMoaXNSZXNpemUpO1xuICAgICAgICBtaXJyb3JSZW5kZXJlci5jb21wdXRlU2l6ZXMoaXNSZXNpemUpO1xuICAgICAgICBmaWxsUmVuZGVyZXIuYXNzaWduU2l6ZXMoaXNSZXNpemUpO1xuICAgICAgICBldmVudFJlbmRlcmVyLmFzc2lnblNpemVzKGlzUmVzaXplKTtcbiAgICAgICAgbWlycm9yUmVuZGVyZXIuYXNzaWduU2l6ZXMoaXNSZXNpemUpO1xuICAgIH07XG4gICAgRGF5R3JpZC5wcm90b3R5cGUuYnVpbGRQb3NpdGlvbkNhY2hlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5idWlsZENvbFBvc2l0aW9ucygpO1xuICAgICAgICB0aGlzLmJ1aWxkUm93UG9zaXRpb25zKCk7XG4gICAgfTtcbiAgICBEYXlHcmlkLnByb3RvdHlwZS5idWlsZENvbFBvc2l0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jb2xQb3NpdGlvbnMuYnVpbGQoKTtcbiAgICB9O1xuICAgIERheUdyaWQucHJvdG90eXBlLmJ1aWxkUm93UG9zaXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnJvd1Bvc2l0aW9ucy5idWlsZCgpO1xuICAgICAgICB0aGlzLnJvd1Bvc2l0aW9ucy5ib3R0b21zW3RoaXMucm93Q250IC0gMV0gKz0gdGhpcy5ib3R0b21Db29yZFBhZGRpbmc7IC8vIGhhY2tcbiAgICB9O1xuICAgIC8qIEhpdCBTeXN0ZW1cbiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICAgIERheUdyaWQucHJvdG90eXBlLnBvc2l0aW9uVG9IaXQgPSBmdW5jdGlvbiAobGVmdFBvc2l0aW9uLCB0b3BQb3NpdGlvbikge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBjb2xQb3NpdGlvbnMgPSBfYS5jb2xQb3NpdGlvbnMsIHJvd1Bvc2l0aW9ucyA9IF9hLnJvd1Bvc2l0aW9ucztcbiAgICAgICAgdmFyIGNvbCA9IGNvbFBvc2l0aW9ucy5sZWZ0VG9JbmRleChsZWZ0UG9zaXRpb24pO1xuICAgICAgICB2YXIgcm93ID0gcm93UG9zaXRpb25zLnRvcFRvSW5kZXgodG9wUG9zaXRpb24pO1xuICAgICAgICBpZiAocm93ICE9IG51bGwgJiYgY29sICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcm93OiByb3csXG4gICAgICAgICAgICAgICAgY29sOiBjb2wsXG4gICAgICAgICAgICAgICAgZGF0ZVNwYW46IHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2U6IHRoaXMuZ2V0Q2VsbFJhbmdlKHJvdywgY29sKSxcbiAgICAgICAgICAgICAgICAgICAgYWxsRGF5OiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkYXlFbDogdGhpcy5nZXRDZWxsRWwocm93LCBjb2wpLFxuICAgICAgICAgICAgICAgIHJlbGF0aXZlUmVjdDoge1xuICAgICAgICAgICAgICAgICAgICBsZWZ0OiBjb2xQb3NpdGlvbnMubGVmdHNbY29sXSxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IGNvbFBvc2l0aW9ucy5yaWdodHNbY29sXSxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiByb3dQb3NpdGlvbnMudG9wc1tyb3ddLFxuICAgICAgICAgICAgICAgICAgICBib3R0b206IHJvd1Bvc2l0aW9ucy5ib3R0b21zW3Jvd11cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiBDZWxsIFN5c3RlbVxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gICAgLy8gRllJOiB0aGUgZmlyc3QgY29sdW1uIGlzIHRoZSBsZWZ0bW9zdCBjb2x1bW4sIHJlZ2FyZGxlc3Mgb2YgZGF0ZVxuICAgIERheUdyaWQucHJvdG90eXBlLmdldENlbGxFbCA9IGZ1bmN0aW9uIChyb3csIGNvbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jZWxsRWxzW3JvdyAqIHRoaXMuY29sQ250ICsgY29sXTtcbiAgICB9O1xuICAgIC8qIEV2ZW50IERyYWcgVmlzdWFsaXphdGlvblxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gICAgRGF5R3JpZC5wcm90b3R5cGUuX3JlbmRlckV2ZW50RHJhZyA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRSZW5kZXJlci5oaWRlQnlIYXNoKHN0YXRlLmFmZmVjdGVkSW5zdGFuY2VzKTtcbiAgICAgICAgICAgIHRoaXMuZmlsbFJlbmRlcmVyLnJlbmRlclNlZ3MoJ2hpZ2hsaWdodCcsIHRoaXMuY29udGV4dCwgc3RhdGUuc2Vncyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERheUdyaWQucHJvdG90eXBlLl91bnJlbmRlckV2ZW50RHJhZyA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRSZW5kZXJlci5zaG93QnlIYXNoKHN0YXRlLmFmZmVjdGVkSW5zdGFuY2VzKTtcbiAgICAgICAgICAgIHRoaXMuZmlsbFJlbmRlcmVyLnVucmVuZGVyKCdoaWdobGlnaHQnLCB0aGlzLmNvbnRleHQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiBFdmVudCBSZXNpemUgVmlzdWFsaXphdGlvblxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gICAgRGF5R3JpZC5wcm90b3R5cGUuX3JlbmRlckV2ZW50UmVzaXplID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5ldmVudFJlbmRlcmVyLmhpZGVCeUhhc2goc3RhdGUuYWZmZWN0ZWRJbnN0YW5jZXMpO1xuICAgICAgICAgICAgdGhpcy5maWxsUmVuZGVyZXIucmVuZGVyU2VncygnaGlnaGxpZ2h0JywgdGhpcy5jb250ZXh0LCBzdGF0ZS5zZWdzKTtcbiAgICAgICAgICAgIHRoaXMubWlycm9yUmVuZGVyZXIucmVuZGVyU2Vncyh0aGlzLmNvbnRleHQsIHN0YXRlLnNlZ3MsIHsgaXNSZXNpemluZzogdHJ1ZSwgc291cmNlU2VnOiBzdGF0ZS5zb3VyY2VTZWcgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERheUdyaWQucHJvdG90eXBlLl91bnJlbmRlckV2ZW50UmVzaXplID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5ldmVudFJlbmRlcmVyLnNob3dCeUhhc2goc3RhdGUuYWZmZWN0ZWRJbnN0YW5jZXMpO1xuICAgICAgICAgICAgdGhpcy5maWxsUmVuZGVyZXIudW5yZW5kZXIoJ2hpZ2hsaWdodCcsIHRoaXMuY29udGV4dCk7XG4gICAgICAgICAgICB0aGlzLm1pcnJvclJlbmRlcmVyLnVucmVuZGVyKHRoaXMuY29udGV4dCwgc3RhdGUuc2VncywgeyBpc1Jlc2l6aW5nOiB0cnVlLCBzb3VyY2VTZWc6IHN0YXRlLnNvdXJjZVNlZyB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyogTW9yZSsgTGluayBQb3BvdmVyXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICBEYXlHcmlkLnByb3RvdHlwZS5yZW1vdmVTZWdQb3BvdmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5zZWdQb3BvdmVyKSB7XG4gICAgICAgICAgICB0aGlzLnNlZ1BvcG92ZXIuaGlkZSgpOyAvLyBpbiBoYW5kbGVyLCB3aWxsIGNhbGwgc2VnUG9wb3ZlcidzIHJlbW92ZUVsZW1lbnRcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gTGltaXRzIHRoZSBudW1iZXIgb2YgXCJsZXZlbHNcIiAodmVydGljYWxseSBzdGFja2luZyBsYXllcnMgb2YgZXZlbnRzKSBmb3IgZWFjaCByb3cgb2YgdGhlIGdyaWQuXG4gICAgLy8gYGxldmVsTGltaXRgIGNhbiBiZSBmYWxzZSAoZG9uJ3QgbGltaXQpLCBhIG51bWJlciwgb3IgdHJ1ZSAoc2hvdWxkIGJlIGNvbXB1dGVkKS5cbiAgICBEYXlHcmlkLnByb3RvdHlwZS5saW1pdFJvd3MgPSBmdW5jdGlvbiAobGV2ZWxMaW1pdCkge1xuICAgICAgICB2YXIgcm93U3RydWN0cyA9IHRoaXMuZXZlbnRSZW5kZXJlci5yb3dTdHJ1Y3RzIHx8IFtdO1xuICAgICAgICB2YXIgcm93OyAvLyByb3cgI1xuICAgICAgICB2YXIgcm93TGV2ZWxMaW1pdDtcbiAgICAgICAgZm9yIChyb3cgPSAwOyByb3cgPCByb3dTdHJ1Y3RzLmxlbmd0aDsgcm93KyspIHtcbiAgICAgICAgICAgIHRoaXMudW5saW1pdFJvdyhyb3cpO1xuICAgICAgICAgICAgaWYgKCFsZXZlbExpbWl0KSB7XG4gICAgICAgICAgICAgICAgcm93TGV2ZWxMaW1pdCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGxldmVsTGltaXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgcm93TGV2ZWxMaW1pdCA9IGxldmVsTGltaXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByb3dMZXZlbExpbWl0ID0gdGhpcy5jb21wdXRlUm93TGV2ZWxMaW1pdChyb3cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJvd0xldmVsTGltaXQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5saW1pdFJvdyhyb3csIHJvd0xldmVsTGltaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBDb21wdXRlcyB0aGUgbnVtYmVyIG9mIGxldmVscyBhIHJvdyB3aWxsIGFjY29tb2RhdGUgd2l0aG91dCBnb2luZyBvdXRzaWRlIGl0cyBib3VuZHMuXG4gICAgLy8gQXNzdW1lcyB0aGUgcm93IGlzIFwicmlnaWRcIiAobWFpbnRhaW5zIGEgY29uc3RhbnQgaGVpZ2h0IHJlZ2FyZGxlc3Mgb2Ygd2hhdCBpcyBpbnNpZGUpLlxuICAgIC8vIGByb3dgIGlzIHRoZSByb3cgbnVtYmVyLlxuICAgIERheUdyaWQucHJvdG90eXBlLmNvbXB1dGVSb3dMZXZlbExpbWl0ID0gZnVuY3Rpb24gKHJvdykge1xuICAgICAgICB2YXIgcm93RWwgPSB0aGlzLnJvd0Vsc1tyb3ddOyAvLyB0aGUgY29udGFpbmluZyBcImZha2VcIiByb3cgZGl2XG4gICAgICAgIHZhciByb3dCb3R0b20gPSByb3dFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b207IC8vIHJlbGF0aXZlIHRvIHZpZXdwb3J0IVxuICAgICAgICB2YXIgdHJFbHMgPSBmaW5kQ2hpbGRyZW4odGhpcy5ldmVudFJlbmRlcmVyLnJvd1N0cnVjdHNbcm93XS50Ym9keUVsKTtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciB0ckVsO1xuICAgICAgICAvLyBSZXZlYWwgb25lIGxldmVsIDx0cj4gYXQgYSB0aW1lIGFuZCBzdG9wIHdoZW4gd2UgZmluZCBvbmUgb3V0IG9mIGJvdW5kc1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdHJFbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyRWwgPSB0ckVsc1tpXTtcbiAgICAgICAgICAgIHRyRWwuY2xhc3NMaXN0LnJlbW92ZSgnZmMtbGltaXRlZCcpOyAvLyByZXNldCB0byBvcmlnaW5hbCBzdGF0ZSAocmV2ZWFsKVxuICAgICAgICAgICAgaWYgKHRyRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tID4gcm93Qm90dG9tKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBzaG91bGQgbm90IGxpbWl0IGF0IGFsbFxuICAgIH07XG4gICAgLy8gTGltaXRzIHRoZSBnaXZlbiBncmlkIHJvdyB0byB0aGUgbWF4aW11bSBudW1iZXIgb2YgbGV2ZWxzIGFuZCBpbmplY3RzIFwibW9yZVwiIGxpbmtzIGlmIG5lY2Vzc2FyeS5cbiAgICAvLyBgcm93YCBpcyB0aGUgcm93IG51bWJlci5cbiAgICAvLyBgbGV2ZWxMaW1pdGAgaXMgYSBudW1iZXIgZm9yIHRoZSBtYXhpbXVtIChpbmNsdXNpdmUpIG51bWJlciBvZiBsZXZlbHMgYWxsb3dlZC5cbiAgICBEYXlHcmlkLnByb3RvdHlwZS5saW1pdFJvdyA9IGZ1bmN0aW9uIChyb3csIGxldmVsTGltaXQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGNvbENudCA9IHRoaXMuY29sQ250O1xuICAgICAgICB2YXIgaXNSdGwgPSB0aGlzLmNvbnRleHQuaXNSdGw7XG4gICAgICAgIHZhciByb3dTdHJ1Y3QgPSB0aGlzLmV2ZW50UmVuZGVyZXIucm93U3RydWN0c1tyb3ddO1xuICAgICAgICB2YXIgbW9yZU5vZGVzID0gW107IC8vIGFycmF5IG9mIFwibW9yZVwiIDxhPiBsaW5rcyBhbmQgPHRkPiBET00gbm9kZXNcbiAgICAgICAgdmFyIGNvbCA9IDA7IC8vIGNvbCAjLCBsZWZ0LXRvLXJpZ2h0IChub3QgY2hyb25vbG9naWNhbGx5KVxuICAgICAgICB2YXIgbGV2ZWxTZWdzOyAvLyBhcnJheSBvZiBzZWdtZW50IG9iamVjdHMgaW4gdGhlIGxhc3QgYWxsb3dhYmxlIGxldmVsLCBvcmRlcmVkIGxlZnQtdG8tcmlnaHRcbiAgICAgICAgdmFyIGNlbGxNYXRyaXg7IC8vIGEgbWF0cml4IChieSBsZXZlbCwgdGhlbiBjb2x1bW4pIG9mIGFsbCA8dGQ+IGVsZW1lbnRzIGluIHRoZSByb3dcbiAgICAgICAgdmFyIGxpbWl0ZWROb2RlczsgLy8gYXJyYXkgb2YgdGVtcG9yYXJpbHkgaGlkZGVuIGxldmVsIDx0cj4gYW5kIHNlZ21lbnQgPHRkPiBET00gbm9kZXNcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBzZWc7XG4gICAgICAgIHZhciBzZWdzQmVsb3c7IC8vIGFycmF5IG9mIHNlZ21lbnQgb2JqZWN0cyBiZWxvdyBgc2VnYCBpbiB0aGUgY3VycmVudCBgY29sYFxuICAgICAgICB2YXIgdG90YWxTZWdzQmVsb3c7IC8vIHRvdGFsIG51bWJlciBvZiBzZWdtZW50cyBiZWxvdyBgc2VnYCBpbiBhbnkgb2YgdGhlIGNvbHVtbnMgYHNlZ2Agb2NjdXBpZXNcbiAgICAgICAgdmFyIGNvbFNlZ3NCZWxvdzsgLy8gYXJyYXkgb2Ygc2VnbWVudCBhcnJheXMsIGJlbG93IHNlZywgb25lIGZvciBlYWNoIGNvbHVtbiAob2Zmc2V0IGZyb20gc2VncydzIGZpcnN0IGNvbHVtbilcbiAgICAgICAgdmFyIHRkO1xuICAgICAgICB2YXIgcm93U3BhbjtcbiAgICAgICAgdmFyIHNlZ01vcmVOb2RlczsgLy8gYXJyYXkgb2YgXCJtb3JlXCIgPHRkPiBjZWxscyB0aGF0IHdpbGwgc3RhbmQtaW4gZm9yIHRoZSBjdXJyZW50IHNlZydzIGNlbGxcbiAgICAgICAgdmFyIGo7XG4gICAgICAgIHZhciBtb3JlVGQ7XG4gICAgICAgIHZhciBtb3JlV3JhcDtcbiAgICAgICAgdmFyIG1vcmVMaW5rO1xuICAgICAgICAvLyBJdGVyYXRlcyB0aHJvdWdoIGVtcHR5IGxldmVsIGNlbGxzIGFuZCBwbGFjZXMgXCJtb3JlXCIgbGlua3MgaW5zaWRlIGlmIG5lZWQgYmVcbiAgICAgICAgdmFyIGVtcHR5Q2VsbHNVbnRpbCA9IGZ1bmN0aW9uIChlbmRDb2wpIHtcbiAgICAgICAgICAgIHdoaWxlIChjb2wgPCBlbmRDb2wpIHtcbiAgICAgICAgICAgICAgICBzZWdzQmVsb3cgPSBfdGhpcy5nZXRDZWxsU2Vncyhyb3csIGNvbCwgbGV2ZWxMaW1pdCk7XG4gICAgICAgICAgICAgICAgaWYgKHNlZ3NCZWxvdy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGQgPSBjZWxsTWF0cml4W2xldmVsTGltaXQgLSAxXVtjb2xdO1xuICAgICAgICAgICAgICAgICAgICBtb3JlTGluayA9IF90aGlzLnJlbmRlck1vcmVMaW5rKHJvdywgY29sLCBzZWdzQmVsb3cpO1xuICAgICAgICAgICAgICAgICAgICBtb3JlV3JhcCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIG51bGwsIG1vcmVMaW5rKTtcbiAgICAgICAgICAgICAgICAgICAgdGQuYXBwZW5kQ2hpbGQobW9yZVdyYXApO1xuICAgICAgICAgICAgICAgICAgICBtb3JlTm9kZXMucHVzaChtb3JlV3JhcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAobGV2ZWxMaW1pdCAmJiBsZXZlbExpbWl0IDwgcm93U3RydWN0LnNlZ0xldmVscy5sZW5ndGgpIHsgLy8gaXMgaXQgYWN0dWFsbHkgb3ZlciB0aGUgbGltaXQ/XG4gICAgICAgICAgICBsZXZlbFNlZ3MgPSByb3dTdHJ1Y3Quc2VnTGV2ZWxzW2xldmVsTGltaXQgLSAxXTtcbiAgICAgICAgICAgIGNlbGxNYXRyaXggPSByb3dTdHJ1Y3QuY2VsbE1hdHJpeDtcbiAgICAgICAgICAgIGxpbWl0ZWROb2RlcyA9IGZpbmRDaGlsZHJlbihyb3dTdHJ1Y3QudGJvZHlFbCkuc2xpY2UobGV2ZWxMaW1pdCk7IC8vIGdldCBsZXZlbCA8dHI+IGVsZW1lbnRzIHBhc3QgdGhlIGxpbWl0XG4gICAgICAgICAgICBsaW1pdGVkTm9kZXMuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgIG5vZGUuY2xhc3NMaXN0LmFkZCgnZmMtbGltaXRlZCcpOyAvLyBoaWRlIGVsZW1lbnRzIGFuZCBnZXQgYSBzaW1wbGUgRE9NLW5vZGVzIGFycmF5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIGl0ZXJhdGUgdGhvdWdoIHNlZ21lbnRzIGluIHRoZSBsYXN0IGFsbG93YWJsZSBsZXZlbFxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxldmVsU2Vncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHNlZyA9IGxldmVsU2Vnc1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgbGVmdENvbCA9IGlzUnRsID8gKGNvbENudCAtIDEgLSBzZWcubGFzdENvbCkgOiBzZWcuZmlyc3RDb2w7XG4gICAgICAgICAgICAgICAgdmFyIHJpZ2h0Q29sID0gaXNSdGwgPyAoY29sQ250IC0gMSAtIHNlZy5maXJzdENvbCkgOiBzZWcubGFzdENvbDtcbiAgICAgICAgICAgICAgICBlbXB0eUNlbGxzVW50aWwobGVmdENvbCk7IC8vIHByb2Nlc3MgZW1wdHkgY2VsbHMgYmVmb3JlIHRoZSBzZWdtZW50XG4gICAgICAgICAgICAgICAgLy8gZGV0ZXJtaW5lICphbGwqIHNlZ21lbnRzIGJlbG93IGBzZWdgIHRoYXQgb2NjdXB5IHRoZSBzYW1lIGNvbHVtbnNcbiAgICAgICAgICAgICAgICBjb2xTZWdzQmVsb3cgPSBbXTtcbiAgICAgICAgICAgICAgICB0b3RhbFNlZ3NCZWxvdyA9IDA7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGNvbCA8PSByaWdodENvbCkge1xuICAgICAgICAgICAgICAgICAgICBzZWdzQmVsb3cgPSB0aGlzLmdldENlbGxTZWdzKHJvdywgY29sLCBsZXZlbExpbWl0KTtcbiAgICAgICAgICAgICAgICAgICAgY29sU2Vnc0JlbG93LnB1c2goc2Vnc0JlbG93KTtcbiAgICAgICAgICAgICAgICAgICAgdG90YWxTZWdzQmVsb3cgKz0gc2Vnc0JlbG93Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgY29sKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0b3RhbFNlZ3NCZWxvdykgeyAvLyBkbyB3ZSBuZWVkIHRvIHJlcGxhY2UgdGhpcyBzZWdtZW50IHdpdGggb25lIG9yIG1hbnkgXCJtb3JlXCIgbGlua3M/XG4gICAgICAgICAgICAgICAgICAgIHRkID0gY2VsbE1hdHJpeFtsZXZlbExpbWl0IC0gMV1bbGVmdENvbF07IC8vIHRoZSBzZWdtZW50J3MgcGFyZW50IGNlbGxcbiAgICAgICAgICAgICAgICAgICAgcm93U3BhbiA9IHRkLnJvd1NwYW4gfHwgMTtcbiAgICAgICAgICAgICAgICAgICAgc2VnTW9yZU5vZGVzID0gW107XG4gICAgICAgICAgICAgICAgICAgIC8vIG1ha2UgYSByZXBsYWNlbWVudCA8dGQ+IGZvciBlYWNoIGNvbHVtbiB0aGUgc2VnbWVudCBvY2N1cGllcy4gd2lsbCBiZSBvbmUgZm9yIGVhY2ggY29sc3BhblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgY29sU2Vnc0JlbG93Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3JlVGQgPSBjcmVhdGVFbGVtZW50KCd0ZCcsIHsgY2xhc3NOYW1lOiAnZmMtbW9yZS1jZWxsJywgcm93U3Bhbjogcm93U3BhbiB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlZ3NCZWxvdyA9IGNvbFNlZ3NCZWxvd1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vcmVMaW5rID0gdGhpcy5yZW5kZXJNb3JlTGluayhyb3csIGxlZnRDb2wgKyBqLCBbc2VnXS5jb25jYXQoc2Vnc0JlbG93KSAvLyBjb3VudCBzZWcgYXMgaGlkZGVuIHRvb1xuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vcmVXcmFwID0gY3JlYXRlRWxlbWVudCgnZGl2JywgbnVsbCwgbW9yZUxpbmspO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9yZVRkLmFwcGVuZENoaWxkKG1vcmVXcmFwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlZ01vcmVOb2Rlcy5wdXNoKG1vcmVUZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3JlTm9kZXMucHVzaChtb3JlVGQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRkLmNsYXNzTGlzdC5hZGQoJ2ZjLWxpbWl0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0QWZ0ZXJFbGVtZW50KHRkLCBzZWdNb3JlTm9kZXMpO1xuICAgICAgICAgICAgICAgICAgICBsaW1pdGVkTm9kZXMucHVzaCh0ZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW1wdHlDZWxsc1VudGlsKHRoaXMuY29sQ250KTsgLy8gZmluaXNoIG9mZiB0aGUgbGV2ZWxcbiAgICAgICAgICAgIHJvd1N0cnVjdC5tb3JlRWxzID0gbW9yZU5vZGVzOyAvLyBmb3IgZWFzeSB1bmRvaW5nIGxhdGVyXG4gICAgICAgICAgICByb3dTdHJ1Y3QubGltaXRlZEVscyA9IGxpbWl0ZWROb2RlczsgLy8gZm9yIGVhc3kgdW5kb2luZyBsYXRlclxuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBSZXZlYWxzIGFsbCBsZXZlbHMgYW5kIHJlbW92ZXMgYWxsIFwibW9yZVwiLXJlbGF0ZWQgZWxlbWVudHMgZm9yIGEgZ3JpZCdzIHJvdy5cbiAgICAvLyBgcm93YCBpcyBhIHJvdyBudW1iZXIuXG4gICAgRGF5R3JpZC5wcm90b3R5cGUudW5saW1pdFJvdyA9IGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgdmFyIHJvd1N0cnVjdCA9IHRoaXMuZXZlbnRSZW5kZXJlci5yb3dTdHJ1Y3RzW3Jvd107XG4gICAgICAgIGlmIChyb3dTdHJ1Y3QubW9yZUVscykge1xuICAgICAgICAgICAgcm93U3RydWN0Lm1vcmVFbHMuZm9yRWFjaChyZW1vdmVFbGVtZW50KTtcbiAgICAgICAgICAgIHJvd1N0cnVjdC5tb3JlRWxzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocm93U3RydWN0LmxpbWl0ZWRFbHMpIHtcbiAgICAgICAgICAgIHJvd1N0cnVjdC5saW1pdGVkRWxzLmZvckVhY2goZnVuY3Rpb24gKGxpbWl0ZWRFbCkge1xuICAgICAgICAgICAgICAgIGxpbWl0ZWRFbC5jbGFzc0xpc3QucmVtb3ZlKCdmYy1saW1pdGVkJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJvd1N0cnVjdC5saW1pdGVkRWxzID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gUmVuZGVycyBhbiA8YT4gZWxlbWVudCB0aGF0IHJlcHJlc2VudHMgaGlkZGVuIGV2ZW50IGVsZW1lbnQgZm9yIGEgY2VsbC5cbiAgICAvLyBSZXNwb25zaWJsZSBmb3IgYXR0YWNoaW5nIGNsaWNrIGhhbmRsZXIgYXMgd2VsbC5cbiAgICBEYXlHcmlkLnByb3RvdHlwZS5yZW5kZXJNb3JlTGluayA9IGZ1bmN0aW9uIChyb3csIGNvbCwgaGlkZGVuU2Vncykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLmNvbnRleHQsIGNhbGVuZGFyID0gX2EuY2FsZW5kYXIsIHZpZXcgPSBfYS52aWV3LCBkYXRlRW52ID0gX2EuZGF0ZUVudiwgb3B0aW9ucyA9IF9hLm9wdGlvbnMsIGlzUnRsID0gX2EuaXNSdGw7XG4gICAgICAgIHZhciBhID0gY3JlYXRlRWxlbWVudCgnYScsIHsgY2xhc3NOYW1lOiAnZmMtbW9yZScgfSk7XG4gICAgICAgIGEuaW5uZXJUZXh0ID0gdGhpcy5nZXRNb3JlTGlua1RleHQoaGlkZGVuU2Vncy5sZW5ndGgpO1xuICAgICAgICBhLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgY2xpY2tPcHRpb24gPSBvcHRpb25zLmV2ZW50TGltaXRDbGljaztcbiAgICAgICAgICAgIHZhciBfY29sID0gaXNSdGwgPyBfdGhpcy5jb2xDbnQgLSBjb2wgLSAxIDogY29sOyAvLyBIQUNLOiBwcm9wcy5jZWxscyBoYXMgZGlmZmVyZW50IGRpciBzeXN0ZW0/XG4gICAgICAgICAgICB2YXIgZGF0ZSA9IF90aGlzLnByb3BzLmNlbGxzW3Jvd11bX2NvbF0uZGF0ZTtcbiAgICAgICAgICAgIHZhciBtb3JlRWwgPSBldi5jdXJyZW50VGFyZ2V0O1xuICAgICAgICAgICAgdmFyIGRheUVsID0gX3RoaXMuZ2V0Q2VsbEVsKHJvdywgY29sKTtcbiAgICAgICAgICAgIHZhciBhbGxTZWdzID0gX3RoaXMuZ2V0Q2VsbFNlZ3Mocm93LCBjb2wpO1xuICAgICAgICAgICAgLy8gcmVzY29wZSB0aGUgc2VnbWVudHMgdG8gYmUgd2l0aGluIHRoZSBjZWxsJ3MgZGF0ZVxuICAgICAgICAgICAgdmFyIHJlc2xpY2VkQWxsU2VncyA9IF90aGlzLnJlc2xpY2VEYXlTZWdzKGFsbFNlZ3MsIGRhdGUpO1xuICAgICAgICAgICAgdmFyIHJlc2xpY2VkSGlkZGVuU2VncyA9IF90aGlzLnJlc2xpY2VEYXlTZWdzKGhpZGRlblNlZ3MsIGRhdGUpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjbGlja09wdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIC8vIHRoZSByZXR1cm5lZCB2YWx1ZSBjYW4gYmUgYW4gYXRvbWljIG9wdGlvblxuICAgICAgICAgICAgICAgIGNsaWNrT3B0aW9uID0gY2FsZW5kYXIucHVibGljbHlUcmlnZ2VyKCdldmVudExpbWl0Q2xpY2snLCBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGU6IGRhdGVFbnYudG9EYXRlKGRhdGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsRGF5OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF5RWw6IGRheUVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9yZUVsOiBtb3JlRWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWdzOiByZXNsaWNlZEFsbFNlZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBoaWRkZW5TZWdzOiByZXNsaWNlZEhpZGRlblNlZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBqc0V2ZW50OiBldixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXc6IHZpZXdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNsaWNrT3B0aW9uID09PSAncG9wb3ZlcicpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5zaG93U2VnUG9wb3Zlcihyb3csIGNvbCwgbW9yZUVsLCByZXNsaWNlZEFsbFNlZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGNsaWNrT3B0aW9uID09PSAnc3RyaW5nJykgeyAvLyBhIHZpZXcgbmFtZVxuICAgICAgICAgICAgICAgIGNhbGVuZGFyLnpvb21UbyhkYXRlLCBjbGlja09wdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9O1xuICAgIC8vIFJldmVhbHMgdGhlIHBvcG92ZXIgdGhhdCBkaXNwbGF5cyBhbGwgZXZlbnRzIHdpdGhpbiBhIGNlbGxcbiAgICBEYXlHcmlkLnByb3RvdHlwZS5zaG93U2VnUG9wb3ZlciA9IGZ1bmN0aW9uIChyb3csIGNvbCwgbW9yZUxpbmssIHNlZ3MpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hID0gdGhpcy5jb250ZXh0LCBjYWxlbmRhciA9IF9hLmNhbGVuZGFyLCB2aWV3ID0gX2EudmlldywgdGhlbWUgPSBfYS50aGVtZSwgaXNSdGwgPSBfYS5pc1J0bDtcbiAgICAgICAgdmFyIF9jb2wgPSBpc1J0bCA/IHRoaXMuY29sQ250IC0gY29sIC0gMSA6IGNvbDsgLy8gSEFDSzogcHJvcHMuY2VsbHMgaGFzIGRpZmZlcmVudCBkaXIgc3lzdGVtP1xuICAgICAgICB2YXIgbW9yZVdyYXAgPSBtb3JlTGluay5wYXJlbnROb2RlOyAvLyB0aGUgPGRpdj4gd3JhcHBlciBhcm91bmQgdGhlIDxhPlxuICAgICAgICB2YXIgdG9wRWw7IC8vIHRoZSBlbGVtZW50IHdlIHdhbnQgdG8gbWF0Y2ggdGhlIHRvcCBjb29yZGluYXRlIG9mXG4gICAgICAgIHZhciBvcHRpb25zO1xuICAgICAgICBpZiAodGhpcy5yb3dDbnQgPT09IDEpIHtcbiAgICAgICAgICAgIHRvcEVsID0gdmlldy5lbDsgLy8gd2lsbCBjYXVzZSB0aGUgcG9wb3ZlciB0byBjb3ZlciBhbnkgc29ydCBvZiBoZWFkZXJcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRvcEVsID0gdGhpcy5yb3dFbHNbcm93XTsgLy8gd2lsbCBhbGlnbiB3aXRoIHRvcCBvZiByb3dcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAnZmMtbW9yZS1wb3BvdmVyICcgKyB0aGVtZS5nZXRDbGFzcygncG9wb3ZlcicpLFxuICAgICAgICAgICAgcGFyZW50RWw6IHZpZXcuZWwsXG4gICAgICAgICAgICB0b3A6IGNvbXB1dGVSZWN0KHRvcEVsKS50b3AsXG4gICAgICAgICAgICBhdXRvSGlkZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnNlZ1BvcG92ZXJUaWxlID0gbmV3IERheVRpbGUoZWwpO1xuICAgICAgICAgICAgICAgIF90aGlzLnVwZGF0ZVNlZ1BvcG92ZXJUaWxlKF90aGlzLnByb3BzLmNlbGxzW3Jvd11bX2NvbF0uZGF0ZSwgc2Vncyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGlkZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnNlZ1BvcG92ZXJUaWxlLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5zZWdQb3BvdmVyVGlsZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2VnUG9wb3Zlci5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2VnUG9wb3ZlciA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIERldGVybWluZSBob3Jpem9udGFsIGNvb3JkaW5hdGUuXG4gICAgICAgIC8vIFdlIHVzZSB0aGUgbW9yZVdyYXAgaW5zdGVhZCBvZiB0aGUgPHRkPiB0byBhdm9pZCBib3JkZXIgY29uZnVzaW9uLlxuICAgICAgICBpZiAoaXNSdGwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucmlnaHQgPSBjb21wdXRlUmVjdChtb3JlV3JhcCkucmlnaHQgKyAxOyAvLyArMSB0byBiZSBvdmVyIGNlbGwgYm9yZGVyXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25zLmxlZnQgPSBjb21wdXRlUmVjdChtb3JlV3JhcCkubGVmdCAtIDE7IC8vIC0xIHRvIGJlIG92ZXIgY2VsbCBib3JkZXJcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlZ1BvcG92ZXIgPSBuZXcgUG9wb3ZlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5zZWdQb3BvdmVyLnNob3coKTtcbiAgICAgICAgY2FsZW5kYXIucmVsZWFzZUFmdGVyU2l6aW5nVHJpZ2dlcnMoKTsgLy8gaGFjayBmb3IgZXZlbnRQb3NpdGlvbmVkXG4gICAgfTtcbiAgICAvLyBHaXZlbiB0aGUgZXZlbnRzIHdpdGhpbiBhbiBhcnJheSBvZiBzZWdtZW50IG9iamVjdHMsIHJlc2xpY2UgdGhlbSB0byBiZSBpbiBhIHNpbmdsZSBkYXlcbiAgICBEYXlHcmlkLnByb3RvdHlwZS5yZXNsaWNlRGF5U2VncyA9IGZ1bmN0aW9uIChzZWdzLCBkYXlEYXRlKSB7XG4gICAgICAgIHZhciBkYXlTdGFydCA9IGRheURhdGU7XG4gICAgICAgIHZhciBkYXlFbmQgPSBhZGREYXlzKGRheVN0YXJ0LCAxKTtcbiAgICAgICAgdmFyIGRheVJhbmdlID0geyBzdGFydDogZGF5U3RhcnQsIGVuZDogZGF5RW5kIH07XG4gICAgICAgIHZhciBuZXdTZWdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgc2Vnc18xID0gc2VnczsgX2kgPCBzZWdzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2VnID0gc2Vnc18xW19pXTtcbiAgICAgICAgICAgIHZhciBldmVudFJhbmdlID0gc2VnLmV2ZW50UmFuZ2U7XG4gICAgICAgICAgICB2YXIgb3JpZ1JhbmdlID0gZXZlbnRSYW5nZS5yYW5nZTtcbiAgICAgICAgICAgIHZhciBzbGljZWRSYW5nZSA9IGludGVyc2VjdFJhbmdlcyhvcmlnUmFuZ2UsIGRheVJhbmdlKTtcbiAgICAgICAgICAgIGlmIChzbGljZWRSYW5nZSkge1xuICAgICAgICAgICAgICAgIG5ld1NlZ3MucHVzaChfX2Fzc2lnbih7fSwgc2VnLCB7IGV2ZW50UmFuZ2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZjogZXZlbnRSYW5nZS5kZWYsXG4gICAgICAgICAgICAgICAgICAgICAgICB1aTogX19hc3NpZ24oe30sIGV2ZW50UmFuZ2UudWksIHsgZHVyYXRpb25FZGl0YWJsZTogZmFsc2UgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZTogZXZlbnRSYW5nZS5pbnN0YW5jZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlOiBzbGljZWRSYW5nZVxuICAgICAgICAgICAgICAgICAgICB9LCBpc1N0YXJ0OiBzZWcuaXNTdGFydCAmJiBzbGljZWRSYW5nZS5zdGFydC52YWx1ZU9mKCkgPT09IG9yaWdSYW5nZS5zdGFydC52YWx1ZU9mKCksIGlzRW5kOiBzZWcuaXNFbmQgJiYgc2xpY2VkUmFuZ2UuZW5kLnZhbHVlT2YoKSA9PT0gb3JpZ1JhbmdlLmVuZC52YWx1ZU9mKCkgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdTZWdzO1xuICAgIH07XG4gICAgLy8gR2VuZXJhdGVzIHRoZSB0ZXh0IHRoYXQgc2hvdWxkIGJlIGluc2lkZSBhIFwibW9yZVwiIGxpbmssIGdpdmVuIHRoZSBudW1iZXIgb2YgZXZlbnRzIGl0IHJlcHJlc2VudHNcbiAgICBEYXlHcmlkLnByb3RvdHlwZS5nZXRNb3JlTGlua1RleHQgPSBmdW5jdGlvbiAobnVtKSB7XG4gICAgICAgIHZhciBvcHQgPSB0aGlzLmNvbnRleHQub3B0aW9ucy5ldmVudExpbWl0VGV4dDtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHQobnVtKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnKycgKyBudW0gKyAnICcgKyBvcHQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIFJldHVybnMgc2VnbWVudHMgd2l0aGluIGEgZ2l2ZW4gY2VsbC5cbiAgICAvLyBJZiBgc3RhcnRMZXZlbGAgaXMgc3BlY2lmaWVkLCByZXR1cm5zIG9ubHkgZXZlbnRzIGluY2x1ZGluZyBhbmQgYmVsb3cgdGhhdCBsZXZlbC4gT3RoZXJ3aXNlIHJldHVybnMgYWxsIHNlZ3MuXG4gICAgRGF5R3JpZC5wcm90b3R5cGUuZ2V0Q2VsbFNlZ3MgPSBmdW5jdGlvbiAocm93LCBjb2wsIHN0YXJ0TGV2ZWwpIHtcbiAgICAgICAgdmFyIHNlZ01hdHJpeCA9IHRoaXMuZXZlbnRSZW5kZXJlci5yb3dTdHJ1Y3RzW3Jvd10uc2VnTWF0cml4O1xuICAgICAgICB2YXIgbGV2ZWwgPSBzdGFydExldmVsIHx8IDA7XG4gICAgICAgIHZhciBzZWdzID0gW107XG4gICAgICAgIHZhciBzZWc7XG4gICAgICAgIHdoaWxlIChsZXZlbCA8IHNlZ01hdHJpeC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNlZyA9IHNlZ01hdHJpeFtsZXZlbF1bY29sXTtcbiAgICAgICAgICAgIGlmIChzZWcpIHtcbiAgICAgICAgICAgICAgICBzZWdzLnB1c2goc2VnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldmVsKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlZ3M7XG4gICAgfTtcbiAgICByZXR1cm4gRGF5R3JpZDtcbn0oRGF0ZUNvbXBvbmVudCkpO1xuXG52YXIgV0VFS19OVU1fRk9STUFUJDEgPSBjcmVhdGVGb3JtYXR0ZXIoeyB3ZWVrOiAnbnVtZXJpYycgfSk7XG4vKiBBbiBhYnN0cmFjdCBjbGFzcyBmb3IgdGhlIGRheWdyaWQgdmlld3MsIGFzIHdlbGwgYXMgbW9udGggdmlldy4gUmVuZGVycyBvbmUgb3IgbW9yZSByb3dzIG9mIGRheSBjZWxscy5cbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLy8gSXQgaXMgYSBtYW5hZ2VyIGZvciBhIERheUdyaWQgc3ViY29tcG9uZW50LCB3aGljaCBkb2VzIG1vc3Qgb2YgdGhlIGhlYXZ5IGxpZnRpbmcuXG4vLyBJdCBpcyByZXNwb25zaWJsZSBmb3IgbWFuYWdpbmcgd2lkdGgvaGVpZ2h0LlxudmFyIEFic3RyYWN0RGF5R3JpZFZpZXcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFic3RyYWN0RGF5R3JpZFZpZXcsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQWJzdHJhY3REYXlHcmlkVmlldygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnByb2Nlc3NPcHRpb25zID0gbWVtb2l6ZShfdGhpcy5fcHJvY2Vzc09wdGlvbnMpO1xuICAgICAgICBfdGhpcy5yZW5kZXJTa2VsZXRvbiA9IG1lbW9pemVSZW5kZXJpbmcoX3RoaXMuX3JlbmRlclNrZWxldG9uLCBfdGhpcy5fdW5yZW5kZXJTa2VsZXRvbik7XG4gICAgICAgIC8qIEhlYWRlciBSZW5kZXJpbmdcbiAgICAgICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICAgICAgLy8gR2VuZXJhdGVzIHRoZSBIVE1MIHRoYXQgd2lsbCBnbyBiZWZvcmUgdGhlIGRheS1vZiB3ZWVrIGhlYWRlciBjZWxsc1xuICAgICAgICBfdGhpcy5yZW5kZXJIZWFkSW50cm9IdG1sID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMuY29udGV4dCwgdGhlbWUgPSBfYS50aGVtZSwgb3B0aW9ucyA9IF9hLm9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoX3RoaXMuY29sV2Vla051bWJlcnNWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnICtcbiAgICAgICAgICAgICAgICAgICAgJzx0aCBjbGFzcz1cImZjLXdlZWstbnVtYmVyICcgKyB0aGVtZS5nZXRDbGFzcygnd2lkZ2V0SGVhZGVyJykgKyAnXCIgJyArIF90aGlzLndlZWtOdW1iZXJTdHlsZUF0dHIoKSArICc+JyArXG4gICAgICAgICAgICAgICAgICAgICc8c3Bhbj4nICsgLy8gbmVlZGVkIGZvciBtYXRjaENlbGxXaWR0aHNcbiAgICAgICAgICAgICAgICAgICAgaHRtbEVzY2FwZShvcHRpb25zLndlZWtMYWJlbCkgK1xuICAgICAgICAgICAgICAgICAgICAnPC9zcGFuPicgK1xuICAgICAgICAgICAgICAgICAgICAnPC90aD4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9O1xuICAgICAgICAvKiBEYXkgR3JpZCBSZW5kZXJpbmdcbiAgICAgICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICAgICAgLy8gR2VuZXJhdGVzIHRoZSBIVE1MIHRoYXQgd2lsbCBnbyBiZWZvcmUgY29udGVudC1za2VsZXRvbiBjZWxscyB0aGF0IGRpc3BsYXkgdGhlIGRheS93ZWVrIG51bWJlcnNcbiAgICAgICAgX3RoaXMucmVuZGVyRGF5R3JpZE51bWJlckludHJvSHRtbCA9IGZ1bmN0aW9uIChyb3csIGRheUdyaWQpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLmNvbnRleHQsIG9wdGlvbnMgPSBfYS5vcHRpb25zLCBkYXRlRW52ID0gX2EuZGF0ZUVudjtcbiAgICAgICAgICAgIHZhciB3ZWVrU3RhcnQgPSBkYXlHcmlkLnByb3BzLmNlbGxzW3Jvd11bMF0uZGF0ZTtcbiAgICAgICAgICAgIGlmIChfdGhpcy5jb2xXZWVrTnVtYmVyc1Zpc2libGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJycgK1xuICAgICAgICAgICAgICAgICAgICAnPHRkIGNsYXNzPVwiZmMtd2Vlay1udW1iZXJcIiAnICsgX3RoaXMud2Vla051bWJlclN0eWxlQXR0cigpICsgJz4nICtcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRHb3RvQW5jaG9ySHRtbCgvLyBhc2lkZSBmcm9tIGxpbmssIGltcG9ydGFudCBmb3IgbWF0Y2hDZWxsV2lkdGhzXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMsIGRhdGVFbnYsIHsgZGF0ZTogd2Vla1N0YXJ0LCB0eXBlOiAnd2VlaycsIGZvcmNlT2ZmOiBkYXlHcmlkLmNvbENudCA9PT0gMSB9LCBkYXRlRW52LmZvcm1hdCh3ZWVrU3RhcnQsIFdFRUtfTlVNX0ZPUk1BVCQxKSAvLyBpbm5lciBIVE1MXG4gICAgICAgICAgICAgICAgICAgICkgK1xuICAgICAgICAgICAgICAgICAgICAnPC90ZD4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9O1xuICAgICAgICAvLyBHZW5lcmF0ZXMgdGhlIEhUTUwgdGhhdCBnb2VzIGJlZm9yZSB0aGUgZGF5IGJnIGNlbGxzIGZvciBlYWNoIGRheS1yb3dcbiAgICAgICAgX3RoaXMucmVuZGVyRGF5R3JpZEJnSW50cm9IdG1sID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRoZW1lID0gX3RoaXMuY29udGV4dC50aGVtZTtcbiAgICAgICAgICAgIGlmIChfdGhpcy5jb2xXZWVrTnVtYmVyc1Zpc2libGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJzx0ZCBjbGFzcz1cImZjLXdlZWstbnVtYmVyICcgKyB0aGVtZS5nZXRDbGFzcygnd2lkZ2V0Q29udGVudCcpICsgJ1wiICcgKyBfdGhpcy53ZWVrTnVtYmVyU3R5bGVBdHRyKCkgKyAnPjwvdGQ+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfTtcbiAgICAgICAgLy8gR2VuZXJhdGVzIHRoZSBIVE1MIHRoYXQgZ29lcyBiZWZvcmUgZXZlcnkgb3RoZXIgdHlwZSBvZiByb3cgZ2VuZXJhdGVkIGJ5IERheUdyaWQuXG4gICAgICAgIC8vIEFmZmVjdHMgbWlycm9yLXNrZWxldG9uIGFuZCBoaWdobGlnaHQtc2tlbGV0b24gcm93cy5cbiAgICAgICAgX3RoaXMucmVuZGVyRGF5R3JpZEludHJvSHRtbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5jb2xXZWVrTnVtYmVyc1Zpc2libGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJzx0ZCBjbGFzcz1cImZjLXdlZWstbnVtYmVyXCIgJyArIF90aGlzLndlZWtOdW1iZXJTdHlsZUF0dHIoKSArICc+PC90ZD4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFic3RyYWN0RGF5R3JpZFZpZXcucHJvdG90eXBlLl9wcm9jZXNzT3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zLndlZWtOdW1iZXJzKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy53ZWVrTnVtYmVyc1dpdGhpbkRheXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNlbGxXZWVrTnVtYmVyc1Zpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuY29sV2Vla051bWJlcnNWaXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNlbGxXZWVrTnVtYmVyc1Zpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbFdlZWtOdW1iZXJzVmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbFdlZWtOdW1iZXJzVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5jZWxsV2Vla051bWJlcnNWaXNpYmxlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFic3RyYWN0RGF5R3JpZFZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChwcm9wcywgY29udGV4dCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnJlbmRlci5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KTtcbiAgICAgICAgdGhpcy5wcm9jZXNzT3B0aW9ucyhjb250ZXh0Lm9wdGlvbnMpO1xuICAgICAgICB0aGlzLnJlbmRlclNrZWxldG9uKGNvbnRleHQpO1xuICAgIH07XG4gICAgQWJzdHJhY3REYXlHcmlkVmlldy5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMucmVuZGVyU2tlbGV0b24udW5yZW5kZXIoKTtcbiAgICB9O1xuICAgIEFic3RyYWN0RGF5R3JpZFZpZXcucHJvdG90eXBlLl9yZW5kZXJTa2VsZXRvbiA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LmFkZCgnZmMtZGF5R3JpZC12aWV3Jyk7XG4gICAgICAgIHRoaXMuZWwuaW5uZXJIVE1MID0gdGhpcy5yZW5kZXJTa2VsZXRvbkh0bWwoKTtcbiAgICAgICAgdGhpcy5zY3JvbGxlciA9IG5ldyBTY3JvbGxDb21wb25lbnQoJ2hpZGRlbicsIC8vIG92ZXJmbG93IHhcbiAgICAgICAgJ2F1dG8nIC8vIG92ZXJmbG93IHlcbiAgICAgICAgKTtcbiAgICAgICAgdmFyIGRheUdyaWRDb250YWluZXJFbCA9IHRoaXMuc2Nyb2xsZXIuZWw7XG4gICAgICAgIHRoaXMuZWwucXVlcnlTZWxlY3RvcignLmZjLWJvZHkgPiB0ciA+IHRkJykuYXBwZW5kQ2hpbGQoZGF5R3JpZENvbnRhaW5lckVsKTtcbiAgICAgICAgZGF5R3JpZENvbnRhaW5lckVsLmNsYXNzTGlzdC5hZGQoJ2ZjLWRheS1ncmlkLWNvbnRhaW5lcicpO1xuICAgICAgICB2YXIgZGF5R3JpZEVsID0gY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6ICdmYy1kYXktZ3JpZCcgfSk7XG4gICAgICAgIGRheUdyaWRDb250YWluZXJFbC5hcHBlbmRDaGlsZChkYXlHcmlkRWwpO1xuICAgICAgICB0aGlzLmRheUdyaWQgPSBuZXcgRGF5R3JpZChkYXlHcmlkRWwsIHtcbiAgICAgICAgICAgIHJlbmRlck51bWJlckludHJvSHRtbDogdGhpcy5yZW5kZXJEYXlHcmlkTnVtYmVySW50cm9IdG1sLFxuICAgICAgICAgICAgcmVuZGVyQmdJbnRyb0h0bWw6IHRoaXMucmVuZGVyRGF5R3JpZEJnSW50cm9IdG1sLFxuICAgICAgICAgICAgcmVuZGVySW50cm9IdG1sOiB0aGlzLnJlbmRlckRheUdyaWRJbnRyb0h0bWwsXG4gICAgICAgICAgICBjb2xXZWVrTnVtYmVyc1Zpc2libGU6IHRoaXMuY29sV2Vla051bWJlcnNWaXNpYmxlLFxuICAgICAgICAgICAgY2VsbFdlZWtOdW1iZXJzVmlzaWJsZTogdGhpcy5jZWxsV2Vla051bWJlcnNWaXNpYmxlXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQWJzdHJhY3REYXlHcmlkVmlldy5wcm90b3R5cGUuX3VucmVuZGVyU2tlbGV0b24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZSgnZmMtZGF5R3JpZC12aWV3Jyk7XG4gICAgICAgIHRoaXMuZGF5R3JpZC5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuc2Nyb2xsZXIuZGVzdHJveSgpO1xuICAgIH07XG4gICAgLy8gQnVpbGRzIHRoZSBIVE1MIHNrZWxldG9uIGZvciB0aGUgdmlldy5cbiAgICAvLyBUaGUgZGF5LWdyaWQgY29tcG9uZW50IHdpbGwgcmVuZGVyIGluc2lkZSBvZiBhIGNvbnRhaW5lciBkZWZpbmVkIGJ5IHRoaXMgSFRNTC5cbiAgICBBYnN0cmFjdERheUdyaWRWaWV3LnByb3RvdHlwZS5yZW5kZXJTa2VsZXRvbkh0bWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuY29udGV4dCwgdGhlbWUgPSBfYS50aGVtZSwgb3B0aW9ucyA9IF9hLm9wdGlvbnM7XG4gICAgICAgIHJldHVybiAnJyArXG4gICAgICAgICAgICAnPHRhYmxlIGNsYXNzPVwiJyArIHRoZW1lLmdldENsYXNzKCd0YWJsZUdyaWQnKSArICdcIj4nICtcbiAgICAgICAgICAgIChvcHRpb25zLmNvbHVtbkhlYWRlciA/XG4gICAgICAgICAgICAgICAgJzx0aGVhZCBjbGFzcz1cImZjLWhlYWRcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgJzx0cj4nICtcbiAgICAgICAgICAgICAgICAgICAgJzx0ZCBjbGFzcz1cImZjLWhlYWQtY29udGFpbmVyICcgKyB0aGVtZS5nZXRDbGFzcygnd2lkZ2V0SGVhZGVyJykgKyAnXCI+Jm5ic3A7PC90ZD4nICtcbiAgICAgICAgICAgICAgICAgICAgJzwvdHI+JyArXG4gICAgICAgICAgICAgICAgICAgICc8L3RoZWFkPicgOlxuICAgICAgICAgICAgICAgICcnKSArXG4gICAgICAgICAgICAnPHRib2R5IGNsYXNzPVwiZmMtYm9keVwiPicgK1xuICAgICAgICAgICAgJzx0cj4nICtcbiAgICAgICAgICAgICc8dGQgY2xhc3M9XCInICsgdGhlbWUuZ2V0Q2xhc3MoJ3dpZGdldENvbnRlbnQnKSArICdcIj48L3RkPicgK1xuICAgICAgICAgICAgJzwvdHI+JyArXG4gICAgICAgICAgICAnPC90Ym9keT4nICtcbiAgICAgICAgICAgICc8L3RhYmxlPic7XG4gICAgfTtcbiAgICAvLyBHZW5lcmF0ZXMgYW4gSFRNTCBhdHRyaWJ1dGUgc3RyaW5nIGZvciBzZXR0aW5nIHRoZSB3aWR0aCBvZiB0aGUgd2VlayBudW1iZXIgY29sdW1uLCBpZiBpdCBpcyBrbm93blxuICAgIEFic3RyYWN0RGF5R3JpZFZpZXcucHJvdG90eXBlLndlZWtOdW1iZXJTdHlsZUF0dHIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLndlZWtOdW1iZXJXaWR0aCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3N0eWxlPVwid2lkdGg6JyArIHRoaXMud2Vla051bWJlcldpZHRoICsgJ3B4XCInO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9O1xuICAgIC8vIERldGVybWluZXMgd2hldGhlciBlYWNoIHJvdyBzaG91bGQgaGF2ZSBhIGNvbnN0YW50IGhlaWdodFxuICAgIEFic3RyYWN0RGF5R3JpZFZpZXcucHJvdG90eXBlLmhhc1JpZ2lkUm93cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGV2ZW50TGltaXQgPSB0aGlzLmNvbnRleHQub3B0aW9ucy5ldmVudExpbWl0O1xuICAgICAgICByZXR1cm4gZXZlbnRMaW1pdCAmJiB0eXBlb2YgZXZlbnRMaW1pdCAhPT0gJ251bWJlcic7XG4gICAgfTtcbiAgICAvKiBEaW1lbnNpb25zXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICBBYnN0cmFjdERheUdyaWRWaWV3LnByb3RvdHlwZS51cGRhdGVTaXplID0gZnVuY3Rpb24gKGlzUmVzaXplLCB2aWV3SGVpZ2h0LCBpc0F1dG8pIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51cGRhdGVTaXplLmNhbGwodGhpcywgaXNSZXNpemUsIHZpZXdIZWlnaHQsIGlzQXV0byk7IC8vIHdpbGwgY2FsbCB1cGRhdGVCYXNlU2l6ZS4gaW1wb3J0YW50IHRoYXQgZXhlY3V0ZXMgZmlyc3RcbiAgICAgICAgdGhpcy5kYXlHcmlkLnVwZGF0ZVNpemUoaXNSZXNpemUpO1xuICAgIH07XG4gICAgLy8gUmVmcmVzaGVzIHRoZSBob3Jpem9udGFsIGRpbWVuc2lvbnMgb2YgdGhlIHZpZXdcbiAgICBBYnN0cmFjdERheUdyaWRWaWV3LnByb3RvdHlwZS51cGRhdGVCYXNlU2l6ZSA9IGZ1bmN0aW9uIChpc1Jlc2l6ZSwgdmlld0hlaWdodCwgaXNBdXRvKSB7XG4gICAgICAgIHZhciBkYXlHcmlkID0gdGhpcy5kYXlHcmlkO1xuICAgICAgICB2YXIgZXZlbnRMaW1pdCA9IHRoaXMuY29udGV4dC5vcHRpb25zLmV2ZW50TGltaXQ7XG4gICAgICAgIHZhciBoZWFkUm93RWwgPSB0aGlzLmhlYWRlciA/IHRoaXMuaGVhZGVyLmVsIDogbnVsbDsgLy8gSEFDS1xuICAgICAgICB2YXIgc2Nyb2xsZXJIZWlnaHQ7XG4gICAgICAgIHZhciBzY3JvbGxiYXJXaWR0aHM7XG4gICAgICAgIC8vIGhhY2sgdG8gZ2l2ZSB0aGUgdmlldyBzb21lIGhlaWdodCBwcmlvciB0byBkYXlHcmlkJ3MgY29sdW1ucyBiZWluZyByZW5kZXJlZFxuICAgICAgICAvLyBUT0RPOiBzZXBhcmF0ZSBzZXR0aW5nIGhlaWdodCBmcm9tIHNjcm9sbGVyIFZTIGRheUdyaWQuXG4gICAgICAgIGlmICghZGF5R3JpZC5yb3dFbHMpIHtcbiAgICAgICAgICAgIGlmICghaXNBdXRvKSB7XG4gICAgICAgICAgICAgICAgc2Nyb2xsZXJIZWlnaHQgPSB0aGlzLmNvbXB1dGVTY3JvbGxlckhlaWdodCh2aWV3SGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbGVyLnNldEhlaWdodChzY3JvbGxlckhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY29sV2Vla051bWJlcnNWaXNpYmxlKSB7XG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgYWxsIHdlZWsgbnVtYmVyIGNlbGxzIHJ1bm5pbmcgZG93biB0aGUgc2lkZSBoYXZlIHRoZSBzYW1lIHdpZHRoLlxuICAgICAgICAgICAgdGhpcy53ZWVrTnVtYmVyV2lkdGggPSBtYXRjaENlbGxXaWR0aHMoZmluZEVsZW1lbnRzKHRoaXMuZWwsICcuZmMtd2Vlay1udW1iZXInKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVzZXQgYWxsIGhlaWdodHMgdG8gYmUgbmF0dXJhbFxuICAgICAgICB0aGlzLnNjcm9sbGVyLmNsZWFyKCk7XG4gICAgICAgIGlmIChoZWFkUm93RWwpIHtcbiAgICAgICAgICAgIHVuY29tcGVuc2F0ZVNjcm9sbChoZWFkUm93RWwpO1xuICAgICAgICB9XG4gICAgICAgIGRheUdyaWQucmVtb3ZlU2VnUG9wb3ZlcigpOyAvLyBraWxsIHRoZSBcIm1vcmVcIiBwb3BvdmVyIGlmIGRpc3BsYXllZFxuICAgICAgICAvLyBpcyB0aGUgZXZlbnQgbGltaXQgYSBjb25zdGFudCBsZXZlbCBudW1iZXI/XG4gICAgICAgIGlmIChldmVudExpbWl0ICYmIHR5cGVvZiBldmVudExpbWl0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgZGF5R3JpZC5saW1pdFJvd3MoZXZlbnRMaW1pdCk7IC8vIGxpbWl0IHRoZSBsZXZlbHMgZmlyc3Qgc28gdGhlIGhlaWdodCBjYW4gcmVkaXN0cmlidXRlIGFmdGVyXG4gICAgICAgIH1cbiAgICAgICAgLy8gZGlzdHJpYnV0ZSB0aGUgaGVpZ2h0IHRvIHRoZSByb3dzXG4gICAgICAgIC8vICh2aWV3SGVpZ2h0IGlzIGEgXCJyZWNvbW1lbmRlZFwiIHZhbHVlIGlmIGlzQXV0bylcbiAgICAgICAgc2Nyb2xsZXJIZWlnaHQgPSB0aGlzLmNvbXB1dGVTY3JvbGxlckhlaWdodCh2aWV3SGVpZ2h0KTtcbiAgICAgICAgdGhpcy5zZXRHcmlkSGVpZ2h0KHNjcm9sbGVySGVpZ2h0LCBpc0F1dG8pO1xuICAgICAgICAvLyBpcyB0aGUgZXZlbnQgbGltaXQgZHluYW1pY2FsbHkgY2FsY3VsYXRlZD9cbiAgICAgICAgaWYgKGV2ZW50TGltaXQgJiYgdHlwZW9mIGV2ZW50TGltaXQgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBkYXlHcmlkLmxpbWl0Um93cyhldmVudExpbWl0KTsgLy8gbGltaXQgdGhlIGxldmVscyBhZnRlciB0aGUgZ3JpZCdzIHJvdyBoZWlnaHRzIGhhdmUgYmVlbiBzZXRcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQXV0bykgeyAvLyBzaG91bGQgd2UgZm9yY2UgZGltZW5zaW9ucyBvZiB0aGUgc2Nyb2xsIGNvbnRhaW5lcj9cbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsZXIuc2V0SGVpZ2h0KHNjcm9sbGVySGVpZ2h0KTtcbiAgICAgICAgICAgIHNjcm9sbGJhcldpZHRocyA9IHRoaXMuc2Nyb2xsZXIuZ2V0U2Nyb2xsYmFyV2lkdGhzKCk7XG4gICAgICAgICAgICBpZiAoc2Nyb2xsYmFyV2lkdGhzLmxlZnQgfHwgc2Nyb2xsYmFyV2lkdGhzLnJpZ2h0KSB7IC8vIHVzaW5nIHNjcm9sbGJhcnM/XG4gICAgICAgICAgICAgICAgaWYgKGhlYWRSb3dFbCkge1xuICAgICAgICAgICAgICAgICAgICBjb21wZW5zYXRlU2Nyb2xsKGhlYWRSb3dFbCwgc2Nyb2xsYmFyV2lkdGhzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZG9pbmcgdGhlIHNjcm9sbGJhciBjb21wZW5zYXRpb24gbWlnaHQgaGF2ZSBjcmVhdGVkIHRleHQgb3ZlcmZsb3cgd2hpY2ggY3JlYXRlZCBtb3JlIGhlaWdodC4gcmVkb1xuICAgICAgICAgICAgICAgIHNjcm9sbGVySGVpZ2h0ID0gdGhpcy5jb21wdXRlU2Nyb2xsZXJIZWlnaHQodmlld0hlaWdodCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxlci5zZXRIZWlnaHQoc2Nyb2xsZXJIZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZ3VhcmFudGVlcyB0aGUgc2FtZSBzY3JvbGxiYXIgd2lkdGhzXG4gICAgICAgICAgICB0aGlzLnNjcm9sbGVyLmxvY2tPdmVyZmxvdyhzY3JvbGxiYXJXaWR0aHMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBnaXZlbiBhIGRlc2lyZWQgdG90YWwgaGVpZ2h0IG9mIHRoZSB2aWV3LCByZXR1cm5zIHdoYXQgdGhlIGhlaWdodCBvZiB0aGUgc2Nyb2xsZXIgc2hvdWxkIGJlXG4gICAgQWJzdHJhY3REYXlHcmlkVmlldy5wcm90b3R5cGUuY29tcHV0ZVNjcm9sbGVySGVpZ2h0ID0gZnVuY3Rpb24gKHZpZXdIZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIHZpZXdIZWlnaHQgLVxuICAgICAgICAgICAgc3VidHJhY3RJbm5lckVsSGVpZ2h0KHRoaXMuZWwsIHRoaXMuc2Nyb2xsZXIuZWwpOyAvLyBldmVyeXRoaW5nIHRoYXQncyBOT1QgdGhlIHNjcm9sbGVyXG4gICAgfTtcbiAgICAvLyBTZXRzIHRoZSBoZWlnaHQgb2YganVzdCB0aGUgRGF5R3JpZCBjb21wb25lbnQgaW4gdGhpcyB2aWV3XG4gICAgQWJzdHJhY3REYXlHcmlkVmlldy5wcm90b3R5cGUuc2V0R3JpZEhlaWdodCA9IGZ1bmN0aW9uIChoZWlnaHQsIGlzQXV0bykge1xuICAgICAgICBpZiAodGhpcy5jb250ZXh0Lm9wdGlvbnMubW9udGhNb2RlKSB7XG4gICAgICAgICAgICAvLyBpZiBhdXRvLCBtYWtlIHRoZSBoZWlnaHQgb2YgZWFjaCByb3cgdGhlIGhlaWdodCB0aGF0IGl0IHdvdWxkIGJlIGlmIHRoZXJlIHdlcmUgNiB3ZWVrc1xuICAgICAgICAgICAgaWYgKGlzQXV0bykge1xuICAgICAgICAgICAgICAgIGhlaWdodCAqPSB0aGlzLmRheUdyaWQucm93Q250IC8gNjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRpc3RyaWJ1dGVIZWlnaHQodGhpcy5kYXlHcmlkLnJvd0VscywgaGVpZ2h0LCAhaXNBdXRvKTsgLy8gaWYgYXV0bywgZG9uJ3QgY29tcGVuc2F0ZSBmb3IgaGVpZ2h0LWhvZ2dpbmcgcm93c1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGlzQXV0bykge1xuICAgICAgICAgICAgICAgIHVuZGlzdHJpYnV0ZUhlaWdodCh0aGlzLmRheUdyaWQucm93RWxzKTsgLy8gbGV0IHRoZSByb3dzIGJlIHRoZWlyIG5hdHVyYWwgaGVpZ2h0IHdpdGggbm8gZXhwYW5kaW5nXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkaXN0cmlidXRlSGVpZ2h0KHRoaXMuZGF5R3JpZC5yb3dFbHMsIGhlaWdodCwgdHJ1ZSk7IC8vIHRydWUgPSBjb21wZW5zYXRlIGZvciBoZWlnaHQtaG9nZ2luZyByb3dzXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qIFNjcm9sbFxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gICAgQWJzdHJhY3REYXlHcmlkVmlldy5wcm90b3R5cGUuY29tcHV0ZURhdGVTY3JvbGwgPSBmdW5jdGlvbiAoZHVyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHsgdG9wOiAwIH07XG4gICAgfTtcbiAgICBBYnN0cmFjdERheUdyaWRWaWV3LnByb3RvdHlwZS5xdWVyeURhdGVTY3JvbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7IHRvcDogdGhpcy5zY3JvbGxlci5nZXRTY3JvbGxUb3AoKSB9O1xuICAgIH07XG4gICAgQWJzdHJhY3REYXlHcmlkVmlldy5wcm90b3R5cGUuYXBwbHlEYXRlU2Nyb2xsID0gZnVuY3Rpb24gKHNjcm9sbCkge1xuICAgICAgICBpZiAoc2Nyb2xsLnRvcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbGVyLnNldFNjcm9sbFRvcChzY3JvbGwudG9wKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFic3RyYWN0RGF5R3JpZFZpZXc7XG59KFZpZXcpKTtcbkFic3RyYWN0RGF5R3JpZFZpZXcucHJvdG90eXBlLmRhdGVQcm9maWxlR2VuZXJhdG9yQ2xhc3MgPSBEYXlHcmlkRGF0ZVByb2ZpbGVHZW5lcmF0b3I7XG5cbnZhciBTaW1wbGVEYXlHcmlkID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTaW1wbGVEYXlHcmlkLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNpbXBsZURheUdyaWQoZGF5R3JpZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkYXlHcmlkLmVsKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zbGljZXIgPSBuZXcgRGF5R3JpZFNsaWNlcigpO1xuICAgICAgICBfdGhpcy5kYXlHcmlkID0gZGF5R3JpZDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTaW1wbGVEYXlHcmlkLnByb3RvdHlwZS5maXJzdENvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICBjb250ZXh0LmNhbGVuZGFyLnJlZ2lzdGVySW50ZXJhY3RpdmVDb21wb25lbnQodGhpcywgeyBlbDogdGhpcy5kYXlHcmlkLmVsIH0pO1xuICAgIH07XG4gICAgU2ltcGxlRGF5R3JpZC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuY29udGV4dC5jYWxlbmRhci51bnJlZ2lzdGVySW50ZXJhY3RpdmVDb21wb25lbnQodGhpcyk7XG4gICAgfTtcbiAgICBTaW1wbGVEYXlHcmlkLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAocHJvcHMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGRheUdyaWQgPSB0aGlzLmRheUdyaWQ7XG4gICAgICAgIHZhciBkYXRlUHJvZmlsZSA9IHByb3BzLmRhdGVQcm9maWxlLCBkYXlUYWJsZSA9IHByb3BzLmRheVRhYmxlO1xuICAgICAgICBkYXlHcmlkLnJlY2VpdmVDb250ZXh0KGNvbnRleHQpOyAvLyBoYWNrIGJlY2F1c2UgY29udGV4dCBpcyB1c2VkIGluIHNsaWNlUHJvcHNcbiAgICAgICAgZGF5R3JpZC5yZWNlaXZlUHJvcHMoX19hc3NpZ24oe30sIHRoaXMuc2xpY2VyLnNsaWNlUHJvcHMocHJvcHMsIGRhdGVQcm9maWxlLCBwcm9wcy5uZXh0RGF5VGhyZXNob2xkLCBjb250ZXh0LmNhbGVuZGFyLCBkYXlHcmlkLCBkYXlUYWJsZSksIHsgZGF0ZVByb2ZpbGU6IGRhdGVQcm9maWxlLCBjZWxsczogZGF5VGFibGUuY2VsbHMsIGlzUmlnaWQ6IHByb3BzLmlzUmlnaWQgfSksIGNvbnRleHQpO1xuICAgIH07XG4gICAgU2ltcGxlRGF5R3JpZC5wcm90b3R5cGUuYnVpbGRQb3NpdGlvbkNhY2hlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kYXlHcmlkLmJ1aWxkUG9zaXRpb25DYWNoZXMoKTtcbiAgICB9O1xuICAgIFNpbXBsZURheUdyaWQucHJvdG90eXBlLnF1ZXJ5SGl0ID0gZnVuY3Rpb24gKHBvc2l0aW9uTGVmdCwgcG9zaXRpb25Ub3ApIHtcbiAgICAgICAgdmFyIHJhd0hpdCA9IHRoaXMuZGF5R3JpZC5wb3NpdGlvblRvSGl0KHBvc2l0aW9uTGVmdCwgcG9zaXRpb25Ub3ApO1xuICAgICAgICBpZiAocmF3SGl0KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogdGhpcy5kYXlHcmlkLFxuICAgICAgICAgICAgICAgIGRhdGVTcGFuOiByYXdIaXQuZGF0ZVNwYW4sXG4gICAgICAgICAgICAgICAgZGF5RWw6IHJhd0hpdC5kYXlFbCxcbiAgICAgICAgICAgICAgICByZWN0OiB7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHJhd0hpdC5yZWxhdGl2ZVJlY3QubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IHJhd0hpdC5yZWxhdGl2ZVJlY3QucmlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogcmF3SGl0LnJlbGF0aXZlUmVjdC50b3AsXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogcmF3SGl0LnJlbGF0aXZlUmVjdC5ib3R0b21cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxheWVyOiAwXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU2ltcGxlRGF5R3JpZDtcbn0oRGF0ZUNvbXBvbmVudCkpO1xudmFyIERheUdyaWRTbGljZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKERheUdyaWRTbGljZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRGF5R3JpZFNsaWNlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBEYXlHcmlkU2xpY2VyLnByb3RvdHlwZS5zbGljZVJhbmdlID0gZnVuY3Rpb24gKGRhdGVSYW5nZSwgZGF5VGFibGUpIHtcbiAgICAgICAgcmV0dXJuIGRheVRhYmxlLnNsaWNlUmFuZ2UoZGF0ZVJhbmdlKTtcbiAgICB9O1xuICAgIHJldHVybiBEYXlHcmlkU2xpY2VyO1xufShTbGljZXIpKTtcblxudmFyIERheUdyaWRWaWV3ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhEYXlHcmlkVmlldywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEYXlHcmlkVmlldygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmJ1aWxkRGF5VGFibGUgPSBtZW1vaXplKGJ1aWxkRGF5VGFibGUpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIERheUdyaWRWaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAocHJvcHMsIGNvbnRleHQpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5yZW5kZXIuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCk7IC8vIHdpbGwgY2FsbCBfcmVuZGVyU2tlbGV0b24vX3VucmVuZGVyU2tlbGV0b25cbiAgICAgICAgdmFyIGRhdGVQcm9maWxlID0gdGhpcy5wcm9wcy5kYXRlUHJvZmlsZTtcbiAgICAgICAgdmFyIGRheVRhYmxlID0gdGhpcy5kYXlUYWJsZSA9XG4gICAgICAgICAgICB0aGlzLmJ1aWxkRGF5VGFibGUoZGF0ZVByb2ZpbGUsIHByb3BzLmRhdGVQcm9maWxlR2VuZXJhdG9yKTtcbiAgICAgICAgaWYgKHRoaXMuaGVhZGVyKSB7XG4gICAgICAgICAgICB0aGlzLmhlYWRlci5yZWNlaXZlUHJvcHMoe1xuICAgICAgICAgICAgICAgIGRhdGVQcm9maWxlOiBkYXRlUHJvZmlsZSxcbiAgICAgICAgICAgICAgICBkYXRlczogZGF5VGFibGUuaGVhZGVyRGF0ZXMsXG4gICAgICAgICAgICAgICAgZGF0ZXNSZXBEaXN0aW5jdERheXM6IGRheVRhYmxlLnJvd0NudCA9PT0gMSxcbiAgICAgICAgICAgICAgICByZW5kZXJJbnRyb0h0bWw6IHRoaXMucmVuZGVySGVhZEludHJvSHRtbFxuICAgICAgICAgICAgfSwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zaW1wbGVEYXlHcmlkLnJlY2VpdmVQcm9wcyh7XG4gICAgICAgICAgICBkYXRlUHJvZmlsZTogZGF0ZVByb2ZpbGUsXG4gICAgICAgICAgICBkYXlUYWJsZTogZGF5VGFibGUsXG4gICAgICAgICAgICBidXNpbmVzc0hvdXJzOiBwcm9wcy5idXNpbmVzc0hvdXJzLFxuICAgICAgICAgICAgZGF0ZVNlbGVjdGlvbjogcHJvcHMuZGF0ZVNlbGVjdGlvbixcbiAgICAgICAgICAgIGV2ZW50U3RvcmU6IHByb3BzLmV2ZW50U3RvcmUsXG4gICAgICAgICAgICBldmVudFVpQmFzZXM6IHByb3BzLmV2ZW50VWlCYXNlcyxcbiAgICAgICAgICAgIGV2ZW50U2VsZWN0aW9uOiBwcm9wcy5ldmVudFNlbGVjdGlvbixcbiAgICAgICAgICAgIGV2ZW50RHJhZzogcHJvcHMuZXZlbnREcmFnLFxuICAgICAgICAgICAgZXZlbnRSZXNpemU6IHByb3BzLmV2ZW50UmVzaXplLFxuICAgICAgICAgICAgaXNSaWdpZDogdGhpcy5oYXNSaWdpZFJvd3MoKSxcbiAgICAgICAgICAgIG5leHREYXlUaHJlc2hvbGQ6IHRoaXMuY29udGV4dC5uZXh0RGF5VGhyZXNob2xkXG4gICAgICAgIH0sIGNvbnRleHQpO1xuICAgIH07XG4gICAgRGF5R3JpZFZpZXcucHJvdG90eXBlLl9yZW5kZXJTa2VsZXRvbiA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuX3JlbmRlclNrZWxldG9uLmNhbGwodGhpcywgY29udGV4dCk7XG4gICAgICAgIGlmIChjb250ZXh0Lm9wdGlvbnMuY29sdW1uSGVhZGVyKSB7XG4gICAgICAgICAgICB0aGlzLmhlYWRlciA9IG5ldyBEYXlIZWFkZXIodGhpcy5lbC5xdWVyeVNlbGVjdG9yKCcuZmMtaGVhZC1jb250YWluZXInKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zaW1wbGVEYXlHcmlkID0gbmV3IFNpbXBsZURheUdyaWQodGhpcy5kYXlHcmlkKTtcbiAgICB9O1xuICAgIERheUdyaWRWaWV3LnByb3RvdHlwZS5fdW5yZW5kZXJTa2VsZXRvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fdW5yZW5kZXJTa2VsZXRvbi5jYWxsKHRoaXMpO1xuICAgICAgICBpZiAodGhpcy5oZWFkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNpbXBsZURheUdyaWQuZGVzdHJveSgpO1xuICAgIH07XG4gICAgcmV0dXJuIERheUdyaWRWaWV3O1xufShBYnN0cmFjdERheUdyaWRWaWV3KSk7XG5mdW5jdGlvbiBidWlsZERheVRhYmxlKGRhdGVQcm9maWxlLCBkYXRlUHJvZmlsZUdlbmVyYXRvcikge1xuICAgIHZhciBkYXlTZXJpZXMgPSBuZXcgRGF5U2VyaWVzKGRhdGVQcm9maWxlLnJlbmRlclJhbmdlLCBkYXRlUHJvZmlsZUdlbmVyYXRvcik7XG4gICAgcmV0dXJuIG5ldyBEYXlUYWJsZShkYXlTZXJpZXMsIC95ZWFyfG1vbnRofHdlZWsvLnRlc3QoZGF0ZVByb2ZpbGUuY3VycmVudFJhbmdlVW5pdCkpO1xufVxuXG52YXIgbWFpbiA9IGNyZWF0ZVBsdWdpbih7XG4gICAgZGVmYXVsdFZpZXc6ICdkYXlHcmlkTW9udGgnLFxuICAgIHZpZXdzOiB7XG4gICAgICAgIGRheUdyaWQ6IERheUdyaWRWaWV3LFxuICAgICAgICBkYXlHcmlkRGF5OiB7XG4gICAgICAgICAgICB0eXBlOiAnZGF5R3JpZCcsXG4gICAgICAgICAgICBkdXJhdGlvbjogeyBkYXlzOiAxIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5R3JpZFdlZWs6IHtcbiAgICAgICAgICAgIHR5cGU6ICdkYXlHcmlkJyxcbiAgICAgICAgICAgIGR1cmF0aW9uOiB7IHdlZWtzOiAxIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5R3JpZE1vbnRoOiB7XG4gICAgICAgICAgICB0eXBlOiAnZGF5R3JpZCcsXG4gICAgICAgICAgICBkdXJhdGlvbjogeyBtb250aHM6IDEgfSxcbiAgICAgICAgICAgIG1vbnRoTW9kZTogdHJ1ZSxcbiAgICAgICAgICAgIGZpeGVkV2Vla0NvdW50OiB0cnVlXG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgbWFpbjtcbmV4cG9ydCB7IEFic3RyYWN0RGF5R3JpZFZpZXcsIERheUJnUm93LCBEYXlHcmlkLCBEYXlHcmlkU2xpY2VyLCBEYXlHcmlkVmlldywgU2ltcGxlRGF5R3JpZCwgYnVpbGREYXlUYWJsZSBhcyBidWlsZEJhc2ljRGF5VGFibGUgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@fullcalendar/daygrid/main.esm.js\n");

/***/ }),

/***/ "./node_modules/@fullcalendar/daygrid/main.js":
/*!****************************************************!*\
  !*** ./node_modules/@fullcalendar/daygrid/main.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("/*!\nFullCalendar Day Grid Plugin v4.4.2\nDocs & License: https://fullcalendar.io/\n(c) 2019 Adam Shaw\n*/\n\n(function (global, factory) {\n     true ? factory(exports, __webpack_require__(/*! @fullcalendar/core */ \"./node_modules/@fullcalendar/core/main.esm.js\")) :\n    0;\n}(this, function (exports, core) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation.\r\n\r\n    Permission to use, copy, modify, and/or distribute this software for any\r\n    purpose with or without fee is hereby granted.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n    PERFORMANCE OF THIS SOFTWARE.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\n\n    var DayGridDateProfileGenerator = /** @class */ (function (_super) {\n        __extends(DayGridDateProfileGenerator, _super);\n        function DayGridDateProfileGenerator() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        // Computes the date range that will be rendered.\n        DayGridDateProfileGenerator.prototype.buildRenderRange = function (currentRange, currentRangeUnit, isRangeAllDay) {\n            var dateEnv = this.dateEnv;\n            var renderRange = _super.prototype.buildRenderRange.call(this, currentRange, currentRangeUnit, isRangeAllDay);\n            var start = renderRange.start;\n            var end = renderRange.end;\n            var endOfWeek;\n            // year and month views should be aligned with weeks. this is already done for week\n            if (/^(year|month)$/.test(currentRangeUnit)) {\n                start = dateEnv.startOfWeek(start);\n                // make end-of-week if not already\n                endOfWeek = dateEnv.startOfWeek(end);\n                if (endOfWeek.valueOf() !== end.valueOf()) {\n                    end = core.addWeeks(endOfWeek, 1);\n                }\n            }\n            // ensure 6 weeks\n            if (this.options.monthMode &&\n                this.options.fixedWeekCount) {\n                var rowCnt = Math.ceil(// could be partial weeks due to hiddenDays\n                core.diffWeeks(start, end));\n                end = core.addWeeks(end, 6 - rowCnt);\n            }\n            return { start: start, end: end };\n        };\n        return DayGridDateProfileGenerator;\n    }(core.DateProfileGenerator));\n\n    /* A rectangular panel that is absolutely positioned over other content\n    ------------------------------------------------------------------------------------------------------------------------\n    Options:\n      - className (string)\n      - content (HTML string, element, or element array)\n      - parentEl\n      - top\n      - left\n      - right (the x coord of where the right edge should be. not a \"CSS\" right)\n      - autoHide (boolean)\n      - show (callback)\n      - hide (callback)\n    */\n    var Popover = /** @class */ (function () {\n        function Popover(options) {\n            var _this = this;\n            this.isHidden = true;\n            this.margin = 10; // the space required between the popover and the edges of the scroll container\n            // Triggered when the user clicks *anywhere* in the document, for the autoHide feature\n            this.documentMousedown = function (ev) {\n                // only hide the popover if the click happened outside the popover\n                if (_this.el && !_this.el.contains(ev.target)) {\n                    _this.hide();\n                }\n            };\n            this.options = options;\n        }\n        // Shows the popover on the specified position. Renders it if not already\n        Popover.prototype.show = function () {\n            if (this.isHidden) {\n                if (!this.el) {\n                    this.render();\n                }\n                this.el.style.display = '';\n                this.position();\n                this.isHidden = false;\n                this.trigger('show');\n            }\n        };\n        // Hides the popover, through CSS, but does not remove it from the DOM\n        Popover.prototype.hide = function () {\n            if (!this.isHidden) {\n                this.el.style.display = 'none';\n                this.isHidden = true;\n                this.trigger('hide');\n            }\n        };\n        // Creates `this.el` and renders content inside of it\n        Popover.prototype.render = function () {\n            var _this = this;\n            var options = this.options;\n            var el = this.el = core.createElement('div', {\n                className: 'fc-popover ' + (options.className || ''),\n                style: {\n                    top: '0',\n                    left: '0'\n                }\n            });\n            if (typeof options.content === 'function') {\n                options.content(el);\n            }\n            options.parentEl.appendChild(el);\n            // when a click happens on anything inside with a 'fc-close' className, hide the popover\n            core.listenBySelector(el, 'click', '.fc-close', function (ev) {\n                _this.hide();\n            });\n            if (options.autoHide) {\n                document.addEventListener('mousedown', this.documentMousedown);\n            }\n        };\n        // Hides and unregisters any handlers\n        Popover.prototype.destroy = function () {\n            this.hide();\n            if (this.el) {\n                core.removeElement(this.el);\n                this.el = null;\n            }\n            document.removeEventListener('mousedown', this.documentMousedown);\n        };\n        // Positions the popover optimally, using the top/left/right options\n        Popover.prototype.position = function () {\n            var options = this.options;\n            var el = this.el;\n            var elDims = el.getBoundingClientRect(); // only used for width,height\n            var origin = core.computeRect(el.offsetParent);\n            var clippingRect = core.computeClippingRect(options.parentEl);\n            var top; // the \"position\" (not \"offset\") values for the popover\n            var left; //\n            // compute top and left\n            top = options.top || 0;\n            if (options.left !== undefined) {\n                left = options.left;\n            }\n            else if (options.right !== undefined) {\n                left = options.right - elDims.width; // derive the left value from the right value\n            }\n            else {\n                left = 0;\n            }\n            // constrain to the view port. if constrained by two edges, give precedence to top/left\n            top = Math.min(top, clippingRect.bottom - elDims.height - this.margin);\n            top = Math.max(top, clippingRect.top + this.margin);\n            left = Math.min(left, clippingRect.right - elDims.width - this.margin);\n            left = Math.max(left, clippingRect.left + this.margin);\n            core.applyStyle(el, {\n                top: top - origin.top,\n                left: left - origin.left\n            });\n        };\n        // Triggers a callback. Calls a function in the option hash of the same name.\n        // Arguments beyond the first `name` are forwarded on.\n        // TODO: better code reuse for this. Repeat code\n        // can kill this???\n        Popover.prototype.trigger = function (name) {\n            if (this.options[name]) {\n                this.options[name].apply(this, Array.prototype.slice.call(arguments, 1));\n            }\n        };\n        return Popover;\n    }());\n\n    /* Event-rendering methods for the DayGrid class\n    ----------------------------------------------------------------------------------------------------------------------*/\n    // \"Simple\" is bad a name. has nothing to do with SimpleDayGrid\n    var SimpleDayGridEventRenderer = /** @class */ (function (_super) {\n        __extends(SimpleDayGridEventRenderer, _super);\n        function SimpleDayGridEventRenderer() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        // Builds the HTML to be used for the default element for an individual segment\n        SimpleDayGridEventRenderer.prototype.renderSegHtml = function (seg, mirrorInfo) {\n            var context = this.context;\n            var eventRange = seg.eventRange;\n            var eventDef = eventRange.def;\n            var eventUi = eventRange.ui;\n            var allDay = eventDef.allDay;\n            var isDraggable = core.computeEventDraggable(context, eventDef, eventUi);\n            var isResizableFromStart = allDay && seg.isStart && core.computeEventStartResizable(context, eventDef, eventUi);\n            var isResizableFromEnd = allDay && seg.isEnd && core.computeEventEndResizable(context, eventDef, eventUi);\n            var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd, mirrorInfo);\n            var skinCss = core.cssToStr(this.getSkinCss(eventUi));\n            var timeHtml = '';\n            var timeText;\n            var titleHtml;\n            classes.unshift('fc-day-grid-event', 'fc-h-event');\n            // Only display a timed events time if it is the starting segment\n            if (seg.isStart) {\n                timeText = this.getTimeText(eventRange);\n                if (timeText) {\n                    timeHtml = '<span class=\"fc-time\">' + core.htmlEscape(timeText) + '</span>';\n                }\n            }\n            titleHtml =\n                '<span class=\"fc-title\">' +\n                    (core.htmlEscape(eventDef.title || '') || '&nbsp;') + // we always want one line of height\n                    '</span>';\n            return '<a class=\"' + classes.join(' ') + '\"' +\n                (eventDef.url ?\n                    ' href=\"' + core.htmlEscape(eventDef.url) + '\"' :\n                    '') +\n                (skinCss ?\n                    ' style=\"' + skinCss + '\"' :\n                    '') +\n                '>' +\n                '<div class=\"fc-content\">' +\n                (context.options.dir === 'rtl' ?\n                    titleHtml + ' ' + timeHtml : // put a natural space in between\n                    timeHtml + ' ' + titleHtml //\n                ) +\n                '</div>' +\n                (isResizableFromStart ?\n                    '<div class=\"fc-resizer fc-start-resizer\"></div>' :\n                    '') +\n                (isResizableFromEnd ?\n                    '<div class=\"fc-resizer fc-end-resizer\"></div>' :\n                    '') +\n                '</a>';\n        };\n        // Computes a default event time formatting string if `eventTimeFormat` is not explicitly defined\n        SimpleDayGridEventRenderer.prototype.computeEventTimeFormat = function () {\n            return {\n                hour: 'numeric',\n                minute: '2-digit',\n                omitZeroMinute: true,\n                meridiem: 'narrow'\n            };\n        };\n        SimpleDayGridEventRenderer.prototype.computeDisplayEventEnd = function () {\n            return false; // TODO: somehow consider the originating DayGrid's column count\n        };\n        return SimpleDayGridEventRenderer;\n    }(core.FgEventRenderer));\n\n    /* Event-rendering methods for the DayGrid class\n    ----------------------------------------------------------------------------------------------------------------------*/\n    var DayGridEventRenderer = /** @class */ (function (_super) {\n        __extends(DayGridEventRenderer, _super);\n        function DayGridEventRenderer(dayGrid) {\n            var _this = _super.call(this) || this;\n            _this.dayGrid = dayGrid;\n            return _this;\n        }\n        // Renders the given foreground event segments onto the grid\n        DayGridEventRenderer.prototype.attachSegs = function (segs, mirrorInfo) {\n            var rowStructs = this.rowStructs = this.renderSegRows(segs);\n            // append to each row's content skeleton\n            this.dayGrid.rowEls.forEach(function (rowNode, i) {\n                rowNode.querySelector('.fc-content-skeleton > table').appendChild(rowStructs[i].tbodyEl);\n            });\n            // removes the \"more..\" events popover\n            if (!mirrorInfo) {\n                this.dayGrid.removeSegPopover();\n            }\n        };\n        // Unrenders all currently rendered foreground event segments\n        DayGridEventRenderer.prototype.detachSegs = function () {\n            var rowStructs = this.rowStructs || [];\n            var rowStruct;\n            while ((rowStruct = rowStructs.pop())) {\n                core.removeElement(rowStruct.tbodyEl);\n            }\n            this.rowStructs = null;\n        };\n        // Uses the given events array to generate <tbody> elements that should be appended to each row's content skeleton.\n        // Returns an array of rowStruct objects (see the bottom of `renderSegRow`).\n        // PRECONDITION: each segment shoud already have a rendered and assigned `.el`\n        DayGridEventRenderer.prototype.renderSegRows = function (segs) {\n            var rowStructs = [];\n            var segRows;\n            var row;\n            segRows = this.groupSegRows(segs); // group into nested arrays\n            // iterate each row of segment groupings\n            for (row = 0; row < segRows.length; row++) {\n                rowStructs.push(this.renderSegRow(row, segRows[row]));\n            }\n            return rowStructs;\n        };\n        // Given a row # and an array of segments all in the same row, render a <tbody> element, a skeleton that contains\n        // the segments. Returns object with a bunch of internal data about how the render was calculated.\n        // NOTE: modifies rowSegs\n        DayGridEventRenderer.prototype.renderSegRow = function (row, rowSegs) {\n            var isRtl = this.context.isRtl;\n            var dayGrid = this.dayGrid;\n            var colCnt = dayGrid.colCnt;\n            var segLevels = this.buildSegLevels(rowSegs); // group into sub-arrays of levels\n            var levelCnt = Math.max(1, segLevels.length); // ensure at least one level\n            var tbody = document.createElement('tbody');\n            var segMatrix = []; // lookup for which segments are rendered into which level+col cells\n            var cellMatrix = []; // lookup for all <td> elements of the level+col matrix\n            var loneCellMatrix = []; // lookup for <td> elements that only take up a single column\n            var i;\n            var levelSegs;\n            var col;\n            var tr;\n            var j;\n            var seg;\n            var td;\n            // populates empty cells from the current column (`col`) to `endCol`\n            function emptyCellsUntil(endCol) {\n                while (col < endCol) {\n                    // try to grab a cell from the level above and extend its rowspan. otherwise, create a fresh cell\n                    td = (loneCellMatrix[i - 1] || [])[col];\n                    if (td) {\n                        td.rowSpan = (td.rowSpan || 1) + 1;\n                    }\n                    else {\n                        td = document.createElement('td');\n                        tr.appendChild(td);\n                    }\n                    cellMatrix[i][col] = td;\n                    loneCellMatrix[i][col] = td;\n                    col++;\n                }\n            }\n            for (i = 0; i < levelCnt; i++) { // iterate through all levels\n                levelSegs = segLevels[i];\n                col = 0;\n                tr = document.createElement('tr');\n                segMatrix.push([]);\n                cellMatrix.push([]);\n                loneCellMatrix.push([]);\n                // levelCnt might be 1 even though there are no actual levels. protect against this.\n                // this single empty row is useful for styling.\n                if (levelSegs) {\n                    for (j = 0; j < levelSegs.length; j++) { // iterate through segments in level\n                        seg = levelSegs[j];\n                        var leftCol = isRtl ? (colCnt - 1 - seg.lastCol) : seg.firstCol;\n                        var rightCol = isRtl ? (colCnt - 1 - seg.firstCol) : seg.lastCol;\n                        emptyCellsUntil(leftCol);\n                        // create a container that occupies or more columns. append the event element.\n                        td = core.createElement('td', { className: 'fc-event-container' }, seg.el);\n                        if (leftCol !== rightCol) {\n                            td.colSpan = rightCol - leftCol + 1;\n                        }\n                        else { // a single-column segment\n                            loneCellMatrix[i][col] = td;\n                        }\n                        while (col <= rightCol) {\n                            cellMatrix[i][col] = td;\n                            segMatrix[i][col] = seg;\n                            col++;\n                        }\n                        tr.appendChild(td);\n                    }\n                }\n                emptyCellsUntil(colCnt); // finish off the row\n                var introHtml = dayGrid.renderProps.renderIntroHtml();\n                if (introHtml) {\n                    if (isRtl) {\n                        core.appendToElement(tr, introHtml);\n                    }\n                    else {\n                        core.prependToElement(tr, introHtml);\n                    }\n                }\n                tbody.appendChild(tr);\n            }\n            return {\n                row: row,\n                tbodyEl: tbody,\n                cellMatrix: cellMatrix,\n                segMatrix: segMatrix,\n                segLevels: segLevels,\n                segs: rowSegs\n            };\n        };\n        // Stacks a flat array of segments, which are all assumed to be in the same row, into subarrays of vertical levels.\n        // NOTE: modifies segs\n        DayGridEventRenderer.prototype.buildSegLevels = function (segs) {\n            var isRtl = this.context.isRtl;\n            var colCnt = this.dayGrid.colCnt;\n            var levels = [];\n            var i;\n            var seg;\n            var j;\n            // Give preference to elements with certain criteria, so they have\n            // a chance to be closer to the top.\n            segs = this.sortEventSegs(segs);\n            for (i = 0; i < segs.length; i++) {\n                seg = segs[i];\n                // loop through levels, starting with the topmost, until the segment doesn't collide with other segments\n                for (j = 0; j < levels.length; j++) {\n                    if (!isDaySegCollision(seg, levels[j])) {\n                        break;\n                    }\n                }\n                // `j` now holds the desired subrow index\n                seg.level = j;\n                seg.leftCol = isRtl ? (colCnt - 1 - seg.lastCol) : seg.firstCol; // for sorting only\n                seg.rightCol = isRtl ? (colCnt - 1 - seg.firstCol) : seg.lastCol // for sorting only\n                ;\n                (levels[j] || (levels[j] = [])).push(seg);\n            }\n            // order segments left-to-right. very important if calendar is RTL\n            for (j = 0; j < levels.length; j++) {\n                levels[j].sort(compareDaySegCols);\n            }\n            return levels;\n        };\n        // Given a flat array of segments, return an array of sub-arrays, grouped by each segment's row\n        DayGridEventRenderer.prototype.groupSegRows = function (segs) {\n            var segRows = [];\n            var i;\n            for (i = 0; i < this.dayGrid.rowCnt; i++) {\n                segRows.push([]);\n            }\n            for (i = 0; i < segs.length; i++) {\n                segRows[segs[i].row].push(segs[i]);\n            }\n            return segRows;\n        };\n        // Computes a default `displayEventEnd` value if one is not expliclty defined\n        DayGridEventRenderer.prototype.computeDisplayEventEnd = function () {\n            return this.dayGrid.colCnt === 1; // we'll likely have space if there's only one day\n        };\n        return DayGridEventRenderer;\n    }(SimpleDayGridEventRenderer));\n    // Computes whether two segments' columns collide. They are assumed to be in the same row.\n    function isDaySegCollision(seg, otherSegs) {\n        var i;\n        var otherSeg;\n        for (i = 0; i < otherSegs.length; i++) {\n            otherSeg = otherSegs[i];\n            if (otherSeg.firstCol <= seg.lastCol &&\n                otherSeg.lastCol >= seg.firstCol) {\n                return true;\n            }\n        }\n        return false;\n    }\n    // A cmp function for determining the leftmost event\n    function compareDaySegCols(a, b) {\n        return a.leftCol - b.leftCol;\n    }\n\n    var DayGridMirrorRenderer = /** @class */ (function (_super) {\n        __extends(DayGridMirrorRenderer, _super);\n        function DayGridMirrorRenderer() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        DayGridMirrorRenderer.prototype.attachSegs = function (segs, mirrorInfo) {\n            var sourceSeg = mirrorInfo.sourceSeg;\n            var rowStructs = this.rowStructs = this.renderSegRows(segs);\n            // inject each new event skeleton into each associated row\n            this.dayGrid.rowEls.forEach(function (rowNode, row) {\n                var skeletonEl = core.htmlToElement('<div class=\"fc-mirror-skeleton\"><table></table></div>'); // will be absolutely positioned\n                var skeletonTopEl;\n                var skeletonTop;\n                // If there is an original segment, match the top position. Otherwise, put it at the row's top level\n                if (sourceSeg && sourceSeg.row === row) {\n                    skeletonTopEl = sourceSeg.el;\n                }\n                else {\n                    skeletonTopEl = rowNode.querySelector('.fc-content-skeleton tbody');\n                    if (!skeletonTopEl) { // when no events\n                        skeletonTopEl = rowNode.querySelector('.fc-content-skeleton table');\n                    }\n                }\n                skeletonTop = skeletonTopEl.getBoundingClientRect().top -\n                    rowNode.getBoundingClientRect().top; // the offsetParent origin\n                skeletonEl.style.top = skeletonTop + 'px';\n                skeletonEl.querySelector('table').appendChild(rowStructs[row].tbodyEl);\n                rowNode.appendChild(skeletonEl);\n            });\n        };\n        return DayGridMirrorRenderer;\n    }(DayGridEventRenderer));\n\n    var EMPTY_CELL_HTML = '<td style=\"pointer-events:none\"></td>';\n    var DayGridFillRenderer = /** @class */ (function (_super) {\n        __extends(DayGridFillRenderer, _super);\n        function DayGridFillRenderer(dayGrid) {\n            var _this = _super.call(this) || this;\n            _this.fillSegTag = 'td'; // override the default tag name\n            _this.dayGrid = dayGrid;\n            return _this;\n        }\n        DayGridFillRenderer.prototype.renderSegs = function (type, context, segs) {\n            // don't render timed background events\n            if (type === 'bgEvent') {\n                segs = segs.filter(function (seg) {\n                    return seg.eventRange.def.allDay;\n                });\n            }\n            _super.prototype.renderSegs.call(this, type, context, segs);\n        };\n        DayGridFillRenderer.prototype.attachSegs = function (type, segs) {\n            var els = [];\n            var i;\n            var seg;\n            var skeletonEl;\n            for (i = 0; i < segs.length; i++) {\n                seg = segs[i];\n                skeletonEl = this.renderFillRow(type, seg);\n                this.dayGrid.rowEls[seg.row].appendChild(skeletonEl);\n                els.push(skeletonEl);\n            }\n            return els;\n        };\n        // Generates the HTML needed for one row of a fill. Requires the seg's el to be rendered.\n        DayGridFillRenderer.prototype.renderFillRow = function (type, seg) {\n            var dayGrid = this.dayGrid;\n            var isRtl = this.context.isRtl;\n            var colCnt = dayGrid.colCnt;\n            var leftCol = isRtl ? (colCnt - 1 - seg.lastCol) : seg.firstCol;\n            var rightCol = isRtl ? (colCnt - 1 - seg.firstCol) : seg.lastCol;\n            var startCol = leftCol;\n            var endCol = rightCol + 1;\n            var className;\n            var skeletonEl;\n            var trEl;\n            if (type === 'businessHours') {\n                className = 'bgevent';\n            }\n            else {\n                className = type.toLowerCase();\n            }\n            skeletonEl = core.htmlToElement('<div class=\"fc-' + className + '-skeleton\">' +\n                '<table><tr></tr></table>' +\n                '</div>');\n            trEl = skeletonEl.getElementsByTagName('tr')[0];\n            if (startCol > 0) {\n                core.appendToElement(trEl, \n                // will create (startCol + 1) td's\n                new Array(startCol + 1).join(EMPTY_CELL_HTML));\n            }\n            seg.el.colSpan = endCol - startCol;\n            trEl.appendChild(seg.el);\n            if (endCol < colCnt) {\n                core.appendToElement(trEl, \n                // will create (colCnt - endCol) td's\n                new Array(colCnt - endCol + 1).join(EMPTY_CELL_HTML));\n            }\n            var introHtml = dayGrid.renderProps.renderIntroHtml();\n            if (introHtml) {\n                if (isRtl) {\n                    core.appendToElement(trEl, introHtml);\n                }\n                else {\n                    core.prependToElement(trEl, introHtml);\n                }\n            }\n            return skeletonEl;\n        };\n        return DayGridFillRenderer;\n    }(core.FillRenderer));\n\n    var DayTile = /** @class */ (function (_super) {\n        __extends(DayTile, _super);\n        function DayTile(el) {\n            var _this = _super.call(this, el) || this;\n            var eventRenderer = _this.eventRenderer = new DayTileEventRenderer(_this);\n            var renderFrame = _this.renderFrame = core.memoizeRendering(_this._renderFrame);\n            _this.renderFgEvents = core.memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [renderFrame]);\n            _this.renderEventSelection = core.memoizeRendering(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);\n            _this.renderEventDrag = core.memoizeRendering(eventRenderer.hideByHash.bind(eventRenderer), eventRenderer.showByHash.bind(eventRenderer), [renderFrame]);\n            _this.renderEventResize = core.memoizeRendering(eventRenderer.hideByHash.bind(eventRenderer), eventRenderer.showByHash.bind(eventRenderer), [renderFrame]);\n            return _this;\n        }\n        DayTile.prototype.firstContext = function (context) {\n            context.calendar.registerInteractiveComponent(this, {\n                el: this.el,\n                useEventCenter: false\n            });\n        };\n        DayTile.prototype.render = function (props, context) {\n            this.renderFrame(props.date);\n            this.renderFgEvents(context, props.fgSegs);\n            this.renderEventSelection(props.eventSelection);\n            this.renderEventDrag(props.eventDragInstances);\n            this.renderEventResize(props.eventResizeInstances);\n        };\n        DayTile.prototype.destroy = function () {\n            _super.prototype.destroy.call(this);\n            this.renderFrame.unrender(); // should unrender everything else\n            this.context.calendar.unregisterInteractiveComponent(this);\n        };\n        DayTile.prototype._renderFrame = function (date) {\n            var _a = this.context, theme = _a.theme, dateEnv = _a.dateEnv, options = _a.options;\n            var title = dateEnv.format(date, core.createFormatter(options.dayPopoverFormat) // TODO: cache\n            );\n            this.el.innerHTML =\n                '<div class=\"fc-header ' + theme.getClass('popoverHeader') + '\">' +\n                    '<span class=\"fc-title\">' +\n                    core.htmlEscape(title) +\n                    '</span>' +\n                    '<span class=\"fc-close ' + theme.getIconClass('close') + '\"></span>' +\n                    '</div>' +\n                    '<div class=\"fc-body ' + theme.getClass('popoverContent') + '\">' +\n                    '<div class=\"fc-event-container\"></div>' +\n                    '</div>';\n            this.segContainerEl = this.el.querySelector('.fc-event-container');\n        };\n        DayTile.prototype.queryHit = function (positionLeft, positionTop, elWidth, elHeight) {\n            var date = this.props.date; // HACK\n            if (positionLeft < elWidth && positionTop < elHeight) {\n                return {\n                    component: this,\n                    dateSpan: {\n                        allDay: true,\n                        range: { start: date, end: core.addDays(date, 1) }\n                    },\n                    dayEl: this.el,\n                    rect: {\n                        left: 0,\n                        top: 0,\n                        right: elWidth,\n                        bottom: elHeight\n                    },\n                    layer: 1\n                };\n            }\n        };\n        return DayTile;\n    }(core.DateComponent));\n    var DayTileEventRenderer = /** @class */ (function (_super) {\n        __extends(DayTileEventRenderer, _super);\n        function DayTileEventRenderer(dayTile) {\n            var _this = _super.call(this) || this;\n            _this.dayTile = dayTile;\n            return _this;\n        }\n        DayTileEventRenderer.prototype.attachSegs = function (segs) {\n            for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n                var seg = segs_1[_i];\n                this.dayTile.segContainerEl.appendChild(seg.el);\n            }\n        };\n        DayTileEventRenderer.prototype.detachSegs = function (segs) {\n            for (var _i = 0, segs_2 = segs; _i < segs_2.length; _i++) {\n                var seg = segs_2[_i];\n                core.removeElement(seg.el);\n            }\n        };\n        return DayTileEventRenderer;\n    }(SimpleDayGridEventRenderer));\n\n    var DayBgRow = /** @class */ (function () {\n        function DayBgRow(context) {\n            this.context = context;\n        }\n        DayBgRow.prototype.renderHtml = function (props) {\n            var parts = [];\n            if (props.renderIntroHtml) {\n                parts.push(props.renderIntroHtml());\n            }\n            for (var _i = 0, _a = props.cells; _i < _a.length; _i++) {\n                var cell = _a[_i];\n                parts.push(renderCellHtml(cell.date, props.dateProfile, this.context, cell.htmlAttrs));\n            }\n            if (!props.cells.length) {\n                parts.push('<td class=\"fc-day ' + this.context.theme.getClass('widgetContent') + '\"></td>');\n            }\n            if (this.context.options.dir === 'rtl') {\n                parts.reverse();\n            }\n            return '<tr>' + parts.join('') + '</tr>';\n        };\n        return DayBgRow;\n    }());\n    function renderCellHtml(date, dateProfile, context, otherAttrs) {\n        var dateEnv = context.dateEnv, theme = context.theme;\n        var isDateValid = core.rangeContainsMarker(dateProfile.activeRange, date); // TODO: called too frequently. cache somehow.\n        var classes = core.getDayClasses(date, dateProfile, context);\n        classes.unshift('fc-day', theme.getClass('widgetContent'));\n        return '<td class=\"' + classes.join(' ') + '\"' +\n            (isDateValid ?\n                ' data-date=\"' + dateEnv.formatIso(date, { omitTime: true }) + '\"' :\n                '') +\n            (otherAttrs ?\n                ' ' + otherAttrs :\n                '') +\n            '></td>';\n    }\n\n    var DAY_NUM_FORMAT = core.createFormatter({ day: 'numeric' });\n    var WEEK_NUM_FORMAT = core.createFormatter({ week: 'numeric' });\n    var DayGrid = /** @class */ (function (_super) {\n        __extends(DayGrid, _super);\n        function DayGrid(el, renderProps) {\n            var _this = _super.call(this, el) || this;\n            _this.bottomCoordPadding = 0; // hack for extending the hit area for the last row of the coordinate grid\n            _this.isCellSizesDirty = false;\n            _this.renderProps = renderProps;\n            var eventRenderer = _this.eventRenderer = new DayGridEventRenderer(_this);\n            var fillRenderer = _this.fillRenderer = new DayGridFillRenderer(_this);\n            _this.mirrorRenderer = new DayGridMirrorRenderer(_this);\n            var renderCells = _this.renderCells = core.memoizeRendering(_this._renderCells, _this._unrenderCells);\n            _this.renderBusinessHours = core.memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'businessHours'), fillRenderer.unrender.bind(fillRenderer, 'businessHours'), [renderCells]);\n            _this.renderDateSelection = core.memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'highlight'), fillRenderer.unrender.bind(fillRenderer, 'highlight'), [renderCells]);\n            _this.renderBgEvents = core.memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'bgEvent'), fillRenderer.unrender.bind(fillRenderer, 'bgEvent'), [renderCells]);\n            _this.renderFgEvents = core.memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [renderCells]);\n            _this.renderEventSelection = core.memoizeRendering(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);\n            _this.renderEventDrag = core.memoizeRendering(_this._renderEventDrag, _this._unrenderEventDrag, [renderCells]);\n            _this.renderEventResize = core.memoizeRendering(_this._renderEventResize, _this._unrenderEventResize, [renderCells]);\n            return _this;\n        }\n        DayGrid.prototype.render = function (props, context) {\n            var cells = props.cells;\n            this.rowCnt = cells.length;\n            this.colCnt = cells[0].length;\n            this.renderCells(cells, props.isRigid);\n            this.renderBusinessHours(context, props.businessHourSegs);\n            this.renderDateSelection(context, props.dateSelectionSegs);\n            this.renderBgEvents(context, props.bgEventSegs);\n            this.renderFgEvents(context, props.fgEventSegs);\n            this.renderEventSelection(props.eventSelection);\n            this.renderEventDrag(props.eventDrag);\n            this.renderEventResize(props.eventResize);\n            if (this.segPopoverTile) {\n                this.updateSegPopoverTile();\n            }\n        };\n        DayGrid.prototype.destroy = function () {\n            _super.prototype.destroy.call(this);\n            this.renderCells.unrender(); // will unrender everything else\n        };\n        DayGrid.prototype.getCellRange = function (row, col) {\n            var start = this.props.cells[row][col].date;\n            var end = core.addDays(start, 1);\n            return { start: start, end: end };\n        };\n        DayGrid.prototype.updateSegPopoverTile = function (date, segs) {\n            var ownProps = this.props;\n            this.segPopoverTile.receiveProps({\n                date: date || this.segPopoverTile.props.date,\n                fgSegs: segs || this.segPopoverTile.props.fgSegs,\n                eventSelection: ownProps.eventSelection,\n                eventDragInstances: ownProps.eventDrag ? ownProps.eventDrag.affectedInstances : null,\n                eventResizeInstances: ownProps.eventResize ? ownProps.eventResize.affectedInstances : null\n            }, this.context);\n        };\n        /* Date Rendering\n        ------------------------------------------------------------------------------------------------------------------*/\n        DayGrid.prototype._renderCells = function (cells, isRigid) {\n            var _a = this.context, calendar = _a.calendar, view = _a.view, isRtl = _a.isRtl, dateEnv = _a.dateEnv;\n            var _b = this, rowCnt = _b.rowCnt, colCnt = _b.colCnt;\n            var html = '';\n            var row;\n            var col;\n            for (row = 0; row < rowCnt; row++) {\n                html += this.renderDayRowHtml(row, isRigid);\n            }\n            this.el.innerHTML = html;\n            this.rowEls = core.findElements(this.el, '.fc-row');\n            this.cellEls = core.findElements(this.el, '.fc-day, .fc-disabled-day');\n            if (isRtl) {\n                this.cellEls.reverse();\n            }\n            this.rowPositions = new core.PositionCache(this.el, this.rowEls, false, true // vertical\n            );\n            this.colPositions = new core.PositionCache(this.el, this.cellEls.slice(0, colCnt), // only the first row\n            true, false // horizontal\n            );\n            // trigger dayRender with each cell's element\n            for (row = 0; row < rowCnt; row++) {\n                for (col = 0; col < colCnt; col++) {\n                    calendar.publiclyTrigger('dayRender', [\n                        {\n                            date: dateEnv.toDate(cells[row][col].date),\n                            el: this.getCellEl(row, col),\n                            view: view\n                        }\n                    ]);\n                }\n            }\n            this.isCellSizesDirty = true;\n        };\n        DayGrid.prototype._unrenderCells = function () {\n            this.removeSegPopover();\n        };\n        // Generates the HTML for a single row, which is a div that wraps a table.\n        // `row` is the row number.\n        DayGrid.prototype.renderDayRowHtml = function (row, isRigid) {\n            var theme = this.context.theme;\n            var classes = ['fc-row', 'fc-week', theme.getClass('dayRow')];\n            if (isRigid) {\n                classes.push('fc-rigid');\n            }\n            var bgRow = new DayBgRow(this.context);\n            return '' +\n                '<div class=\"' + classes.join(' ') + '\">' +\n                '<div class=\"fc-bg\">' +\n                '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n                bgRow.renderHtml({\n                    cells: this.props.cells[row],\n                    dateProfile: this.props.dateProfile,\n                    renderIntroHtml: this.renderProps.renderBgIntroHtml\n                }) +\n                '</table>' +\n                '</div>' +\n                '<div class=\"fc-content-skeleton\">' +\n                '<table>' +\n                (this.getIsNumbersVisible() ?\n                    '<thead>' +\n                        this.renderNumberTrHtml(row) +\n                        '</thead>' :\n                    '') +\n                '</table>' +\n                '</div>' +\n                '</div>';\n        };\n        DayGrid.prototype.getIsNumbersVisible = function () {\n            return this.getIsDayNumbersVisible() ||\n                this.renderProps.cellWeekNumbersVisible ||\n                this.renderProps.colWeekNumbersVisible;\n        };\n        DayGrid.prototype.getIsDayNumbersVisible = function () {\n            return this.rowCnt > 1;\n        };\n        /* Grid Number Rendering\n        ------------------------------------------------------------------------------------------------------------------*/\n        DayGrid.prototype.renderNumberTrHtml = function (row) {\n            var isRtl = this.context.isRtl;\n            var intro = this.renderProps.renderNumberIntroHtml(row, this);\n            return '' +\n                '<tr>' +\n                (isRtl ? '' : intro) +\n                this.renderNumberCellsHtml(row) +\n                (isRtl ? intro : '') +\n                '</tr>';\n        };\n        DayGrid.prototype.renderNumberCellsHtml = function (row) {\n            var htmls = [];\n            var col;\n            var date;\n            for (col = 0; col < this.colCnt; col++) {\n                date = this.props.cells[row][col].date;\n                htmls.push(this.renderNumberCellHtml(date));\n            }\n            if (this.context.isRtl) {\n                htmls.reverse();\n            }\n            return htmls.join('');\n        };\n        // Generates the HTML for the <td>s of the \"number\" row in the DayGrid's content skeleton.\n        // The number row will only exist if either day numbers or week numbers are turned on.\n        DayGrid.prototype.renderNumberCellHtml = function (date) {\n            var _a = this.context, dateEnv = _a.dateEnv, options = _a.options;\n            var html = '';\n            var isDateValid = core.rangeContainsMarker(this.props.dateProfile.activeRange, date); // TODO: called too frequently. cache somehow.\n            var isDayNumberVisible = this.getIsDayNumbersVisible() && isDateValid;\n            var classes;\n            var weekCalcFirstDow;\n            if (!isDayNumberVisible && !this.renderProps.cellWeekNumbersVisible) {\n                // no numbers in day cell (week number must be along the side)\n                return '<td></td>'; //  will create an empty space above events :(\n            }\n            classes = core.getDayClasses(date, this.props.dateProfile, this.context);\n            classes.unshift('fc-day-top');\n            if (this.renderProps.cellWeekNumbersVisible) {\n                weekCalcFirstDow = dateEnv.weekDow;\n            }\n            html += '<td class=\"' + classes.join(' ') + '\"' +\n                (isDateValid ?\n                    ' data-date=\"' + dateEnv.formatIso(date, { omitTime: true }) + '\"' :\n                    '') +\n                '>';\n            if (this.renderProps.cellWeekNumbersVisible && (date.getUTCDay() === weekCalcFirstDow)) {\n                html += core.buildGotoAnchorHtml(options, dateEnv, { date: date, type: 'week' }, { 'class': 'fc-week-number' }, dateEnv.format(date, WEEK_NUM_FORMAT) // inner HTML\n                );\n            }\n            if (isDayNumberVisible) {\n                html += core.buildGotoAnchorHtml(options, dateEnv, date, { 'class': 'fc-day-number' }, dateEnv.format(date, DAY_NUM_FORMAT) // inner HTML\n                );\n            }\n            html += '</td>';\n            return html;\n        };\n        /* Sizing\n        ------------------------------------------------------------------------------------------------------------------*/\n        DayGrid.prototype.updateSize = function (isResize) {\n            var calendar = this.context.calendar;\n            var _a = this, fillRenderer = _a.fillRenderer, eventRenderer = _a.eventRenderer, mirrorRenderer = _a.mirrorRenderer;\n            if (isResize ||\n                this.isCellSizesDirty ||\n                calendar.isEventsUpdated // hack\n            ) {\n                this.buildPositionCaches();\n                this.isCellSizesDirty = false;\n            }\n            fillRenderer.computeSizes(isResize);\n            eventRenderer.computeSizes(isResize);\n            mirrorRenderer.computeSizes(isResize);\n            fillRenderer.assignSizes(isResize);\n            eventRenderer.assignSizes(isResize);\n            mirrorRenderer.assignSizes(isResize);\n        };\n        DayGrid.prototype.buildPositionCaches = function () {\n            this.buildColPositions();\n            this.buildRowPositions();\n        };\n        DayGrid.prototype.buildColPositions = function () {\n            this.colPositions.build();\n        };\n        DayGrid.prototype.buildRowPositions = function () {\n            this.rowPositions.build();\n            this.rowPositions.bottoms[this.rowCnt - 1] += this.bottomCoordPadding; // hack\n        };\n        /* Hit System\n        ------------------------------------------------------------------------------------------------------------------*/\n        DayGrid.prototype.positionToHit = function (leftPosition, topPosition) {\n            var _a = this, colPositions = _a.colPositions, rowPositions = _a.rowPositions;\n            var col = colPositions.leftToIndex(leftPosition);\n            var row = rowPositions.topToIndex(topPosition);\n            if (row != null && col != null) {\n                return {\n                    row: row,\n                    col: col,\n                    dateSpan: {\n                        range: this.getCellRange(row, col),\n                        allDay: true\n                    },\n                    dayEl: this.getCellEl(row, col),\n                    relativeRect: {\n                        left: colPositions.lefts[col],\n                        right: colPositions.rights[col],\n                        top: rowPositions.tops[row],\n                        bottom: rowPositions.bottoms[row]\n                    }\n                };\n            }\n        };\n        /* Cell System\n        ------------------------------------------------------------------------------------------------------------------*/\n        // FYI: the first column is the leftmost column, regardless of date\n        DayGrid.prototype.getCellEl = function (row, col) {\n            return this.cellEls[row * this.colCnt + col];\n        };\n        /* Event Drag Visualization\n        ------------------------------------------------------------------------------------------------------------------*/\n        DayGrid.prototype._renderEventDrag = function (state) {\n            if (state) {\n                this.eventRenderer.hideByHash(state.affectedInstances);\n                this.fillRenderer.renderSegs('highlight', this.context, state.segs);\n            }\n        };\n        DayGrid.prototype._unrenderEventDrag = function (state) {\n            if (state) {\n                this.eventRenderer.showByHash(state.affectedInstances);\n                this.fillRenderer.unrender('highlight', this.context);\n            }\n        };\n        /* Event Resize Visualization\n        ------------------------------------------------------------------------------------------------------------------*/\n        DayGrid.prototype._renderEventResize = function (state) {\n            if (state) {\n                this.eventRenderer.hideByHash(state.affectedInstances);\n                this.fillRenderer.renderSegs('highlight', this.context, state.segs);\n                this.mirrorRenderer.renderSegs(this.context, state.segs, { isResizing: true, sourceSeg: state.sourceSeg });\n            }\n        };\n        DayGrid.prototype._unrenderEventResize = function (state) {\n            if (state) {\n                this.eventRenderer.showByHash(state.affectedInstances);\n                this.fillRenderer.unrender('highlight', this.context);\n                this.mirrorRenderer.unrender(this.context, state.segs, { isResizing: true, sourceSeg: state.sourceSeg });\n            }\n        };\n        /* More+ Link Popover\n        ------------------------------------------------------------------------------------------------------------------*/\n        DayGrid.prototype.removeSegPopover = function () {\n            if (this.segPopover) {\n                this.segPopover.hide(); // in handler, will call segPopover's removeElement\n            }\n        };\n        // Limits the number of \"levels\" (vertically stacking layers of events) for each row of the grid.\n        // `levelLimit` can be false (don't limit), a number, or true (should be computed).\n        DayGrid.prototype.limitRows = function (levelLimit) {\n            var rowStructs = this.eventRenderer.rowStructs || [];\n            var row; // row #\n            var rowLevelLimit;\n            for (row = 0; row < rowStructs.length; row++) {\n                this.unlimitRow(row);\n                if (!levelLimit) {\n                    rowLevelLimit = false;\n                }\n                else if (typeof levelLimit === 'number') {\n                    rowLevelLimit = levelLimit;\n                }\n                else {\n                    rowLevelLimit = this.computeRowLevelLimit(row);\n                }\n                if (rowLevelLimit !== false) {\n                    this.limitRow(row, rowLevelLimit);\n                }\n            }\n        };\n        // Computes the number of levels a row will accomodate without going outside its bounds.\n        // Assumes the row is \"rigid\" (maintains a constant height regardless of what is inside).\n        // `row` is the row number.\n        DayGrid.prototype.computeRowLevelLimit = function (row) {\n            var rowEl = this.rowEls[row]; // the containing \"fake\" row div\n            var rowBottom = rowEl.getBoundingClientRect().bottom; // relative to viewport!\n            var trEls = core.findChildren(this.eventRenderer.rowStructs[row].tbodyEl);\n            var i;\n            var trEl;\n            // Reveal one level <tr> at a time and stop when we find one out of bounds\n            for (i = 0; i < trEls.length; i++) {\n                trEl = trEls[i];\n                trEl.classList.remove('fc-limited'); // reset to original state (reveal)\n                if (trEl.getBoundingClientRect().bottom > rowBottom) {\n                    return i;\n                }\n            }\n            return false; // should not limit at all\n        };\n        // Limits the given grid row to the maximum number of levels and injects \"more\" links if necessary.\n        // `row` is the row number.\n        // `levelLimit` is a number for the maximum (inclusive) number of levels allowed.\n        DayGrid.prototype.limitRow = function (row, levelLimit) {\n            var _this = this;\n            var colCnt = this.colCnt;\n            var isRtl = this.context.isRtl;\n            var rowStruct = this.eventRenderer.rowStructs[row];\n            var moreNodes = []; // array of \"more\" <a> links and <td> DOM nodes\n            var col = 0; // col #, left-to-right (not chronologically)\n            var levelSegs; // array of segment objects in the last allowable level, ordered left-to-right\n            var cellMatrix; // a matrix (by level, then column) of all <td> elements in the row\n            var limitedNodes; // array of temporarily hidden level <tr> and segment <td> DOM nodes\n            var i;\n            var seg;\n            var segsBelow; // array of segment objects below `seg` in the current `col`\n            var totalSegsBelow; // total number of segments below `seg` in any of the columns `seg` occupies\n            var colSegsBelow; // array of segment arrays, below seg, one for each column (offset from segs's first column)\n            var td;\n            var rowSpan;\n            var segMoreNodes; // array of \"more\" <td> cells that will stand-in for the current seg's cell\n            var j;\n            var moreTd;\n            var moreWrap;\n            var moreLink;\n            // Iterates through empty level cells and places \"more\" links inside if need be\n            var emptyCellsUntil = function (endCol) {\n                while (col < endCol) {\n                    segsBelow = _this.getCellSegs(row, col, levelLimit);\n                    if (segsBelow.length) {\n                        td = cellMatrix[levelLimit - 1][col];\n                        moreLink = _this.renderMoreLink(row, col, segsBelow);\n                        moreWrap = core.createElement('div', null, moreLink);\n                        td.appendChild(moreWrap);\n                        moreNodes.push(moreWrap);\n                    }\n                    col++;\n                }\n            };\n            if (levelLimit && levelLimit < rowStruct.segLevels.length) { // is it actually over the limit?\n                levelSegs = rowStruct.segLevels[levelLimit - 1];\n                cellMatrix = rowStruct.cellMatrix;\n                limitedNodes = core.findChildren(rowStruct.tbodyEl).slice(levelLimit); // get level <tr> elements past the limit\n                limitedNodes.forEach(function (node) {\n                    node.classList.add('fc-limited'); // hide elements and get a simple DOM-nodes array\n                });\n                // iterate though segments in the last allowable level\n                for (i = 0; i < levelSegs.length; i++) {\n                    seg = levelSegs[i];\n                    var leftCol = isRtl ? (colCnt - 1 - seg.lastCol) : seg.firstCol;\n                    var rightCol = isRtl ? (colCnt - 1 - seg.firstCol) : seg.lastCol;\n                    emptyCellsUntil(leftCol); // process empty cells before the segment\n                    // determine *all* segments below `seg` that occupy the same columns\n                    colSegsBelow = [];\n                    totalSegsBelow = 0;\n                    while (col <= rightCol) {\n                        segsBelow = this.getCellSegs(row, col, levelLimit);\n                        colSegsBelow.push(segsBelow);\n                        totalSegsBelow += segsBelow.length;\n                        col++;\n                    }\n                    if (totalSegsBelow) { // do we need to replace this segment with one or many \"more\" links?\n                        td = cellMatrix[levelLimit - 1][leftCol]; // the segment's parent cell\n                        rowSpan = td.rowSpan || 1;\n                        segMoreNodes = [];\n                        // make a replacement <td> for each column the segment occupies. will be one for each colspan\n                        for (j = 0; j < colSegsBelow.length; j++) {\n                            moreTd = core.createElement('td', { className: 'fc-more-cell', rowSpan: rowSpan });\n                            segsBelow = colSegsBelow[j];\n                            moreLink = this.renderMoreLink(row, leftCol + j, [seg].concat(segsBelow) // count seg as hidden too\n                            );\n                            moreWrap = core.createElement('div', null, moreLink);\n                            moreTd.appendChild(moreWrap);\n                            segMoreNodes.push(moreTd);\n                            moreNodes.push(moreTd);\n                        }\n                        td.classList.add('fc-limited');\n                        core.insertAfterElement(td, segMoreNodes);\n                        limitedNodes.push(td);\n                    }\n                }\n                emptyCellsUntil(this.colCnt); // finish off the level\n                rowStruct.moreEls = moreNodes; // for easy undoing later\n                rowStruct.limitedEls = limitedNodes; // for easy undoing later\n            }\n        };\n        // Reveals all levels and removes all \"more\"-related elements for a grid's row.\n        // `row` is a row number.\n        DayGrid.prototype.unlimitRow = function (row) {\n            var rowStruct = this.eventRenderer.rowStructs[row];\n            if (rowStruct.moreEls) {\n                rowStruct.moreEls.forEach(core.removeElement);\n                rowStruct.moreEls = null;\n            }\n            if (rowStruct.limitedEls) {\n                rowStruct.limitedEls.forEach(function (limitedEl) {\n                    limitedEl.classList.remove('fc-limited');\n                });\n                rowStruct.limitedEls = null;\n            }\n        };\n        // Renders an <a> element that represents hidden event element for a cell.\n        // Responsible for attaching click handler as well.\n        DayGrid.prototype.renderMoreLink = function (row, col, hiddenSegs) {\n            var _this = this;\n            var _a = this.context, calendar = _a.calendar, view = _a.view, dateEnv = _a.dateEnv, options = _a.options, isRtl = _a.isRtl;\n            var a = core.createElement('a', { className: 'fc-more' });\n            a.innerText = this.getMoreLinkText(hiddenSegs.length);\n            a.addEventListener('click', function (ev) {\n                var clickOption = options.eventLimitClick;\n                var _col = isRtl ? _this.colCnt - col - 1 : col; // HACK: props.cells has different dir system?\n                var date = _this.props.cells[row][_col].date;\n                var moreEl = ev.currentTarget;\n                var dayEl = _this.getCellEl(row, col);\n                var allSegs = _this.getCellSegs(row, col);\n                // rescope the segments to be within the cell's date\n                var reslicedAllSegs = _this.resliceDaySegs(allSegs, date);\n                var reslicedHiddenSegs = _this.resliceDaySegs(hiddenSegs, date);\n                if (typeof clickOption === 'function') {\n                    // the returned value can be an atomic option\n                    clickOption = calendar.publiclyTrigger('eventLimitClick', [\n                        {\n                            date: dateEnv.toDate(date),\n                            allDay: true,\n                            dayEl: dayEl,\n                            moreEl: moreEl,\n                            segs: reslicedAllSegs,\n                            hiddenSegs: reslicedHiddenSegs,\n                            jsEvent: ev,\n                            view: view\n                        }\n                    ]);\n                }\n                if (clickOption === 'popover') {\n                    _this.showSegPopover(row, col, moreEl, reslicedAllSegs);\n                }\n                else if (typeof clickOption === 'string') { // a view name\n                    calendar.zoomTo(date, clickOption);\n                }\n            });\n            return a;\n        };\n        // Reveals the popover that displays all events within a cell\n        DayGrid.prototype.showSegPopover = function (row, col, moreLink, segs) {\n            var _this = this;\n            var _a = this.context, calendar = _a.calendar, view = _a.view, theme = _a.theme, isRtl = _a.isRtl;\n            var _col = isRtl ? this.colCnt - col - 1 : col; // HACK: props.cells has different dir system?\n            var moreWrap = moreLink.parentNode; // the <div> wrapper around the <a>\n            var topEl; // the element we want to match the top coordinate of\n            var options;\n            if (this.rowCnt === 1) {\n                topEl = view.el; // will cause the popover to cover any sort of header\n            }\n            else {\n                topEl = this.rowEls[row]; // will align with top of row\n            }\n            options = {\n                className: 'fc-more-popover ' + theme.getClass('popover'),\n                parentEl: view.el,\n                top: core.computeRect(topEl).top,\n                autoHide: true,\n                content: function (el) {\n                    _this.segPopoverTile = new DayTile(el);\n                    _this.updateSegPopoverTile(_this.props.cells[row][_col].date, segs);\n                },\n                hide: function () {\n                    _this.segPopoverTile.destroy();\n                    _this.segPopoverTile = null;\n                    _this.segPopover.destroy();\n                    _this.segPopover = null;\n                }\n            };\n            // Determine horizontal coordinate.\n            // We use the moreWrap instead of the <td> to avoid border confusion.\n            if (isRtl) {\n                options.right = core.computeRect(moreWrap).right + 1; // +1 to be over cell border\n            }\n            else {\n                options.left = core.computeRect(moreWrap).left - 1; // -1 to be over cell border\n            }\n            this.segPopover = new Popover(options);\n            this.segPopover.show();\n            calendar.releaseAfterSizingTriggers(); // hack for eventPositioned\n        };\n        // Given the events within an array of segment objects, reslice them to be in a single day\n        DayGrid.prototype.resliceDaySegs = function (segs, dayDate) {\n            var dayStart = dayDate;\n            var dayEnd = core.addDays(dayStart, 1);\n            var dayRange = { start: dayStart, end: dayEnd };\n            var newSegs = [];\n            for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n                var seg = segs_1[_i];\n                var eventRange = seg.eventRange;\n                var origRange = eventRange.range;\n                var slicedRange = core.intersectRanges(origRange, dayRange);\n                if (slicedRange) {\n                    newSegs.push(__assign({}, seg, { eventRange: {\n                            def: eventRange.def,\n                            ui: __assign({}, eventRange.ui, { durationEditable: false }),\n                            instance: eventRange.instance,\n                            range: slicedRange\n                        }, isStart: seg.isStart && slicedRange.start.valueOf() === origRange.start.valueOf(), isEnd: seg.isEnd && slicedRange.end.valueOf() === origRange.end.valueOf() }));\n                }\n            }\n            return newSegs;\n        };\n        // Generates the text that should be inside a \"more\" link, given the number of events it represents\n        DayGrid.prototype.getMoreLinkText = function (num) {\n            var opt = this.context.options.eventLimitText;\n            if (typeof opt === 'function') {\n                return opt(num);\n            }\n            else {\n                return '+' + num + ' ' + opt;\n            }\n        };\n        // Returns segments within a given cell.\n        // If `startLevel` is specified, returns only events including and below that level. Otherwise returns all segs.\n        DayGrid.prototype.getCellSegs = function (row, col, startLevel) {\n            var segMatrix = this.eventRenderer.rowStructs[row].segMatrix;\n            var level = startLevel || 0;\n            var segs = [];\n            var seg;\n            while (level < segMatrix.length) {\n                seg = segMatrix[level][col];\n                if (seg) {\n                    segs.push(seg);\n                }\n                level++;\n            }\n            return segs;\n        };\n        return DayGrid;\n    }(core.DateComponent));\n\n    var WEEK_NUM_FORMAT$1 = core.createFormatter({ week: 'numeric' });\n    /* An abstract class for the daygrid views, as well as month view. Renders one or more rows of day cells.\n    ----------------------------------------------------------------------------------------------------------------------*/\n    // It is a manager for a DayGrid subcomponent, which does most of the heavy lifting.\n    // It is responsible for managing width/height.\n    var AbstractDayGridView = /** @class */ (function (_super) {\n        __extends(AbstractDayGridView, _super);\n        function AbstractDayGridView() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.processOptions = core.memoize(_this._processOptions);\n            _this.renderSkeleton = core.memoizeRendering(_this._renderSkeleton, _this._unrenderSkeleton);\n            /* Header Rendering\n            ------------------------------------------------------------------------------------------------------------------*/\n            // Generates the HTML that will go before the day-of week header cells\n            _this.renderHeadIntroHtml = function () {\n                var _a = _this.context, theme = _a.theme, options = _a.options;\n                if (_this.colWeekNumbersVisible) {\n                    return '' +\n                        '<th class=\"fc-week-number ' + theme.getClass('widgetHeader') + '\" ' + _this.weekNumberStyleAttr() + '>' +\n                        '<span>' + // needed for matchCellWidths\n                        core.htmlEscape(options.weekLabel) +\n                        '</span>' +\n                        '</th>';\n                }\n                return '';\n            };\n            /* Day Grid Rendering\n            ------------------------------------------------------------------------------------------------------------------*/\n            // Generates the HTML that will go before content-skeleton cells that display the day/week numbers\n            _this.renderDayGridNumberIntroHtml = function (row, dayGrid) {\n                var _a = _this.context, options = _a.options, dateEnv = _a.dateEnv;\n                var weekStart = dayGrid.props.cells[row][0].date;\n                if (_this.colWeekNumbersVisible) {\n                    return '' +\n                        '<td class=\"fc-week-number\" ' + _this.weekNumberStyleAttr() + '>' +\n                        core.buildGotoAnchorHtml(// aside from link, important for matchCellWidths\n                        options, dateEnv, { date: weekStart, type: 'week', forceOff: dayGrid.colCnt === 1 }, dateEnv.format(weekStart, WEEK_NUM_FORMAT$1) // inner HTML\n                        ) +\n                        '</td>';\n                }\n                return '';\n            };\n            // Generates the HTML that goes before the day bg cells for each day-row\n            _this.renderDayGridBgIntroHtml = function () {\n                var theme = _this.context.theme;\n                if (_this.colWeekNumbersVisible) {\n                    return '<td class=\"fc-week-number ' + theme.getClass('widgetContent') + '\" ' + _this.weekNumberStyleAttr() + '></td>';\n                }\n                return '';\n            };\n            // Generates the HTML that goes before every other type of row generated by DayGrid.\n            // Affects mirror-skeleton and highlight-skeleton rows.\n            _this.renderDayGridIntroHtml = function () {\n                if (_this.colWeekNumbersVisible) {\n                    return '<td class=\"fc-week-number\" ' + _this.weekNumberStyleAttr() + '></td>';\n                }\n                return '';\n            };\n            return _this;\n        }\n        AbstractDayGridView.prototype._processOptions = function (options) {\n            if (options.weekNumbers) {\n                if (options.weekNumbersWithinDays) {\n                    this.cellWeekNumbersVisible = true;\n                    this.colWeekNumbersVisible = false;\n                }\n                else {\n                    this.cellWeekNumbersVisible = false;\n                    this.colWeekNumbersVisible = true;\n                }\n            }\n            else {\n                this.colWeekNumbersVisible = false;\n                this.cellWeekNumbersVisible = false;\n            }\n        };\n        AbstractDayGridView.prototype.render = function (props, context) {\n            _super.prototype.render.call(this, props, context);\n            this.processOptions(context.options);\n            this.renderSkeleton(context);\n        };\n        AbstractDayGridView.prototype.destroy = function () {\n            _super.prototype.destroy.call(this);\n            this.renderSkeleton.unrender();\n        };\n        AbstractDayGridView.prototype._renderSkeleton = function (context) {\n            this.el.classList.add('fc-dayGrid-view');\n            this.el.innerHTML = this.renderSkeletonHtml();\n            this.scroller = new core.ScrollComponent('hidden', // overflow x\n            'auto' // overflow y\n            );\n            var dayGridContainerEl = this.scroller.el;\n            this.el.querySelector('.fc-body > tr > td').appendChild(dayGridContainerEl);\n            dayGridContainerEl.classList.add('fc-day-grid-container');\n            var dayGridEl = core.createElement('div', { className: 'fc-day-grid' });\n            dayGridContainerEl.appendChild(dayGridEl);\n            this.dayGrid = new DayGrid(dayGridEl, {\n                renderNumberIntroHtml: this.renderDayGridNumberIntroHtml,\n                renderBgIntroHtml: this.renderDayGridBgIntroHtml,\n                renderIntroHtml: this.renderDayGridIntroHtml,\n                colWeekNumbersVisible: this.colWeekNumbersVisible,\n                cellWeekNumbersVisible: this.cellWeekNumbersVisible\n            });\n        };\n        AbstractDayGridView.prototype._unrenderSkeleton = function () {\n            this.el.classList.remove('fc-dayGrid-view');\n            this.dayGrid.destroy();\n            this.scroller.destroy();\n        };\n        // Builds the HTML skeleton for the view.\n        // The day-grid component will render inside of a container defined by this HTML.\n        AbstractDayGridView.prototype.renderSkeletonHtml = function () {\n            var _a = this.context, theme = _a.theme, options = _a.options;\n            return '' +\n                '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n                (options.columnHeader ?\n                    '<thead class=\"fc-head\">' +\n                        '<tr>' +\n                        '<td class=\"fc-head-container ' + theme.getClass('widgetHeader') + '\">&nbsp;</td>' +\n                        '</tr>' +\n                        '</thead>' :\n                    '') +\n                '<tbody class=\"fc-body\">' +\n                '<tr>' +\n                '<td class=\"' + theme.getClass('widgetContent') + '\"></td>' +\n                '</tr>' +\n                '</tbody>' +\n                '</table>';\n        };\n        // Generates an HTML attribute string for setting the width of the week number column, if it is known\n        AbstractDayGridView.prototype.weekNumberStyleAttr = function () {\n            if (this.weekNumberWidth != null) {\n                return 'style=\"width:' + this.weekNumberWidth + 'px\"';\n            }\n            return '';\n        };\n        // Determines whether each row should have a constant height\n        AbstractDayGridView.prototype.hasRigidRows = function () {\n            var eventLimit = this.context.options.eventLimit;\n            return eventLimit && typeof eventLimit !== 'number';\n        };\n        /* Dimensions\n        ------------------------------------------------------------------------------------------------------------------*/\n        AbstractDayGridView.prototype.updateSize = function (isResize, viewHeight, isAuto) {\n            _super.prototype.updateSize.call(this, isResize, viewHeight, isAuto); // will call updateBaseSize. important that executes first\n            this.dayGrid.updateSize(isResize);\n        };\n        // Refreshes the horizontal dimensions of the view\n        AbstractDayGridView.prototype.updateBaseSize = function (isResize, viewHeight, isAuto) {\n            var dayGrid = this.dayGrid;\n            var eventLimit = this.context.options.eventLimit;\n            var headRowEl = this.header ? this.header.el : null; // HACK\n            var scrollerHeight;\n            var scrollbarWidths;\n            // hack to give the view some height prior to dayGrid's columns being rendered\n            // TODO: separate setting height from scroller VS dayGrid.\n            if (!dayGrid.rowEls) {\n                if (!isAuto) {\n                    scrollerHeight = this.computeScrollerHeight(viewHeight);\n                    this.scroller.setHeight(scrollerHeight);\n                }\n                return;\n            }\n            if (this.colWeekNumbersVisible) {\n                // Make sure all week number cells running down the side have the same width.\n                this.weekNumberWidth = core.matchCellWidths(core.findElements(this.el, '.fc-week-number'));\n            }\n            // reset all heights to be natural\n            this.scroller.clear();\n            if (headRowEl) {\n                core.uncompensateScroll(headRowEl);\n            }\n            dayGrid.removeSegPopover(); // kill the \"more\" popover if displayed\n            // is the event limit a constant level number?\n            if (eventLimit && typeof eventLimit === 'number') {\n                dayGrid.limitRows(eventLimit); // limit the levels first so the height can redistribute after\n            }\n            // distribute the height to the rows\n            // (viewHeight is a \"recommended\" value if isAuto)\n            scrollerHeight = this.computeScrollerHeight(viewHeight);\n            this.setGridHeight(scrollerHeight, isAuto);\n            // is the event limit dynamically calculated?\n            if (eventLimit && typeof eventLimit !== 'number') {\n                dayGrid.limitRows(eventLimit); // limit the levels after the grid's row heights have been set\n            }\n            if (!isAuto) { // should we force dimensions of the scroll container?\n                this.scroller.setHeight(scrollerHeight);\n                scrollbarWidths = this.scroller.getScrollbarWidths();\n                if (scrollbarWidths.left || scrollbarWidths.right) { // using scrollbars?\n                    if (headRowEl) {\n                        core.compensateScroll(headRowEl, scrollbarWidths);\n                    }\n                    // doing the scrollbar compensation might have created text overflow which created more height. redo\n                    scrollerHeight = this.computeScrollerHeight(viewHeight);\n                    this.scroller.setHeight(scrollerHeight);\n                }\n                // guarantees the same scrollbar widths\n                this.scroller.lockOverflow(scrollbarWidths);\n            }\n        };\n        // given a desired total height of the view, returns what the height of the scroller should be\n        AbstractDayGridView.prototype.computeScrollerHeight = function (viewHeight) {\n            return viewHeight -\n                core.subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller\n        };\n        // Sets the height of just the DayGrid component in this view\n        AbstractDayGridView.prototype.setGridHeight = function (height, isAuto) {\n            if (this.context.options.monthMode) {\n                // if auto, make the height of each row the height that it would be if there were 6 weeks\n                if (isAuto) {\n                    height *= this.dayGrid.rowCnt / 6;\n                }\n                core.distributeHeight(this.dayGrid.rowEls, height, !isAuto); // if auto, don't compensate for height-hogging rows\n            }\n            else {\n                if (isAuto) {\n                    core.undistributeHeight(this.dayGrid.rowEls); // let the rows be their natural height with no expanding\n                }\n                else {\n                    core.distributeHeight(this.dayGrid.rowEls, height, true); // true = compensate for height-hogging rows\n                }\n            }\n        };\n        /* Scroll\n        ------------------------------------------------------------------------------------------------------------------*/\n        AbstractDayGridView.prototype.computeDateScroll = function (duration) {\n            return { top: 0 };\n        };\n        AbstractDayGridView.prototype.queryDateScroll = function () {\n            return { top: this.scroller.getScrollTop() };\n        };\n        AbstractDayGridView.prototype.applyDateScroll = function (scroll) {\n            if (scroll.top !== undefined) {\n                this.scroller.setScrollTop(scroll.top);\n            }\n        };\n        return AbstractDayGridView;\n    }(core.View));\n    AbstractDayGridView.prototype.dateProfileGeneratorClass = DayGridDateProfileGenerator;\n\n    var SimpleDayGrid = /** @class */ (function (_super) {\n        __extends(SimpleDayGrid, _super);\n        function SimpleDayGrid(dayGrid) {\n            var _this = _super.call(this, dayGrid.el) || this;\n            _this.slicer = new DayGridSlicer();\n            _this.dayGrid = dayGrid;\n            return _this;\n        }\n        SimpleDayGrid.prototype.firstContext = function (context) {\n            context.calendar.registerInteractiveComponent(this, { el: this.dayGrid.el });\n        };\n        SimpleDayGrid.prototype.destroy = function () {\n            _super.prototype.destroy.call(this);\n            this.context.calendar.unregisterInteractiveComponent(this);\n        };\n        SimpleDayGrid.prototype.render = function (props, context) {\n            var dayGrid = this.dayGrid;\n            var dateProfile = props.dateProfile, dayTable = props.dayTable;\n            dayGrid.receiveContext(context); // hack because context is used in sliceProps\n            dayGrid.receiveProps(__assign({}, this.slicer.sliceProps(props, dateProfile, props.nextDayThreshold, context.calendar, dayGrid, dayTable), { dateProfile: dateProfile, cells: dayTable.cells, isRigid: props.isRigid }), context);\n        };\n        SimpleDayGrid.prototype.buildPositionCaches = function () {\n            this.dayGrid.buildPositionCaches();\n        };\n        SimpleDayGrid.prototype.queryHit = function (positionLeft, positionTop) {\n            var rawHit = this.dayGrid.positionToHit(positionLeft, positionTop);\n            if (rawHit) {\n                return {\n                    component: this.dayGrid,\n                    dateSpan: rawHit.dateSpan,\n                    dayEl: rawHit.dayEl,\n                    rect: {\n                        left: rawHit.relativeRect.left,\n                        right: rawHit.relativeRect.right,\n                        top: rawHit.relativeRect.top,\n                        bottom: rawHit.relativeRect.bottom\n                    },\n                    layer: 0\n                };\n            }\n        };\n        return SimpleDayGrid;\n    }(core.DateComponent));\n    var DayGridSlicer = /** @class */ (function (_super) {\n        __extends(DayGridSlicer, _super);\n        function DayGridSlicer() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        DayGridSlicer.prototype.sliceRange = function (dateRange, dayTable) {\n            return dayTable.sliceRange(dateRange);\n        };\n        return DayGridSlicer;\n    }(core.Slicer));\n\n    var DayGridView = /** @class */ (function (_super) {\n        __extends(DayGridView, _super);\n        function DayGridView() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.buildDayTable = core.memoize(buildDayTable);\n            return _this;\n        }\n        DayGridView.prototype.render = function (props, context) {\n            _super.prototype.render.call(this, props, context); // will call _renderSkeleton/_unrenderSkeleton\n            var dateProfile = this.props.dateProfile;\n            var dayTable = this.dayTable =\n                this.buildDayTable(dateProfile, props.dateProfileGenerator);\n            if (this.header) {\n                this.header.receiveProps({\n                    dateProfile: dateProfile,\n                    dates: dayTable.headerDates,\n                    datesRepDistinctDays: dayTable.rowCnt === 1,\n                    renderIntroHtml: this.renderHeadIntroHtml\n                }, context);\n            }\n            this.simpleDayGrid.receiveProps({\n                dateProfile: dateProfile,\n                dayTable: dayTable,\n                businessHours: props.businessHours,\n                dateSelection: props.dateSelection,\n                eventStore: props.eventStore,\n                eventUiBases: props.eventUiBases,\n                eventSelection: props.eventSelection,\n                eventDrag: props.eventDrag,\n                eventResize: props.eventResize,\n                isRigid: this.hasRigidRows(),\n                nextDayThreshold: this.context.nextDayThreshold\n            }, context);\n        };\n        DayGridView.prototype._renderSkeleton = function (context) {\n            _super.prototype._renderSkeleton.call(this, context);\n            if (context.options.columnHeader) {\n                this.header = new core.DayHeader(this.el.querySelector('.fc-head-container'));\n            }\n            this.simpleDayGrid = new SimpleDayGrid(this.dayGrid);\n        };\n        DayGridView.prototype._unrenderSkeleton = function () {\n            _super.prototype._unrenderSkeleton.call(this);\n            if (this.header) {\n                this.header.destroy();\n            }\n            this.simpleDayGrid.destroy();\n        };\n        return DayGridView;\n    }(AbstractDayGridView));\n    function buildDayTable(dateProfile, dateProfileGenerator) {\n        var daySeries = new core.DaySeries(dateProfile.renderRange, dateProfileGenerator);\n        return new core.DayTable(daySeries, /year|month|week/.test(dateProfile.currentRangeUnit));\n    }\n\n    var main = core.createPlugin({\n        defaultView: 'dayGridMonth',\n        views: {\n            dayGrid: DayGridView,\n            dayGridDay: {\n                type: 'dayGrid',\n                duration: { days: 1 }\n            },\n            dayGridWeek: {\n                type: 'dayGrid',\n                duration: { weeks: 1 }\n            },\n            dayGridMonth: {\n                type: 'dayGrid',\n                duration: { months: 1 },\n                monthMode: true,\n                fixedWeekCount: true\n            }\n        }\n    });\n\n    exports.AbstractDayGridView = AbstractDayGridView;\n    exports.DayBgRow = DayBgRow;\n    exports.DayGrid = DayGrid;\n    exports.DayGridSlicer = DayGridSlicer;\n    exports.DayGridView = DayGridView;\n    exports.SimpleDayGrid = SimpleDayGrid;\n    exports.buildBasicDayTable = buildDayTable;\n    exports.default = main;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@fullcalendar/daygrid/main.js\n");

/***/ }),

/***/ "./node_modules/@fullcalendar/google-calendar/main.js":
/*!************************************************************!*\
  !*** ./node_modules/@fullcalendar/google-calendar/main.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("/*!\nFullCalendar Google Calendar Plugin v4.4.2\nDocs & License: https://fullcalendar.io/\n(c) 2019 Adam Shaw\n*/\n\n(function (global, factory) {\n     true ? factory(exports, __webpack_require__(/*! @fullcalendar/core */ \"./node_modules/@fullcalendar/core/main.esm.js\")) :\n    0;\n}(this, function (exports, core) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation.\r\n\r\n    Permission to use, copy, modify, and/or distribute this software for any\r\n    purpose with or without fee is hereby granted.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n    PERFORMANCE OF THIS SOFTWARE.\r\n    ***************************************************************************** */\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\n\n    // TODO: expose somehow\n    var API_BASE = 'https://www.googleapis.com/calendar/v3/calendars';\n    var STANDARD_PROPS = {\n        url: String,\n        googleCalendarApiKey: String,\n        googleCalendarId: String,\n        googleCalendarApiBase: String,\n        data: null\n    };\n    var eventSourceDef = {\n        parseMeta: function (raw) {\n            if (typeof raw === 'string') {\n                raw = { url: raw };\n            }\n            if (typeof raw === 'object') {\n                var standardProps = core.refineProps(raw, STANDARD_PROPS);\n                if (!standardProps.googleCalendarId && standardProps.url) {\n                    standardProps.googleCalendarId = parseGoogleCalendarId(standardProps.url);\n                }\n                delete standardProps.url;\n                if (standardProps.googleCalendarId) {\n                    return standardProps;\n                }\n            }\n            return null;\n        },\n        fetch: function (arg, onSuccess, onFailure) {\n            var calendar = arg.calendar;\n            var meta = arg.eventSource.meta;\n            var apiKey = meta.googleCalendarApiKey || calendar.opt('googleCalendarApiKey');\n            if (!apiKey) {\n                onFailure({\n                    message: 'Specify a googleCalendarApiKey. See http://fullcalendar.io/docs/google_calendar/'\n                });\n            }\n            else {\n                var url = buildUrl(meta);\n                var requestParams_1 = buildRequestParams(arg.range, apiKey, meta.data, calendar.dateEnv);\n                core.requestJson('GET', url, requestParams_1, function (body, xhr) {\n                    if (body.error) {\n                        onFailure({\n                            message: 'Google Calendar API: ' + body.error.message,\n                            errors: body.error.errors,\n                            xhr: xhr\n                        });\n                    }\n                    else {\n                        onSuccess({\n                            rawEvents: gcalItemsToRawEventDefs(body.items, requestParams_1.timeZone),\n                            xhr: xhr\n                        });\n                    }\n                }, function (message, xhr) {\n                    onFailure({ message: message, xhr: xhr });\n                });\n            }\n        }\n    };\n    function parseGoogleCalendarId(url) {\n        var match;\n        // detect if the ID was specified as a single string.\n        // will match calendars like \"asdf1234@calendar.google.com\" in addition to person email calendars.\n        if (/^[^\\/]+@([^\\/\\.]+\\.)*(google|googlemail|gmail)\\.com$/.test(url)) {\n            return url;\n        }\n        else if ((match = /^https:\\/\\/www.googleapis.com\\/calendar\\/v3\\/calendars\\/([^\\/]*)/.exec(url)) ||\n            (match = /^https?:\\/\\/www.google.com\\/calendar\\/feeds\\/([^\\/]*)/.exec(url))) {\n            return decodeURIComponent(match[1]);\n        }\n    }\n    function buildUrl(meta) {\n        var apiBase = meta.googleCalendarApiBase;\n        if (!apiBase) {\n            apiBase = API_BASE;\n        }\n        return apiBase + '/' + encodeURIComponent(meta.googleCalendarId) + '/events';\n    }\n    function buildRequestParams(range, apiKey, extraParams, dateEnv) {\n        var params;\n        var startStr;\n        var endStr;\n        if (dateEnv.canComputeOffset) {\n            // strings will naturally have offsets, which GCal needs\n            startStr = dateEnv.formatIso(range.start);\n            endStr = dateEnv.formatIso(range.end);\n        }\n        else {\n            // when timezone isn't known, we don't know what the UTC offset should be, so ask for +/- 1 day\n            // from the UTC day-start to guarantee we're getting all the events\n            // (start/end will be UTC-coerced dates, so toISOString is okay)\n            startStr = core.addDays(range.start, -1).toISOString();\n            endStr = core.addDays(range.end, 1).toISOString();\n        }\n        params = __assign({}, (extraParams || {}), { key: apiKey, timeMin: startStr, timeMax: endStr, singleEvents: true, maxResults: 9999 });\n        if (dateEnv.timeZone !== 'local') {\n            params.timeZone = dateEnv.timeZone;\n        }\n        return params;\n    }\n    function gcalItemsToRawEventDefs(items, gcalTimezone) {\n        return items.map(function (item) {\n            return gcalItemToRawEventDef(item, gcalTimezone);\n        });\n    }\n    function gcalItemToRawEventDef(item, gcalTimezone) {\n        var url = item.htmlLink || null;\n        // make the URLs for each event show times in the correct timezone\n        if (url && gcalTimezone) {\n            url = injectQsComponent(url, 'ctz=' + gcalTimezone);\n        }\n        return {\n            id: item.id,\n            title: item.summary,\n            start: item.start.dateTime || item.start.date,\n            end: item.end.dateTime || item.end.date,\n            url: url,\n            location: item.location,\n            description: item.description\n        };\n    }\n    // Injects a string like \"arg=value\" into the querystring of a URL\n    // TODO: move to a general util file?\n    function injectQsComponent(url, component) {\n        // inject it after the querystring but before the fragment\n        return url.replace(/(\\?.*?)?(#|$)/, function (whole, qs, hash) {\n            return (qs ? qs + '&' : '?') + component + hash;\n        });\n    }\n    var main = core.createPlugin({\n        eventSourceDefs: [eventSourceDef]\n    });\n\n    exports.default = main;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@fullcalendar/google-calendar/main.js\n");

/***/ }),

/***/ "./node_modules/@fullcalendar/interaction/main.js":
/*!********************************************************!*\
  !*** ./node_modules/@fullcalendar/interaction/main.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("/*!\nFullCalendar Interaction Plugin v4.4.2\nDocs & License: https://fullcalendar.io/\n(c) 2019 Adam Shaw\n*/\n\n(function (global, factory) {\n     true ? factory(exports, __webpack_require__(/*! @fullcalendar/core */ \"./node_modules/@fullcalendar/core/main.esm.js\")) :\n    0;\n}(this, function (exports, core) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation.\r\n\r\n    Permission to use, copy, modify, and/or distribute this software for any\r\n    purpose with or without fee is hereby granted.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n    PERFORMANCE OF THIS SOFTWARE.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\n\n    core.config.touchMouseIgnoreWait = 500;\n    var ignoreMouseDepth = 0;\n    var listenerCnt = 0;\n    var isWindowTouchMoveCancelled = false;\n    /*\n    Uses a \"pointer\" abstraction, which monitors UI events for both mouse and touch.\n    Tracks when the pointer \"drags\" on a certain element, meaning down+move+up.\n\n    Also, tracks if there was touch-scrolling.\n    Also, can prevent touch-scrolling from happening.\n    Also, can fire pointermove events when scrolling happens underneath, even when no real pointer movement.\n\n    emits:\n    - pointerdown\n    - pointermove\n    - pointerup\n    */\n    var PointerDragging = /** @class */ (function () {\n        function PointerDragging(containerEl) {\n            var _this = this;\n            this.subjectEl = null;\n            this.downEl = null;\n            // options that can be directly assigned by caller\n            this.selector = ''; // will cause subjectEl in all emitted events to be this element\n            this.handleSelector = '';\n            this.shouldIgnoreMove = false;\n            this.shouldWatchScroll = true; // for simulating pointermove on scroll\n            // internal states\n            this.isDragging = false;\n            this.isTouchDragging = false;\n            this.wasTouchScroll = false;\n            // Mouse\n            // ----------------------------------------------------------------------------------------------------\n            this.handleMouseDown = function (ev) {\n                if (!_this.shouldIgnoreMouse() &&\n                    isPrimaryMouseButton(ev) &&\n                    _this.tryStart(ev)) {\n                    var pev = _this.createEventFromMouse(ev, true);\n                    _this.emitter.trigger('pointerdown', pev);\n                    _this.initScrollWatch(pev);\n                    if (!_this.shouldIgnoreMove) {\n                        document.addEventListener('mousemove', _this.handleMouseMove);\n                    }\n                    document.addEventListener('mouseup', _this.handleMouseUp);\n                }\n            };\n            this.handleMouseMove = function (ev) {\n                var pev = _this.createEventFromMouse(ev);\n                _this.recordCoords(pev);\n                _this.emitter.trigger('pointermove', pev);\n            };\n            this.handleMouseUp = function (ev) {\n                document.removeEventListener('mousemove', _this.handleMouseMove);\n                document.removeEventListener('mouseup', _this.handleMouseUp);\n                _this.emitter.trigger('pointerup', _this.createEventFromMouse(ev));\n                _this.cleanup(); // call last so that pointerup has access to props\n            };\n            // Touch\n            // ----------------------------------------------------------------------------------------------------\n            this.handleTouchStart = function (ev) {\n                if (_this.tryStart(ev)) {\n                    _this.isTouchDragging = true;\n                    var pev = _this.createEventFromTouch(ev, true);\n                    _this.emitter.trigger('pointerdown', pev);\n                    _this.initScrollWatch(pev);\n                    // unlike mouse, need to attach to target, not document\n                    // https://stackoverflow.com/a/45760014\n                    var target = ev.target;\n                    if (!_this.shouldIgnoreMove) {\n                        target.addEventListener('touchmove', _this.handleTouchMove);\n                    }\n                    target.addEventListener('touchend', _this.handleTouchEnd);\n                    target.addEventListener('touchcancel', _this.handleTouchEnd); // treat it as a touch end\n                    // attach a handler to get called when ANY scroll action happens on the page.\n                    // this was impossible to do with normal on/off because 'scroll' doesn't bubble.\n                    // http://stackoverflow.com/a/32954565/96342\n                    window.addEventListener('scroll', _this.handleTouchScroll, true // useCapture\n                    );\n                }\n            };\n            this.handleTouchMove = function (ev) {\n                var pev = _this.createEventFromTouch(ev);\n                _this.recordCoords(pev);\n                _this.emitter.trigger('pointermove', pev);\n            };\n            this.handleTouchEnd = function (ev) {\n                if (_this.isDragging) { // done to guard against touchend followed by touchcancel\n                    var target = ev.target;\n                    target.removeEventListener('touchmove', _this.handleTouchMove);\n                    target.removeEventListener('touchend', _this.handleTouchEnd);\n                    target.removeEventListener('touchcancel', _this.handleTouchEnd);\n                    window.removeEventListener('scroll', _this.handleTouchScroll, true); // useCaptured=true\n                    _this.emitter.trigger('pointerup', _this.createEventFromTouch(ev));\n                    _this.cleanup(); // call last so that pointerup has access to props\n                    _this.isTouchDragging = false;\n                    startIgnoringMouse();\n                }\n            };\n            this.handleTouchScroll = function () {\n                _this.wasTouchScroll = true;\n            };\n            this.handleScroll = function (ev) {\n                if (!_this.shouldIgnoreMove) {\n                    var pageX = (window.pageXOffset - _this.prevScrollX) + _this.prevPageX;\n                    var pageY = (window.pageYOffset - _this.prevScrollY) + _this.prevPageY;\n                    _this.emitter.trigger('pointermove', {\n                        origEvent: ev,\n                        isTouch: _this.isTouchDragging,\n                        subjectEl: _this.subjectEl,\n                        pageX: pageX,\n                        pageY: pageY,\n                        deltaX: pageX - _this.origPageX,\n                        deltaY: pageY - _this.origPageY\n                    });\n                }\n            };\n            this.containerEl = containerEl;\n            this.emitter = new core.EmitterMixin();\n            containerEl.addEventListener('mousedown', this.handleMouseDown);\n            containerEl.addEventListener('touchstart', this.handleTouchStart, { passive: true });\n            listenerCreated();\n        }\n        PointerDragging.prototype.destroy = function () {\n            this.containerEl.removeEventListener('mousedown', this.handleMouseDown);\n            this.containerEl.removeEventListener('touchstart', this.handleTouchStart, { passive: true });\n            listenerDestroyed();\n        };\n        PointerDragging.prototype.tryStart = function (ev) {\n            var subjectEl = this.querySubjectEl(ev);\n            var downEl = ev.target;\n            if (subjectEl &&\n                (!this.handleSelector || core.elementClosest(downEl, this.handleSelector))) {\n                this.subjectEl = subjectEl;\n                this.downEl = downEl;\n                this.isDragging = true; // do this first so cancelTouchScroll will work\n                this.wasTouchScroll = false;\n                return true;\n            }\n            return false;\n        };\n        PointerDragging.prototype.cleanup = function () {\n            isWindowTouchMoveCancelled = false;\n            this.isDragging = false;\n            this.subjectEl = null;\n            this.downEl = null;\n            // keep wasTouchScroll around for later access\n            this.destroyScrollWatch();\n        };\n        PointerDragging.prototype.querySubjectEl = function (ev) {\n            if (this.selector) {\n                return core.elementClosest(ev.target, this.selector);\n            }\n            else {\n                return this.containerEl;\n            }\n        };\n        PointerDragging.prototype.shouldIgnoreMouse = function () {\n            return ignoreMouseDepth || this.isTouchDragging;\n        };\n        // can be called by user of this class, to cancel touch-based scrolling for the current drag\n        PointerDragging.prototype.cancelTouchScroll = function () {\n            if (this.isDragging) {\n                isWindowTouchMoveCancelled = true;\n            }\n        };\n        // Scrolling that simulates pointermoves\n        // ----------------------------------------------------------------------------------------------------\n        PointerDragging.prototype.initScrollWatch = function (ev) {\n            if (this.shouldWatchScroll) {\n                this.recordCoords(ev);\n                window.addEventListener('scroll', this.handleScroll, true); // useCapture=true\n            }\n        };\n        PointerDragging.prototype.recordCoords = function (ev) {\n            if (this.shouldWatchScroll) {\n                this.prevPageX = ev.pageX;\n                this.prevPageY = ev.pageY;\n                this.prevScrollX = window.pageXOffset;\n                this.prevScrollY = window.pageYOffset;\n            }\n        };\n        PointerDragging.prototype.destroyScrollWatch = function () {\n            if (this.shouldWatchScroll) {\n                window.removeEventListener('scroll', this.handleScroll, true); // useCaptured=true\n            }\n        };\n        // Event Normalization\n        // ----------------------------------------------------------------------------------------------------\n        PointerDragging.prototype.createEventFromMouse = function (ev, isFirst) {\n            var deltaX = 0;\n            var deltaY = 0;\n            // TODO: repeat code\n            if (isFirst) {\n                this.origPageX = ev.pageX;\n                this.origPageY = ev.pageY;\n            }\n            else {\n                deltaX = ev.pageX - this.origPageX;\n                deltaY = ev.pageY - this.origPageY;\n            }\n            return {\n                origEvent: ev,\n                isTouch: false,\n                subjectEl: this.subjectEl,\n                pageX: ev.pageX,\n                pageY: ev.pageY,\n                deltaX: deltaX,\n                deltaY: deltaY\n            };\n        };\n        PointerDragging.prototype.createEventFromTouch = function (ev, isFirst) {\n            var touches = ev.touches;\n            var pageX;\n            var pageY;\n            var deltaX = 0;\n            var deltaY = 0;\n            // if touch coords available, prefer,\n            // because FF would give bad ev.pageX ev.pageY\n            if (touches && touches.length) {\n                pageX = touches[0].pageX;\n                pageY = touches[0].pageY;\n            }\n            else {\n                pageX = ev.pageX;\n                pageY = ev.pageY;\n            }\n            // TODO: repeat code\n            if (isFirst) {\n                this.origPageX = pageX;\n                this.origPageY = pageY;\n            }\n            else {\n                deltaX = pageX - this.origPageX;\n                deltaY = pageY - this.origPageY;\n            }\n            return {\n                origEvent: ev,\n                isTouch: true,\n                subjectEl: this.subjectEl,\n                pageX: pageX,\n                pageY: pageY,\n                deltaX: deltaX,\n                deltaY: deltaY\n            };\n        };\n        return PointerDragging;\n    }());\n    // Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)\n    function isPrimaryMouseButton(ev) {\n        return ev.button === 0 && !ev.ctrlKey;\n    }\n    // Ignoring fake mouse events generated by touch\n    // ----------------------------------------------------------------------------------------------------\n    function startIgnoringMouse() {\n        ignoreMouseDepth++;\n        setTimeout(function () {\n            ignoreMouseDepth--;\n        }, core.config.touchMouseIgnoreWait);\n    }\n    // We want to attach touchmove as early as possible for Safari\n    // ----------------------------------------------------------------------------------------------------\n    function listenerCreated() {\n        if (!(listenerCnt++)) {\n            window.addEventListener('touchmove', onWindowTouchMove, { passive: false });\n        }\n    }\n    function listenerDestroyed() {\n        if (!(--listenerCnt)) {\n            window.removeEventListener('touchmove', onWindowTouchMove, { passive: false });\n        }\n    }\n    function onWindowTouchMove(ev) {\n        if (isWindowTouchMoveCancelled) {\n            ev.preventDefault();\n        }\n    }\n\n    /*\n    An effect in which an element follows the movement of a pointer across the screen.\n    The moving element is a clone of some other element.\n    Must call start + handleMove + stop.\n    */\n    var ElementMirror = /** @class */ (function () {\n        function ElementMirror() {\n            this.isVisible = false; // must be explicitly enabled\n            this.sourceEl = null;\n            this.mirrorEl = null;\n            this.sourceElRect = null; // screen coords relative to viewport\n            // options that can be set directly by caller\n            this.parentNode = document.body;\n            this.zIndex = 9999;\n            this.revertDuration = 0;\n        }\n        ElementMirror.prototype.start = function (sourceEl, pageX, pageY) {\n            this.sourceEl = sourceEl;\n            this.sourceElRect = this.sourceEl.getBoundingClientRect();\n            this.origScreenX = pageX - window.pageXOffset;\n            this.origScreenY = pageY - window.pageYOffset;\n            this.deltaX = 0;\n            this.deltaY = 0;\n            this.updateElPosition();\n        };\n        ElementMirror.prototype.handleMove = function (pageX, pageY) {\n            this.deltaX = (pageX - window.pageXOffset) - this.origScreenX;\n            this.deltaY = (pageY - window.pageYOffset) - this.origScreenY;\n            this.updateElPosition();\n        };\n        // can be called before start\n        ElementMirror.prototype.setIsVisible = function (bool) {\n            if (bool) {\n                if (!this.isVisible) {\n                    if (this.mirrorEl) {\n                        this.mirrorEl.style.display = '';\n                    }\n                    this.isVisible = bool; // needs to happen before updateElPosition\n                    this.updateElPosition(); // because was not updating the position while invisible\n                }\n            }\n            else {\n                if (this.isVisible) {\n                    if (this.mirrorEl) {\n                        this.mirrorEl.style.display = 'none';\n                    }\n                    this.isVisible = bool;\n                }\n            }\n        };\n        // always async\n        ElementMirror.prototype.stop = function (needsRevertAnimation, callback) {\n            var _this = this;\n            var done = function () {\n                _this.cleanup();\n                callback();\n            };\n            if (needsRevertAnimation &&\n                this.mirrorEl &&\n                this.isVisible &&\n                this.revertDuration && // if 0, transition won't work\n                (this.deltaX || this.deltaY) // if same coords, transition won't work\n            ) {\n                this.doRevertAnimation(done, this.revertDuration);\n            }\n            else {\n                setTimeout(done, 0);\n            }\n        };\n        ElementMirror.prototype.doRevertAnimation = function (callback, revertDuration) {\n            var mirrorEl = this.mirrorEl;\n            var finalSourceElRect = this.sourceEl.getBoundingClientRect(); // because autoscrolling might have happened\n            mirrorEl.style.transition =\n                'top ' + revertDuration + 'ms,' +\n                    'left ' + revertDuration + 'ms';\n            core.applyStyle(mirrorEl, {\n                left: finalSourceElRect.left,\n                top: finalSourceElRect.top\n            });\n            core.whenTransitionDone(mirrorEl, function () {\n                mirrorEl.style.transition = '';\n                callback();\n            });\n        };\n        ElementMirror.prototype.cleanup = function () {\n            if (this.mirrorEl) {\n                core.removeElement(this.mirrorEl);\n                this.mirrorEl = null;\n            }\n            this.sourceEl = null;\n        };\n        ElementMirror.prototype.updateElPosition = function () {\n            if (this.sourceEl && this.isVisible) {\n                core.applyStyle(this.getMirrorEl(), {\n                    left: this.sourceElRect.left + this.deltaX,\n                    top: this.sourceElRect.top + this.deltaY\n                });\n            }\n        };\n        ElementMirror.prototype.getMirrorEl = function () {\n            var sourceElRect = this.sourceElRect;\n            var mirrorEl = this.mirrorEl;\n            if (!mirrorEl) {\n                mirrorEl = this.mirrorEl = this.sourceEl.cloneNode(true); // cloneChildren=true\n                // we don't want long taps or any mouse interaction causing selection/menus.\n                // would use preventSelection(), but that prevents selectstart, causing problems.\n                mirrorEl.classList.add('fc-unselectable');\n                mirrorEl.classList.add('fc-dragging');\n                core.applyStyle(mirrorEl, {\n                    position: 'fixed',\n                    zIndex: this.zIndex,\n                    visibility: '',\n                    boxSizing: 'border-box',\n                    width: sourceElRect.right - sourceElRect.left,\n                    height: sourceElRect.bottom - sourceElRect.top,\n                    right: 'auto',\n                    bottom: 'auto',\n                    margin: 0\n                });\n                this.parentNode.appendChild(mirrorEl);\n            }\n            return mirrorEl;\n        };\n        return ElementMirror;\n    }());\n\n    /*\n    Is a cache for a given element's scroll information (all the info that ScrollController stores)\n    in addition the \"client rectangle\" of the element.. the area within the scrollbars.\n\n    The cache can be in one of two modes:\n    - doesListening:false - ignores when the container is scrolled by someone else\n    - doesListening:true - watch for scrolling and update the cache\n    */\n    var ScrollGeomCache = /** @class */ (function (_super) {\n        __extends(ScrollGeomCache, _super);\n        function ScrollGeomCache(scrollController, doesListening) {\n            var _this = _super.call(this) || this;\n            _this.handleScroll = function () {\n                _this.scrollTop = _this.scrollController.getScrollTop();\n                _this.scrollLeft = _this.scrollController.getScrollLeft();\n                _this.handleScrollChange();\n            };\n            _this.scrollController = scrollController;\n            _this.doesListening = doesListening;\n            _this.scrollTop = _this.origScrollTop = scrollController.getScrollTop();\n            _this.scrollLeft = _this.origScrollLeft = scrollController.getScrollLeft();\n            _this.scrollWidth = scrollController.getScrollWidth();\n            _this.scrollHeight = scrollController.getScrollHeight();\n            _this.clientWidth = scrollController.getClientWidth();\n            _this.clientHeight = scrollController.getClientHeight();\n            _this.clientRect = _this.computeClientRect(); // do last in case it needs cached values\n            if (_this.doesListening) {\n                _this.getEventTarget().addEventListener('scroll', _this.handleScroll);\n            }\n            return _this;\n        }\n        ScrollGeomCache.prototype.destroy = function () {\n            if (this.doesListening) {\n                this.getEventTarget().removeEventListener('scroll', this.handleScroll);\n            }\n        };\n        ScrollGeomCache.prototype.getScrollTop = function () {\n            return this.scrollTop;\n        };\n        ScrollGeomCache.prototype.getScrollLeft = function () {\n            return this.scrollLeft;\n        };\n        ScrollGeomCache.prototype.setScrollTop = function (top) {\n            this.scrollController.setScrollTop(top);\n            if (!this.doesListening) {\n                // we are not relying on the element to normalize out-of-bounds scroll values\n                // so we need to sanitize ourselves\n                this.scrollTop = Math.max(Math.min(top, this.getMaxScrollTop()), 0);\n                this.handleScrollChange();\n            }\n        };\n        ScrollGeomCache.prototype.setScrollLeft = function (top) {\n            this.scrollController.setScrollLeft(top);\n            if (!this.doesListening) {\n                // we are not relying on the element to normalize out-of-bounds scroll values\n                // so we need to sanitize ourselves\n                this.scrollLeft = Math.max(Math.min(top, this.getMaxScrollLeft()), 0);\n                this.handleScrollChange();\n            }\n        };\n        ScrollGeomCache.prototype.getClientWidth = function () {\n            return this.clientWidth;\n        };\n        ScrollGeomCache.prototype.getClientHeight = function () {\n            return this.clientHeight;\n        };\n        ScrollGeomCache.prototype.getScrollWidth = function () {\n            return this.scrollWidth;\n        };\n        ScrollGeomCache.prototype.getScrollHeight = function () {\n            return this.scrollHeight;\n        };\n        ScrollGeomCache.prototype.handleScrollChange = function () {\n        };\n        return ScrollGeomCache;\n    }(core.ScrollController));\n    var ElementScrollGeomCache = /** @class */ (function (_super) {\n        __extends(ElementScrollGeomCache, _super);\n        function ElementScrollGeomCache(el, doesListening) {\n            return _super.call(this, new core.ElementScrollController(el), doesListening) || this;\n        }\n        ElementScrollGeomCache.prototype.getEventTarget = function () {\n            return this.scrollController.el;\n        };\n        ElementScrollGeomCache.prototype.computeClientRect = function () {\n            return core.computeInnerRect(this.scrollController.el);\n        };\n        return ElementScrollGeomCache;\n    }(ScrollGeomCache));\n    var WindowScrollGeomCache = /** @class */ (function (_super) {\n        __extends(WindowScrollGeomCache, _super);\n        function WindowScrollGeomCache(doesListening) {\n            return _super.call(this, new core.WindowScrollController(), doesListening) || this;\n        }\n        WindowScrollGeomCache.prototype.getEventTarget = function () {\n            return window;\n        };\n        WindowScrollGeomCache.prototype.computeClientRect = function () {\n            return {\n                left: this.scrollLeft,\n                right: this.scrollLeft + this.clientWidth,\n                top: this.scrollTop,\n                bottom: this.scrollTop + this.clientHeight\n            };\n        };\n        // the window is the only scroll object that changes it's rectangle relative\n        // to the document's topleft as it scrolls\n        WindowScrollGeomCache.prototype.handleScrollChange = function () {\n            this.clientRect = this.computeClientRect();\n        };\n        return WindowScrollGeomCache;\n    }(ScrollGeomCache));\n\n    // If available we are using native \"performance\" API instead of \"Date\"\n    // Read more about it on MDN:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Performance\n    var getTime = typeof performance === 'function' ? performance.now : Date.now;\n    /*\n    For a pointer interaction, automatically scrolls certain scroll containers when the pointer\n    approaches the edge.\n\n    The caller must call start + handleMove + stop.\n    */\n    var AutoScroller = /** @class */ (function () {\n        function AutoScroller() {\n            var _this = this;\n            // options that can be set by caller\n            this.isEnabled = true;\n            this.scrollQuery = [window, '.fc-scroller'];\n            this.edgeThreshold = 50; // pixels\n            this.maxVelocity = 300; // pixels per second\n            // internal state\n            this.pointerScreenX = null;\n            this.pointerScreenY = null;\n            this.isAnimating = false;\n            this.scrollCaches = null;\n            // protect against the initial pointerdown being too close to an edge and starting the scroll\n            this.everMovedUp = false;\n            this.everMovedDown = false;\n            this.everMovedLeft = false;\n            this.everMovedRight = false;\n            this.animate = function () {\n                if (_this.isAnimating) { // wasn't cancelled between animation calls\n                    var edge = _this.computeBestEdge(_this.pointerScreenX + window.pageXOffset, _this.pointerScreenY + window.pageYOffset);\n                    if (edge) {\n                        var now = getTime();\n                        _this.handleSide(edge, (now - _this.msSinceRequest) / 1000);\n                        _this.requestAnimation(now);\n                    }\n                    else {\n                        _this.isAnimating = false; // will stop animation\n                    }\n                }\n            };\n        }\n        AutoScroller.prototype.start = function (pageX, pageY) {\n            if (this.isEnabled) {\n                this.scrollCaches = this.buildCaches();\n                this.pointerScreenX = null;\n                this.pointerScreenY = null;\n                this.everMovedUp = false;\n                this.everMovedDown = false;\n                this.everMovedLeft = false;\n                this.everMovedRight = false;\n                this.handleMove(pageX, pageY);\n            }\n        };\n        AutoScroller.prototype.handleMove = function (pageX, pageY) {\n            if (this.isEnabled) {\n                var pointerScreenX = pageX - window.pageXOffset;\n                var pointerScreenY = pageY - window.pageYOffset;\n                var yDelta = this.pointerScreenY === null ? 0 : pointerScreenY - this.pointerScreenY;\n                var xDelta = this.pointerScreenX === null ? 0 : pointerScreenX - this.pointerScreenX;\n                if (yDelta < 0) {\n                    this.everMovedUp = true;\n                }\n                else if (yDelta > 0) {\n                    this.everMovedDown = true;\n                }\n                if (xDelta < 0) {\n                    this.everMovedLeft = true;\n                }\n                else if (xDelta > 0) {\n                    this.everMovedRight = true;\n                }\n                this.pointerScreenX = pointerScreenX;\n                this.pointerScreenY = pointerScreenY;\n                if (!this.isAnimating) {\n                    this.isAnimating = true;\n                    this.requestAnimation(getTime());\n                }\n            }\n        };\n        AutoScroller.prototype.stop = function () {\n            if (this.isEnabled) {\n                this.isAnimating = false; // will stop animation\n                for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {\n                    var scrollCache = _a[_i];\n                    scrollCache.destroy();\n                }\n                this.scrollCaches = null;\n            }\n        };\n        AutoScroller.prototype.requestAnimation = function (now) {\n            this.msSinceRequest = now;\n            requestAnimationFrame(this.animate);\n        };\n        AutoScroller.prototype.handleSide = function (edge, seconds) {\n            var scrollCache = edge.scrollCache;\n            var edgeThreshold = this.edgeThreshold;\n            var invDistance = edgeThreshold - edge.distance;\n            var velocity = // the closer to the edge, the faster we scroll\n             (invDistance * invDistance) / (edgeThreshold * edgeThreshold) * // quadratic\n                this.maxVelocity * seconds;\n            var sign = 1;\n            switch (edge.name) {\n                case 'left':\n                    sign = -1;\n                // falls through\n                case 'right':\n                    scrollCache.setScrollLeft(scrollCache.getScrollLeft() + velocity * sign);\n                    break;\n                case 'top':\n                    sign = -1;\n                // falls through\n                case 'bottom':\n                    scrollCache.setScrollTop(scrollCache.getScrollTop() + velocity * sign);\n                    break;\n            }\n        };\n        // left/top are relative to document topleft\n        AutoScroller.prototype.computeBestEdge = function (left, top) {\n            var edgeThreshold = this.edgeThreshold;\n            var bestSide = null;\n            for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {\n                var scrollCache = _a[_i];\n                var rect = scrollCache.clientRect;\n                var leftDist = left - rect.left;\n                var rightDist = rect.right - left;\n                var topDist = top - rect.top;\n                var bottomDist = rect.bottom - top;\n                // completely within the rect?\n                if (leftDist >= 0 && rightDist >= 0 && topDist >= 0 && bottomDist >= 0) {\n                    if (topDist <= edgeThreshold && this.everMovedUp && scrollCache.canScrollUp() &&\n                        (!bestSide || bestSide.distance > topDist)) {\n                        bestSide = { scrollCache: scrollCache, name: 'top', distance: topDist };\n                    }\n                    if (bottomDist <= edgeThreshold && this.everMovedDown && scrollCache.canScrollDown() &&\n                        (!bestSide || bestSide.distance > bottomDist)) {\n                        bestSide = { scrollCache: scrollCache, name: 'bottom', distance: bottomDist };\n                    }\n                    if (leftDist <= edgeThreshold && this.everMovedLeft && scrollCache.canScrollLeft() &&\n                        (!bestSide || bestSide.distance > leftDist)) {\n                        bestSide = { scrollCache: scrollCache, name: 'left', distance: leftDist };\n                    }\n                    if (rightDist <= edgeThreshold && this.everMovedRight && scrollCache.canScrollRight() &&\n                        (!bestSide || bestSide.distance > rightDist)) {\n                        bestSide = { scrollCache: scrollCache, name: 'right', distance: rightDist };\n                    }\n                }\n            }\n            return bestSide;\n        };\n        AutoScroller.prototype.buildCaches = function () {\n            return this.queryScrollEls().map(function (el) {\n                if (el === window) {\n                    return new WindowScrollGeomCache(false); // false = don't listen to user-generated scrolls\n                }\n                else {\n                    return new ElementScrollGeomCache(el, false); // false = don't listen to user-generated scrolls\n                }\n            });\n        };\n        AutoScroller.prototype.queryScrollEls = function () {\n            var els = [];\n            for (var _i = 0, _a = this.scrollQuery; _i < _a.length; _i++) {\n                var query = _a[_i];\n                if (typeof query === 'object') {\n                    els.push(query);\n                }\n                else {\n                    els.push.apply(els, Array.prototype.slice.call(document.querySelectorAll(query)));\n                }\n            }\n            return els;\n        };\n        return AutoScroller;\n    }());\n\n    /*\n    Monitors dragging on an element. Has a number of high-level features:\n    - minimum distance required before dragging\n    - minimum wait time (\"delay\") before dragging\n    - a mirror element that follows the pointer\n    */\n    var FeaturefulElementDragging = /** @class */ (function (_super) {\n        __extends(FeaturefulElementDragging, _super);\n        function FeaturefulElementDragging(containerEl) {\n            var _this = _super.call(this, containerEl) || this;\n            // options that can be directly set by caller\n            // the caller can also set the PointerDragging's options as well\n            _this.delay = null;\n            _this.minDistance = 0;\n            _this.touchScrollAllowed = true; // prevents drag from starting and blocks scrolling during drag\n            _this.mirrorNeedsRevert = false;\n            _this.isInteracting = false; // is the user validly moving the pointer? lasts until pointerup\n            _this.isDragging = false; // is it INTENTFULLY dragging? lasts until after revert animation\n            _this.isDelayEnded = false;\n            _this.isDistanceSurpassed = false;\n            _this.delayTimeoutId = null;\n            _this.onPointerDown = function (ev) {\n                if (!_this.isDragging) { // so new drag doesn't happen while revert animation is going\n                    _this.isInteracting = true;\n                    _this.isDelayEnded = false;\n                    _this.isDistanceSurpassed = false;\n                    core.preventSelection(document.body);\n                    core.preventContextMenu(document.body);\n                    // prevent links from being visited if there's an eventual drag.\n                    // also prevents selection in older browsers (maybe?).\n                    // not necessary for touch, besides, browser would complain about passiveness.\n                    if (!ev.isTouch) {\n                        ev.origEvent.preventDefault();\n                    }\n                    _this.emitter.trigger('pointerdown', ev);\n                    if (!_this.pointer.shouldIgnoreMove) {\n                        // actions related to initiating dragstart+dragmove+dragend...\n                        _this.mirror.setIsVisible(false); // reset. caller must set-visible\n                        _this.mirror.start(ev.subjectEl, ev.pageX, ev.pageY); // must happen on first pointer down\n                        _this.startDelay(ev);\n                        if (!_this.minDistance) {\n                            _this.handleDistanceSurpassed(ev);\n                        }\n                    }\n                }\n            };\n            _this.onPointerMove = function (ev) {\n                if (_this.isInteracting) { // if false, still waiting for previous drag's revert\n                    _this.emitter.trigger('pointermove', ev);\n                    if (!_this.isDistanceSurpassed) {\n                        var minDistance = _this.minDistance;\n                        var distanceSq = void 0; // current distance from the origin, squared\n                        var deltaX = ev.deltaX, deltaY = ev.deltaY;\n                        distanceSq = deltaX * deltaX + deltaY * deltaY;\n                        if (distanceSq >= minDistance * minDistance) { // use pythagorean theorem\n                            _this.handleDistanceSurpassed(ev);\n                        }\n                    }\n                    if (_this.isDragging) {\n                        // a real pointer move? (not one simulated by scrolling)\n                        if (ev.origEvent.type !== 'scroll') {\n                            _this.mirror.handleMove(ev.pageX, ev.pageY);\n                            _this.autoScroller.handleMove(ev.pageX, ev.pageY);\n                        }\n                        _this.emitter.trigger('dragmove', ev);\n                    }\n                }\n            };\n            _this.onPointerUp = function (ev) {\n                if (_this.isInteracting) { // if false, still waiting for previous drag's revert\n                    _this.isInteracting = false;\n                    core.allowSelection(document.body);\n                    core.allowContextMenu(document.body);\n                    _this.emitter.trigger('pointerup', ev); // can potentially set mirrorNeedsRevert\n                    if (_this.isDragging) {\n                        _this.autoScroller.stop();\n                        _this.tryStopDrag(ev); // which will stop the mirror\n                    }\n                    if (_this.delayTimeoutId) {\n                        clearTimeout(_this.delayTimeoutId);\n                        _this.delayTimeoutId = null;\n                    }\n                }\n            };\n            var pointer = _this.pointer = new PointerDragging(containerEl);\n            pointer.emitter.on('pointerdown', _this.onPointerDown);\n            pointer.emitter.on('pointermove', _this.onPointerMove);\n            pointer.emitter.on('pointerup', _this.onPointerUp);\n            _this.mirror = new ElementMirror();\n            _this.autoScroller = new AutoScroller();\n            return _this;\n        }\n        FeaturefulElementDragging.prototype.destroy = function () {\n            this.pointer.destroy();\n        };\n        FeaturefulElementDragging.prototype.startDelay = function (ev) {\n            var _this = this;\n            if (typeof this.delay === 'number') {\n                this.delayTimeoutId = setTimeout(function () {\n                    _this.delayTimeoutId = null;\n                    _this.handleDelayEnd(ev);\n                }, this.delay); // not assignable to number!\n            }\n            else {\n                this.handleDelayEnd(ev);\n            }\n        };\n        FeaturefulElementDragging.prototype.handleDelayEnd = function (ev) {\n            this.isDelayEnded = true;\n            this.tryStartDrag(ev);\n        };\n        FeaturefulElementDragging.prototype.handleDistanceSurpassed = function (ev) {\n            this.isDistanceSurpassed = true;\n            this.tryStartDrag(ev);\n        };\n        FeaturefulElementDragging.prototype.tryStartDrag = function (ev) {\n            if (this.isDelayEnded && this.isDistanceSurpassed) {\n                if (!this.pointer.wasTouchScroll || this.touchScrollAllowed) {\n                    this.isDragging = true;\n                    this.mirrorNeedsRevert = false;\n                    this.autoScroller.start(ev.pageX, ev.pageY);\n                    this.emitter.trigger('dragstart', ev);\n                    if (this.touchScrollAllowed === false) {\n                        this.pointer.cancelTouchScroll();\n                    }\n                }\n            }\n        };\n        FeaturefulElementDragging.prototype.tryStopDrag = function (ev) {\n            // .stop() is ALWAYS asynchronous, which we NEED because we want all pointerup events\n            // that come from the document to fire beforehand. much more convenient this way.\n            this.mirror.stop(this.mirrorNeedsRevert, this.stopDrag.bind(this, ev) // bound with args\n            );\n        };\n        FeaturefulElementDragging.prototype.stopDrag = function (ev) {\n            this.isDragging = false;\n            this.emitter.trigger('dragend', ev);\n        };\n        // fill in the implementations...\n        FeaturefulElementDragging.prototype.setIgnoreMove = function (bool) {\n            this.pointer.shouldIgnoreMove = bool;\n        };\n        FeaturefulElementDragging.prototype.setMirrorIsVisible = function (bool) {\n            this.mirror.setIsVisible(bool);\n        };\n        FeaturefulElementDragging.prototype.setMirrorNeedsRevert = function (bool) {\n            this.mirrorNeedsRevert = bool;\n        };\n        FeaturefulElementDragging.prototype.setAutoScrollEnabled = function (bool) {\n            this.autoScroller.isEnabled = bool;\n        };\n        return FeaturefulElementDragging;\n    }(core.ElementDragging));\n\n    /*\n    When this class is instantiated, it records the offset of an element (relative to the document topleft),\n    and continues to monitor scrolling, updating the cached coordinates if it needs to.\n    Does not access the DOM after instantiation, so highly performant.\n\n    Also keeps track of all scrolling/overflow:hidden containers that are parents of the given element\n    and an determine if a given point is inside the combined clipping rectangle.\n    */\n    var OffsetTracker = /** @class */ (function () {\n        function OffsetTracker(el) {\n            this.origRect = core.computeRect(el);\n            // will work fine for divs that have overflow:hidden\n            this.scrollCaches = core.getClippingParents(el).map(function (el) {\n                return new ElementScrollGeomCache(el, true); // listen=true\n            });\n        }\n        OffsetTracker.prototype.destroy = function () {\n            for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {\n                var scrollCache = _a[_i];\n                scrollCache.destroy();\n            }\n        };\n        OffsetTracker.prototype.computeLeft = function () {\n            var left = this.origRect.left;\n            for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {\n                var scrollCache = _a[_i];\n                left += scrollCache.origScrollLeft - scrollCache.getScrollLeft();\n            }\n            return left;\n        };\n        OffsetTracker.prototype.computeTop = function () {\n            var top = this.origRect.top;\n            for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {\n                var scrollCache = _a[_i];\n                top += scrollCache.origScrollTop - scrollCache.getScrollTop();\n            }\n            return top;\n        };\n        OffsetTracker.prototype.isWithinClipping = function (pageX, pageY) {\n            var point = { left: pageX, top: pageY };\n            for (var _i = 0, _a = this.scrollCaches; _i < _a.length; _i++) {\n                var scrollCache = _a[_i];\n                if (!isIgnoredClipping(scrollCache.getEventTarget()) &&\n                    !core.pointInsideRect(point, scrollCache.clientRect)) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        return OffsetTracker;\n    }());\n    // certain clipping containers should never constrain interactions, like <html> and <body>\n    // https://github.com/fullcalendar/fullcalendar/issues/3615\n    function isIgnoredClipping(node) {\n        var tagName = node.tagName;\n        return tagName === 'HTML' || tagName === 'BODY';\n    }\n\n    /*\n    Tracks movement over multiple droppable areas (aka \"hits\")\n    that exist in one or more DateComponents.\n    Relies on an existing draggable.\n\n    emits:\n    - pointerdown\n    - dragstart\n    - hitchange - fires initially, even if not over a hit\n    - pointerup\n    - (hitchange - again, to null, if ended over a hit)\n    - dragend\n    */\n    var HitDragging = /** @class */ (function () {\n        function HitDragging(dragging, droppableStore) {\n            var _this = this;\n            // options that can be set by caller\n            this.useSubjectCenter = false;\n            this.requireInitial = true; // if doesn't start out on a hit, won't emit any events\n            this.initialHit = null;\n            this.movingHit = null;\n            this.finalHit = null; // won't ever be populated if shouldIgnoreMove\n            this.handlePointerDown = function (ev) {\n                var dragging = _this.dragging;\n                _this.initialHit = null;\n                _this.movingHit = null;\n                _this.finalHit = null;\n                _this.prepareHits();\n                _this.processFirstCoord(ev);\n                if (_this.initialHit || !_this.requireInitial) {\n                    dragging.setIgnoreMove(false);\n                    _this.emitter.trigger('pointerdown', ev); // TODO: fire this before computing processFirstCoord, so listeners can cancel. this gets fired by almost every handler :(\n                }\n                else {\n                    dragging.setIgnoreMove(true);\n                }\n            };\n            this.handleDragStart = function (ev) {\n                _this.emitter.trigger('dragstart', ev);\n                _this.handleMove(ev, true); // force = fire even if initially null\n            };\n            this.handleDragMove = function (ev) {\n                _this.emitter.trigger('dragmove', ev);\n                _this.handleMove(ev);\n            };\n            this.handlePointerUp = function (ev) {\n                _this.releaseHits();\n                _this.emitter.trigger('pointerup', ev);\n            };\n            this.handleDragEnd = function (ev) {\n                if (_this.movingHit) {\n                    _this.emitter.trigger('hitupdate', null, true, ev);\n                }\n                _this.finalHit = _this.movingHit;\n                _this.movingHit = null;\n                _this.emitter.trigger('dragend', ev);\n            };\n            this.droppableStore = droppableStore;\n            dragging.emitter.on('pointerdown', this.handlePointerDown);\n            dragging.emitter.on('dragstart', this.handleDragStart);\n            dragging.emitter.on('dragmove', this.handleDragMove);\n            dragging.emitter.on('pointerup', this.handlePointerUp);\n            dragging.emitter.on('dragend', this.handleDragEnd);\n            this.dragging = dragging;\n            this.emitter = new core.EmitterMixin();\n        }\n        // sets initialHit\n        // sets coordAdjust\n        HitDragging.prototype.processFirstCoord = function (ev) {\n            var origPoint = { left: ev.pageX, top: ev.pageY };\n            var adjustedPoint = origPoint;\n            var subjectEl = ev.subjectEl;\n            var subjectRect;\n            if (subjectEl !== document) {\n                subjectRect = core.computeRect(subjectEl);\n                adjustedPoint = core.constrainPoint(adjustedPoint, subjectRect);\n            }\n            var initialHit = this.initialHit = this.queryHitForOffset(adjustedPoint.left, adjustedPoint.top);\n            if (initialHit) {\n                if (this.useSubjectCenter && subjectRect) {\n                    var slicedSubjectRect = core.intersectRects(subjectRect, initialHit.rect);\n                    if (slicedSubjectRect) {\n                        adjustedPoint = core.getRectCenter(slicedSubjectRect);\n                    }\n                }\n                this.coordAdjust = core.diffPoints(adjustedPoint, origPoint);\n            }\n            else {\n                this.coordAdjust = { left: 0, top: 0 };\n            }\n        };\n        HitDragging.prototype.handleMove = function (ev, forceHandle) {\n            var hit = this.queryHitForOffset(ev.pageX + this.coordAdjust.left, ev.pageY + this.coordAdjust.top);\n            if (forceHandle || !isHitsEqual(this.movingHit, hit)) {\n                this.movingHit = hit;\n                this.emitter.trigger('hitupdate', hit, false, ev);\n            }\n        };\n        HitDragging.prototype.prepareHits = function () {\n            this.offsetTrackers = core.mapHash(this.droppableStore, function (interactionSettings) {\n                interactionSettings.component.buildPositionCaches();\n                return new OffsetTracker(interactionSettings.el);\n            });\n        };\n        HitDragging.prototype.releaseHits = function () {\n            var offsetTrackers = this.offsetTrackers;\n            for (var id in offsetTrackers) {\n                offsetTrackers[id].destroy();\n            }\n            this.offsetTrackers = {};\n        };\n        HitDragging.prototype.queryHitForOffset = function (offsetLeft, offsetTop) {\n            var _a = this, droppableStore = _a.droppableStore, offsetTrackers = _a.offsetTrackers;\n            var bestHit = null;\n            for (var id in droppableStore) {\n                var component = droppableStore[id].component;\n                var offsetTracker = offsetTrackers[id];\n                if (offsetTracker.isWithinClipping(offsetLeft, offsetTop)) {\n                    var originLeft = offsetTracker.computeLeft();\n                    var originTop = offsetTracker.computeTop();\n                    var positionLeft = offsetLeft - originLeft;\n                    var positionTop = offsetTop - originTop;\n                    var origRect = offsetTracker.origRect;\n                    var width = origRect.right - origRect.left;\n                    var height = origRect.bottom - origRect.top;\n                    if (\n                    // must be within the element's bounds\n                    positionLeft >= 0 && positionLeft < width &&\n                        positionTop >= 0 && positionTop < height) {\n                        var hit = component.queryHit(positionLeft, positionTop, width, height);\n                        if (hit &&\n                            (\n                            // make sure the hit is within activeRange, meaning it's not a deal cell\n                            !component.props.dateProfile || // hack for DayTile\n                                core.rangeContainsRange(component.props.dateProfile.activeRange, hit.dateSpan.range)) &&\n                            (!bestHit || hit.layer > bestHit.layer)) {\n                            // TODO: better way to re-orient rectangle\n                            hit.rect.left += originLeft;\n                            hit.rect.right += originLeft;\n                            hit.rect.top += originTop;\n                            hit.rect.bottom += originTop;\n                            bestHit = hit;\n                        }\n                    }\n                }\n            }\n            return bestHit;\n        };\n        return HitDragging;\n    }());\n    function isHitsEqual(hit0, hit1) {\n        if (!hit0 && !hit1) {\n            return true;\n        }\n        if (Boolean(hit0) !== Boolean(hit1)) {\n            return false;\n        }\n        return core.isDateSpansEqual(hit0.dateSpan, hit1.dateSpan);\n    }\n\n    /*\n    Monitors when the user clicks on a specific date/time of a component.\n    A pointerdown+pointerup on the same \"hit\" constitutes a click.\n    */\n    var DateClicking = /** @class */ (function (_super) {\n        __extends(DateClicking, _super);\n        function DateClicking(settings) {\n            var _this = _super.call(this, settings) || this;\n            _this.handlePointerDown = function (ev) {\n                var dragging = _this.dragging;\n                // do this in pointerdown (not dragend) because DOM might be mutated by the time dragend is fired\n                dragging.setIgnoreMove(!_this.component.isValidDateDownEl(dragging.pointer.downEl));\n            };\n            // won't even fire if moving was ignored\n            _this.handleDragEnd = function (ev) {\n                var component = _this.component;\n                var _a = component.context, calendar = _a.calendar, view = _a.view;\n                var pointer = _this.dragging.pointer;\n                if (!pointer.wasTouchScroll) {\n                    var _b = _this.hitDragging, initialHit = _b.initialHit, finalHit = _b.finalHit;\n                    if (initialHit && finalHit && isHitsEqual(initialHit, finalHit)) {\n                        calendar.triggerDateClick(initialHit.dateSpan, initialHit.dayEl, view, ev.origEvent);\n                    }\n                }\n            };\n            var component = settings.component;\n            // we DO want to watch pointer moves because otherwise finalHit won't get populated\n            _this.dragging = new FeaturefulElementDragging(component.el);\n            _this.dragging.autoScroller.isEnabled = false;\n            var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, core.interactionSettingsToStore(settings));\n            hitDragging.emitter.on('pointerdown', _this.handlePointerDown);\n            hitDragging.emitter.on('dragend', _this.handleDragEnd);\n            return _this;\n        }\n        DateClicking.prototype.destroy = function () {\n            this.dragging.destroy();\n        };\n        return DateClicking;\n    }(core.Interaction));\n\n    /*\n    Tracks when the user selects a portion of time of a component,\n    constituted by a drag over date cells, with a possible delay at the beginning of the drag.\n    */\n    var DateSelecting = /** @class */ (function (_super) {\n        __extends(DateSelecting, _super);\n        function DateSelecting(settings) {\n            var _this = _super.call(this, settings) || this;\n            _this.dragSelection = null;\n            _this.handlePointerDown = function (ev) {\n                var _a = _this, component = _a.component, dragging = _a.dragging;\n                var options = component.context.options;\n                var canSelect = options.selectable &&\n                    component.isValidDateDownEl(ev.origEvent.target);\n                // don't bother to watch expensive moves if component won't do selection\n                dragging.setIgnoreMove(!canSelect);\n                // if touch, require user to hold down\n                dragging.delay = ev.isTouch ? getComponentTouchDelay(component) : null;\n            };\n            _this.handleDragStart = function (ev) {\n                _this.component.context.calendar.unselect(ev); // unselect previous selections\n            };\n            _this.handleHitUpdate = function (hit, isFinal) {\n                var calendar = _this.component.context.calendar;\n                var dragSelection = null;\n                var isInvalid = false;\n                if (hit) {\n                    dragSelection = joinHitsIntoSelection(_this.hitDragging.initialHit, hit, calendar.pluginSystem.hooks.dateSelectionTransformers);\n                    if (!dragSelection || !_this.component.isDateSelectionValid(dragSelection)) {\n                        isInvalid = true;\n                        dragSelection = null;\n                    }\n                }\n                if (dragSelection) {\n                    calendar.dispatch({ type: 'SELECT_DATES', selection: dragSelection });\n                }\n                else if (!isFinal) { // only unselect if moved away while dragging\n                    calendar.dispatch({ type: 'UNSELECT_DATES' });\n                }\n                if (!isInvalid) {\n                    core.enableCursor();\n                }\n                else {\n                    core.disableCursor();\n                }\n                if (!isFinal) {\n                    _this.dragSelection = dragSelection; // only clear if moved away from all hits while dragging\n                }\n            };\n            _this.handlePointerUp = function (pev) {\n                if (_this.dragSelection) {\n                    // selection is already rendered, so just need to report selection\n                    _this.component.context.calendar.triggerDateSelect(_this.dragSelection, pev);\n                    _this.dragSelection = null;\n                }\n            };\n            var component = settings.component;\n            var options = component.context.options;\n            var dragging = _this.dragging = new FeaturefulElementDragging(component.el);\n            dragging.touchScrollAllowed = false;\n            dragging.minDistance = options.selectMinDistance || 0;\n            dragging.autoScroller.isEnabled = options.dragScroll;\n            var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, core.interactionSettingsToStore(settings));\n            hitDragging.emitter.on('pointerdown', _this.handlePointerDown);\n            hitDragging.emitter.on('dragstart', _this.handleDragStart);\n            hitDragging.emitter.on('hitupdate', _this.handleHitUpdate);\n            hitDragging.emitter.on('pointerup', _this.handlePointerUp);\n            return _this;\n        }\n        DateSelecting.prototype.destroy = function () {\n            this.dragging.destroy();\n        };\n        return DateSelecting;\n    }(core.Interaction));\n    function getComponentTouchDelay(component) {\n        var options = component.context.options;\n        var delay = options.selectLongPressDelay;\n        if (delay == null) {\n            delay = options.longPressDelay;\n        }\n        return delay;\n    }\n    function joinHitsIntoSelection(hit0, hit1, dateSelectionTransformers) {\n        var dateSpan0 = hit0.dateSpan;\n        var dateSpan1 = hit1.dateSpan;\n        var ms = [\n            dateSpan0.range.start,\n            dateSpan0.range.end,\n            dateSpan1.range.start,\n            dateSpan1.range.end\n        ];\n        ms.sort(core.compareNumbers);\n        var props = {};\n        for (var _i = 0, dateSelectionTransformers_1 = dateSelectionTransformers; _i < dateSelectionTransformers_1.length; _i++) {\n            var transformer = dateSelectionTransformers_1[_i];\n            var res = transformer(hit0, hit1);\n            if (res === false) {\n                return null;\n            }\n            else if (res) {\n                __assign(props, res);\n            }\n        }\n        props.range = { start: ms[0], end: ms[3] };\n        props.allDay = dateSpan0.allDay;\n        return props;\n    }\n\n    var EventDragging = /** @class */ (function (_super) {\n        __extends(EventDragging, _super);\n        function EventDragging(settings) {\n            var _this = _super.call(this, settings) || this;\n            // internal state\n            _this.subjectSeg = null; // the seg being selected/dragged\n            _this.isDragging = false;\n            _this.eventRange = null;\n            _this.relevantEvents = null; // the events being dragged\n            _this.receivingCalendar = null;\n            _this.validMutation = null;\n            _this.mutatedRelevantEvents = null;\n            _this.handlePointerDown = function (ev) {\n                var origTarget = ev.origEvent.target;\n                var _a = _this, component = _a.component, dragging = _a.dragging;\n                var mirror = dragging.mirror;\n                var options = component.context.options;\n                var initialCalendar = component.context.calendar;\n                var subjectSeg = _this.subjectSeg = core.getElSeg(ev.subjectEl);\n                var eventRange = _this.eventRange = subjectSeg.eventRange;\n                var eventInstanceId = eventRange.instance.instanceId;\n                _this.relevantEvents = core.getRelevantEvents(initialCalendar.state.eventStore, eventInstanceId);\n                dragging.minDistance = ev.isTouch ? 0 : options.eventDragMinDistance;\n                dragging.delay =\n                    // only do a touch delay if touch and this event hasn't been selected yet\n                    (ev.isTouch && eventInstanceId !== component.props.eventSelection) ?\n                        getComponentTouchDelay$1(component) :\n                        null;\n                mirror.parentNode = initialCalendar.el;\n                mirror.revertDuration = options.dragRevertDuration;\n                var isValid = component.isValidSegDownEl(origTarget) &&\n                    !core.elementClosest(origTarget, '.fc-resizer'); // NOT on a resizer\n                dragging.setIgnoreMove(!isValid);\n                // disable dragging for elements that are resizable (ie, selectable)\n                // but are not draggable\n                _this.isDragging = isValid &&\n                    ev.subjectEl.classList.contains('fc-draggable');\n            };\n            _this.handleDragStart = function (ev) {\n                var context = _this.component.context;\n                var initialCalendar = context.calendar;\n                var eventRange = _this.eventRange;\n                var eventInstanceId = eventRange.instance.instanceId;\n                if (ev.isTouch) {\n                    // need to select a different event?\n                    if (eventInstanceId !== _this.component.props.eventSelection) {\n                        initialCalendar.dispatch({ type: 'SELECT_EVENT', eventInstanceId: eventInstanceId });\n                    }\n                }\n                else {\n                    // if now using mouse, but was previous touch interaction, clear selected event\n                    initialCalendar.dispatch({ type: 'UNSELECT_EVENT' });\n                }\n                if (_this.isDragging) {\n                    initialCalendar.unselect(ev); // unselect *date* selection\n                    initialCalendar.publiclyTrigger('eventDragStart', [\n                        {\n                            el: _this.subjectSeg.el,\n                            event: new core.EventApi(initialCalendar, eventRange.def, eventRange.instance),\n                            jsEvent: ev.origEvent,\n                            view: context.view\n                        }\n                    ]);\n                }\n            };\n            _this.handleHitUpdate = function (hit, isFinal) {\n                if (!_this.isDragging) {\n                    return;\n                }\n                var relevantEvents = _this.relevantEvents;\n                var initialHit = _this.hitDragging.initialHit;\n                var initialCalendar = _this.component.context.calendar;\n                // states based on new hit\n                var receivingCalendar = null;\n                var mutation = null;\n                var mutatedRelevantEvents = null;\n                var isInvalid = false;\n                var interaction = {\n                    affectedEvents: relevantEvents,\n                    mutatedEvents: core.createEmptyEventStore(),\n                    isEvent: true,\n                    origSeg: _this.subjectSeg\n                };\n                if (hit) {\n                    var receivingComponent = hit.component;\n                    receivingCalendar = receivingComponent.context.calendar;\n                    var receivingOptions = receivingComponent.context.options;\n                    if (initialCalendar === receivingCalendar ||\n                        receivingOptions.editable && receivingOptions.droppable) {\n                        mutation = computeEventMutation(initialHit, hit, receivingCalendar.pluginSystem.hooks.eventDragMutationMassagers);\n                        if (mutation) {\n                            mutatedRelevantEvents = core.applyMutationToEventStore(relevantEvents, receivingCalendar.eventUiBases, mutation, receivingCalendar);\n                            interaction.mutatedEvents = mutatedRelevantEvents;\n                            if (!receivingComponent.isInteractionValid(interaction)) {\n                                isInvalid = true;\n                                mutation = null;\n                                mutatedRelevantEvents = null;\n                                interaction.mutatedEvents = core.createEmptyEventStore();\n                            }\n                        }\n                    }\n                    else {\n                        receivingCalendar = null;\n                    }\n                }\n                _this.displayDrag(receivingCalendar, interaction);\n                if (!isInvalid) {\n                    core.enableCursor();\n                }\n                else {\n                    core.disableCursor();\n                }\n                if (!isFinal) {\n                    if (initialCalendar === receivingCalendar && // TODO: write test for this\n                        isHitsEqual(initialHit, hit)) {\n                        mutation = null;\n                    }\n                    _this.dragging.setMirrorNeedsRevert(!mutation);\n                    // render the mirror if no already-rendered mirror\n                    // TODO: wish we could somehow wait for dispatch to guarantee render\n                    _this.dragging.setMirrorIsVisible(!hit || !document.querySelector('.fc-mirror'));\n                    // assign states based on new hit\n                    _this.receivingCalendar = receivingCalendar;\n                    _this.validMutation = mutation;\n                    _this.mutatedRelevantEvents = mutatedRelevantEvents;\n                }\n            };\n            _this.handlePointerUp = function () {\n                if (!_this.isDragging) {\n                    _this.cleanup(); // because handleDragEnd won't fire\n                }\n            };\n            _this.handleDragEnd = function (ev) {\n                if (_this.isDragging) {\n                    var context = _this.component.context;\n                    var initialCalendar_1 = context.calendar;\n                    var initialView = context.view;\n                    var _a = _this, receivingCalendar = _a.receivingCalendar, validMutation = _a.validMutation;\n                    var eventDef = _this.eventRange.def;\n                    var eventInstance = _this.eventRange.instance;\n                    var eventApi = new core.EventApi(initialCalendar_1, eventDef, eventInstance);\n                    var relevantEvents_1 = _this.relevantEvents;\n                    var mutatedRelevantEvents = _this.mutatedRelevantEvents;\n                    var finalHit = _this.hitDragging.finalHit;\n                    _this.clearDrag(); // must happen after revert animation\n                    initialCalendar_1.publiclyTrigger('eventDragStop', [\n                        {\n                            el: _this.subjectSeg.el,\n                            event: eventApi,\n                            jsEvent: ev.origEvent,\n                            view: initialView\n                        }\n                    ]);\n                    if (validMutation) {\n                        // dropped within same calendar\n                        if (receivingCalendar === initialCalendar_1) {\n                            initialCalendar_1.dispatch({\n                                type: 'MERGE_EVENTS',\n                                eventStore: mutatedRelevantEvents\n                            });\n                            var transformed = {};\n                            for (var _i = 0, _b = initialCalendar_1.pluginSystem.hooks.eventDropTransformers; _i < _b.length; _i++) {\n                                var transformer = _b[_i];\n                                __assign(transformed, transformer(validMutation, initialCalendar_1));\n                            }\n                            var eventDropArg = __assign({}, transformed, { el: ev.subjectEl, delta: validMutation.datesDelta, oldEvent: eventApi, event: new core.EventApi(// the data AFTER the mutation\n                                initialCalendar_1, mutatedRelevantEvents.defs[eventDef.defId], eventInstance ? mutatedRelevantEvents.instances[eventInstance.instanceId] : null), revert: function () {\n                                    initialCalendar_1.dispatch({\n                                        type: 'MERGE_EVENTS',\n                                        eventStore: relevantEvents_1\n                                    });\n                                }, jsEvent: ev.origEvent, view: initialView });\n                            initialCalendar_1.publiclyTrigger('eventDrop', [eventDropArg]);\n                            // dropped in different calendar\n                        }\n                        else if (receivingCalendar) {\n                            initialCalendar_1.publiclyTrigger('eventLeave', [\n                                {\n                                    draggedEl: ev.subjectEl,\n                                    event: eventApi,\n                                    view: initialView\n                                }\n                            ]);\n                            initialCalendar_1.dispatch({\n                                type: 'REMOVE_EVENT_INSTANCES',\n                                instances: _this.mutatedRelevantEvents.instances\n                            });\n                            receivingCalendar.dispatch({\n                                type: 'MERGE_EVENTS',\n                                eventStore: _this.mutatedRelevantEvents\n                            });\n                            if (ev.isTouch) {\n                                receivingCalendar.dispatch({\n                                    type: 'SELECT_EVENT',\n                                    eventInstanceId: eventInstance.instanceId\n                                });\n                            }\n                            var dropArg = __assign({}, receivingCalendar.buildDatePointApi(finalHit.dateSpan), { draggedEl: ev.subjectEl, jsEvent: ev.origEvent, view: finalHit.component // should this be finalHit.component.view? See #4644\n                             });\n                            receivingCalendar.publiclyTrigger('drop', [dropArg]);\n                            receivingCalendar.publiclyTrigger('eventReceive', [\n                                {\n                                    draggedEl: ev.subjectEl,\n                                    event: new core.EventApi(// the data AFTER the mutation\n                                    receivingCalendar, mutatedRelevantEvents.defs[eventDef.defId], mutatedRelevantEvents.instances[eventInstance.instanceId]),\n                                    view: finalHit.component // should this be finalHit.component.view? See #4644\n                                }\n                            ]);\n                        }\n                    }\n                    else {\n                        initialCalendar_1.publiclyTrigger('_noEventDrop');\n                    }\n                }\n                _this.cleanup();\n            };\n            var component = _this.component;\n            var options = component.context.options;\n            var dragging = _this.dragging = new FeaturefulElementDragging(component.el);\n            dragging.pointer.selector = EventDragging.SELECTOR;\n            dragging.touchScrollAllowed = false;\n            dragging.autoScroller.isEnabled = options.dragScroll;\n            var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, core.interactionSettingsStore);\n            hitDragging.useSubjectCenter = settings.useEventCenter;\n            hitDragging.emitter.on('pointerdown', _this.handlePointerDown);\n            hitDragging.emitter.on('dragstart', _this.handleDragStart);\n            hitDragging.emitter.on('hitupdate', _this.handleHitUpdate);\n            hitDragging.emitter.on('pointerup', _this.handlePointerUp);\n            hitDragging.emitter.on('dragend', _this.handleDragEnd);\n            return _this;\n        }\n        EventDragging.prototype.destroy = function () {\n            this.dragging.destroy();\n        };\n        // render a drag state on the next receivingCalendar\n        EventDragging.prototype.displayDrag = function (nextCalendar, state) {\n            var initialCalendar = this.component.context.calendar;\n            var prevCalendar = this.receivingCalendar;\n            // does the previous calendar need to be cleared?\n            if (prevCalendar && prevCalendar !== nextCalendar) {\n                // does the initial calendar need to be cleared?\n                // if so, don't clear all the way. we still need to to hide the affectedEvents\n                if (prevCalendar === initialCalendar) {\n                    prevCalendar.dispatch({\n                        type: 'SET_EVENT_DRAG',\n                        state: {\n                            affectedEvents: state.affectedEvents,\n                            mutatedEvents: core.createEmptyEventStore(),\n                            isEvent: true,\n                            origSeg: state.origSeg\n                        }\n                    });\n                    // completely clear the old calendar if it wasn't the initial\n                }\n                else {\n                    prevCalendar.dispatch({ type: 'UNSET_EVENT_DRAG' });\n                }\n            }\n            if (nextCalendar) {\n                nextCalendar.dispatch({ type: 'SET_EVENT_DRAG', state: state });\n            }\n        };\n        EventDragging.prototype.clearDrag = function () {\n            var initialCalendar = this.component.context.calendar;\n            var receivingCalendar = this.receivingCalendar;\n            if (receivingCalendar) {\n                receivingCalendar.dispatch({ type: 'UNSET_EVENT_DRAG' });\n            }\n            // the initial calendar might have an dummy drag state from displayDrag\n            if (initialCalendar !== receivingCalendar) {\n                initialCalendar.dispatch({ type: 'UNSET_EVENT_DRAG' });\n            }\n        };\n        EventDragging.prototype.cleanup = function () {\n            this.subjectSeg = null;\n            this.isDragging = false;\n            this.eventRange = null;\n            this.relevantEvents = null;\n            this.receivingCalendar = null;\n            this.validMutation = null;\n            this.mutatedRelevantEvents = null;\n        };\n        EventDragging.SELECTOR = '.fc-draggable, .fc-resizable'; // TODO: test this in IE11\n        return EventDragging;\n    }(core.Interaction));\n    function computeEventMutation(hit0, hit1, massagers) {\n        var dateSpan0 = hit0.dateSpan;\n        var dateSpan1 = hit1.dateSpan;\n        var date0 = dateSpan0.range.start;\n        var date1 = dateSpan1.range.start;\n        var standardProps = {};\n        if (dateSpan0.allDay !== dateSpan1.allDay) {\n            standardProps.allDay = dateSpan1.allDay;\n            standardProps.hasEnd = hit1.component.context.options.allDayMaintainDuration;\n            if (dateSpan1.allDay) {\n                // means date1 is already start-of-day,\n                // but date0 needs to be converted\n                date0 = core.startOfDay(date0);\n            }\n        }\n        var delta = core.diffDates(date0, date1, hit0.component.context.dateEnv, hit0.component === hit1.component ?\n            hit0.component.largeUnit :\n            null);\n        if (delta.milliseconds) { // has hours/minutes/seconds\n            standardProps.allDay = false;\n        }\n        var mutation = {\n            datesDelta: delta,\n            standardProps: standardProps\n        };\n        for (var _i = 0, massagers_1 = massagers; _i < massagers_1.length; _i++) {\n            var massager = massagers_1[_i];\n            massager(mutation, hit0, hit1);\n        }\n        return mutation;\n    }\n    function getComponentTouchDelay$1(component) {\n        var options = component.context.options;\n        var delay = options.eventLongPressDelay;\n        if (delay == null) {\n            delay = options.longPressDelay;\n        }\n        return delay;\n    }\n\n    var EventDragging$1 = /** @class */ (function (_super) {\n        __extends(EventDragging, _super);\n        function EventDragging(settings) {\n            var _this = _super.call(this, settings) || this;\n            // internal state\n            _this.draggingSeg = null; // TODO: rename to resizingSeg? subjectSeg?\n            _this.eventRange = null;\n            _this.relevantEvents = null;\n            _this.validMutation = null;\n            _this.mutatedRelevantEvents = null;\n            _this.handlePointerDown = function (ev) {\n                var component = _this.component;\n                var seg = _this.querySeg(ev);\n                var eventRange = _this.eventRange = seg.eventRange;\n                _this.dragging.minDistance = component.context.options.eventDragMinDistance;\n                // if touch, need to be working with a selected event\n                _this.dragging.setIgnoreMove(!_this.component.isValidSegDownEl(ev.origEvent.target) ||\n                    (ev.isTouch && _this.component.props.eventSelection !== eventRange.instance.instanceId));\n            };\n            _this.handleDragStart = function (ev) {\n                var _a = _this.component.context, calendar = _a.calendar, view = _a.view;\n                var eventRange = _this.eventRange;\n                _this.relevantEvents = core.getRelevantEvents(calendar.state.eventStore, _this.eventRange.instance.instanceId);\n                _this.draggingSeg = _this.querySeg(ev);\n                calendar.unselect();\n                calendar.publiclyTrigger('eventResizeStart', [\n                    {\n                        el: _this.draggingSeg.el,\n                        event: new core.EventApi(calendar, eventRange.def, eventRange.instance),\n                        jsEvent: ev.origEvent,\n                        view: view\n                    }\n                ]);\n            };\n            _this.handleHitUpdate = function (hit, isFinal, ev) {\n                var calendar = _this.component.context.calendar;\n                var relevantEvents = _this.relevantEvents;\n                var initialHit = _this.hitDragging.initialHit;\n                var eventInstance = _this.eventRange.instance;\n                var mutation = null;\n                var mutatedRelevantEvents = null;\n                var isInvalid = false;\n                var interaction = {\n                    affectedEvents: relevantEvents,\n                    mutatedEvents: core.createEmptyEventStore(),\n                    isEvent: true,\n                    origSeg: _this.draggingSeg\n                };\n                if (hit) {\n                    mutation = computeMutation(initialHit, hit, ev.subjectEl.classList.contains('fc-start-resizer'), eventInstance.range, calendar.pluginSystem.hooks.eventResizeJoinTransforms);\n                }\n                if (mutation) {\n                    mutatedRelevantEvents = core.applyMutationToEventStore(relevantEvents, calendar.eventUiBases, mutation, calendar);\n                    interaction.mutatedEvents = mutatedRelevantEvents;\n                    if (!_this.component.isInteractionValid(interaction)) {\n                        isInvalid = true;\n                        mutation = null;\n                        mutatedRelevantEvents = null;\n                        interaction.mutatedEvents = null;\n                    }\n                }\n                if (mutatedRelevantEvents) {\n                    calendar.dispatch({\n                        type: 'SET_EVENT_RESIZE',\n                        state: interaction\n                    });\n                }\n                else {\n                    calendar.dispatch({ type: 'UNSET_EVENT_RESIZE' });\n                }\n                if (!isInvalid) {\n                    core.enableCursor();\n                }\n                else {\n                    core.disableCursor();\n                }\n                if (!isFinal) {\n                    if (mutation && isHitsEqual(initialHit, hit)) {\n                        mutation = null;\n                    }\n                    _this.validMutation = mutation;\n                    _this.mutatedRelevantEvents = mutatedRelevantEvents;\n                }\n            };\n            _this.handleDragEnd = function (ev) {\n                var _a = _this.component.context, calendar = _a.calendar, view = _a.view;\n                var eventDef = _this.eventRange.def;\n                var eventInstance = _this.eventRange.instance;\n                var eventApi = new core.EventApi(calendar, eventDef, eventInstance);\n                var relevantEvents = _this.relevantEvents;\n                var mutatedRelevantEvents = _this.mutatedRelevantEvents;\n                calendar.publiclyTrigger('eventResizeStop', [\n                    {\n                        el: _this.draggingSeg.el,\n                        event: eventApi,\n                        jsEvent: ev.origEvent,\n                        view: view\n                    }\n                ]);\n                if (_this.validMutation) {\n                    calendar.dispatch({\n                        type: 'MERGE_EVENTS',\n                        eventStore: mutatedRelevantEvents\n                    });\n                    calendar.publiclyTrigger('eventResize', [\n                        {\n                            el: _this.draggingSeg.el,\n                            startDelta: _this.validMutation.startDelta || core.createDuration(0),\n                            endDelta: _this.validMutation.endDelta || core.createDuration(0),\n                            prevEvent: eventApi,\n                            event: new core.EventApi(// the data AFTER the mutation\n                            calendar, mutatedRelevantEvents.defs[eventDef.defId], eventInstance ? mutatedRelevantEvents.instances[eventInstance.instanceId] : null),\n                            revert: function () {\n                                calendar.dispatch({\n                                    type: 'MERGE_EVENTS',\n                                    eventStore: relevantEvents\n                                });\n                            },\n                            jsEvent: ev.origEvent,\n                            view: view\n                        }\n                    ]);\n                }\n                else {\n                    calendar.publiclyTrigger('_noEventResize');\n                }\n                // reset all internal state\n                _this.draggingSeg = null;\n                _this.relevantEvents = null;\n                _this.validMutation = null;\n                // okay to keep eventInstance around. useful to set it in handlePointerDown\n            };\n            var component = settings.component;\n            var dragging = _this.dragging = new FeaturefulElementDragging(component.el);\n            dragging.pointer.selector = '.fc-resizer';\n            dragging.touchScrollAllowed = false;\n            dragging.autoScroller.isEnabled = component.context.options.dragScroll;\n            var hitDragging = _this.hitDragging = new HitDragging(_this.dragging, core.interactionSettingsToStore(settings));\n            hitDragging.emitter.on('pointerdown', _this.handlePointerDown);\n            hitDragging.emitter.on('dragstart', _this.handleDragStart);\n            hitDragging.emitter.on('hitupdate', _this.handleHitUpdate);\n            hitDragging.emitter.on('dragend', _this.handleDragEnd);\n            return _this;\n        }\n        EventDragging.prototype.destroy = function () {\n            this.dragging.destroy();\n        };\n        EventDragging.prototype.querySeg = function (ev) {\n            return core.getElSeg(core.elementClosest(ev.subjectEl, this.component.fgSegSelector));\n        };\n        return EventDragging;\n    }(core.Interaction));\n    function computeMutation(hit0, hit1, isFromStart, instanceRange, transforms) {\n        var dateEnv = hit0.component.context.dateEnv;\n        var date0 = hit0.dateSpan.range.start;\n        var date1 = hit1.dateSpan.range.start;\n        var delta = core.diffDates(date0, date1, dateEnv, hit0.component.largeUnit);\n        var props = {};\n        for (var _i = 0, transforms_1 = transforms; _i < transforms_1.length; _i++) {\n            var transform = transforms_1[_i];\n            var res = transform(hit0, hit1);\n            if (res === false) {\n                return null;\n            }\n            else if (res) {\n                __assign(props, res);\n            }\n        }\n        if (isFromStart) {\n            if (dateEnv.add(instanceRange.start, delta) < instanceRange.end) {\n                props.startDelta = delta;\n                return props;\n            }\n        }\n        else {\n            if (dateEnv.add(instanceRange.end, delta) > instanceRange.start) {\n                props.endDelta = delta;\n                return props;\n            }\n        }\n        return null;\n    }\n\n    var UnselectAuto = /** @class */ (function () {\n        function UnselectAuto(calendar) {\n            var _this = this;\n            this.isRecentPointerDateSelect = false; // wish we could use a selector to detect date selection, but uses hit system\n            this.onSelect = function (selectInfo) {\n                if (selectInfo.jsEvent) {\n                    _this.isRecentPointerDateSelect = true;\n                }\n            };\n            this.onDocumentPointerUp = function (pev) {\n                var _a = _this, calendar = _a.calendar, documentPointer = _a.documentPointer;\n                var state = calendar.state;\n                // touch-scrolling should never unfocus any type of selection\n                if (!documentPointer.wasTouchScroll) {\n                    if (state.dateSelection && // an existing date selection?\n                        !_this.isRecentPointerDateSelect // a new pointer-initiated date selection since last onDocumentPointerUp?\n                    ) {\n                        var unselectAuto = calendar.viewOpt('unselectAuto');\n                        var unselectCancel = calendar.viewOpt('unselectCancel');\n                        if (unselectAuto && (!unselectAuto || !core.elementClosest(documentPointer.downEl, unselectCancel))) {\n                            calendar.unselect(pev);\n                        }\n                    }\n                    if (state.eventSelection && // an existing event selected?\n                        !core.elementClosest(documentPointer.downEl, EventDragging.SELECTOR) // interaction DIDN'T start on an event\n                    ) {\n                        calendar.dispatch({ type: 'UNSELECT_EVENT' });\n                    }\n                }\n                _this.isRecentPointerDateSelect = false;\n            };\n            this.calendar = calendar;\n            var documentPointer = this.documentPointer = new PointerDragging(document);\n            documentPointer.shouldIgnoreMove = true;\n            documentPointer.shouldWatchScroll = false;\n            documentPointer.emitter.on('pointerup', this.onDocumentPointerUp);\n            /*\n            TODO: better way to know about whether there was a selection with the pointer\n            */\n            calendar.on('select', this.onSelect);\n        }\n        UnselectAuto.prototype.destroy = function () {\n            this.calendar.off('select', this.onSelect);\n            this.documentPointer.destroy();\n        };\n        return UnselectAuto;\n    }());\n\n    /*\n    Given an already instantiated draggable object for one-or-more elements,\n    Interprets any dragging as an attempt to drag an events that lives outside\n    of a calendar onto a calendar.\n    */\n    var ExternalElementDragging = /** @class */ (function () {\n        function ExternalElementDragging(dragging, suppliedDragMeta) {\n            var _this = this;\n            this.receivingCalendar = null;\n            this.droppableEvent = null; // will exist for all drags, even if create:false\n            this.suppliedDragMeta = null;\n            this.dragMeta = null;\n            this.handleDragStart = function (ev) {\n                _this.dragMeta = _this.buildDragMeta(ev.subjectEl);\n            };\n            this.handleHitUpdate = function (hit, isFinal, ev) {\n                var dragging = _this.hitDragging.dragging;\n                var receivingCalendar = null;\n                var droppableEvent = null;\n                var isInvalid = false;\n                var interaction = {\n                    affectedEvents: core.createEmptyEventStore(),\n                    mutatedEvents: core.createEmptyEventStore(),\n                    isEvent: _this.dragMeta.create,\n                    origSeg: null\n                };\n                if (hit) {\n                    receivingCalendar = hit.component.context.calendar;\n                    if (_this.canDropElOnCalendar(ev.subjectEl, receivingCalendar)) {\n                        droppableEvent = computeEventForDateSpan(hit.dateSpan, _this.dragMeta, receivingCalendar);\n                        interaction.mutatedEvents = core.eventTupleToStore(droppableEvent);\n                        isInvalid = !core.isInteractionValid(interaction, receivingCalendar);\n                        if (isInvalid) {\n                            interaction.mutatedEvents = core.createEmptyEventStore();\n                            droppableEvent = null;\n                        }\n                    }\n                }\n                _this.displayDrag(receivingCalendar, interaction);\n                // show mirror if no already-rendered mirror element OR if we are shutting down the mirror (?)\n                // TODO: wish we could somehow wait for dispatch to guarantee render\n                dragging.setMirrorIsVisible(isFinal || !droppableEvent || !document.querySelector('.fc-mirror'));\n                if (!isInvalid) {\n                    core.enableCursor();\n                }\n                else {\n                    core.disableCursor();\n                }\n                if (!isFinal) {\n                    dragging.setMirrorNeedsRevert(!droppableEvent);\n                    _this.receivingCalendar = receivingCalendar;\n                    _this.droppableEvent = droppableEvent;\n                }\n            };\n            this.handleDragEnd = function (pev) {\n                var _a = _this, receivingCalendar = _a.receivingCalendar, droppableEvent = _a.droppableEvent;\n                _this.clearDrag();\n                if (receivingCalendar && droppableEvent) {\n                    var finalHit = _this.hitDragging.finalHit;\n                    var finalView = finalHit.component.context.view;\n                    var dragMeta = _this.dragMeta;\n                    var arg = __assign({}, receivingCalendar.buildDatePointApi(finalHit.dateSpan), { draggedEl: pev.subjectEl, jsEvent: pev.origEvent, view: finalView });\n                    receivingCalendar.publiclyTrigger('drop', [arg]);\n                    if (dragMeta.create) {\n                        receivingCalendar.dispatch({\n                            type: 'MERGE_EVENTS',\n                            eventStore: core.eventTupleToStore(droppableEvent)\n                        });\n                        if (pev.isTouch) {\n                            receivingCalendar.dispatch({\n                                type: 'SELECT_EVENT',\n                                eventInstanceId: droppableEvent.instance.instanceId\n                            });\n                        }\n                        // signal that an external event landed\n                        receivingCalendar.publiclyTrigger('eventReceive', [\n                            {\n                                draggedEl: pev.subjectEl,\n                                event: new core.EventApi(receivingCalendar, droppableEvent.def, droppableEvent.instance),\n                                view: finalView\n                            }\n                        ]);\n                    }\n                }\n                _this.receivingCalendar = null;\n                _this.droppableEvent = null;\n            };\n            var hitDragging = this.hitDragging = new HitDragging(dragging, core.interactionSettingsStore);\n            hitDragging.requireInitial = false; // will start outside of a component\n            hitDragging.emitter.on('dragstart', this.handleDragStart);\n            hitDragging.emitter.on('hitupdate', this.handleHitUpdate);\n            hitDragging.emitter.on('dragend', this.handleDragEnd);\n            this.suppliedDragMeta = suppliedDragMeta;\n        }\n        ExternalElementDragging.prototype.buildDragMeta = function (subjectEl) {\n            if (typeof this.suppliedDragMeta === 'object') {\n                return core.parseDragMeta(this.suppliedDragMeta);\n            }\n            else if (typeof this.suppliedDragMeta === 'function') {\n                return core.parseDragMeta(this.suppliedDragMeta(subjectEl));\n            }\n            else {\n                return getDragMetaFromEl(subjectEl);\n            }\n        };\n        ExternalElementDragging.prototype.displayDrag = function (nextCalendar, state) {\n            var prevCalendar = this.receivingCalendar;\n            if (prevCalendar && prevCalendar !== nextCalendar) {\n                prevCalendar.dispatch({ type: 'UNSET_EVENT_DRAG' });\n            }\n            if (nextCalendar) {\n                nextCalendar.dispatch({ type: 'SET_EVENT_DRAG', state: state });\n            }\n        };\n        ExternalElementDragging.prototype.clearDrag = function () {\n            if (this.receivingCalendar) {\n                this.receivingCalendar.dispatch({ type: 'UNSET_EVENT_DRAG' });\n            }\n        };\n        ExternalElementDragging.prototype.canDropElOnCalendar = function (el, receivingCalendar) {\n            var dropAccept = receivingCalendar.opt('dropAccept');\n            if (typeof dropAccept === 'function') {\n                return dropAccept(el);\n            }\n            else if (typeof dropAccept === 'string' && dropAccept) {\n                return Boolean(core.elementMatches(el, dropAccept));\n            }\n            return true;\n        };\n        return ExternalElementDragging;\n    }());\n    // Utils for computing event store from the DragMeta\n    // ----------------------------------------------------------------------------------------------------\n    function computeEventForDateSpan(dateSpan, dragMeta, calendar) {\n        var defProps = __assign({}, dragMeta.leftoverProps);\n        for (var _i = 0, _a = calendar.pluginSystem.hooks.externalDefTransforms; _i < _a.length; _i++) {\n            var transform = _a[_i];\n            __assign(defProps, transform(dateSpan, dragMeta));\n        }\n        var def = core.parseEventDef(defProps, dragMeta.sourceId, dateSpan.allDay, calendar.opt('forceEventDuration') || Boolean(dragMeta.duration), // hasEnd\n        calendar);\n        var start = dateSpan.range.start;\n        // only rely on time info if drop zone is all-day,\n        // otherwise, we already know the time\n        if (dateSpan.allDay && dragMeta.startTime) {\n            start = calendar.dateEnv.add(start, dragMeta.startTime);\n        }\n        var end = dragMeta.duration ?\n            calendar.dateEnv.add(start, dragMeta.duration) :\n            calendar.getDefaultEventEnd(dateSpan.allDay, start);\n        var instance = core.createEventInstance(def.defId, { start: start, end: end });\n        return { def: def, instance: instance };\n    }\n    // Utils for extracting data from element\n    // ----------------------------------------------------------------------------------------------------\n    function getDragMetaFromEl(el) {\n        var str = getEmbeddedElData(el, 'event');\n        var obj = str ?\n            JSON.parse(str) :\n            { create: false }; // if no embedded data, assume no event creation\n        return core.parseDragMeta(obj);\n    }\n    core.config.dataAttrPrefix = '';\n    function getEmbeddedElData(el, name) {\n        var prefix = core.config.dataAttrPrefix;\n        var prefixedName = (prefix ? prefix + '-' : '') + name;\n        return el.getAttribute('data-' + prefixedName) || '';\n    }\n\n    /*\n    Makes an element (that is *external* to any calendar) draggable.\n    Can pass in data that determines how an event will be created when dropped onto a calendar.\n    Leverages FullCalendar's internal drag-n-drop functionality WITHOUT a third-party drag system.\n    */\n    var ExternalDraggable = /** @class */ (function () {\n        function ExternalDraggable(el, settings) {\n            var _this = this;\n            if (settings === void 0) { settings = {}; }\n            this.handlePointerDown = function (ev) {\n                var dragging = _this.dragging;\n                var _a = _this.settings, minDistance = _a.minDistance, longPressDelay = _a.longPressDelay;\n                dragging.minDistance =\n                    minDistance != null ?\n                        minDistance :\n                        (ev.isTouch ? 0 : core.globalDefaults.eventDragMinDistance);\n                dragging.delay =\n                    ev.isTouch ? // TODO: eventually read eventLongPressDelay instead vvv\n                        (longPressDelay != null ? longPressDelay : core.globalDefaults.longPressDelay) :\n                        0;\n            };\n            this.handleDragStart = function (ev) {\n                if (ev.isTouch &&\n                    _this.dragging.delay &&\n                    ev.subjectEl.classList.contains('fc-event')) {\n                    _this.dragging.mirror.getMirrorEl().classList.add('fc-selected');\n                }\n            };\n            this.settings = settings;\n            var dragging = this.dragging = new FeaturefulElementDragging(el);\n            dragging.touchScrollAllowed = false;\n            if (settings.itemSelector != null) {\n                dragging.pointer.selector = settings.itemSelector;\n            }\n            if (settings.appendTo != null) {\n                dragging.mirror.parentNode = settings.appendTo; // TODO: write tests\n            }\n            dragging.emitter.on('pointerdown', this.handlePointerDown);\n            dragging.emitter.on('dragstart', this.handleDragStart);\n            new ExternalElementDragging(dragging, settings.eventData);\n        }\n        ExternalDraggable.prototype.destroy = function () {\n            this.dragging.destroy();\n        };\n        return ExternalDraggable;\n    }());\n\n    /*\n    Detects when a *THIRD-PARTY* drag-n-drop system interacts with elements.\n    The third-party system is responsible for drawing the visuals effects of the drag.\n    This class simply monitors for pointer movements and fires events.\n    It also has the ability to hide the moving element (the \"mirror\") during the drag.\n    */\n    var InferredElementDragging = /** @class */ (function (_super) {\n        __extends(InferredElementDragging, _super);\n        function InferredElementDragging(containerEl) {\n            var _this = _super.call(this, containerEl) || this;\n            _this.shouldIgnoreMove = false;\n            _this.mirrorSelector = '';\n            _this.currentMirrorEl = null;\n            _this.handlePointerDown = function (ev) {\n                _this.emitter.trigger('pointerdown', ev);\n                if (!_this.shouldIgnoreMove) {\n                    // fire dragstart right away. does not support delay or min-distance\n                    _this.emitter.trigger('dragstart', ev);\n                }\n            };\n            _this.handlePointerMove = function (ev) {\n                if (!_this.shouldIgnoreMove) {\n                    _this.emitter.trigger('dragmove', ev);\n                }\n            };\n            _this.handlePointerUp = function (ev) {\n                _this.emitter.trigger('pointerup', ev);\n                if (!_this.shouldIgnoreMove) {\n                    // fire dragend right away. does not support a revert animation\n                    _this.emitter.trigger('dragend', ev);\n                }\n            };\n            var pointer = _this.pointer = new PointerDragging(containerEl);\n            pointer.emitter.on('pointerdown', _this.handlePointerDown);\n            pointer.emitter.on('pointermove', _this.handlePointerMove);\n            pointer.emitter.on('pointerup', _this.handlePointerUp);\n            return _this;\n        }\n        InferredElementDragging.prototype.destroy = function () {\n            this.pointer.destroy();\n        };\n        InferredElementDragging.prototype.setIgnoreMove = function (bool) {\n            this.shouldIgnoreMove = bool;\n        };\n        InferredElementDragging.prototype.setMirrorIsVisible = function (bool) {\n            if (bool) {\n                // restore a previously hidden element.\n                // use the reference in case the selector class has already been removed.\n                if (this.currentMirrorEl) {\n                    this.currentMirrorEl.style.visibility = '';\n                    this.currentMirrorEl = null;\n                }\n            }\n            else {\n                var mirrorEl = this.mirrorSelector ?\n                    document.querySelector(this.mirrorSelector) :\n                    null;\n                if (mirrorEl) {\n                    this.currentMirrorEl = mirrorEl;\n                    mirrorEl.style.visibility = 'hidden';\n                }\n            }\n        };\n        return InferredElementDragging;\n    }(core.ElementDragging));\n\n    /*\n    Bridges third-party drag-n-drop systems with FullCalendar.\n    Must be instantiated and destroyed by caller.\n    */\n    var ThirdPartyDraggable = /** @class */ (function () {\n        function ThirdPartyDraggable(containerOrSettings, settings) {\n            var containerEl = document;\n            if (\n            // wish we could just test instanceof EventTarget, but doesn't work in IE11\n            containerOrSettings === document ||\n                containerOrSettings instanceof Element) {\n                containerEl = containerOrSettings;\n                settings = settings || {};\n            }\n            else {\n                settings = (containerOrSettings || {});\n            }\n            var dragging = this.dragging = new InferredElementDragging(containerEl);\n            if (typeof settings.itemSelector === 'string') {\n                dragging.pointer.selector = settings.itemSelector;\n            }\n            else if (containerEl === document) {\n                dragging.pointer.selector = '[data-event]';\n            }\n            if (typeof settings.mirrorSelector === 'string') {\n                dragging.mirrorSelector = settings.mirrorSelector;\n            }\n            new ExternalElementDragging(dragging, settings.eventData);\n        }\n        ThirdPartyDraggable.prototype.destroy = function () {\n            this.dragging.destroy();\n        };\n        return ThirdPartyDraggable;\n    }());\n\n    var main = core.createPlugin({\n        componentInteractions: [DateClicking, DateSelecting, EventDragging, EventDragging$1],\n        calendarInteractions: [UnselectAuto],\n        elementDraggingImpl: FeaturefulElementDragging\n    });\n\n    exports.Draggable = ExternalDraggable;\n    exports.FeaturefulElementDragging = FeaturefulElementDragging;\n    exports.PointerDragging = PointerDragging;\n    exports.ThirdPartyDraggable = ThirdPartyDraggable;\n    exports.default = main;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@fullcalendar/interaction/main.js\n");

/***/ }),

/***/ "./node_modules/@fullcalendar/list/main.js":
/*!*************************************************!*\
  !*** ./node_modules/@fullcalendar/list/main.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("/*!\nFullCalendar List View Plugin v4.4.2\nDocs & License: https://fullcalendar.io/\n(c) 2019 Adam Shaw\n*/\n\n(function (global, factory) {\n     true ? factory(exports, __webpack_require__(/*! @fullcalendar/core */ \"./node_modules/@fullcalendar/core/main.esm.js\")) :\n    0;\n}(this, function (exports, core) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation.\r\n\r\n    Permission to use, copy, modify, and/or distribute this software for any\r\n    purpose with or without fee is hereby granted.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n    PERFORMANCE OF THIS SOFTWARE.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\n\n    var ListEventRenderer = /** @class */ (function (_super) {\n        __extends(ListEventRenderer, _super);\n        function ListEventRenderer(listView) {\n            var _this = _super.call(this) || this;\n            _this.listView = listView;\n            return _this;\n        }\n        ListEventRenderer.prototype.attachSegs = function (segs) {\n            if (!segs.length) {\n                this.listView.renderEmptyMessage();\n            }\n            else {\n                this.listView.renderSegList(segs);\n            }\n        };\n        ListEventRenderer.prototype.detachSegs = function () {\n        };\n        // generates the HTML for a single event row\n        ListEventRenderer.prototype.renderSegHtml = function (seg) {\n            var _a = this.context, theme = _a.theme, options = _a.options;\n            var eventRange = seg.eventRange;\n            var eventDef = eventRange.def;\n            var eventInstance = eventRange.instance;\n            var eventUi = eventRange.ui;\n            var url = eventDef.url;\n            var classes = ['fc-list-item'].concat(eventUi.classNames);\n            var bgColor = eventUi.backgroundColor;\n            var timeHtml;\n            if (eventDef.allDay) {\n                timeHtml = core.getAllDayHtml(options);\n            }\n            else if (core.isMultiDayRange(eventRange.range)) {\n                if (seg.isStart) {\n                    timeHtml = core.htmlEscape(this._getTimeText(eventInstance.range.start, seg.end, false // allDay\n                    ));\n                }\n                else if (seg.isEnd) {\n                    timeHtml = core.htmlEscape(this._getTimeText(seg.start, eventInstance.range.end, false // allDay\n                    ));\n                }\n                else { // inner segment that lasts the whole day\n                    timeHtml = core.getAllDayHtml(options);\n                }\n            }\n            else {\n                // Display the normal time text for the *event's* times\n                timeHtml = core.htmlEscape(this.getTimeText(eventRange));\n            }\n            if (url) {\n                classes.push('fc-has-url');\n            }\n            return '<tr class=\"' + classes.join(' ') + '\">' +\n                (this.displayEventTime ?\n                    '<td class=\"fc-list-item-time ' + theme.getClass('widgetContent') + '\">' +\n                        (timeHtml || '') +\n                        '</td>' :\n                    '') +\n                '<td class=\"fc-list-item-marker ' + theme.getClass('widgetContent') + '\">' +\n                '<span class=\"fc-event-dot\"' +\n                (bgColor ?\n                    ' style=\"background-color:' + bgColor + '\"' :\n                    '') +\n                '></span>' +\n                '</td>' +\n                '<td class=\"fc-list-item-title ' + theme.getClass('widgetContent') + '\">' +\n                '<a' + (url ? ' href=\"' + core.htmlEscape(url) + '\"' : '') + '>' +\n                core.htmlEscape(eventDef.title || '') +\n                '</a>' +\n                '</td>' +\n                '</tr>';\n        };\n        // like \"4:00am\"\n        ListEventRenderer.prototype.computeEventTimeFormat = function () {\n            return {\n                hour: 'numeric',\n                minute: '2-digit',\n                meridiem: 'short'\n            };\n        };\n        return ListEventRenderer;\n    }(core.FgEventRenderer));\n\n    /*\n    Responsible for the scroller, and forwarding event-related actions into the \"grid\".\n    */\n    var ListView = /** @class */ (function (_super) {\n        __extends(ListView, _super);\n        function ListView(viewSpec, parentEl) {\n            var _this = _super.call(this, viewSpec, parentEl) || this;\n            _this.computeDateVars = core.memoize(computeDateVars);\n            _this.eventStoreToSegs = core.memoize(_this._eventStoreToSegs);\n            _this.renderSkeleton = core.memoizeRendering(_this._renderSkeleton, _this._unrenderSkeleton);\n            var eventRenderer = _this.eventRenderer = new ListEventRenderer(_this);\n            _this.renderContent = core.memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [_this.renderSkeleton]);\n            return _this;\n        }\n        ListView.prototype.firstContext = function (context) {\n            context.calendar.registerInteractiveComponent(this, {\n                el: this.el\n                // TODO: make aware that it doesn't do Hits\n            });\n        };\n        ListView.prototype.render = function (props, context) {\n            _super.prototype.render.call(this, props, context);\n            var _a = this.computeDateVars(props.dateProfile), dayDates = _a.dayDates, dayRanges = _a.dayRanges;\n            this.dayDates = dayDates;\n            this.renderSkeleton(context);\n            this.renderContent(context, this.eventStoreToSegs(props.eventStore, props.eventUiBases, dayRanges));\n        };\n        ListView.prototype.destroy = function () {\n            _super.prototype.destroy.call(this);\n            this.renderSkeleton.unrender();\n            this.renderContent.unrender();\n            this.context.calendar.unregisterInteractiveComponent(this);\n        };\n        ListView.prototype._renderSkeleton = function (context) {\n            var theme = context.theme;\n            this.el.classList.add('fc-list-view');\n            var listViewClassNames = (theme.getClass('listView') || '').split(' '); // wish we didn't have to do this\n            for (var _i = 0, listViewClassNames_1 = listViewClassNames; _i < listViewClassNames_1.length; _i++) {\n                var listViewClassName = listViewClassNames_1[_i];\n                if (listViewClassName) { // in case input was empty string\n                    this.el.classList.add(listViewClassName);\n                }\n            }\n            this.scroller = new core.ScrollComponent('hidden', // overflow x\n            'auto' // overflow y\n            );\n            this.el.appendChild(this.scroller.el);\n            this.contentEl = this.scroller.el; // shortcut\n        };\n        ListView.prototype._unrenderSkeleton = function () {\n            // TODO: remove classNames\n            this.scroller.destroy(); // will remove the Grid too\n        };\n        ListView.prototype.updateSize = function (isResize, viewHeight, isAuto) {\n            _super.prototype.updateSize.call(this, isResize, viewHeight, isAuto);\n            this.eventRenderer.computeSizes(isResize);\n            this.eventRenderer.assignSizes(isResize);\n            this.scroller.clear(); // sets height to 'auto' and clears overflow\n            if (!isAuto) {\n                this.scroller.setHeight(this.computeScrollerHeight(viewHeight));\n            }\n        };\n        ListView.prototype.computeScrollerHeight = function (viewHeight) {\n            return viewHeight -\n                core.subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller\n        };\n        ListView.prototype._eventStoreToSegs = function (eventStore, eventUiBases, dayRanges) {\n            return this.eventRangesToSegs(core.sliceEventStore(eventStore, eventUiBases, this.props.dateProfile.activeRange, this.context.nextDayThreshold).fg, dayRanges);\n        };\n        ListView.prototype.eventRangesToSegs = function (eventRanges, dayRanges) {\n            var segs = [];\n            for (var _i = 0, eventRanges_1 = eventRanges; _i < eventRanges_1.length; _i++) {\n                var eventRange = eventRanges_1[_i];\n                segs.push.apply(segs, this.eventRangeToSegs(eventRange, dayRanges));\n            }\n            return segs;\n        };\n        ListView.prototype.eventRangeToSegs = function (eventRange, dayRanges) {\n            var _a = this.context, dateEnv = _a.dateEnv, nextDayThreshold = _a.nextDayThreshold;\n            var range = eventRange.range;\n            var allDay = eventRange.def.allDay;\n            var dayIndex;\n            var segRange;\n            var seg;\n            var segs = [];\n            for (dayIndex = 0; dayIndex < dayRanges.length; dayIndex++) {\n                segRange = core.intersectRanges(range, dayRanges[dayIndex]);\n                if (segRange) {\n                    seg = {\n                        component: this,\n                        eventRange: eventRange,\n                        start: segRange.start,\n                        end: segRange.end,\n                        isStart: eventRange.isStart && segRange.start.valueOf() === range.start.valueOf(),\n                        isEnd: eventRange.isEnd && segRange.end.valueOf() === range.end.valueOf(),\n                        dayIndex: dayIndex\n                    };\n                    segs.push(seg);\n                    // detect when range won't go fully into the next day,\n                    // and mutate the latest seg to the be the end.\n                    if (!seg.isEnd && !allDay &&\n                        dayIndex + 1 < dayRanges.length &&\n                        range.end <\n                            dateEnv.add(dayRanges[dayIndex + 1].start, nextDayThreshold)) {\n                        seg.end = range.end;\n                        seg.isEnd = true;\n                        break;\n                    }\n                }\n            }\n            return segs;\n        };\n        ListView.prototype.renderEmptyMessage = function () {\n            this.contentEl.innerHTML =\n                '<div class=\"fc-list-empty-wrap2\">' + // TODO: try less wraps\n                    '<div class=\"fc-list-empty-wrap1\">' +\n                    '<div class=\"fc-list-empty\">' +\n                    core.htmlEscape(this.context.options.noEventsMessage) +\n                    '</div>' +\n                    '</div>' +\n                    '</div>';\n        };\n        // called by ListEventRenderer\n        ListView.prototype.renderSegList = function (allSegs) {\n            var theme = this.context.theme;\n            var segsByDay = this.groupSegsByDay(allSegs); // sparse array\n            var dayIndex;\n            var daySegs;\n            var i;\n            var tableEl = core.htmlToElement('<table class=\"fc-list-table ' + theme.getClass('tableList') + '\"><tbody></tbody></table>');\n            var tbodyEl = tableEl.querySelector('tbody');\n            for (dayIndex = 0; dayIndex < segsByDay.length; dayIndex++) {\n                daySegs = segsByDay[dayIndex];\n                if (daySegs) { // sparse array, so might be undefined\n                    // append a day header\n                    tbodyEl.appendChild(this.buildDayHeaderRow(this.dayDates[dayIndex]));\n                    daySegs = this.eventRenderer.sortEventSegs(daySegs);\n                    for (i = 0; i < daySegs.length; i++) {\n                        tbodyEl.appendChild(daySegs[i].el); // append event row\n                    }\n                }\n            }\n            this.contentEl.innerHTML = '';\n            this.contentEl.appendChild(tableEl);\n        };\n        // Returns a sparse array of arrays, segs grouped by their dayIndex\n        ListView.prototype.groupSegsByDay = function (segs) {\n            var segsByDay = []; // sparse array\n            var i;\n            var seg;\n            for (i = 0; i < segs.length; i++) {\n                seg = segs[i];\n                (segsByDay[seg.dayIndex] || (segsByDay[seg.dayIndex] = []))\n                    .push(seg);\n            }\n            return segsByDay;\n        };\n        // generates the HTML for the day headers that live amongst the event rows\n        ListView.prototype.buildDayHeaderRow = function (dayDate) {\n            var _a = this.context, theme = _a.theme, dateEnv = _a.dateEnv, options = _a.options;\n            var mainFormat = core.createFormatter(options.listDayFormat); // TODO: cache\n            var altFormat = core.createFormatter(options.listDayAltFormat); // TODO: cache\n            return core.createElement('tr', {\n                className: 'fc-list-heading',\n                'data-date': dateEnv.formatIso(dayDate, { omitTime: true })\n            }, '<td class=\"' + (theme.getClass('tableListHeading') ||\n                theme.getClass('widgetHeader')) + '\" colspan=\"3\">' +\n                (mainFormat ?\n                    core.buildGotoAnchorHtml(options, dateEnv, dayDate, { 'class': 'fc-list-heading-main' }, core.htmlEscape(dateEnv.format(dayDate, mainFormat)) // inner HTML\n                    ) :\n                    '') +\n                (altFormat ?\n                    core.buildGotoAnchorHtml(options, dateEnv, dayDate, { 'class': 'fc-list-heading-alt' }, core.htmlEscape(dateEnv.format(dayDate, altFormat)) // inner HTML\n                    ) :\n                    '') +\n                '</td>');\n        };\n        return ListView;\n    }(core.View));\n    ListView.prototype.fgSegSelector = '.fc-list-item'; // which elements accept event actions\n    function computeDateVars(dateProfile) {\n        var dayStart = core.startOfDay(dateProfile.renderRange.start);\n        var viewEnd = dateProfile.renderRange.end;\n        var dayDates = [];\n        var dayRanges = [];\n        while (dayStart < viewEnd) {\n            dayDates.push(dayStart);\n            dayRanges.push({\n                start: dayStart,\n                end: core.addDays(dayStart, 1)\n            });\n            dayStart = core.addDays(dayStart, 1);\n        }\n        return { dayDates: dayDates, dayRanges: dayRanges };\n    }\n\n    var main = core.createPlugin({\n        views: {\n            list: {\n                class: ListView,\n                buttonTextKey: 'list',\n                listDayFormat: { month: 'long', day: 'numeric', year: 'numeric' } // like \"January 1, 2016\"\n            },\n            listDay: {\n                type: 'list',\n                duration: { days: 1 },\n                listDayFormat: { weekday: 'long' } // day-of-week is all we need. full date is probably in header\n            },\n            listWeek: {\n                type: 'list',\n                duration: { weeks: 1 },\n                listDayFormat: { weekday: 'long' },\n                listDayAltFormat: { month: 'long', day: 'numeric', year: 'numeric' }\n            },\n            listMonth: {\n                type: 'list',\n                duration: { month: 1 },\n                listDayAltFormat: { weekday: 'long' } // day-of-week is nice-to-have\n            },\n            listYear: {\n                type: 'list',\n                duration: { year: 1 },\n                listDayAltFormat: { weekday: 'long' } // day-of-week is nice-to-have\n            }\n        }\n    });\n\n    exports.ListView = ListView;\n    exports.default = main;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@fullcalendar/list/main.js\n");

/***/ }),

/***/ "./node_modules/@fullcalendar/timegrid/main.js":
/*!*****************************************************!*\
  !*** ./node_modules/@fullcalendar/timegrid/main.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("/*!\nFullCalendar Time Grid Plugin v4.4.2\nDocs & License: https://fullcalendar.io/\n(c) 2019 Adam Shaw\n*/\n\n(function (global, factory) {\n     true ? factory(exports, __webpack_require__(/*! @fullcalendar/core */ \"./node_modules/@fullcalendar/core/main.esm.js\"), __webpack_require__(/*! @fullcalendar/daygrid */ \"./node_modules/@fullcalendar/daygrid/main.esm.js\")) :\n    0;\n}(this, function (exports, core, daygrid) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation.\r\n\r\n    Permission to use, copy, modify, and/or distribute this software for any\r\n    purpose with or without fee is hereby granted.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n    PERFORMANCE OF THIS SOFTWARE.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\n\n    /*\n    Only handles foreground segs.\n    Does not own rendering. Use for low-level util methods by TimeGrid.\n    */\n    var TimeGridEventRenderer = /** @class */ (function (_super) {\n        __extends(TimeGridEventRenderer, _super);\n        function TimeGridEventRenderer(timeGrid) {\n            var _this = _super.call(this) || this;\n            _this.timeGrid = timeGrid;\n            return _this;\n        }\n        TimeGridEventRenderer.prototype.renderSegs = function (context, segs, mirrorInfo) {\n            _super.prototype.renderSegs.call(this, context, segs, mirrorInfo);\n            // TODO: dont do every time. memoize\n            this.fullTimeFormat = core.createFormatter({\n                hour: 'numeric',\n                minute: '2-digit',\n                separator: this.context.options.defaultRangeSeparator\n            });\n        };\n        // Given an array of foreground segments, render a DOM element for each, computes position,\n        // and attaches to the column inner-container elements.\n        TimeGridEventRenderer.prototype.attachSegs = function (segs, mirrorInfo) {\n            var segsByCol = this.timeGrid.groupSegsByCol(segs);\n            // order the segs within each column\n            // TODO: have groupSegsByCol do this?\n            for (var col = 0; col < segsByCol.length; col++) {\n                segsByCol[col] = this.sortEventSegs(segsByCol[col]);\n            }\n            this.segsByCol = segsByCol;\n            this.timeGrid.attachSegsByCol(segsByCol, this.timeGrid.fgContainerEls);\n        };\n        TimeGridEventRenderer.prototype.detachSegs = function (segs) {\n            segs.forEach(function (seg) {\n                core.removeElement(seg.el);\n            });\n            this.segsByCol = null;\n        };\n        TimeGridEventRenderer.prototype.computeSegSizes = function (allSegs) {\n            var _a = this, timeGrid = _a.timeGrid, segsByCol = _a.segsByCol;\n            var colCnt = timeGrid.colCnt;\n            timeGrid.computeSegVerticals(allSegs); // horizontals relies on this\n            if (segsByCol) {\n                for (var col = 0; col < colCnt; col++) {\n                    this.computeSegHorizontals(segsByCol[col]); // compute horizontal coordinates, z-index's, and reorder the array\n                }\n            }\n        };\n        TimeGridEventRenderer.prototype.assignSegSizes = function (allSegs) {\n            var _a = this, timeGrid = _a.timeGrid, segsByCol = _a.segsByCol;\n            var colCnt = timeGrid.colCnt;\n            timeGrid.assignSegVerticals(allSegs); // horizontals relies on this\n            if (segsByCol) {\n                for (var col = 0; col < colCnt; col++) {\n                    this.assignSegCss(segsByCol[col]);\n                }\n            }\n        };\n        // Computes a default event time formatting string if `eventTimeFormat` is not explicitly defined\n        TimeGridEventRenderer.prototype.computeEventTimeFormat = function () {\n            return {\n                hour: 'numeric',\n                minute: '2-digit',\n                meridiem: false\n            };\n        };\n        // Computes a default `displayEventEnd` value if one is not expliclty defined\n        TimeGridEventRenderer.prototype.computeDisplayEventEnd = function () {\n            return true;\n        };\n        // Renders the HTML for a single event segment's default rendering\n        TimeGridEventRenderer.prototype.renderSegHtml = function (seg, mirrorInfo) {\n            var eventRange = seg.eventRange;\n            var eventDef = eventRange.def;\n            var eventUi = eventRange.ui;\n            var allDay = eventDef.allDay;\n            var isDraggable = core.computeEventDraggable(this.context, eventDef, eventUi);\n            var isResizableFromStart = seg.isStart && core.computeEventStartResizable(this.context, eventDef, eventUi);\n            var isResizableFromEnd = seg.isEnd && core.computeEventEndResizable(this.context, eventDef, eventUi);\n            var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd, mirrorInfo);\n            var skinCss = core.cssToStr(this.getSkinCss(eventUi));\n            var timeText;\n            var fullTimeText; // more verbose time text. for the print stylesheet\n            var startTimeText; // just the start time text\n            classes.unshift('fc-time-grid-event');\n            // if the event appears to span more than one day...\n            if (core.isMultiDayRange(eventRange.range)) {\n                // Don't display time text on segments that run entirely through a day.\n                // That would appear as midnight-midnight and would look dumb.\n                // Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)\n                if (seg.isStart || seg.isEnd) {\n                    var unzonedStart = seg.start;\n                    var unzonedEnd = seg.end;\n                    timeText = this._getTimeText(unzonedStart, unzonedEnd, allDay); // TODO: give the timezones\n                    fullTimeText = this._getTimeText(unzonedStart, unzonedEnd, allDay, this.fullTimeFormat);\n                    startTimeText = this._getTimeText(unzonedStart, unzonedEnd, allDay, null, false); // displayEnd=false\n                }\n            }\n            else {\n                // Display the normal time text for the *event's* times\n                timeText = this.getTimeText(eventRange);\n                fullTimeText = this.getTimeText(eventRange, this.fullTimeFormat);\n                startTimeText = this.getTimeText(eventRange, null, false); // displayEnd=false\n            }\n            return '<a class=\"' + classes.join(' ') + '\"' +\n                (eventDef.url ?\n                    ' href=\"' + core.htmlEscape(eventDef.url) + '\"' :\n                    '') +\n                (skinCss ?\n                    ' style=\"' + skinCss + '\"' :\n                    '') +\n                '>' +\n                '<div class=\"fc-content\">' +\n                (timeText ?\n                    '<div class=\"fc-time\"' +\n                        ' data-start=\"' + core.htmlEscape(startTimeText) + '\"' +\n                        ' data-full=\"' + core.htmlEscape(fullTimeText) + '\"' +\n                        '>' +\n                        '<span>' + core.htmlEscape(timeText) + '</span>' +\n                        '</div>' :\n                    '') +\n                (eventDef.title ?\n                    '<div class=\"fc-title\">' +\n                        core.htmlEscape(eventDef.title) +\n                        '</div>' :\n                    '') +\n                '</div>' +\n                /* TODO: write CSS for this\n                (isResizableFromStart ?\n                  '<div class=\"fc-resizer fc-start-resizer\"></div>' :\n                  ''\n                  ) +\n                */\n                (isResizableFromEnd ?\n                    '<div class=\"fc-resizer fc-end-resizer\"></div>' :\n                    '') +\n                '</a>';\n        };\n        // Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.\n        // Assumed the segs are already ordered.\n        // NOTE: Also reorders the given array by date!\n        TimeGridEventRenderer.prototype.computeSegHorizontals = function (segs) {\n            var levels;\n            var level0;\n            var i;\n            levels = buildSlotSegLevels(segs);\n            computeForwardSlotSegs(levels);\n            if ((level0 = levels[0])) {\n                for (i = 0; i < level0.length; i++) {\n                    computeSlotSegPressures(level0[i]);\n                }\n                for (i = 0; i < level0.length; i++) {\n                    this.computeSegForwardBack(level0[i], 0, 0);\n                }\n            }\n        };\n        // Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range\n        // from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to \"left\" and\n        // seg.forwardCoord maps to \"right\" (via percentage). Vice-versa if the calendar is right-to-left.\n        //\n        // The segment might be part of a \"series\", which means consecutive segments with the same pressure\n        // who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of\n        // segments behind this one in the current series, and `seriesBackwardCoord` is the starting\n        // coordinate of the first segment in the series.\n        TimeGridEventRenderer.prototype.computeSegForwardBack = function (seg, seriesBackwardPressure, seriesBackwardCoord) {\n            var forwardSegs = seg.forwardSegs;\n            var i;\n            if (seg.forwardCoord === undefined) { // not already computed\n                if (!forwardSegs.length) {\n                    // if there are no forward segments, this segment should butt up against the edge\n                    seg.forwardCoord = 1;\n                }\n                else {\n                    // sort highest pressure first\n                    this.sortForwardSegs(forwardSegs);\n                    // this segment's forwardCoord will be calculated from the backwardCoord of the\n                    // highest-pressure forward segment.\n                    this.computeSegForwardBack(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord);\n                    seg.forwardCoord = forwardSegs[0].backwardCoord;\n                }\n                // calculate the backwardCoord from the forwardCoord. consider the series\n                seg.backwardCoord = seg.forwardCoord -\n                    (seg.forwardCoord - seriesBackwardCoord) / // available width for series\n                        (seriesBackwardPressure + 1); // # of segments in the series\n                // use this segment's coordinates to computed the coordinates of the less-pressurized\n                // forward segments\n                for (i = 0; i < forwardSegs.length; i++) {\n                    this.computeSegForwardBack(forwardSegs[i], 0, seg.forwardCoord);\n                }\n            }\n        };\n        TimeGridEventRenderer.prototype.sortForwardSegs = function (forwardSegs) {\n            var objs = forwardSegs.map(buildTimeGridSegCompareObj);\n            var specs = [\n                // put higher-pressure first\n                { field: 'forwardPressure', order: -1 },\n                // put segments that are closer to initial edge first (and favor ones with no coords yet)\n                { field: 'backwardCoord', order: 1 }\n            ].concat(this.context.eventOrderSpecs);\n            objs.sort(function (obj0, obj1) {\n                return core.compareByFieldSpecs(obj0, obj1, specs);\n            });\n            return objs.map(function (c) {\n                return c._seg;\n            });\n        };\n        // Given foreground event segments that have already had their position coordinates computed,\n        // assigns position-related CSS values to their elements.\n        TimeGridEventRenderer.prototype.assignSegCss = function (segs) {\n            for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n                var seg = segs_1[_i];\n                core.applyStyle(seg.el, this.generateSegCss(seg));\n                if (seg.level > 0) {\n                    seg.el.classList.add('fc-time-grid-event-inset');\n                }\n                // if the event is short that the title will be cut off,\n                // attach a className that condenses the title into the time area.\n                if (seg.eventRange.def.title && seg.bottom - seg.top < 30) {\n                    seg.el.classList.add('fc-short'); // TODO: \"condensed\" is a better name\n                }\n            }\n        };\n        // Generates an object with CSS properties/values that should be applied to an event segment element.\n        // Contains important positioning-related properties that should be applied to any event element, customized or not.\n        TimeGridEventRenderer.prototype.generateSegCss = function (seg) {\n            var shouldOverlap = this.context.options.slotEventOverlap;\n            var backwardCoord = seg.backwardCoord; // the left side if LTR. the right side if RTL. floating-point\n            var forwardCoord = seg.forwardCoord; // the right side if LTR. the left side if RTL. floating-point\n            var props = this.timeGrid.generateSegVerticalCss(seg); // get top/bottom first\n            var isRtl = this.context.isRtl;\n            var left; // amount of space from left edge, a fraction of the total width\n            var right; // amount of space from right edge, a fraction of the total width\n            if (shouldOverlap) {\n                // double the width, but don't go beyond the maximum forward coordinate (1.0)\n                forwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2);\n            }\n            if (isRtl) {\n                left = 1 - forwardCoord;\n                right = backwardCoord;\n            }\n            else {\n                left = backwardCoord;\n                right = 1 - forwardCoord;\n            }\n            props.zIndex = seg.level + 1; // convert from 0-base to 1-based\n            props.left = left * 100 + '%';\n            props.right = right * 100 + '%';\n            if (shouldOverlap && seg.forwardPressure) {\n                // add padding to the edge so that forward stacked events don't cover the resizer's icon\n                props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width\n            }\n            return props;\n        };\n        return TimeGridEventRenderer;\n    }(core.FgEventRenderer));\n    // Builds an array of segments \"levels\". The first level will be the leftmost tier of segments if the calendar is\n    // left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date.\n    function buildSlotSegLevels(segs) {\n        var levels = [];\n        var i;\n        var seg;\n        var j;\n        for (i = 0; i < segs.length; i++) {\n            seg = segs[i];\n            // go through all the levels and stop on the first level where there are no collisions\n            for (j = 0; j < levels.length; j++) {\n                if (!computeSlotSegCollisions(seg, levels[j]).length) {\n                    break;\n                }\n            }\n            seg.level = j;\n            (levels[j] || (levels[j] = [])).push(seg);\n        }\n        return levels;\n    }\n    // For every segment, figure out the other segments that are in subsequent\n    // levels that also occupy the same vertical space. Accumulate in seg.forwardSegs\n    function computeForwardSlotSegs(levels) {\n        var i;\n        var level;\n        var j;\n        var seg;\n        var k;\n        for (i = 0; i < levels.length; i++) {\n            level = levels[i];\n            for (j = 0; j < level.length; j++) {\n                seg = level[j];\n                seg.forwardSegs = [];\n                for (k = i + 1; k < levels.length; k++) {\n                    computeSlotSegCollisions(seg, levels[k], seg.forwardSegs);\n                }\n            }\n        }\n    }\n    // Figure out which path forward (via seg.forwardSegs) results in the longest path until\n    // the furthest edge is reached. The number of segments in this path will be seg.forwardPressure\n    function computeSlotSegPressures(seg) {\n        var forwardSegs = seg.forwardSegs;\n        var forwardPressure = 0;\n        var i;\n        var forwardSeg;\n        if (seg.forwardPressure === undefined) { // not already computed\n            for (i = 0; i < forwardSegs.length; i++) {\n                forwardSeg = forwardSegs[i];\n                // figure out the child's maximum forward path\n                computeSlotSegPressures(forwardSeg);\n                // either use the existing maximum, or use the child's forward pressure\n                // plus one (for the forwardSeg itself)\n                forwardPressure = Math.max(forwardPressure, 1 + forwardSeg.forwardPressure);\n            }\n            seg.forwardPressure = forwardPressure;\n        }\n    }\n    // Find all the segments in `otherSegs` that vertically collide with `seg`.\n    // Append into an optionally-supplied `results` array and return.\n    function computeSlotSegCollisions(seg, otherSegs, results) {\n        if (results === void 0) { results = []; }\n        for (var i = 0; i < otherSegs.length; i++) {\n            if (isSlotSegCollision(seg, otherSegs[i])) {\n                results.push(otherSegs[i]);\n            }\n        }\n        return results;\n    }\n    // Do these segments occupy the same vertical space?\n    function isSlotSegCollision(seg1, seg2) {\n        return seg1.bottom > seg2.top && seg1.top < seg2.bottom;\n    }\n    function buildTimeGridSegCompareObj(seg) {\n        var obj = core.buildSegCompareObj(seg);\n        obj.forwardPressure = seg.forwardPressure;\n        obj.backwardCoord = seg.backwardCoord;\n        return obj;\n    }\n\n    var TimeGridMirrorRenderer = /** @class */ (function (_super) {\n        __extends(TimeGridMirrorRenderer, _super);\n        function TimeGridMirrorRenderer() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        TimeGridMirrorRenderer.prototype.attachSegs = function (segs, mirrorInfo) {\n            this.segsByCol = this.timeGrid.groupSegsByCol(segs);\n            this.timeGrid.attachSegsByCol(this.segsByCol, this.timeGrid.mirrorContainerEls);\n            this.sourceSeg = mirrorInfo.sourceSeg;\n        };\n        TimeGridMirrorRenderer.prototype.generateSegCss = function (seg) {\n            var props = _super.prototype.generateSegCss.call(this, seg);\n            var sourceSeg = this.sourceSeg;\n            if (sourceSeg && sourceSeg.col === seg.col) {\n                var sourceSegProps = _super.prototype.generateSegCss.call(this, sourceSeg);\n                props.left = sourceSegProps.left;\n                props.right = sourceSegProps.right;\n                props.marginLeft = sourceSegProps.marginLeft;\n                props.marginRight = sourceSegProps.marginRight;\n            }\n            return props;\n        };\n        return TimeGridMirrorRenderer;\n    }(TimeGridEventRenderer));\n\n    var TimeGridFillRenderer = /** @class */ (function (_super) {\n        __extends(TimeGridFillRenderer, _super);\n        function TimeGridFillRenderer(timeGrid) {\n            var _this = _super.call(this) || this;\n            _this.timeGrid = timeGrid;\n            return _this;\n        }\n        TimeGridFillRenderer.prototype.attachSegs = function (type, segs) {\n            var timeGrid = this.timeGrid;\n            var containerEls;\n            // TODO: more efficient lookup\n            if (type === 'bgEvent') {\n                containerEls = timeGrid.bgContainerEls;\n            }\n            else if (type === 'businessHours') {\n                containerEls = timeGrid.businessContainerEls;\n            }\n            else if (type === 'highlight') {\n                containerEls = timeGrid.highlightContainerEls;\n            }\n            timeGrid.attachSegsByCol(timeGrid.groupSegsByCol(segs), containerEls);\n            return segs.map(function (seg) {\n                return seg.el;\n            });\n        };\n        TimeGridFillRenderer.prototype.computeSegSizes = function (segs) {\n            this.timeGrid.computeSegVerticals(segs);\n        };\n        TimeGridFillRenderer.prototype.assignSegSizes = function (segs) {\n            this.timeGrid.assignSegVerticals(segs);\n        };\n        return TimeGridFillRenderer;\n    }(core.FillRenderer));\n\n    /* A component that renders one or more columns of vertical time slots\n    ----------------------------------------------------------------------------------------------------------------------*/\n    // potential nice values for the slot-duration and interval-duration\n    // from largest to smallest\n    var AGENDA_STOCK_SUB_DURATIONS = [\n        { hours: 1 },\n        { minutes: 30 },\n        { minutes: 15 },\n        { seconds: 30 },\n        { seconds: 15 }\n    ];\n    var TimeGrid = /** @class */ (function (_super) {\n        __extends(TimeGrid, _super);\n        function TimeGrid(el, renderProps) {\n            var _this = _super.call(this, el) || this;\n            _this.isSlatSizesDirty = false;\n            _this.isColSizesDirty = false;\n            _this.processOptions = core.memoize(_this._processOptions);\n            _this.renderSkeleton = core.memoizeRendering(_this._renderSkeleton);\n            _this.renderSlats = core.memoizeRendering(_this._renderSlats, null, [_this.renderSkeleton]);\n            _this.renderColumns = core.memoizeRendering(_this._renderColumns, _this._unrenderColumns, [_this.renderSkeleton]);\n            _this.renderProps = renderProps;\n            var renderColumns = _this.renderColumns;\n            var eventRenderer = _this.eventRenderer = new TimeGridEventRenderer(_this);\n            var fillRenderer = _this.fillRenderer = new TimeGridFillRenderer(_this);\n            _this.mirrorRenderer = new TimeGridMirrorRenderer(_this);\n            _this.renderBusinessHours = core.memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'businessHours'), fillRenderer.unrender.bind(fillRenderer, 'businessHours'), [renderColumns]);\n            _this.renderDateSelection = core.memoizeRendering(_this._renderDateSelection, _this._unrenderDateSelection, [renderColumns]);\n            _this.renderFgEvents = core.memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [renderColumns]);\n            _this.renderBgEvents = core.memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'bgEvent'), fillRenderer.unrender.bind(fillRenderer, 'bgEvent'), [renderColumns]);\n            _this.renderEventSelection = core.memoizeRendering(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);\n            _this.renderEventDrag = core.memoizeRendering(_this._renderEventDrag, _this._unrenderEventDrag, [renderColumns]);\n            _this.renderEventResize = core.memoizeRendering(_this._renderEventResize, _this._unrenderEventResize, [renderColumns]);\n            return _this;\n        }\n        /* Options\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Parses various options into properties of this object\n        // MUST have context already set\n        TimeGrid.prototype._processOptions = function (options) {\n            var slotDuration = options.slotDuration, snapDuration = options.snapDuration;\n            var snapsPerSlot;\n            var input;\n            slotDuration = core.createDuration(slotDuration);\n            snapDuration = snapDuration ? core.createDuration(snapDuration) : slotDuration;\n            snapsPerSlot = core.wholeDivideDurations(slotDuration, snapDuration);\n            if (snapsPerSlot === null) {\n                snapDuration = slotDuration;\n                snapsPerSlot = 1;\n                // TODO: say warning?\n            }\n            this.slotDuration = slotDuration;\n            this.snapDuration = snapDuration;\n            this.snapsPerSlot = snapsPerSlot;\n            // might be an array value (for TimelineView).\n            // if so, getting the most granular entry (the last one probably).\n            input = options.slotLabelFormat;\n            if (Array.isArray(input)) {\n                input = input[input.length - 1];\n            }\n            this.labelFormat = core.createFormatter(input || {\n                hour: 'numeric',\n                minute: '2-digit',\n                omitZeroMinute: true,\n                meridiem: 'short'\n            });\n            input = options.slotLabelInterval;\n            this.labelInterval = input ?\n                core.createDuration(input) :\n                this.computeLabelInterval(slotDuration);\n        };\n        // Computes an automatic value for slotLabelInterval\n        TimeGrid.prototype.computeLabelInterval = function (slotDuration) {\n            var i;\n            var labelInterval;\n            var slotsPerLabel;\n            // find the smallest stock label interval that results in more than one slots-per-label\n            for (i = AGENDA_STOCK_SUB_DURATIONS.length - 1; i >= 0; i--) {\n                labelInterval = core.createDuration(AGENDA_STOCK_SUB_DURATIONS[i]);\n                slotsPerLabel = core.wholeDivideDurations(labelInterval, slotDuration);\n                if (slotsPerLabel !== null && slotsPerLabel > 1) {\n                    return labelInterval;\n                }\n            }\n            return slotDuration; // fall back\n        };\n        /* Rendering\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGrid.prototype.render = function (props, context) {\n            this.processOptions(context.options);\n            var cells = props.cells;\n            this.colCnt = cells.length;\n            this.renderSkeleton(context.theme);\n            this.renderSlats(props.dateProfile);\n            this.renderColumns(props.cells, props.dateProfile);\n            this.renderBusinessHours(context, props.businessHourSegs);\n            this.renderDateSelection(props.dateSelectionSegs);\n            this.renderFgEvents(context, props.fgEventSegs);\n            this.renderBgEvents(context, props.bgEventSegs);\n            this.renderEventSelection(props.eventSelection);\n            this.renderEventDrag(props.eventDrag);\n            this.renderEventResize(props.eventResize);\n        };\n        TimeGrid.prototype.destroy = function () {\n            _super.prototype.destroy.call(this);\n            // should unrender everything else too\n            this.renderSlats.unrender();\n            this.renderColumns.unrender();\n            this.renderSkeleton.unrender();\n        };\n        TimeGrid.prototype.updateSize = function (isResize) {\n            var _a = this, fillRenderer = _a.fillRenderer, eventRenderer = _a.eventRenderer, mirrorRenderer = _a.mirrorRenderer;\n            if (isResize || this.isSlatSizesDirty) {\n                this.buildSlatPositions();\n                this.isSlatSizesDirty = false;\n            }\n            if (isResize || this.isColSizesDirty) {\n                this.buildColPositions();\n                this.isColSizesDirty = false;\n            }\n            fillRenderer.computeSizes(isResize);\n            eventRenderer.computeSizes(isResize);\n            mirrorRenderer.computeSizes(isResize);\n            fillRenderer.assignSizes(isResize);\n            eventRenderer.assignSizes(isResize);\n            mirrorRenderer.assignSizes(isResize);\n        };\n        TimeGrid.prototype._renderSkeleton = function (theme) {\n            var el = this.el;\n            el.innerHTML =\n                '<div class=\"fc-bg\"></div>' +\n                    '<div class=\"fc-slats\"></div>' +\n                    '<hr class=\"fc-divider ' + theme.getClass('widgetHeader') + '\" style=\"display:none\" />';\n            this.rootBgContainerEl = el.querySelector('.fc-bg');\n            this.slatContainerEl = el.querySelector('.fc-slats');\n            this.bottomRuleEl = el.querySelector('.fc-divider');\n        };\n        TimeGrid.prototype._renderSlats = function (dateProfile) {\n            var theme = this.context.theme;\n            this.slatContainerEl.innerHTML =\n                '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n                    this.renderSlatRowHtml(dateProfile) +\n                    '</table>';\n            this.slatEls = core.findElements(this.slatContainerEl, 'tr');\n            this.slatPositions = new core.PositionCache(this.el, this.slatEls, false, true // vertical\n            );\n            this.isSlatSizesDirty = true;\n        };\n        // Generates the HTML for the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n        TimeGrid.prototype.renderSlatRowHtml = function (dateProfile) {\n            var _a = this.context, dateEnv = _a.dateEnv, theme = _a.theme, isRtl = _a.isRtl;\n            var html = '';\n            var dayStart = core.startOfDay(dateProfile.renderRange.start);\n            var slotTime = dateProfile.minTime;\n            var slotIterator = core.createDuration(0);\n            var slotDate; // will be on the view's first day, but we only care about its time\n            var isLabeled;\n            var axisHtml;\n            // Calculate the time for each slot\n            while (core.asRoughMs(slotTime) < core.asRoughMs(dateProfile.maxTime)) {\n                slotDate = dateEnv.add(dayStart, slotTime);\n                isLabeled = core.wholeDivideDurations(slotIterator, this.labelInterval) !== null;\n                axisHtml =\n                    '<td class=\"fc-axis fc-time ' + theme.getClass('widgetContent') + '\">' +\n                        (isLabeled ?\n                            '<span>' + // for matchCellWidths\n                                core.htmlEscape(dateEnv.format(slotDate, this.labelFormat)) +\n                                '</span>' :\n                            '') +\n                        '</td>';\n                html +=\n                    '<tr data-time=\"' + core.formatIsoTimeString(slotDate) + '\"' +\n                        (isLabeled ? '' : ' class=\"fc-minor\"') +\n                        '>' +\n                        (!isRtl ? axisHtml : '') +\n                        '<td class=\"' + theme.getClass('widgetContent') + '\"></td>' +\n                        (isRtl ? axisHtml : '') +\n                        '</tr>';\n                slotTime = core.addDurations(slotTime, this.slotDuration);\n                slotIterator = core.addDurations(slotIterator, this.slotDuration);\n            }\n            return html;\n        };\n        TimeGrid.prototype._renderColumns = function (cells, dateProfile) {\n            var _a = this.context, calendar = _a.calendar, view = _a.view, isRtl = _a.isRtl, theme = _a.theme, dateEnv = _a.dateEnv;\n            var bgRow = new daygrid.DayBgRow(this.context);\n            this.rootBgContainerEl.innerHTML =\n                '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n                    bgRow.renderHtml({\n                        cells: cells,\n                        dateProfile: dateProfile,\n                        renderIntroHtml: this.renderProps.renderBgIntroHtml\n                    }) +\n                    '</table>';\n            this.colEls = core.findElements(this.el, '.fc-day, .fc-disabled-day');\n            for (var col = 0; col < this.colCnt; col++) {\n                calendar.publiclyTrigger('dayRender', [\n                    {\n                        date: dateEnv.toDate(cells[col].date),\n                        el: this.colEls[col],\n                        view: view\n                    }\n                ]);\n            }\n            if (isRtl) {\n                this.colEls.reverse();\n            }\n            this.colPositions = new core.PositionCache(this.el, this.colEls, true, // horizontal\n            false);\n            this.renderContentSkeleton();\n            this.isColSizesDirty = true;\n        };\n        TimeGrid.prototype._unrenderColumns = function () {\n            this.unrenderContentSkeleton();\n        };\n        /* Content Skeleton\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Renders the DOM that the view's content will live in\n        TimeGrid.prototype.renderContentSkeleton = function () {\n            var isRtl = this.context.isRtl;\n            var parts = [];\n            var skeletonEl;\n            parts.push(this.renderProps.renderIntroHtml());\n            for (var i = 0; i < this.colCnt; i++) {\n                parts.push('<td>' +\n                    '<div class=\"fc-content-col\">' +\n                    '<div class=\"fc-event-container fc-mirror-container\"></div>' +\n                    '<div class=\"fc-event-container\"></div>' +\n                    '<div class=\"fc-highlight-container\"></div>' +\n                    '<div class=\"fc-bgevent-container\"></div>' +\n                    '<div class=\"fc-business-container\"></div>' +\n                    '</div>' +\n                    '</td>');\n            }\n            if (isRtl) {\n                parts.reverse();\n            }\n            skeletonEl = this.contentSkeletonEl = core.htmlToElement('<div class=\"fc-content-skeleton\">' +\n                '<table>' +\n                '<tr>' + parts.join('') + '</tr>' +\n                '</table>' +\n                '</div>');\n            this.colContainerEls = core.findElements(skeletonEl, '.fc-content-col');\n            this.mirrorContainerEls = core.findElements(skeletonEl, '.fc-mirror-container');\n            this.fgContainerEls = core.findElements(skeletonEl, '.fc-event-container:not(.fc-mirror-container)');\n            this.bgContainerEls = core.findElements(skeletonEl, '.fc-bgevent-container');\n            this.highlightContainerEls = core.findElements(skeletonEl, '.fc-highlight-container');\n            this.businessContainerEls = core.findElements(skeletonEl, '.fc-business-container');\n            if (isRtl) {\n                this.colContainerEls.reverse();\n                this.mirrorContainerEls.reverse();\n                this.fgContainerEls.reverse();\n                this.bgContainerEls.reverse();\n                this.highlightContainerEls.reverse();\n                this.businessContainerEls.reverse();\n            }\n            this.el.appendChild(skeletonEl);\n        };\n        TimeGrid.prototype.unrenderContentSkeleton = function () {\n            core.removeElement(this.contentSkeletonEl);\n        };\n        // Given a flat array of segments, return an array of sub-arrays, grouped by each segment's col\n        TimeGrid.prototype.groupSegsByCol = function (segs) {\n            var segsByCol = [];\n            var i;\n            for (i = 0; i < this.colCnt; i++) {\n                segsByCol.push([]);\n            }\n            for (i = 0; i < segs.length; i++) {\n                segsByCol[segs[i].col].push(segs[i]);\n            }\n            return segsByCol;\n        };\n        // Given segments grouped by column, insert the segments' elements into a parallel array of container\n        // elements, each living within a column.\n        TimeGrid.prototype.attachSegsByCol = function (segsByCol, containerEls) {\n            var col;\n            var segs;\n            var i;\n            for (col = 0; col < this.colCnt; col++) { // iterate each column grouping\n                segs = segsByCol[col];\n                for (i = 0; i < segs.length; i++) {\n                    containerEls[col].appendChild(segs[i].el);\n                }\n            }\n        };\n        /* Now Indicator\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGrid.prototype.getNowIndicatorUnit = function () {\n            return 'minute'; // will refresh on the minute\n        };\n        TimeGrid.prototype.renderNowIndicator = function (segs, date) {\n            // HACK: if date columns not ready for some reason (scheduler)\n            if (!this.colContainerEls) {\n                return;\n            }\n            var top = this.computeDateTop(date);\n            var nodes = [];\n            var i;\n            // render lines within the columns\n            for (i = 0; i < segs.length; i++) {\n                var lineEl = core.createElement('div', { className: 'fc-now-indicator fc-now-indicator-line' });\n                lineEl.style.top = top + 'px';\n                this.colContainerEls[segs[i].col].appendChild(lineEl);\n                nodes.push(lineEl);\n            }\n            // render an arrow over the axis\n            if (segs.length > 0) { // is the current time in view?\n                var arrowEl = core.createElement('div', { className: 'fc-now-indicator fc-now-indicator-arrow' });\n                arrowEl.style.top = top + 'px';\n                this.contentSkeletonEl.appendChild(arrowEl);\n                nodes.push(arrowEl);\n            }\n            this.nowIndicatorEls = nodes;\n        };\n        TimeGrid.prototype.unrenderNowIndicator = function () {\n            if (this.nowIndicatorEls) {\n                this.nowIndicatorEls.forEach(core.removeElement);\n                this.nowIndicatorEls = null;\n            }\n        };\n        /* Coordinates\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGrid.prototype.getTotalSlatHeight = function () {\n            return this.slatContainerEl.getBoundingClientRect().height;\n        };\n        // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n        // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n        TimeGrid.prototype.computeDateTop = function (when, startOfDayDate) {\n            if (!startOfDayDate) {\n                startOfDayDate = core.startOfDay(when);\n            }\n            return this.computeTimeTop(core.createDuration(when.valueOf() - startOfDayDate.valueOf()));\n        };\n        // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n        TimeGrid.prototype.computeTimeTop = function (duration) {\n            var len = this.slatEls.length;\n            var dateProfile = this.props.dateProfile;\n            var slatCoverage = (duration.milliseconds - core.asRoughMs(dateProfile.minTime)) / core.asRoughMs(this.slotDuration); // floating-point value of # of slots covered\n            var slatIndex;\n            var slatRemainder;\n            // compute a floating-point number for how many slats should be progressed through.\n            // from 0 to number of slats (inclusive)\n            // constrained because minTime/maxTime might be customized.\n            slatCoverage = Math.max(0, slatCoverage);\n            slatCoverage = Math.min(len, slatCoverage);\n            // an integer index of the furthest whole slat\n            // from 0 to number slats (*exclusive*, so len-1)\n            slatIndex = Math.floor(slatCoverage);\n            slatIndex = Math.min(slatIndex, len - 1);\n            // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n            // could be 1.0 if slatCoverage is covering *all* the slots\n            slatRemainder = slatCoverage - slatIndex;\n            return this.slatPositions.tops[slatIndex] +\n                this.slatPositions.getHeight(slatIndex) * slatRemainder;\n        };\n        // For each segment in an array, computes and assigns its top and bottom properties\n        TimeGrid.prototype.computeSegVerticals = function (segs) {\n            var options = this.context.options;\n            var eventMinHeight = options.timeGridEventMinHeight;\n            var i;\n            var seg;\n            var dayDate;\n            for (i = 0; i < segs.length; i++) {\n                seg = segs[i];\n                dayDate = this.props.cells[seg.col].date;\n                seg.top = this.computeDateTop(seg.start, dayDate);\n                seg.bottom = Math.max(seg.top + eventMinHeight, this.computeDateTop(seg.end, dayDate));\n            }\n        };\n        // Given segments that already have their top/bottom properties computed, applies those values to\n        // the segments' elements.\n        TimeGrid.prototype.assignSegVerticals = function (segs) {\n            var i;\n            var seg;\n            for (i = 0; i < segs.length; i++) {\n                seg = segs[i];\n                core.applyStyle(seg.el, this.generateSegVerticalCss(seg));\n            }\n        };\n        // Generates an object with CSS properties for the top/bottom coordinates of a segment element\n        TimeGrid.prototype.generateSegVerticalCss = function (seg) {\n            return {\n                top: seg.top,\n                bottom: -seg.bottom // flipped because needs to be space beyond bottom edge of event container\n            };\n        };\n        /* Sizing\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGrid.prototype.buildPositionCaches = function () {\n            this.buildColPositions();\n            this.buildSlatPositions();\n        };\n        TimeGrid.prototype.buildColPositions = function () {\n            this.colPositions.build();\n        };\n        TimeGrid.prototype.buildSlatPositions = function () {\n            this.slatPositions.build();\n        };\n        /* Hit System\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGrid.prototype.positionToHit = function (positionLeft, positionTop) {\n            var dateEnv = this.context.dateEnv;\n            var _a = this, snapsPerSlot = _a.snapsPerSlot, slatPositions = _a.slatPositions, colPositions = _a.colPositions;\n            var colIndex = colPositions.leftToIndex(positionLeft);\n            var slatIndex = slatPositions.topToIndex(positionTop);\n            if (colIndex != null && slatIndex != null) {\n                var slatTop = slatPositions.tops[slatIndex];\n                var slatHeight = slatPositions.getHeight(slatIndex);\n                var partial = (positionTop - slatTop) / slatHeight; // floating point number between 0 and 1\n                var localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat\n                var snapIndex = slatIndex * snapsPerSlot + localSnapIndex;\n                var dayDate = this.props.cells[colIndex].date;\n                var time = core.addDurations(this.props.dateProfile.minTime, core.multiplyDuration(this.snapDuration, snapIndex));\n                var start = dateEnv.add(dayDate, time);\n                var end = dateEnv.add(start, this.snapDuration);\n                return {\n                    col: colIndex,\n                    dateSpan: {\n                        range: { start: start, end: end },\n                        allDay: false\n                    },\n                    dayEl: this.colEls[colIndex],\n                    relativeRect: {\n                        left: colPositions.lefts[colIndex],\n                        right: colPositions.rights[colIndex],\n                        top: slatTop,\n                        bottom: slatTop + slatHeight\n                    }\n                };\n            }\n        };\n        /* Event Drag Visualization\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGrid.prototype._renderEventDrag = function (state) {\n            if (state) {\n                this.eventRenderer.hideByHash(state.affectedInstances);\n                if (state.isEvent) {\n                    this.mirrorRenderer.renderSegs(this.context, state.segs, { isDragging: true, sourceSeg: state.sourceSeg });\n                }\n                else {\n                    this.fillRenderer.renderSegs('highlight', this.context, state.segs);\n                }\n            }\n        };\n        TimeGrid.prototype._unrenderEventDrag = function (state) {\n            if (state) {\n                this.eventRenderer.showByHash(state.affectedInstances);\n                if (state.isEvent) {\n                    this.mirrorRenderer.unrender(this.context, state.segs, { isDragging: true, sourceSeg: state.sourceSeg });\n                }\n                else {\n                    this.fillRenderer.unrender('highlight', this.context);\n                }\n            }\n        };\n        /* Event Resize Visualization\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGrid.prototype._renderEventResize = function (state) {\n            if (state) {\n                this.eventRenderer.hideByHash(state.affectedInstances);\n                this.mirrorRenderer.renderSegs(this.context, state.segs, { isResizing: true, sourceSeg: state.sourceSeg });\n            }\n        };\n        TimeGrid.prototype._unrenderEventResize = function (state) {\n            if (state) {\n                this.eventRenderer.showByHash(state.affectedInstances);\n                this.mirrorRenderer.unrender(this.context, state.segs, { isResizing: true, sourceSeg: state.sourceSeg });\n            }\n        };\n        /* Selection\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Renders a visual indication of a selection. Overrides the default, which was to simply render a highlight.\n        TimeGrid.prototype._renderDateSelection = function (segs) {\n            if (segs) {\n                if (this.context.options.selectMirror) {\n                    this.mirrorRenderer.renderSegs(this.context, segs, { isSelecting: true });\n                }\n                else {\n                    this.fillRenderer.renderSegs('highlight', this.context, segs);\n                }\n            }\n        };\n        TimeGrid.prototype._unrenderDateSelection = function (segs) {\n            if (segs) {\n                if (this.context.options.selectMirror) {\n                    this.mirrorRenderer.unrender(this.context, segs, { isSelecting: true });\n                }\n                else {\n                    this.fillRenderer.unrender('highlight', this.context);\n                }\n            }\n        };\n        return TimeGrid;\n    }(core.DateComponent));\n\n    var AllDaySplitter = /** @class */ (function (_super) {\n        __extends(AllDaySplitter, _super);\n        function AllDaySplitter() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        AllDaySplitter.prototype.getKeyInfo = function () {\n            return {\n                allDay: {},\n                timed: {}\n            };\n        };\n        AllDaySplitter.prototype.getKeysForDateSpan = function (dateSpan) {\n            if (dateSpan.allDay) {\n                return ['allDay'];\n            }\n            else {\n                return ['timed'];\n            }\n        };\n        AllDaySplitter.prototype.getKeysForEventDef = function (eventDef) {\n            if (!eventDef.allDay) {\n                return ['timed'];\n            }\n            else if (core.hasBgRendering(eventDef)) {\n                return ['timed', 'allDay'];\n            }\n            else {\n                return ['allDay'];\n            }\n        };\n        return AllDaySplitter;\n    }(core.Splitter));\n\n    var TIMEGRID_ALL_DAY_EVENT_LIMIT = 5;\n    var WEEK_HEADER_FORMAT = core.createFormatter({ week: 'short' });\n    /* An abstract class for all timegrid-related views. Displays one more columns with time slots running vertically.\n    ----------------------------------------------------------------------------------------------------------------------*/\n    // Is a manager for the TimeGrid subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).\n    // Responsible for managing width/height.\n    var AbstractTimeGridView = /** @class */ (function (_super) {\n        __extends(AbstractTimeGridView, _super);\n        function AbstractTimeGridView() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.splitter = new AllDaySplitter();\n            _this.renderSkeleton = core.memoizeRendering(_this._renderSkeleton, _this._unrenderSkeleton);\n            /* Header Render Methods\n            ------------------------------------------------------------------------------------------------------------------*/\n            // Generates the HTML that will go before the day-of week header cells\n            _this.renderHeadIntroHtml = function () {\n                var _a = _this.context, theme = _a.theme, dateEnv = _a.dateEnv, options = _a.options;\n                var range = _this.props.dateProfile.renderRange;\n                var dayCnt = core.diffDays(range.start, range.end);\n                var weekText;\n                if (options.weekNumbers) {\n                    weekText = dateEnv.format(range.start, WEEK_HEADER_FORMAT);\n                    return '' +\n                        '<th class=\"fc-axis fc-week-number ' + theme.getClass('widgetHeader') + '\" ' + _this.axisStyleAttr() + '>' +\n                        core.buildGotoAnchorHtml(// aside from link, important for matchCellWidths\n                        options, dateEnv, { date: range.start, type: 'week', forceOff: dayCnt > 1 }, core.htmlEscape(weekText) // inner HTML\n                        ) +\n                        '</th>';\n                }\n                else {\n                    return '<th class=\"fc-axis ' + theme.getClass('widgetHeader') + '\" ' + _this.axisStyleAttr() + '></th>';\n                }\n            };\n            /* Time Grid Render Methods\n            ------------------------------------------------------------------------------------------------------------------*/\n            // Generates the HTML that goes before the bg of the TimeGrid slot area. Long vertical column.\n            _this.renderTimeGridBgIntroHtml = function () {\n                var theme = _this.context.theme;\n                return '<td class=\"fc-axis ' + theme.getClass('widgetContent') + '\" ' + _this.axisStyleAttr() + '></td>';\n            };\n            // Generates the HTML that goes before all other types of cells.\n            // Affects content-skeleton, mirror-skeleton, highlight-skeleton for both the time-grid and day-grid.\n            _this.renderTimeGridIntroHtml = function () {\n                return '<td class=\"fc-axis\" ' + _this.axisStyleAttr() + '></td>';\n            };\n            /* Day Grid Render Methods\n            ------------------------------------------------------------------------------------------------------------------*/\n            // Generates the HTML that goes before the all-day cells\n            _this.renderDayGridBgIntroHtml = function () {\n                var _a = _this.context, theme = _a.theme, options = _a.options;\n                return '' +\n                    '<td class=\"fc-axis ' + theme.getClass('widgetContent') + '\" ' + _this.axisStyleAttr() + '>' +\n                    '<span>' + // needed for matchCellWidths\n                    core.getAllDayHtml(options) +\n                    '</span>' +\n                    '</td>';\n            };\n            // Generates the HTML that goes before all other types of cells.\n            // Affects content-skeleton, mirror-skeleton, highlight-skeleton for both the time-grid and day-grid.\n            _this.renderDayGridIntroHtml = function () {\n                return '<td class=\"fc-axis\" ' + _this.axisStyleAttr() + '></td>';\n            };\n            return _this;\n        }\n        AbstractTimeGridView.prototype.render = function (props, context) {\n            _super.prototype.render.call(this, props, context);\n            this.renderSkeleton(context);\n        };\n        AbstractTimeGridView.prototype.destroy = function () {\n            _super.prototype.destroy.call(this);\n            this.renderSkeleton.unrender();\n        };\n        AbstractTimeGridView.prototype._renderSkeleton = function (context) {\n            this.el.classList.add('fc-timeGrid-view');\n            this.el.innerHTML = this.renderSkeletonHtml();\n            this.scroller = new core.ScrollComponent('hidden', // overflow x\n            'auto' // overflow y\n            );\n            var timeGridWrapEl = this.scroller.el;\n            this.el.querySelector('.fc-body > tr > td').appendChild(timeGridWrapEl);\n            timeGridWrapEl.classList.add('fc-time-grid-container');\n            var timeGridEl = core.createElement('div', { className: 'fc-time-grid' });\n            timeGridWrapEl.appendChild(timeGridEl);\n            this.timeGrid = new TimeGrid(timeGridEl, {\n                renderBgIntroHtml: this.renderTimeGridBgIntroHtml,\n                renderIntroHtml: this.renderTimeGridIntroHtml\n            });\n            if (context.options.allDaySlot) { // should we display the \"all-day\" area?\n                this.dayGrid = new daygrid.DayGrid(// the all-day subcomponent of this view\n                this.el.querySelector('.fc-day-grid'), {\n                    renderNumberIntroHtml: this.renderDayGridIntroHtml,\n                    renderBgIntroHtml: this.renderDayGridBgIntroHtml,\n                    renderIntroHtml: this.renderDayGridIntroHtml,\n                    colWeekNumbersVisible: false,\n                    cellWeekNumbersVisible: false\n                });\n                // have the day-grid extend it's coordinate area over the <hr> dividing the two grids\n                var dividerEl = this.el.querySelector('.fc-divider');\n                this.dayGrid.bottomCoordPadding = dividerEl.getBoundingClientRect().height;\n            }\n        };\n        AbstractTimeGridView.prototype._unrenderSkeleton = function () {\n            this.el.classList.remove('fc-timeGrid-view');\n            this.timeGrid.destroy();\n            if (this.dayGrid) {\n                this.dayGrid.destroy();\n            }\n            this.scroller.destroy();\n        };\n        /* Rendering\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Builds the HTML skeleton for the view.\n        // The day-grid and time-grid components will render inside containers defined by this HTML.\n        AbstractTimeGridView.prototype.renderSkeletonHtml = function () {\n            var _a = this.context, theme = _a.theme, options = _a.options;\n            return '' +\n                '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n                (options.columnHeader ?\n                    '<thead class=\"fc-head\">' +\n                        '<tr>' +\n                        '<td class=\"fc-head-container ' + theme.getClass('widgetHeader') + '\">&nbsp;</td>' +\n                        '</tr>' +\n                        '</thead>' :\n                    '') +\n                '<tbody class=\"fc-body\">' +\n                '<tr>' +\n                '<td class=\"' + theme.getClass('widgetContent') + '\">' +\n                (options.allDaySlot ?\n                    '<div class=\"fc-day-grid\"></div>' +\n                        '<hr class=\"fc-divider ' + theme.getClass('widgetHeader') + '\" />' :\n                    '') +\n                '</td>' +\n                '</tr>' +\n                '</tbody>' +\n                '</table>';\n        };\n        /* Now Indicator\n        ------------------------------------------------------------------------------------------------------------------*/\n        AbstractTimeGridView.prototype.getNowIndicatorUnit = function () {\n            return this.timeGrid.getNowIndicatorUnit();\n        };\n        // subclasses should implement\n        // renderNowIndicator(date: DateMarker) {\n        // }\n        AbstractTimeGridView.prototype.unrenderNowIndicator = function () {\n            this.timeGrid.unrenderNowIndicator();\n        };\n        /* Dimensions\n        ------------------------------------------------------------------------------------------------------------------*/\n        AbstractTimeGridView.prototype.updateSize = function (isResize, viewHeight, isAuto) {\n            _super.prototype.updateSize.call(this, isResize, viewHeight, isAuto); // will call updateBaseSize. important that executes first\n            this.timeGrid.updateSize(isResize);\n            if (this.dayGrid) {\n                this.dayGrid.updateSize(isResize);\n            }\n        };\n        // Adjusts the vertical dimensions of the view to the specified values\n        AbstractTimeGridView.prototype.updateBaseSize = function (isResize, viewHeight, isAuto) {\n            var _this = this;\n            var eventLimit;\n            var scrollerHeight;\n            var scrollbarWidths;\n            // make all axis cells line up\n            this.axisWidth = core.matchCellWidths(core.findElements(this.el, '.fc-axis'));\n            // hack to give the view some height prior to timeGrid's columns being rendered\n            // TODO: separate setting height from scroller VS timeGrid.\n            if (!this.timeGrid.colEls) {\n                if (!isAuto) {\n                    scrollerHeight = this.computeScrollerHeight(viewHeight);\n                    this.scroller.setHeight(scrollerHeight);\n                }\n                return;\n            }\n            // set of fake row elements that must compensate when scroller has scrollbars\n            var noScrollRowEls = core.findElements(this.el, '.fc-row').filter(function (node) {\n                return !_this.scroller.el.contains(node);\n            });\n            // reset all dimensions back to the original state\n            this.timeGrid.bottomRuleEl.style.display = 'none'; // will be shown later if this <hr> is necessary\n            this.scroller.clear(); // sets height to 'auto' and clears overflow\n            noScrollRowEls.forEach(core.uncompensateScroll);\n            // limit number of events in the all-day area\n            if (this.dayGrid) {\n                this.dayGrid.removeSegPopover(); // kill the \"more\" popover if displayed\n                eventLimit = this.context.options.eventLimit;\n                if (eventLimit && typeof eventLimit !== 'number') {\n                    eventLimit = TIMEGRID_ALL_DAY_EVENT_LIMIT; // make sure \"auto\" goes to a real number\n                }\n                if (eventLimit) {\n                    this.dayGrid.limitRows(eventLimit);\n                }\n            }\n            if (!isAuto) { // should we force dimensions of the scroll container?\n                scrollerHeight = this.computeScrollerHeight(viewHeight);\n                this.scroller.setHeight(scrollerHeight);\n                scrollbarWidths = this.scroller.getScrollbarWidths();\n                if (scrollbarWidths.left || scrollbarWidths.right) { // using scrollbars?\n                    // make the all-day and header rows lines up\n                    noScrollRowEls.forEach(function (rowEl) {\n                        core.compensateScroll(rowEl, scrollbarWidths);\n                    });\n                    // the scrollbar compensation might have changed text flow, which might affect height, so recalculate\n                    // and reapply the desired height to the scroller.\n                    scrollerHeight = this.computeScrollerHeight(viewHeight);\n                    this.scroller.setHeight(scrollerHeight);\n                }\n                // guarantees the same scrollbar widths\n                this.scroller.lockOverflow(scrollbarWidths);\n                // if there's any space below the slats, show the horizontal rule.\n                // this won't cause any new overflow, because lockOverflow already called.\n                if (this.timeGrid.getTotalSlatHeight() < scrollerHeight) {\n                    this.timeGrid.bottomRuleEl.style.display = '';\n                }\n            }\n        };\n        // given a desired total height of the view, returns what the height of the scroller should be\n        AbstractTimeGridView.prototype.computeScrollerHeight = function (viewHeight) {\n            return viewHeight -\n                core.subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller\n        };\n        /* Scroll\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Computes the initial pre-configured scroll state prior to allowing the user to change it\n        AbstractTimeGridView.prototype.computeDateScroll = function (duration) {\n            var top = this.timeGrid.computeTimeTop(duration);\n            // zoom can give weird floating-point values. rather scroll a little bit further\n            top = Math.ceil(top);\n            if (top) {\n                top++; // to overcome top border that slots beyond the first have. looks better\n            }\n            return { top: top };\n        };\n        AbstractTimeGridView.prototype.queryDateScroll = function () {\n            return { top: this.scroller.getScrollTop() };\n        };\n        AbstractTimeGridView.prototype.applyDateScroll = function (scroll) {\n            if (scroll.top !== undefined) {\n                this.scroller.setScrollTop(scroll.top);\n            }\n        };\n        // Generates an HTML attribute string for setting the width of the axis, if it is known\n        AbstractTimeGridView.prototype.axisStyleAttr = function () {\n            if (this.axisWidth != null) {\n                return 'style=\"width:' + this.axisWidth + 'px\"';\n            }\n            return '';\n        };\n        return AbstractTimeGridView;\n    }(core.View));\n    AbstractTimeGridView.prototype.usesMinMaxTime = true; // indicates that minTime/maxTime affects rendering\n\n    var SimpleTimeGrid = /** @class */ (function (_super) {\n        __extends(SimpleTimeGrid, _super);\n        function SimpleTimeGrid(timeGrid) {\n            var _this = _super.call(this, timeGrid.el) || this;\n            _this.buildDayRanges = core.memoize(buildDayRanges);\n            _this.slicer = new TimeGridSlicer();\n            _this.timeGrid = timeGrid;\n            return _this;\n        }\n        SimpleTimeGrid.prototype.firstContext = function (context) {\n            context.calendar.registerInteractiveComponent(this, {\n                el: this.timeGrid.el\n            });\n        };\n        SimpleTimeGrid.prototype.destroy = function () {\n            _super.prototype.destroy.call(this);\n            this.context.calendar.unregisterInteractiveComponent(this);\n        };\n        SimpleTimeGrid.prototype.render = function (props, context) {\n            var dateEnv = this.context.dateEnv;\n            var dateProfile = props.dateProfile, dayTable = props.dayTable;\n            var dayRanges = this.dayRanges = this.buildDayRanges(dayTable, dateProfile, dateEnv);\n            var timeGrid = this.timeGrid;\n            timeGrid.receiveContext(context); // hack because context is used in sliceProps\n            timeGrid.receiveProps(__assign({}, this.slicer.sliceProps(props, dateProfile, null, context.calendar, timeGrid, dayRanges), { dateProfile: dateProfile, cells: dayTable.cells[0] }), context);\n        };\n        SimpleTimeGrid.prototype.renderNowIndicator = function (date) {\n            this.timeGrid.renderNowIndicator(this.slicer.sliceNowDate(date, this.timeGrid, this.dayRanges), date);\n        };\n        SimpleTimeGrid.prototype.buildPositionCaches = function () {\n            this.timeGrid.buildPositionCaches();\n        };\n        SimpleTimeGrid.prototype.queryHit = function (positionLeft, positionTop) {\n            var rawHit = this.timeGrid.positionToHit(positionLeft, positionTop);\n            if (rawHit) {\n                return {\n                    component: this.timeGrid,\n                    dateSpan: rawHit.dateSpan,\n                    dayEl: rawHit.dayEl,\n                    rect: {\n                        left: rawHit.relativeRect.left,\n                        right: rawHit.relativeRect.right,\n                        top: rawHit.relativeRect.top,\n                        bottom: rawHit.relativeRect.bottom\n                    },\n                    layer: 0\n                };\n            }\n        };\n        return SimpleTimeGrid;\n    }(core.DateComponent));\n    function buildDayRanges(dayTable, dateProfile, dateEnv) {\n        var ranges = [];\n        for (var _i = 0, _a = dayTable.headerDates; _i < _a.length; _i++) {\n            var date = _a[_i];\n            ranges.push({\n                start: dateEnv.add(date, dateProfile.minTime),\n                end: dateEnv.add(date, dateProfile.maxTime)\n            });\n        }\n        return ranges;\n    }\n    var TimeGridSlicer = /** @class */ (function (_super) {\n        __extends(TimeGridSlicer, _super);\n        function TimeGridSlicer() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        TimeGridSlicer.prototype.sliceRange = function (range, dayRanges) {\n            var segs = [];\n            for (var col = 0; col < dayRanges.length; col++) {\n                var segRange = core.intersectRanges(range, dayRanges[col]);\n                if (segRange) {\n                    segs.push({\n                        start: segRange.start,\n                        end: segRange.end,\n                        isStart: segRange.start.valueOf() === range.start.valueOf(),\n                        isEnd: segRange.end.valueOf() === range.end.valueOf(),\n                        col: col\n                    });\n                }\n            }\n            return segs;\n        };\n        return TimeGridSlicer;\n    }(core.Slicer));\n\n    var TimeGridView = /** @class */ (function (_super) {\n        __extends(TimeGridView, _super);\n        function TimeGridView() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.buildDayTable = core.memoize(buildDayTable);\n            return _this;\n        }\n        TimeGridView.prototype.render = function (props, context) {\n            _super.prototype.render.call(this, props, context); // for flags for updateSize. also _renderSkeleton/_unrenderSkeleton\n            var _a = this.props, dateProfile = _a.dateProfile, dateProfileGenerator = _a.dateProfileGenerator;\n            var nextDayThreshold = context.nextDayThreshold;\n            var dayTable = this.buildDayTable(dateProfile, dateProfileGenerator);\n            var splitProps = this.splitter.splitProps(props);\n            if (this.header) {\n                this.header.receiveProps({\n                    dateProfile: dateProfile,\n                    dates: dayTable.headerDates,\n                    datesRepDistinctDays: true,\n                    renderIntroHtml: this.renderHeadIntroHtml\n                }, context);\n            }\n            this.simpleTimeGrid.receiveProps(__assign({}, splitProps['timed'], { dateProfile: dateProfile,\n                dayTable: dayTable }), context);\n            if (this.simpleDayGrid) {\n                this.simpleDayGrid.receiveProps(__assign({}, splitProps['allDay'], { dateProfile: dateProfile,\n                    dayTable: dayTable,\n                    nextDayThreshold: nextDayThreshold, isRigid: false }), context);\n            }\n            this.startNowIndicator(dateProfile, dateProfileGenerator);\n        };\n        TimeGridView.prototype._renderSkeleton = function (context) {\n            _super.prototype._renderSkeleton.call(this, context);\n            if (context.options.columnHeader) {\n                this.header = new core.DayHeader(this.el.querySelector('.fc-head-container'));\n            }\n            this.simpleTimeGrid = new SimpleTimeGrid(this.timeGrid);\n            if (this.dayGrid) {\n                this.simpleDayGrid = new daygrid.SimpleDayGrid(this.dayGrid);\n            }\n        };\n        TimeGridView.prototype._unrenderSkeleton = function () {\n            _super.prototype._unrenderSkeleton.call(this);\n            if (this.header) {\n                this.header.destroy();\n            }\n            this.simpleTimeGrid.destroy();\n            if (this.simpleDayGrid) {\n                this.simpleDayGrid.destroy();\n            }\n        };\n        TimeGridView.prototype.renderNowIndicator = function (date) {\n            this.simpleTimeGrid.renderNowIndicator(date);\n        };\n        return TimeGridView;\n    }(AbstractTimeGridView));\n    function buildDayTable(dateProfile, dateProfileGenerator) {\n        var daySeries = new core.DaySeries(dateProfile.renderRange, dateProfileGenerator);\n        return new core.DayTable(daySeries, false);\n    }\n\n    var main = core.createPlugin({\n        defaultView: 'timeGridWeek',\n        views: {\n            timeGrid: {\n                class: TimeGridView,\n                allDaySlot: true,\n                slotDuration: '00:30:00',\n                slotEventOverlap: true // a bad name. confused with overlap/constraint system\n            },\n            timeGridDay: {\n                type: 'timeGrid',\n                duration: { days: 1 }\n            },\n            timeGridWeek: {\n                type: 'timeGrid',\n                duration: { weeks: 1 }\n            }\n        }\n    });\n\n    exports.AbstractTimeGridView = AbstractTimeGridView;\n    exports.TimeGrid = TimeGrid;\n    exports.TimeGridSlicer = TimeGridSlicer;\n    exports.TimeGridView = TimeGridView;\n    exports.buildDayRanges = buildDayRanges;\n    exports.buildDayTable = buildDayTable;\n    exports.default = main;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@fullcalendar/timegrid/main.js\n");

/***/ }),

/***/ "./resources/plugins/custom/fullcalendar/fullcalendar.js":
/*!***************************************************************!*\
  !*** ./resources/plugins/custom/fullcalendar/fullcalendar.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// FullCalendar - Full-sized, drag & drop event calendar in JavaScript: https://fullcalendar.io/\nwindow.FullCalendar = __webpack_require__(/*! @fullcalendar/core/main.js */ \"./node_modules/@fullcalendar/core/main.js\");\nwindow.FullCalendarDayGrid = __webpack_require__(/*! @fullcalendar/daygrid/main.js */ \"./node_modules/@fullcalendar/daygrid/main.js\");\nwindow.FullCalendarGoogleCalendar = __webpack_require__(/*! @fullcalendar/google-calendar/main.js */ \"./node_modules/@fullcalendar/google-calendar/main.js\");\nwindow.FullCalendarInteraction = __webpack_require__(/*! @fullcalendar/interaction/main.js */ \"./node_modules/@fullcalendar/interaction/main.js\");\nwindow.FullCalendarList = __webpack_require__(/*! @fullcalendar/list/main.js */ \"./node_modules/@fullcalendar/list/main.js\");\nwindow.FullCalendarTimeGrid = __webpack_require__(/*! @fullcalendar/timegrid/main.js */ \"./node_modules/@fullcalendar/timegrid/main.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvcGx1Z2lucy9jdXN0b20vZnVsbGNhbGVuZGFyL2Z1bGxjYWxlbmRhci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxNQUFNLENBQUNDLFlBQVAsR0FBc0JDLG1CQUFPLENBQUMsNkVBQUQsQ0FBN0I7QUFDQUYsTUFBTSxDQUFDRyxtQkFBUCxHQUE2QkQsbUJBQU8sQ0FBQyxtRkFBRCxDQUFwQztBQUNBRixNQUFNLENBQUNJLDBCQUFQLEdBQW9DRixtQkFBTyxDQUFDLG1HQUFELENBQTNDO0FBQ0FGLE1BQU0sQ0FBQ0ssdUJBQVAsR0FBaUNILG1CQUFPLENBQUMsMkZBQUQsQ0FBeEM7QUFDQUYsTUFBTSxDQUFDTSxnQkFBUCxHQUEwQkosbUJBQU8sQ0FBQyw2RUFBRCxDQUFqQztBQUNBRixNQUFNLENBQUNPLG9CQUFQLEdBQThCTCxtQkFBTyxDQUFDLHFGQUFELENBQXJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3BsdWdpbnMvY3VzdG9tL2Z1bGxjYWxlbmRhci9mdWxsY2FsZW5kYXIuanM/NGNhYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGdWxsQ2FsZW5kYXIgLSBGdWxsLXNpemVkLCBkcmFnICYgZHJvcCBldmVudCBjYWxlbmRhciBpbiBKYXZhU2NyaXB0OiBodHRwczovL2Z1bGxjYWxlbmRhci5pby9cclxuXHJcbndpbmRvdy5GdWxsQ2FsZW5kYXIgPSByZXF1aXJlKCdAZnVsbGNhbGVuZGFyL2NvcmUvbWFpbi5qcycpO1xyXG53aW5kb3cuRnVsbENhbGVuZGFyRGF5R3JpZCA9IHJlcXVpcmUoJ0BmdWxsY2FsZW5kYXIvZGF5Z3JpZC9tYWluLmpzJyk7XHJcbndpbmRvdy5GdWxsQ2FsZW5kYXJHb29nbGVDYWxlbmRhciA9IHJlcXVpcmUoJ0BmdWxsY2FsZW5kYXIvZ29vZ2xlLWNhbGVuZGFyL21haW4uanMnKTtcclxud2luZG93LkZ1bGxDYWxlbmRhckludGVyYWN0aW9uID0gcmVxdWlyZSgnQGZ1bGxjYWxlbmRhci9pbnRlcmFjdGlvbi9tYWluLmpzJyk7XHJcbndpbmRvdy5GdWxsQ2FsZW5kYXJMaXN0ID0gcmVxdWlyZSgnQGZ1bGxjYWxlbmRhci9saXN0L21haW4uanMnKTtcclxud2luZG93LkZ1bGxDYWxlbmRhclRpbWVHcmlkID0gcmVxdWlyZSgnQGZ1bGxjYWxlbmRhci90aW1lZ3JpZC9tYWluLmpzJyk7XHJcbiJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJGdWxsQ2FsZW5kYXIiLCJyZXF1aXJlIiwiRnVsbENhbGVuZGFyRGF5R3JpZCIsIkZ1bGxDYWxlbmRhckdvb2dsZUNhbGVuZGFyIiwiRnVsbENhbGVuZGFySW50ZXJhY3Rpb24iLCJGdWxsQ2FsZW5kYXJMaXN0IiwiRnVsbENhbGVuZGFyVGltZUdyaWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/plugins/custom/fullcalendar/fullcalendar.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/plugins/custom/fullcalendar/fullcalendar.js");
/******/ 	
/******/ })()
;